{
  "wall_time": 55.75930976867676,
  "knowledge": [
    [
      "base_model",
      "2023-12-31+0000"
    ],
    [
      "hint:bug_functions",
      "2024-12-07+0000"
    ],
    [
      "hint:components",
      "2024-12-07+0000"
    ],
    [
      "hint:issue",
      "2024-12-07+0000"
    ],
    [
      "hint:line_level_bug_locations",
      "2024-12-07+0000"
    ]
  ],
  "build_count": 5,
  "build_failure_count": 1,
  "fast_check_count": 1,
  "full_check_count": 4,
  "fast_check_pass": false,
  "full_check_pass": false,
  "patch": "diff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex b694fde30927..b24607afa3c7 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -3604,7 +3604,7 @@ Instruction *InstCombinerImpl::foldICmpBinOpEqualityWithConstant(\n     break;\n   case Instruction::Or: {\n     const APInt *BOC;\n-    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n+if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n       // Comparing if all bits outside of a constant mask are set?\n       // Replace (X | C) == -1 with (X & ~C) == ~C.\n       // This removes the -1 constant.\n@@ -3630,6 +3630,9 @@ Instruction *InstCombinerImpl::foldICmpBinOpEqualityWithConstant(\n               : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n         Value *Cmp = Builder.CreateICmp(\n             Pred, Other, Constant::getNullValue(Other->getType()));\n+        if (Cmp->getType() != Cond->getType() && \n+            Cond->getType()->isIntegerTy(1) && Cmp->getType()->isIntegerTy(1))\n+          Cond = Builder.CreateIntCast(Cond, Cmp->getType(), /*isSigned*/false);\n         return BinaryOperator::Create(\n             Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n             Cond);\n",
  "log": [
    {
      "role": "system",
      "content": "You are an LLVM maintainer.\nYou are fixing a middle-end bug in the LLVM project.\nPlease answer with the code directly. Do not include any additional information.\n"
    },
    {
      "role": "user",
      "content": "This is a crash bug in InstCombine.\nIssue title: [InstCombine]  Assertion `S1->getType() == S2->getType() && \"Cannot create binary operator with two operands of differing type!\"' failed.\nIssue body: This code crashes at O2/3:\n```c\nint a, b;\nstatic int c;\nstatic int *d = &c;\nshort e;\nchar g;\nunsigned short h;\nint *i;\nint j(int k) {\n  if (k & a)\n    return 1;\n  return 0;\n}\nint l(int k) {\n  int f = j(k);\n  return f;\n}\nvoid n() { int *m[] = {0, &d}; }\nvoid o() {\n  for (; g; g++) {\n    int *p = &b;\n    short *q = &e;\n    int r = l(*d + 5);\n    *p = 0;\n    *q = *i || (unsigned short)(r + 22158 + 36566 + *d - 1641080165) + h;\n  }\n}\n```\n\nCompiler Explorer: https://godbolt.org/z/n7GPEKsxb\n\nBisected to https://github.com/llvm/llvm-project/commit/4eb98384099cbd1d901d8ef6a210af95d9c36adf, which was committed by @fhahn \n\nCrash: \n```\nclang: /root/llvm-project/llvm/lib/IR/Instructions.cpp:2642: static llvm::BinaryOperator* llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps, llvm::Value*, llvm::Value*, const llvm::Twine&, llvm::InsertPosition): Assertion `S1->getType() == S2->getType() && \"Cannot create binary operator with two operands of differing type!\"' failed.\n```\n\nBacktrace:\n```\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/clang -gdwarf-4 -g -o /app/output.s -mllvm --x86-asm-syntax=intel -fno-verbose-asm -S --gcc-toolchain=/opt/compiler-explorer/gcc-snapshot -fcolor-diagnostics -fno-crash-diagnostics -O2 -Wall -Wextra <source>\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O2>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"<source>\"\n4.\tRunning pass \"instcombine<max-iterations=1;no-verify-fixpoint>\" on function \"o\"\n #0 0x0000000003c05148 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3c05148)\n #1 0x0000000003c02e54 llvm::sys::CleanupOnSignal(unsigned long) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3c02e54)\n #2 0x0000000003b503b8 CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0\n #3 0x00007bfb65442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007bfb654969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #5 0x00007bfb65442476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #6 0x00007bfb654287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #7 0x00007bfb6542871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #8 0x00007bfb65439e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #9 0x000000000351a1f3 (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x351a1f3)\n#10 0x0000000003523d7c (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3523d7c)\n#11 0x00000000037edc06 llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x37edc06)\n#12 0x0000000003810ac9 llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3810ac9)\n#13 0x0000000003819aad llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3819aad)\n#14 0x0000000003775251 llvm::InstCombinerImpl::run() (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3775251)\n#15 0x0000000003776bc6 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) (.isra.0) InstructionCombining.cpp:0:0\n#16 0x000000000377805c llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x377805c)\n#17 0x0000000003ea39ae llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3ea39ae)\n#18 0x00000000035b5920 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x35b5920)\n#19 0x00000000010f19ce llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x10f19ce)\n#20 0x00000000035b423b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x35b423b)\n#21 0x00000000010f105e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x10f105e)\n#22 0x00000000035b3c40 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x35b3c40)\n#23 0x0000000003eb5912 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#24 0x0000000003eb918d clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3eb918d)\n#25 0x00000000045875de clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x45875de)\n#26 0x000000000654152c clang::ParseAST(clang::Sema&, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x654152c)\n#27 0x00000000045879b8 clang::CodeGenAction::ExecuteAction() (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x45879b8)\n#28 0x0000000004842b39 clang::FrontendAction::Execute() (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x4842b39)\n#29 0x00000000047c27ce clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x47c27ce)\n#30 0x000000000492db9e clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x492db9e)\n#31 0x0000000000cb21bf cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0xcb21bf)\n#32 0x0000000000ca9d5a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#33 0x00000000045cad09 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const::'lambda'()>(long) Job.cpp:0:0\n#34 0x0000000003b50864 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x3b50864)\n#35 0x00000000045cb2ff clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const (.part.0) Job.cpp:0:0\n#36 0x000000000459149d clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x459149d)\n#37 0x000000000459258d clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x459258d)\n#38 0x0000000004599945 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0x4599945)\n#39 0x0000000000caf003 clang_main(int, char**, llvm::ToolContext const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0xcaf003)\n#40 0x0000000000b82f64 main (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0xb82f64)\n#41 0x00007bfb65429d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#42 0x00007bfb65429e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#43 0x0000000000ca9805 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/clang+0xca9805)\n```\nDetailed information:\n{\n  \"file\": \"llvm/test/Transforms/InstCombine/icmp-or-of-select-with-zero.ll\",\n  \"args\": \"opt < %s -passes=instcombine -S\",\n  \"name\": \"pr119063\",\n  \"body\": \"define <4 x i1> @pr119063(<4 x i32> %x, i1 %cond) {\\nentry:\\n  %sel = select i1 %cond, <4 x i32> splat (i32 1), <4 x i32> zeroinitializer\\n  %or = or <4 x i32> %sel, %x\\n  %cmp = icmp ne <4 x i32> %or, zeroinitializer\\n  ret <4 x i1> %cmp\\n}\\n\",\n  \"result\": false,\n  \"log\": \"Command '['/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt', '-', '-passes=instcombine', '-S']' died with <Signals.SIGABRT: 6>.\\n\\nopt: /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/Instructions.cpp:2642: static llvm::BinaryOperator* llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps, llvm::Value*, llvm::Value*, const llvm::Twine&, llvm::InsertPosition): Assertion `S1->getType() == S2->getType() && \\\"Cannot create binary operator with two operands of differing type!\\\"' failed.\\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\\nStack dump:\\n0.\\tProgram arguments: /data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt - -passes=instcombine -S\\n1.\\tRunning pass \\\"function(instcombine<max-iterations=1;verify-fixpoint>)\\\" on module \\\"<stdin>\\\"\\n2.\\tRunning pass \\\"instcombine<max-iterations=1;verify-fixpoint>\\\" on function \\\"pr119063\\\"\\n #0 0x00007ffff7eb779c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:727:3\\n #1 0x00007ffff7eb5234 llvm::sys::RunSignalHandlers() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Signals.cpp:105:20\\n #2 0x00007ffff7eb558e SignalHandler(int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1\\n #3 0x00007ffff7b3d090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\\n #4 0x00007ffff7b3d00b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\\n #5 0x00007ffff7b1c859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\\n #6 0x00007ffff7b1c729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\\n #7 0x00007ffff7b1c729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\\n #8 0x00007ffff7b2dfd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\\n #9 0x00007ffff2233fb4 (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x226fb4)\\n#10 0x00007ffff34d3d1f llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3633:38\\n#11 0x00007ffff34ea12b llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3502:7\\n#12 0x00007ffff34f9218 llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:7539:50\\n#13 0x00007ffff3455111 llvm::InstCombinerImpl::run() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5201:36\\n#14 0x00007ffff34560d3 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5519:5\\n#15 0x00007ffff3456a7b llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5581:3\\n#16 0x00007ffff4c7e736 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#17 0x00007ffff22b6dcc llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#18 0x00007ffff725b376 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#19 0x00007ffff22b72f9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/PassManager.cpp:129:41\\n#20 0x00007ffff725bd36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#21 0x00007ffff22b5215 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#22 0x00007ffff7fa5e63 llvm::SmallPtrSetImplBase::~SmallPtrSetImplBase() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:84:5\\n#23 0x00007ffff7fa5e63 llvm::SmallPtrSetImpl<llvm::AnalysisKey*>::~SmallPtrSetImpl() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:363:7\\n#24 0x00007ffff7fa5e63 llvm::SmallPtrSet<llvm::AnalysisKey*, 2u>::~SmallPtrSet() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:519:7\\n#25 0x00007ffff7fa5e63 llvm::PreservedAnalyses::~PreservedAnalyses() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/Analysis.h:111:7\\n#26 0x00007ffff7fa5e63 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/NewPMDriver.cpp:541:10\\n#27 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data() const /usr/include/c++/10/bits/basic_string.h:195:28\\n#28 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_is_local() const /usr/include/c++/10/bits/basic_string.h:230:23\\n#29 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_dispose() /usr/include/c++/10/bits/basic_string.h:239:18\\n#30 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string() /usr/include/c++/10/bits/basic_string.h:671:19\\n#31 0x00007ffff7fb065f optMain /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/optdriver.cpp:710:28\\n#32 0x00007ffff7b1e083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\\n#33 0x000055555555509e _start (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt+0x109e)\\n\"\n}\nPlease modify the following code in llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:InstCombinerImpl::foldICmpBinOpEqualityWithConstant to fix the bug:\n```\n    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n      // Comparing if all bits outside of a constant mask are set?\n      // Replace (X | C) == -1 with (X & ~C) == ~C.\n      // This removes the -1 constant.\n      Constant *NotBOC = ConstantExpr::getNot(cast<Constant>(BOp1));\n      Value *And = Builder.CreateAnd(BOp0, NotBOC);\n      return new ICmpInst(Pred, And, NotBOC);\n    }\n    // (icmp eq (or (select cond, 0, NonZero), Other), 0)\n    //  -> (and cond, (icmp eq Other, 0))\n    // (icmp ne (or (select cond, NonZero, 0), Other), 0)\n    //  -> (or cond, (icmp ne Other, 0))\n    Value *Cond, *TV, *FV, *Other, *Sel;\n    if (C.isZero() &&\n        match(BO,\n              m_OneUse(m_c_Or(m_CombineAnd(m_Value(Sel),\n                                           m_Select(m_Value(Cond), m_Value(TV),\n                                                    m_Value(FV))),\n                              m_Value(Other))))) {\n      const SimplifyQuery Q = SQ.getWithInstruction(&Cmp);\n      // Easy case is if eq/ne matches whether 0 is trueval/falseval.\n      if (Pred == ICmpInst::ICMP_EQ\n              ? (match(TV, m_Zero()) && isKnownNonZero(FV, Q))\n              : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n        Value *Cmp = Builder.CreateICmp(\n            Pred, Other, Constant::getNullValue(Other->getType()));\n        return BinaryOperator::Create(\n            Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n            Cond);\n      }\n      // Harder case is if eq/ne matches whether 0 is falseval/trueval. In this\n      // case we need to invert the select condition so we need to be careful to\n      // avoid creating extra instructions.\n      // (icmp ne (or (select cond, 0, NonZero), Other), 0)\n      //  -> (or (not cond), (icmp ne Other, 0))\n      // (icmp eq (or (select cond, NonZero, 0), Other), 0)\n      //  -> (and (not cond), (icmp eq Other, 0))\n```\n"
    },
    {
      "role": "assistant",
      "content": "```cpp\n    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n      // Comparing if all bits outside of a constant mask are set?\n      // Replace (X | C) == -1 with (X & ~C) == ~C.\n      // This removes the -1 constant.\n      Constant *NotBOC = ConstantExpr::getNot(cast<Constant>(BOp1));\n      Value *And = Builder.CreateAnd(BOp0, NotBOC);\n      return new ICmpInst(Pred, And, NotBOC);\n    }\n    // (icmp eq (or (select cond, 0, NonZero), Other), 0)\n    //  -> (and cond, (icmp eq Other, 0))\n    // (icmp ne (or (select cond, NonZero, 0), Other), 0)\n    //  -> (or cond, (icmp ne Other, 0))\n    Value *Cond, *TV, *FV, *Other, *Sel;\n    if (C.isZero() &&\n        match(BO,\n              m_OneUse(m_c_Or(m_CombineAnd(m_Value(Sel),\n                                           m_Select(m_Value(Cond), m_Value(TV),\n                                                    m_Value(FV))),\n                              m_Value(Other))))) {\n      const SimplifyQuery Q = SQ.getWithInstruction(&Cmp);\n      // Easy case is if eq/ne matches whether 0 is trueval/falseval.\n      if (Pred == ICmpInst::ICMP_EQ\n              ? (match(TV, m_Zero()) && isKnownNonZero(FV, Q))\n              : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n        Value *Cmp = Builder.CreateICmp(\n            Pred, Other, Constant::getNullValue(Other->getType()));\n        if (Cmp->getType() != Cond->getType())\n          Cond = Builder.CreateIntCast(Cond, Cmp->getType(), /*isSigned*/false);\n        return BinaryOperator::Create(\n            Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n            Cond);\n      }\n      // Harder case is if eq/ne matches whether 0 is falseval/trueval. In this\n      // case we need to invert the select condition so we need to be careful to\n      // avoid creating extra instructions.\n      // (icmp ne (or (select cond, 0, NonZero), Other), 0)\n      //  -> (or (not cond), (icmp ne Other, 0))\n      // (icmp eq (or (select cond, NonZero, 0), Other), 0)\n      //  -> (and (not cond), (icmp eq Other, 0))\n```\n\nThe fix adds a type check and cast to ensure the condition and comparison result have matching types before creating the binary operator. This prevents the assertion failure when the types don't match."
    },
    {
      "role": "user",
      "content": "Feedback:\nCMake Deprecation Warning at /data/zyw/llvm-apr-benchmark/work/llvm-project/cmake/Modules/CMakePolicy.cmake:6 (cmake_policy):\n  The OLD behavior for policy CMP0116 will be removed from a future version\n  of CMake.\n\n  The cmake-policies(7) manual explains that the OLD behaviors of all\n  policies are deprecated and that a policy should be set to OLD only under\n  specific short-term circumstances.  Projects should be ported to the NEW\n  behavior and not rely on setting a policy to OLD.\nCall Stack (most recent call first):\n  CMakeLists.txt:8 (include)\n\n\n-- Could NOT find LibEdit (missing: LibEdit_INCLUDE_DIRS LibEdit_LIBRARIES) \n-- LLVM host triple: x86_64-unknown-linux-gnu\n-- Native target architecture is X86\n-- Threads enabled.\n-- Doxygen disabled.\n-- Ninja version: 1.10.0\n-- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) \n-- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) \n-- OCaml bindings disabled.\n-- LLVM default target triple: x86_64-unknown-linux-gnu\n-- Building with -fPIC\n-- Targeting X86\n-- Targeting RISCV\n-- Targeting AArch64\n-- Targeting SystemZ\n-- Targeting Hexagon\n-- Failed to find LLVM FileCheck\n-- Google Benchmark version: v0.0.0, normalized to 0.0.0\n-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile\n-- Performing Test HAVE_POSIX_REGEX -- success\n-- Performing Test HAVE_STEADY_CLOCK -- success\n-- Performing Test HAVE_PTHREAD_AFFINITY -- failed to compile\n-- Configuring done (5.7s)\n-- Generating done (3.1s)\n-- Build files have been written to: /data/zyw/llvm-apr-benchmark/work/llvm-build\n\n[1/85] Building CXX object tools/llvm-config/CMakeFiles/llvm-config.dir/llvm-config.cpp.o\n[2/85] Linking CXX executable bin/llvm-config\n[3/85] Building CXX object lib/Transforms/InstCombine/CMakeFiles/LLVMInstCombine.dir/InstCombineCompares.cpp.o\nFAILED: lib/Transforms/InstCombine/CMakeFiles/LLVMInstCombine.dir/InstCombineCompares.cpp.o \nccache /usr/bin/c++ -DGTEST_HAS_RTTI=0 -DLLVM_EXPORTS -D_DEBUG -D_GLIBCXX_ASSERTIONS -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/data/zyw/llvm-apr-benchmark/work/llvm-build/lib/Transforms/InstCombine -I/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine -I/data/zyw/llvm-apr-benchmark/work/llvm-build/include -I/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include -fPIC -fno-semantic-interposition -fvisibility-inlines-hidden -Werror=date-time -fno-lifetime-dse -w -fdiagnostics-color -ffunction-sections -fdata-sections -O2 -g -DNDEBUG -std=c++17 -fPIC  -fno-exceptions -funwind-tables -fno-rtti -UNDEBUG -MD -MT lib/Transforms/InstCombine/CMakeFiles/LLVMInstCombine.dir/InstCombineCompares.cpp.o -MF lib/Transforms/InstCombine/CMakeFiles/LLVMInstCombine.dir/InstCombineCompares.cpp.o.d -o lib/Transforms/InstCombine/CMakeFiles/LLVMInstCombine.dir/InstCombineCompares.cpp.o -c /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3646:1: error: stray \u2018`\u2019 in program\n 3646 | ```\n      | ^\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3646:2: error: stray \u2018`\u2019 in program\n 3646 | ```\n      |  ^\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3646:3: error: stray \u2018`\u2019 in program\n 3646 | ```\n      |   ^\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3648:193: error: missing terminating ' character\n 3648 | The fix adds a type check and cast to ensure the condition and comparison result have matching types before creating the binary operator. This prevents the assertion failure when the types don't match.\n      |                                                                                                                                                                                                 ^~~~~~~~~\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp: In member function \u2018llvm::Instruction* llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, const llvm::APInt&)\u2019:\n/data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3648:1: error: \u2018The\u2019 was not declared in this scope\n 3648 | The fix adds a type check and cast to ensure the condition and comparison result have matching types before creating the binary operator. This prevents the assertion failure when the types don't match.\n      | ^~~\nninja: build stopped: subcommand failed.\n\nPlease adjust code according to the feedback. Do not include any additional information.\n"
    },
    {
      "role": "assistant",
      "content": "```cpp\n    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n      // Comparing if all bits outside of a constant mask are set?\n      // Replace (X | C) == -1 with (X & ~C) == ~C.\n      // This removes the -1 constant.\n      Constant *NotBOC = ConstantExpr::getNot(cast<Constant>(BOp1));\n      Value *And = Builder.CreateAnd(BOp0, NotBOC);\n      return new ICmpInst(Pred, And, NotBOC);\n    }\n    // (icmp eq (or (select cond, 0, NonZero), Other), 0)\n    //  -> (and cond, (icmp eq Other, 0))\n    // (icmp ne (or (select cond, NonZero, 0), Other), 0)\n    //  -> (or cond, (icmp ne Other, 0))\n    Value *Cond, *TV, *FV, *Other, *Sel;\n    if (C.isZero() &&\n        match(BO,\n              m_OneUse(m_c_Or(m_CombineAnd(m_Value(Sel),\n                                           m_Select(m_Value(Cond), m_Value(TV),\n                                                    m_Value(FV))),\n                              m_Value(Other))))) {\n      const SimplifyQuery Q = SQ.getWithInstruction(&Cmp);\n      // Easy case is if eq/ne matches whether 0 is trueval/falseval.\n      if (Pred == ICmpInst::ICMP_EQ\n              ? (match(TV, m_Zero()) && isKnownNonZero(FV, Q))\n              : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n        Value *Cmp = Builder.CreateICmp(\n            Pred, Other, Constant::getNullValue(Other->getType()));\n        if (Cmp->getType() != Cond->getType())\n          Cond = Builder.CreateIntCast(Cond, Cmp->getType(), /*isSigned*/false);\n        return BinaryOperator::Create(\n            Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n            Cond);\n      }\n      // Harder case is if eq/ne matches whether 0 is falseval/trueval. In this\n      // case we need to invert the select condition so we need to be careful to\n      // avoid creating extra instructions.\n      // (icmp ne (or (select cond, 0, NonZero), Other), 0)\n      //  -> (or (not cond), (icmp ne Other, 0))\n      // (icmp eq (or (select cond, NonZero, 0), Other), 0)\n      //  -> (and (not cond), (icmp eq Other, 0))\n```"
    },
    {
      "role": "user",
      "content": "Feedback:\n{\n  \"file\": \"llvm/test/Transforms/InstCombine/icmp-or-of-select-with-zero.ll\",\n  \"args\": \"opt < %s -passes=instcombine -S\",\n  \"name\": \"pr119063\",\n  \"body\": \"define <4 x i1> @pr119063(<4 x i32> %x, i1 %cond) {\\nentry:\\n  %sel = select i1 %cond, <4 x i32> splat (i32 1), <4 x i32> zeroinitializer\\n  %or = or <4 x i32> %sel, %x\\n  %cmp = icmp ne <4 x i32> %or, zeroinitializer\\n  ret <4 x i1> %cmp\\n}\\n\",\n  \"result\": false,\n  \"log\": \"Command '['/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt', '-', '-passes=instcombine', '-S']' died with <Signals.SIGABRT: 6>.\\n\\nopt: /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/Instructions.cpp:2974: static llvm::CastInst* llvm::CastInst::Create(llvm::Instruction::CastOps, llvm::Value*, llvm::Type*, const llvm::Twine&, llvm::InsertPosition): Assertion `castIsValid(op, S, Ty) && \\\"Invalid cast!\\\"' failed.\\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\\nStack dump:\\n0.\\tProgram arguments: /data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt - -passes=instcombine -S\\n1.\\tRunning pass \\\"function(instcombine<max-iterations=1;verify-fixpoint>)\\\" on module \\\"<stdin>\\\"\\n2.\\tRunning pass \\\"instcombine<max-iterations=1;verify-fixpoint>\\\" on function \\\"pr119063\\\"\\n #0 0x00007ffff7eb779c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:727:3\\n #1 0x00007ffff7eb5234 llvm::sys::RunSignalHandlers() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Signals.cpp:105:20\\n #2 0x00007ffff7eb558e SignalHandler(int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1\\n #3 0x00007ffff7b3d090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\\n #4 0x00007ffff7b3d00b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\\n #5 0x00007ffff7b1c859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\\n #6 0x00007ffff7b1c729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\\n #7 0x00007ffff7b1c729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\\n #8 0x00007ffff7b2dfd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\\n #9 0x00007ffff2235f91 (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x228f91)\\n#10 0x00007ffff349abca llvm::IRBuilderBase::CreateCast(llvm::Instruction::CastOps, llvm::Value*, llvm::Type*, llvm::Twine const&, llvm::MDNode*) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/IRBuilder.h:2195:41\\n#11 0x00007ffff349abca llvm::IRBuilderBase::CreateIntCast(llvm::Value*, llvm::Type*, bool, llvm::Twine const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/IRBuilder.h:2233:22\\n#12 0x00007ffff34d3d30 llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3634:16\\n#13 0x00007ffff34ea16b llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3502:7\\n#14 0x00007ffff34f9258 llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:7541:50\\n#15 0x00007ffff3455111 llvm::InstCombinerImpl::run() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5201:36\\n#16 0x00007ffff34560d3 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5519:5\\n#17 0x00007ffff3456a7b llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5581:3\\n#18 0x00007ffff4c7e736 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#19 0x00007ffff22b6dcc llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#20 0x00007ffff725b376 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#21 0x00007ffff22b72f9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/PassManager.cpp:129:41\\n#22 0x00007ffff725bd36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#23 0x00007ffff22b5215 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#24 0x00007ffff7fa5e63 llvm::SmallPtrSetImplBase::~SmallPtrSetImplBase() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:84:5\\n#25 0x00007ffff7fa5e63 llvm::SmallPtrSetImpl<llvm::AnalysisKey*>::~SmallPtrSetImpl() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:363:7\\n#26 0x00007ffff7fa5e63 llvm::SmallPtrSet<llvm::AnalysisKey*, 2u>::~SmallPtrSet() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:519:7\\n#27 0x00007ffff7fa5e63 llvm::PreservedAnalyses::~PreservedAnalyses() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/Analysis.h:111:7\\n#28 0x00007ffff7fa5e63 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/NewPMDriver.cpp:541:10\\n#29 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data() const /usr/include/c++/10/bits/basic_string.h:195:28\\n#30 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_is_local() const /usr/include/c++/10/bits/basic_string.h:230:23\\n#31 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_dispose() /usr/include/c++/10/bits/basic_string.h:239:18\\n#32 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string() /usr/include/c++/10/bits/basic_string.h:671:19\\n#33 0x00007ffff7fb065f optMain /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/optdriver.cpp:710:28\\n#34 0x00007ffff7b1e083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\\n#35 0x000055555555509e _start (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt+0x109e)\\n\"\n}\nPlease adjust code according to the feedback. Do not include any additional information.\n"
    },
    {
      "role": "assistant",
      "content": "```cpp\n    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n      // Comparing if all bits outside of a constant mask are set?\n      // Replace (X | C) == -1 with (X & ~C) == ~C.\n      // This removes the -1 constant.\n      Constant *NotBOC = ConstantExpr::getNot(cast<Constant>(BOp1));\n      Value *And = Builder.CreateAnd(BOp0, NotBOC);\n      return new ICmpInst(Pred, And, NotBOC);\n    }\n    // (icmp eq (or (select cond, 0, NonZero), Other), 0)\n    //  -> (and cond, (icmp eq Other, 0))\n    // (icmp ne (or (select cond, NonZero, 0), Other), 0)\n    //  -> (or cond, (icmp ne Other, 0))\n    Value *Cond, *TV, *FV, *Other, *Sel;\n    if (C.isZero() &&\n        match(BO,\n              m_OneUse(m_c_Or(m_CombineAnd(m_Value(Sel),\n                                           m_Select(m_Value(Cond), m_Value(TV),\n                                                    m_Value(FV))),\n                              m_Value(Other))))) {\n      const SimplifyQuery Q = SQ.getWithInstruction(&Cmp);\n      // Easy case is if eq/ne matches whether 0 is trueval/falseval.\n      if (Pred == ICmpInst::ICMP_EQ\n              ? (match(TV, m_Zero()) && isKnownNonZero(FV, Q))\n              : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n        Value *Cmp = Builder.CreateICmp(\n            Pred, Other, Constant::getNullValue(Other->getType()));\n        if (Cmp->getType() != Cond->getType() && \n            Cond->getType()->isIntegerTy() && Cmp->getType()->isIntegerTy())\n          Cond = Builder.CreateIntCast(Cond, Cmp->getType(), /*isSigned*/false);\n        return BinaryOperator::Create(\n            Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n            Cond);\n      }\n      // Harder case is if eq/ne matches whether 0 is falseval/trueval. In this\n      // case we need to invert the select condition so we need to be careful to\n      // avoid creating extra instructions.\n      // (icmp ne (or (select cond, 0, NonZero), Other), 0)\n      //  -> (or (not cond), (icmp ne Other, 0))\n      // (icmp eq (or (select cond, NonZero, 0), Other), 0)\n      //  -> (and (not cond), (icmp eq Other, 0))\n```"
    },
    {
      "role": "user",
      "content": "Feedback:\n{\n  \"file\": \"llvm/test/Transforms/InstCombine/icmp-or-of-select-with-zero.ll\",\n  \"args\": \"opt < %s -passes=instcombine -S\",\n  \"name\": \"pr119063\",\n  \"body\": \"define <4 x i1> @pr119063(<4 x i32> %x, i1 %cond) {\\nentry:\\n  %sel = select i1 %cond, <4 x i32> splat (i32 1), <4 x i32> zeroinitializer\\n  %or = or <4 x i32> %sel, %x\\n  %cmp = icmp ne <4 x i32> %or, zeroinitializer\\n  ret <4 x i1> %cmp\\n}\\n\",\n  \"result\": false,\n  \"log\": \"Command '['/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt', '-', '-passes=instcombine', '-S']' died with <Signals.SIGABRT: 6>.\\n\\nopt: /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/Instructions.cpp:2642: static llvm::BinaryOperator* llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps, llvm::Value*, llvm::Value*, const llvm::Twine&, llvm::InsertPosition): Assertion `S1->getType() == S2->getType() && \\\"Cannot create binary operator with two operands of differing type!\\\"' failed.\\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\\nStack dump:\\n0.\\tProgram arguments: /data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt - -passes=instcombine -S\\n1.\\tRunning pass \\\"function(instcombine<max-iterations=1;verify-fixpoint>)\\\" on module \\\"<stdin>\\\"\\n2.\\tRunning pass \\\"instcombine<max-iterations=1;verify-fixpoint>\\\" on function \\\"pr119063\\\"\\n #0 0x00007ffff7eb779c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:727:3\\n #1 0x00007ffff7eb5234 llvm::sys::RunSignalHandlers() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Signals.cpp:105:20\\n #2 0x00007ffff7eb558e SignalHandler(int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1\\n #3 0x00007ffff7b3d090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\\n #4 0x00007ffff7b3d00b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\\n #5 0x00007ffff7b1c859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\\n #6 0x00007ffff7b1c729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\\n #7 0x00007ffff7b1c729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\\n #8 0x00007ffff7b2dfd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\\n #9 0x00007ffff2233fb4 (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x226fb4)\\n#10 0x00007ffff34d3d1f llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3636:38\\n#11 0x00007ffff34ea16b llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3502:7\\n#12 0x00007ffff34f9258 llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:7542:50\\n#13 0x00007ffff3455111 llvm::InstCombinerImpl::run() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5201:36\\n#14 0x00007ffff34560d3 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5519:5\\n#15 0x00007ffff3456a7b llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5581:3\\n#16 0x00007ffff4c7e736 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#17 0x00007ffff22b6dcc llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#18 0x00007ffff725b376 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#19 0x00007ffff22b72f9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/PassManager.cpp:129:41\\n#20 0x00007ffff725bd36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#21 0x00007ffff22b5215 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#22 0x00007ffff7fa5e63 llvm::SmallPtrSetImplBase::~SmallPtrSetImplBase() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:84:5\\n#23 0x00007ffff7fa5e63 llvm::SmallPtrSetImpl<llvm::AnalysisKey*>::~SmallPtrSetImpl() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:363:7\\n#24 0x00007ffff7fa5e63 llvm::SmallPtrSet<llvm::AnalysisKey*, 2u>::~SmallPtrSet() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:519:7\\n#25 0x00007ffff7fa5e63 llvm::PreservedAnalyses::~PreservedAnalyses() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/Analysis.h:111:7\\n#26 0x00007ffff7fa5e63 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/NewPMDriver.cpp:541:10\\n#27 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data() const /usr/include/c++/10/bits/basic_string.h:195:28\\n#28 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_is_local() const /usr/include/c++/10/bits/basic_string.h:230:23\\n#29 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_dispose() /usr/include/c++/10/bits/basic_string.h:239:18\\n#30 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string() /usr/include/c++/10/bits/basic_string.h:671:19\\n#31 0x00007ffff7fb065f optMain /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/optdriver.cpp:710:28\\n#32 0x00007ffff7b1e083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\\n#33 0x000055555555509e _start (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt+0x109e)\\n\"\n}\nPlease adjust code according to the feedback. Do not include any additional information.\n"
    },
    {
      "role": "assistant",
      "content": "```cpp\n    if (match(BOp1, m_APInt(BOC)) && BO->hasOneUse() && RHS->isAllOnesValue()) {\n      // Comparing if all bits outside of a constant mask are set?\n      // Replace (X | C) == -1 with (X & ~C) == ~C.\n      // This removes the -1 constant.\n      Constant *NotBOC = ConstantExpr::getNot(cast<Constant>(BOp1));\n      Value *And = Builder.CreateAnd(BOp0, NotBOC);\n      return new ICmpInst(Pred, And, NotBOC);\n    }\n    // (icmp eq (or (select cond, 0, NonZero), Other), 0)\n    //  -> (and cond, (icmp eq Other, 0))\n    // (icmp ne (or (select cond, NonZero, 0), Other), 0)\n    //  -> (or cond, (icmp ne Other, 0))\n    Value *Cond, *TV, *FV, *Other, *Sel;\n    if (C.isZero() &&\n        match(BO,\n              m_OneUse(m_c_Or(m_CombineAnd(m_Value(Sel),\n                                           m_Select(m_Value(Cond), m_Value(TV),\n                                                    m_Value(FV))),\n                              m_Value(Other))))) {\n      const SimplifyQuery Q = SQ.getWithInstruction(&Cmp);\n      // Easy case is if eq/ne matches whether 0 is trueval/falseval.\n      if (Pred == ICmpInst::ICMP_EQ\n              ? (match(TV, m_Zero()) && isKnownNonZero(FV, Q))\n              : (match(FV, m_Zero()) && isKnownNonZero(TV, Q))) {\n        Value *Cmp = Builder.CreateICmp(\n            Pred, Other, Constant::getNullValue(Other->getType()));\n        if (Cmp->getType() != Cond->getType() && \n            Cond->getType()->isIntegerTy(1) && Cmp->getType()->isIntegerTy(1))\n          Cond = Builder.CreateIntCast(Cond, Cmp->getType(), /*isSigned*/false);\n        return BinaryOperator::Create(\n            Pred == ICmpInst::ICMP_EQ ? Instruction::And : Instruction::Or, Cmp,\n            Cond);\n      }\n      // Harder case is if eq/ne matches whether 0 is falseval/trueval. In this\n      // case we need to invert the select condition so we need to be careful to\n      // avoid creating extra instructions.\n      // (icmp ne (or (select cond, 0, NonZero), Other), 0)\n      //  -> (or (not cond), (icmp ne Other, 0))\n      // (icmp eq (or (select cond, NonZero, 0), Other), 0)\n      //  -> (and (not cond), (icmp eq Other, 0))\n```"
    },
    {
      "role": "user",
      "content": "Feedback:\n{\n  \"file\": \"llvm/test/Transforms/InstCombine/icmp-or-of-select-with-zero.ll\",\n  \"args\": \"opt < %s -passes=instcombine -S\",\n  \"name\": \"pr119063\",\n  \"body\": \"define <4 x i1> @pr119063(<4 x i32> %x, i1 %cond) {\\nentry:\\n  %sel = select i1 %cond, <4 x i32> splat (i32 1), <4 x i32> zeroinitializer\\n  %or = or <4 x i32> %sel, %x\\n  %cmp = icmp ne <4 x i32> %or, zeroinitializer\\n  ret <4 x i1> %cmp\\n}\\n\",\n  \"result\": false,\n  \"log\": \"Command '['/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt', '-', '-passes=instcombine', '-S']' died with <Signals.SIGABRT: 6>.\\n\\nopt: /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/Instructions.cpp:2642: static llvm::BinaryOperator* llvm::BinaryOperator::Create(llvm::Instruction::BinaryOps, llvm::Value*, llvm::Value*, const llvm::Twine&, llvm::InsertPosition): Assertion `S1->getType() == S2->getType() && \\\"Cannot create binary operator with two operands of differing type!\\\"' failed.\\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\\nStack dump:\\n0.\\tProgram arguments: /data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt - -passes=instcombine -S\\n1.\\tRunning pass \\\"function(instcombine<max-iterations=1;verify-fixpoint>)\\\" on module \\\"<stdin>\\\"\\n2.\\tRunning pass \\\"instcombine<max-iterations=1;verify-fixpoint>\\\" on function \\\"pr119063\\\"\\n #0 0x00007ffff7eb779c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:727:3\\n #1 0x00007ffff7eb5234 llvm::sys::RunSignalHandlers() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Signals.cpp:105:20\\n #2 0x00007ffff7eb558e SignalHandler(int) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1\\n #3 0x00007ffff7b3d090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\\n #4 0x00007ffff7b3d00b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\\n #5 0x00007ffff7b1c859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\\n #6 0x00007ffff7b1c729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\\n #7 0x00007ffff7b1c729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\\n #8 0x00007ffff7b2dfd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\\n #9 0x00007ffff2233fb4 (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x226fb4)\\n#10 0x00007ffff34d3d49 llvm::InstCombinerImpl::foldICmpBinOpEqualityWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3636:38\\n#11 0x00007ffff34ea17b llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3502:7\\n#12 0x00007ffff34f9268 llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:7542:50\\n#13 0x00007ffff3455111 llvm::InstCombinerImpl::run() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5201:36\\n#14 0x00007ffff34560d3 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5519:5\\n#15 0x00007ffff3456a7b llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:5581:3\\n#16 0x00007ffff4c7e736 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#17 0x00007ffff22b6dcc llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#18 0x00007ffff725b376 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#19 0x00007ffff22b72f9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/lib/IR/PassManager.cpp:129:41\\n#20 0x00007ffff725bd36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:91:3\\n#21 0x00007ffff22b5215 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/PassManagerImpl.h:85:18\\n#22 0x00007ffff7fa5e63 llvm::SmallPtrSetImplBase::~SmallPtrSetImplBase() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:84:5\\n#23 0x00007ffff7fa5e63 llvm::SmallPtrSetImpl<llvm::AnalysisKey*>::~SmallPtrSetImpl() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:363:7\\n#24 0x00007ffff7fa5e63 llvm::SmallPtrSet<llvm::AnalysisKey*, 2u>::~SmallPtrSet() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:519:7\\n#25 0x00007ffff7fa5e63 llvm::PreservedAnalyses::~PreservedAnalyses() /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/include/llvm/IR/Analysis.h:111:7\\n#26 0x00007ffff7fa5e63 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/NewPMDriver.cpp:541:10\\n#27 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data() const /usr/include/c++/10/bits/basic_string.h:195:28\\n#28 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_is_local() const /usr/include/c++/10/bits/basic_string.h:230:23\\n#29 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_dispose() /usr/include/c++/10/bits/basic_string.h:239:18\\n#30 0x00007ffff7fb065f std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string() /usr/include/c++/10/bits/basic_string.h:671:19\\n#31 0x00007ffff7fb065f optMain /data/zyw/llvm-apr-benchmark/work/llvm-project/llvm/tools/opt/optdriver.cpp:710:28\\n#32 0x00007ffff7b1e083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\\n#33 0x000055555555509e _start (/data/zyw/llvm-apr-benchmark/work/llvm-build/bin/opt+0x109e)\\n\"\n}\nPlease adjust code according to the feedback. Do not include any additional information.\n"
    }
  ]
}