{
  "bug_id": "98675",
  "issue_url": "https://github.com/llvm/llvm-project/issues/98675",
  "bug_type": "crash",
  "base_commit": "22b7b84860d39da71964c9b329937f2ee1d875ba",
  "knowledge_cutoff": "2024-07-12T18:26:47Z",
  "lit_test_dir": [
    "llvm/test/Transforms/MemCpyOpt"
  ],
  "hints": {
    "fix_commit": "99685a54d1322694847f59386a548b3696a43fc3",
    "components": [
      "MemCpyOptimizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp": [
        [
          1188,
          1196
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp": [
        "MemCpyOptPass::processMemCpyMemCpyDependence"
      ]
    }
  },
  "patch": "commit 99685a54d1322694847f59386a548b3696a43fc3\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sat Jul 13 04:27:07 2024 +0800\n\n    [MemCpyOpt] Use `dyn_cast` to fix assertion failure in `processMemCpyMemCpyDependence` (#98686)\n    \n    Fixes https://github.com/llvm/llvm-project/issues/98675.\n\ndiff --git a/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp b/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nindex 1c65219585e5..4063762c88a2 100644\n--- a/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\n+++ b/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\n@@ -1188,9 +1188,9 @@ bool MemCpyOptPass::processMemCpyMemCpyDependence(MemCpyInst *M,\n     if (MDestOffset == MForwardOffset)\n       CopySource = M->getDest();\n     else {\n-      NewCopySource = cast<Instruction>(Builder.CreateInBoundsPtrAdd(\n-          CopySource, Builder.getInt64(MForwardOffset)));\n-      CopySource = NewCopySource;\n+      CopySource = Builder.CreateInBoundsPtrAdd(\n+          CopySource, Builder.getInt64(MForwardOffset));\n+      NewCopySource = dyn_cast<Instruction>(CopySource);\n     }\n     // We need to update `MCopyLoc` if an offset exists.\n     MCopyLoc = MCopyLoc.getWithNewPtr(CopySource);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/MemCpyOpt/memcpy-memcpy-offset.ll",
      "commands": [
        "opt < %s -passes=memcpyopt -S -verify-memoryssa"
      ],
      "tests": [
        {
          "test_name": "do_not_forward_offset_and_store",
          "test_body": "define void @do_not_forward_offset_and_store(ptr %src, ptr %dest) {\n  %cpy_tmp = alloca [9 x i8], align 1\n  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %cpy_tmp, ptr align 1 %src, i64 7, i1 false)\n  %src_offset = getelementptr inbounds i8, ptr %src, i64 1\n  store i8 1, ptr %src_offset, align 1\n  %cpy_tmp_offset = getelementptr inbounds i8, ptr %cpy_tmp, i64 1\n  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %dest, ptr align 1 %cpy_tmp_offset, i64 5, i1 false)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\n"
        },
        {
          "test_name": "pr98675",
          "test_body": "@buf = external global [32 x i8]\n\ndefine void @pr98675(ptr noalias %p1, ptr noalias %p2) {\n  call void @llvm.memcpy.p0.p0.i64(ptr %p1, ptr @buf, i64 26, i1 false)\n  %gep = getelementptr i8, ptr %p1, i64 10\n  call void @llvm.memmove.p0.p0.i64(ptr %p2, ptr %gep, i64 1, i1 false)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[MemCpyOpt] Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.",
    "body": "Detected by https://github.com/dtcxzyw/llvm-opt-benchmark/issues/935.\r\n\r\nReproducer: \r\n```\r\n; bin/opt -passes=memcpyopt -S test.ll\r\n@b = external global [32 x i8]\r\n\r\ndefine void @_Z15TestBasicStringIN5eastl12basic_stringIc17CountingAllocatorEEEiv(ptr %call.i.i.i12866) {\r\n  %a = alloca [32 x i8], align 1\r\n  call void @llvm.memcpy.p0.p0.i64(ptr %call.i.i.i12866, ptr @b, i64 26, i1 false)\r\n  %.sroa.gep22184 = getelementptr i8, ptr %call.i.i.i12866, i64 10\r\n  call void @llvm.memmove.p0.p0.i64(ptr %a, ptr %.sroa.gep22184, i64 1, i1 false)\r\n  ret void\r\n}\r\n```\r\n```\r\nopt: /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/include/llvm/Support/Casting.h:578: decltype(auto) llvm::cast(From*) [with To = Instruction; From = Value]: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: bin/opt -passes=memcpyopt reduced.ll\r\n1.      Running pass \"function(memcpyopt)\" on module \"reduced.ll\"\r\n2.      Running pass \"memcpyopt\" on function \"_Z15TestBasicStringIN5eastl12basic_stringIc17CountingAllocatorEEEiv\"\r\n #0 0x00007e04ebe0c9c2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.19.0git+0x20c9c2)\r\n #1 0x00007e04ebe0988f llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.19.0git+0x20988f)\r\n #2 0x00007e04ebe099d5 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007e04eb842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007e04eb8969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007e04eb8969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007e04eb8969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007e04eb842476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007e04eb8287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00007e04eb82871b _nl_load_domain ./intl/loadmsgcat.c:1177:9\r\n#10 0x00007e04eb839e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n#11 0x00007e04e5ab5dfa llvm::MemCpyOptPass::processMemCpyMemCpyDependence(llvm::MemCpyInst*, llvm::MemCpyInst*, llvm::BatchAAResults&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.19.0git+0x2b5dfa)\r\n#12 0x00007e04e5abd2aa llvm::MemCpyOptPass::processMemCpy(llvm::MemCpyInst*, llvm::ilist_iterator_w_bits<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true, llvm::BasicBlock>, false, false>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.19.0git+0x2bd2aa)\r\n#13 0x00007e04e5abd9c4 llvm::MemCpyOptPass::iterateOnFunction(llvm::Function&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.19.0git+0x2bd9c4)\r\n#14 0x00007e04e5abdcce llvm::MemCpyOptPass::runImpl(llvm::Function&, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::AssumptionCache*, llvm::DominatorTree*, llvm::PostDominatorTree*, llvm::MemorySSA*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.19.0git+0x2bdcce)\r\n#15 0x00007e04e5abe15c llvm::MemCpyOptPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.19.0git+0x2be15c)\r\n#16 0x00007e04e74cde55 llvm::detail::PassModel<llvm::Function, llvm::MemCpyOptPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMPasses.so.19.0git+0xcde55)\r\n#17 0x00007e04e474b7b2 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.19.0git+0x34b7b2)\r\n#18 0x00007e04eaad5065 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.19.0git+0xd5065)\r\n#19 0x00007e04e474a40e llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.19.0git+0x34a40e)\r\n#20 0x00007e04eaad5985 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.19.0git+0xd5985)\r\n#21 0x00007e04e47483da llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.19.0git+0x3483da)\r\n#22 0x00007e04ec103267 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.19.0git+0x2d267)\r\n#23 0x00007e04ec10f212 optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.19.0git+0x39212)\r\n#24 0x00007e04eb829d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#25 0x00007e04eb829e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#26 0x00007e04eb829e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#27 0x00005df852081095 _start (bin/opt+0x1095)\r\nAborted (core dumped)\r\n```\r\n\r\nThis issue is caused by https://github.com/llvm/llvm-project/commit/fa2421392802025e842454a31ed50dbfab643130.\r\nhttps://github.com/llvm/llvm-project/blob/d1dc5047f1127d64eb82eec976fabaa2d9d20c11/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp#L1191-L1192\r\n`Builder.CreateInBoundsPtrAdd` may return `GetElementPtrConstantExpr`.\r\n\r\ncc @nikic @DianQK \r\n\r\n",
    "author": "dtcxzyw",
    "labels": [
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "DianQK",
        "body": "It looks similar to https://lab.llvm.org/buildbot/#/builders/41/builds/587. I really shouldn't have merged the code before going to bed :3"
      }
    ]
  },
  "verified": true
}