{
  "bug_id": "84051",
  "issue_url": "https://github.com/llvm/llvm-project/issues/84051",
  "bug_type": "crash",
  "base_commit": "b64482e23eefaef7738fde35d0b7c4174aaa6597",
  "knowledge_cutoff": "2024-03-05T17:59:45Z",
  "lit_test_dir": [
    "llvm/test/Transforms/DeadStoreElimination"
  ],
  "hints": {
    "fix_commit": "eb8f379567e8d014194faefe02ce92813e237afc",
    "components": [
      "DeadStoreElimination"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp": [
        [
          1908,
          1922
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp": [
        "DSEState",
        "deleteDeadInstruction"
      ]
    }
  },
  "patch": "commit eb8f379567e8d014194faefe02ce92813e237afc\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Wed Mar 6 20:08:00 2024 +0000\n\n    [DSE] Remove malloc from EarliestEscapeInfo before removing. (#84157)\n    \n    Not removing the malloc from earliest escape info leaves stale entries\n    in the cache.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/84051.\n    \n    PR: https://github.com/llvm/llvm-project/pull/84157\n\ndiff --git a/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp b/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\nindex 3d1dac5ea17e..392e6ad5a66b 100644\n--- a/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\n+++ b/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\n@@ -1908,15 +1908,15 @@ struct DSEState {\n                               Malloc->getArgOperand(0), IRB, TLI);\n     if (!Calloc)\n       return false;\n+\n     MemorySSAUpdater Updater(&MSSA);\n     auto *NewAccess =\n       Updater.createMemoryAccessAfter(cast<Instruction>(Calloc), nullptr,\n                                       MallocDef);\n     auto *NewAccessMD = cast<MemoryDef>(NewAccess);\n     Updater.insertDef(NewAccessMD, /*RenameUses=*/true);\n-    Updater.removeMemoryAccess(Malloc);\n     Malloc->replaceAllUsesWith(Calloc);\n-    Malloc->eraseFromParent();\n+    deleteDeadInstruction(Malloc);\n     return true;\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/DeadStoreElimination/malloc-earliest-escape-info-invalidation.ll",
      "commands": [
        "opt -p dse -S %s"
      ],
      "tests": [
        {
          "test_name": "widget",
          "test_body": "target datalayout = \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-v128:64-a:8:16-n32:64\"\n\ndefine void @widget(ptr %a) {\nbb:\n  %call = tail call ptr @malloc(i64 1)\n  tail call void @llvm.memset.p0.i64(ptr %call, i8 0, i64 1, i1 false)\n  %call1 = tail call noalias ptr @malloc(i64 0)\n  store ptr %call1, ptr %a, align 8\n  %load = load ptr, ptr %a, align 8\n  %load2 = load i32, ptr %load, align 8\n  %getelementptr = getelementptr i8, ptr %call1, i64 0\n  %getelementptr3 = getelementptr i8, ptr %getelementptr, i64 1\n  store i8 0, ptr %call1, align 1\n  %getelementptr4 = getelementptr i8, ptr %getelementptr, i64 8\n  store i16 0, ptr %getelementptr4, align 4\n  %getelementptr5 = getelementptr i8, ptr %getelementptr, i64 12\n  store i32 0, ptr %call1, align 4\n  %load6 = load i32, ptr inttoptr (i64 4 to ptr), align 4\n  br label %bb48\n\nbb7:                                              ; No predecessors!\n  br label %bb9\n\nbb8:                                              ; No predecessors!\n  br label %bb53\n\nbb9:                                              ; preds = %bb43, %bb7\n  %phi = phi ptr [ %call1, %bb7 ], [ %a, %bb43 ]\n  %getelementptr10 = getelementptr i8, ptr %phi, i64 0\n  %getelementptr11 = getelementptr i8, ptr %phi, i64 0\n  %getelementptr12 = getelementptr i8, ptr %phi, i64 0\n  %getelementptr13 = getelementptr i8, ptr %getelementptr12, i64 1\n  store i8 0, ptr %call1, align 1\n  br label %bb29\n\nbb14:                                             ; No predecessors!\n  %getelementptr15 = getelementptr i8, ptr %getelementptr10, i64 8\n  %load16 = load i16, ptr %call1, align 4\n  br i1 false, label %bb22, label %bb17\n\nbb17:                                             ; preds = %bb14\n  %getelementptr18 = getelementptr i8, ptr %getelementptr11, i64 8\n  %load19 = load i16, ptr %call1, align 4\n  %getelementptr20 = getelementptr i8, ptr %getelementptr12, i64 8\n  store i16 0, ptr %call1, align 4\n  %getelementptr21 = getelementptr i8, ptr %phi, i64 0\n  br label %bb25\n\nbb22:                                             ; preds = %bb14\n  %getelementptr23 = getelementptr i8, ptr %phi, i64 0\n  %getelementptr24 = getelementptr i8, ptr %getelementptr23, i64 12\n  br label %bb25\n\nbb25:                                             ; preds = %bb22, %bb17\n  %phi26 = phi ptr [ %a, %bb17 ], [ %call1, %bb22 ]\n  %phi27 = phi ptr [ %call1, %bb17 ], [ %call1, %bb22 ]\n  %phi28 = phi ptr [ %call1, %bb17 ], [ %call1, %bb22 ]\n  store i32 0, ptr %call1, align 4\n  br label %bb29\n\nbb29:                                             ; preds = %bb25, %bb9\n  %phi30 = phi ptr [ %call1, %bb9 ], [ %call1, %bb25 ]\n  %phi31 = phi ptr [ %call1, %bb9 ], [ %call1, %bb25 ]\n  %load32 = load i8, ptr %call1, align 4\n  %load33 = load i8, ptr %call1, align 4\n  %getelementptr34 = getelementptr i8, ptr %phi31, i64 12\n  %getelementptr35 = getelementptr i8, ptr %getelementptr12, i64 12\n  br label %bb86\n\nbb36:                                             ; No predecessors!\n  %getelementptr37 = getelementptr i8, ptr %phi30, i64 12\n  br label %bb38\n\nbb38:                                             ; preds = %bb38, %bb36\n  %getelementptr39 = getelementptr [0 x i32], ptr %getelementptr34, i64 0, i64 0\n  %load40 = load i32, ptr %call1, align 4\n  %getelementptr41 = getelementptr [0 x i32], ptr %getelementptr37, i64 0, i64 0\n  %load42 = load i32, ptr %call1, align 4\n  br label %bb38\n\nbb43:                                             ; No predecessors!\n  %getelementptr44 = getelementptr i8, ptr %getelementptr12, i64 8\n  %load45 = load i16, ptr %call1, align 4\n  store i16 0, ptr %call1, align 4\n  store i8 0, ptr %call1, align 4\n  %getelementptr46 = getelementptr i8, ptr %getelementptr12, i64 12\n  store i32 0, ptr %call1, align 4\n  %getelementptr47 = getelementptr i8, ptr %getelementptr12, i64 16\n  store i32 0, ptr %call1, align 4\n  br label %bb9\n\nbb48:                                             ; preds = %bb48, %bb\n  %getelementptr49 = getelementptr i8, ptr %call1, i64 0\n  %getelementptr50 = getelementptr i8, ptr %getelementptr49, i64 1\n  store i8 0, ptr %call1, align 1\n  %getelementptr51 = getelementptr i8, ptr %getelementptr49, i64 8\n  store i16 0, ptr %call1, align 4\n  %getelementptr52 = getelementptr i8, ptr %getelementptr49, i64 12\n  store i32 0, ptr %call1, align 4\n  br label %bb48\n\nbb53:                                             ; preds = %bb71, %bb8\n  %phi54 = phi ptr [ %call1, %bb8 ], [ %a, %bb71 ]\n  %getelementptr55 = getelementptr i8, ptr %phi54, i64 0\n  %getelementptr56 = getelementptr i8, ptr %phi54, i64 0\n  %getelementptr57 = getelementptr i8, ptr %phi54, i64 0\n  %getelementptr58 = getelementptr i8, ptr %getelementptr57, i64 1\n  br label %bb71\n\nbb59:                                             ; No predecessors!\n  %getelementptr60 = getelementptr i8, ptr %phi54, i64 0\n  %getelementptr61 = getelementptr i8, ptr %getelementptr60, i64 12\n  br label %bb67\n\nbb62:                                             ; No predecessors!\n  %getelementptr63 = getelementptr i8, ptr %getelementptr56, i64 8\n  %load64 = load i16, ptr %call1, align 4\n  %getelementptr65 = getelementptr i8, ptr %getelementptr57, i64 8\n  store i16 0, ptr %call1, align 4\n  %getelementptr66 = getelementptr i8, ptr %phi54, i64 0\n  br label %bb67\n\nbb67:                                             ; preds = %bb62, %bb59\n  %phi68 = phi ptr [ %a, %bb62 ], [ %call1, %bb59 ]\n  %phi69 = phi ptr [ %call1, %bb62 ], [ %call1, %bb59 ]\n  %phi70 = phi ptr [ %call1, %bb62 ], [ %call1, %bb59 ]\n  store i32 0, ptr %call1, align 4\n  br label %bb71\n\nbb71:                                             ; preds = %bb67, %bb53\n  %phi72 = phi ptr [ %call1, %bb53 ], [ %call1, %bb67 ]\n  %phi73 = phi ptr [ %call1, %bb53 ], [ %call1, %bb67 ]\n  %load74 = load i8, ptr %call1, align 4\n  %load75 = load i8, ptr %call1, align 4\n  %getelementptr76 = getelementptr i8, ptr %phi72, i64 12\n  %getelementptr77 = getelementptr i8, ptr %getelementptr57, i64 12\n  %getelementptr78 = getelementptr [0 x i32], ptr %getelementptr76, i64 0, i64 0\n  %load79 = load i32, ptr %call1, align 4\n  %getelementptr80 = getelementptr [0 x i32], ptr %getelementptr77, i64 0, i64 0\n  store i32 0, ptr %call1, align 4\n  %load81 = load i8, ptr %call1, align 4\n  %getelementptr82 = getelementptr i8, ptr %getelementptr57, i64 8\n  %load83 = load i16, ptr %call1, align 4\n  store i16 0, ptr %call1, align 4\n  store i8 0, ptr %call1, align 4\n  %getelementptr84 = getelementptr i8, ptr %getelementptr57, i64 12\n  store i32 0, ptr %call1, align 4\n  %getelementptr85 = getelementptr i8, ptr %getelementptr57, i64 16\n  store i32 0, ptr %call1, align 4\n  br label %bb53\n\nbb86:                                             ; preds = %bb86, %bb29\n  %getelementptr87 = getelementptr [0 x i32], ptr %getelementptr34, i64 0, i64 0\n  %load88 = load i32, ptr %call1, align 4\n  %getelementptr89 = getelementptr [0 x i32], ptr %getelementptr35, i64 0, i64 0\n  store i32 0, ptr %call1, align 4\n  br label %bb86\n}\n\ndeclare ptr @malloc(i64)\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)\ndeclare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[DSE] crash",
    "body": "Reduced test case:\r\n[tc_dse.tar.gz](https://github.com/llvm/llvm-project/files/14499403/tc_dse.tar.gz)\r\n\r\nopt -mtriple=s390x-unknown-linux -mcpu=z16 -O3 -S ./tc_dse.ll\r\n\r\n#6 0x0000000005287456 llvm::BasicAAResult::aliasCheck\r\n#11 0x00000000048f0646 (anonymous namespace)::DSEState::isReadClobber\r\n14 0x00000000049004d8 llvm::DSEPass::run\r\nSegmentation fault (core dumped)\r\n\r\nThis is reported by user on F37 with clang-15, and is still failing on trunk.\r\n\r\n@fhahn @BK1603 @nikic ",
    "author": "JonPsson1",
    "labels": [
      "release:backport",
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "llvm-reduce result for `-passes=dse`: https://gist.github.com/nikic/d52c888425c5d4ff3fbd37b4f84778b6\r\n\r\nvalgrind reports a use-after-free. Probably not invalidating EII correctly somewhere."
      },
      {
        "author": "fhahn",
        "body": "Also reproduces with ASAn, looking now"
      }
    ]
  }
}
