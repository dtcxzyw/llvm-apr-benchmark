{
  "bug_id": "142957",
  "issue_url": "https://github.com/llvm/llvm-project/issues/142957",
  "bug_type": "miscompilation",
  "base_commit": "5835f1e0a33afcae46a6ca4854373785eb3e7fd6",
  "knowledge_cutoff": "2025-06-05T12:36:31Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "fd97dfbb78e3c9aea16873617b6d61b5b8a64474",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp": [
        [
          1491,
          1500
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp": [
        "LoopVectorizationLegality::canVectorizeWithIfConvert"
      ]
    }
  },
  "patch": "commit fd97dfbb78e3c9aea16873617b6d61b5b8a64474\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Fri Jun 20 13:05:19 2025 +0100\n\n    [LV] Don't mark ptrs as safe to speculate if fed by UB/poison op. (#143204)\n    \n    Add additional checks before marking pointers safe to load\n    speculatively. If some computations feeding the pointer may trigger UB,\n    we cannot load the pointer speculatively, because we cannot compute the\n    address speculatively. The UB triggering instructions will be\n    predicated, but if the predicated block does not execute the result is\n    poison.\n    \n    Similarly, we also cannot load the pointer speculatively if it may be\n    poison. The patch also checks if any of the operands defined outside the\n    loop may be poison when entering the loop. We *don't* need to check if\n    any operation inside the loop may produce poison due to flags, as those\n    will be dropped if needed.\n    \n    There are some types of instructions inside the loop that can produce\n    poison independent of flags. Currently loads are also checked, not sure\n    if there's a convenient API to check for all such operands.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/142957.\n    \n    PR: https://github.com/llvm/llvm-project/pull/143204\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp\nindex 0c4e5bb3d472..969d225c6ef2 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp\n@@ -1491,10 +1491,51 @@ bool LoopVectorizationLegality::canVectorizeWithIfConvert() {\n     SmallVector<const SCEVPredicate *, 4> Predicates;\n     for (Instruction &I : *BB) {\n       LoadInst *LI = dyn_cast<LoadInst>(&I);\n+\n+      // Make sure we can execute all computations feeding into Ptr in the loop\n+      // w/o triggering UB and that none of the out-of-loop operands are poison.\n+      // We do not need to check if operations inside the loop can produce\n+      // poison due to flags (e.g. due to an inbounds GEP going out of bounds),\n+      // because flags will be dropped when executing them unconditionally.\n+      // TODO: Results could be improved by considering poison-propagation\n+      // properties of visited ops.\n+      auto CanSpeculatePointerOp = [this](Value *Ptr) {\n+        SmallVector<Value *> Worklist = {Ptr};\n+        SmallPtrSet<Value *, 4> Visited;\n+        while (!Worklist.empty()) {\n+          Value *CurrV = Worklist.pop_back_val();\n+          if (!Visited.insert(CurrV).second)\n+            continue;\n+\n+          auto *CurrI = dyn_cast<Instruction>(CurrV);\n+          if (!CurrI || !TheLoop->contains(CurrI)) {\n+            // If operands from outside the loop may be poison then Ptr may also\n+            // be poison.\n+            if (!isGuaranteedNotToBePoison(CurrV, AC,\n+                                           TheLoop->getLoopPredecessor()\n+                                               ->getTerminator()\n+                                               ->getIterator()))\n+              return false;\n+            continue;\n+          }\n+\n+          // A loaded value may be poison, independent of any flags.\n+          if (isa<LoadInst>(CurrI) && !isGuaranteedNotToBePoison(CurrV, AC))\n+            return false;\n+\n+          // For other ops, assume poison can only be introduced via flags,\n+          // which can be dropped.\n+          if (!isa<PHINode>(CurrI) && !isSafeToSpeculativelyExecute(CurrI))\n+            return false;\n+          append_range(Worklist, CurrI->operands());\n+        }\n+        return true;\n+      };\n       // Pass the Predicates pointer to isDereferenceableAndAlignedInLoop so\n       // that it will consider loops that need guarding by SCEV checks. The\n       // vectoriser will generate these checks if we decide to vectorise.\n       if (LI && !LI->getType()->isVectorTy() && !mustSuppressSpeculation(*LI) &&\n+          CanSpeculatePointerOp(LI->getPointerOperand()) &&\n           isDereferenceableAndAlignedInLoop(LI, TheLoop, SE, *DT, AC,\n                                             &Predicates))\n         SafePointers.insert(LI->getPointerOperand());\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/load-deref-pred-poison-ub-ops-feeding-pointer.ll",
      "commands": [
        "opt -p loop-vectorize -force-widen-divrem-via-safe-divisor=false -force-vector-width=2 -S %s"
      ],
      "tests": [
        {
          "test_name": "ptr_depends_on_sdiv",
          "test_body": "target datalayout = \"p:16:16\"\n\n@src = external global [16 x i64]\n\ndefine void @ptr_depends_on_sdiv(ptr noalias %dst, i16 noundef %off) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i16 [ 9, %entry ], [ %iv.next, %loop.latch ]\n  %cmp1 = icmp eq i16 %iv, 10\n  br i1 %cmp1, label %if.then, label %loop.latch\n\nif.then:                                          ; preds = %loop.header\n  %div = sdiv i16 24316, %off\n  %add.iv = add i16 %iv, 16383\n  %s = shl i16 %div, 14\n  %sub6 = sub i16 %add.iv, %s\n  %gep.src = getelementptr inbounds i64, ptr @src, i16 %sub6\n  %l = load i64, ptr %gep.src, align 1\n  %gep.dst = getelementptr inbounds i64, ptr %dst, i16 %iv\n  store i64 %l, ptr %gep.dst, align 1\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %if.then, %loop.header\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 11\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n",
          "additional_args": "-src-unroll=16 -tgt-unroll=16"
        }
      ]
    }
  ],
  "issue": {
    "title": "loop-vectorize miscompile",
    "body": "llvm commit: 6955a7d134e7\nReproduce with:\n```\nopt -passes=\"loop-vectorize\" bbi-107525_lv.ll -S -o - -mtriple=aarch64-none-linux-gnu --data-layout=\"p:16:16\"\n```\nThe loop-vectorize output contains\n```\npred.sdiv.continue:                               ; preds = %pred.sdiv.if, %vector.body\n  %3 = phi i16 [ poison, %vector.body ], [ %2, %pred.sdiv.if ]\n  [...]\n\npred.sdiv.continue2:                              ; preds = %pred.sdiv.if1, %pred.sdiv.continue\n  [...]\n  %7 = shl i16 %3, 14\n  %8 = sub i16 %6, %7\n  %9 = getelementptr [16 x i64], ptr @g_855, i16 0, i16 %8\n  %10 = getelementptr i64, ptr %9, i32 0\n  %wide.load = load <2 x i64>, ptr %10, align 1\n```\n\nand the problem here is that we will get to the %3 phi from %vector.body and then continue to pred.sdiv.continue2 where the %3 poison value will make %7, %8, %9 and %10 poison, and then we will do a load from %10 which is instant UB.\n\nThe input program has no UB.\n\nBefore 0d61ffd350\n```\n[Loads] Support SCEVAddExpr as start for pointer AddRec.\n```\nthe result is ok. Then with 0d61ffd350 it crashes with\n```\nopt: ../include/llvm/Support/Casting.h:109: static bool llvm::isa_impl_cl<llvm::Instruction, const llvm::Value *>::doit(const From *) [To = llvm::Instruction, From = const llvm::Value *]: Assertion `Val && \"isa<> used on a null pointer\"' failed.\n```\nand that crash goes away with fd82b5b287\n```\n[LV] Support recieps without underlying instr in collectPoisonGenRec.\n\nSupport recipes without underlying instruction in\ncollectPoisonGeneratingRecipes by directly trying to dyn_cast_or_null\nthe underlying value.\n\nFixes https://github.com/llvm/llvm-project/issues/70590.\n```\nbut then we get the miscompile instead.\n\nI also tested to cherry-pick the fd82b5b287 to directly after 0d61ffd350 and we get the miscompile then too, so it doesn't seem to be some other patch between them that causes the miscompile.\n\n[bbi-107525_lv.ll.gz](https://github.com/user-attachments/files/20610502/bbi-107525_lv.ll.gz)",
    "author": "mikaelholmen",
    "labels": [
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Put up a potential fix: https://github.com/llvm/llvm-project/pull/143204"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}