{
  "bug_id": "106655",
  "issue_url": "https://github.com/llvm/llvm-project/issues/106655",
  "bug_type": "crash",
  "base_commit": "2d5613afec0f4afeeb03cfd4edac556a65ad0eaf",
  "knowledge_cutoff": "2024-08-30T03:04:59Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "87a988e881ac92e3d87aae01dc632f33c1fb36aa",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13137,
          13143
        ],
        [
          13197,
          13203
        ],
        [
          13249,
          13255
        ],
        [
          13259,
          13265
        ],
        [
          13474,
          13480
        ],
        [
          13518,
          13524
        ],
        [
          13571,
          13577
        ],
        [
          13593,
          13599
        ],
        [
          13611,
          13617
        ],
        [
          13655,
          13661
        ],
        [
          13688,
          13694
        ],
        [
          13780,
          13786
        ],
        [
          13794,
          13800
        ],
        [
          13859,
          13865
        ],
        [
          13941,
          13947
        ],
        [
          14039,
          14044
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit 87a988e881ac92e3d87aae01dc632f33c1fb36aa\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Aug 30 05:16:57 2024 -0700\n\n    [SLP]Fix PR106655: Use FinalShuffle for alternate cast nodes.\n    \n    Need to use FinalShuffle function for all vectorized results to\n    correctly produce vectorized value.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/106655\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex edb2567fa057..345b01b82c6a 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13137,7 +13137,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n   }\n \n   bool IsReverseOrder = isReverseOrder(E->ReorderIndices);\n-  auto FinalShuffle = [&](Value *V, const TreeEntry *E, VectorType *VecTy) {\n+  auto FinalShuffle = [&](Value *V, const TreeEntry *E) {\n     ShuffleInstructionBuilder ShuffleBuilder(ScalarTy, Builder, *this);\n     if (E->getOpcode() == Instruction::Store &&\n         E->State == TreeEntry::Vectorize) {\n@@ -13197,7 +13197,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n                                PH->getParent()->getFirstInsertionPt());\n         Builder.SetCurrentDebugLocation(PH->getDebugLoc());\n \n-        V = FinalShuffle(V, E, VecTy);\n+        V = FinalShuffle(V, E);\n \n         E->VectorizedValue = V;\n         if (PostponedPHIs)\n@@ -13249,7 +13249,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       if (const TreeEntry *TE = getTreeEntry(V))\n         V = TE->VectorizedValue;\n       setInsertPointAfterBundle(E);\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n       E->VectorizedValue = V;\n       return V;\n     }\n@@ -13259,7 +13259,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       Value *Ptr = LI->getPointerOperand();\n       LoadInst *V = Builder.CreateAlignedLoad(VecTy, Ptr, LI->getAlign());\n       Value *NewV = propagateMetadata(V, E->Scalars);\n-      NewV = FinalShuffle(NewV, E, VecTy);\n+      NewV = FinalShuffle(NewV, E);\n       E->VectorizedValue = NewV;\n       return NewV;\n     }\n@@ -13474,7 +13474,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       Value *V = (VecOpcode != ShuffleOrOp && VecOpcode == Instruction::BitCast)\n                      ? InVec\n                      : Builder.CreateCast(VecOpcode, InVec, VecTy);\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13518,7 +13518,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       propagateIRFlags(V, E->Scalars, VL0);\n       // Do not cast for cmps.\n       VecTy = cast<FixedVectorType>(V->getType());\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13571,7 +13571,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       assert(getNumElements(Cond->getType()) == TrueNumElements &&\n              \"Cannot vectorize Instruction::Select\");\n       Value *V = Builder.CreateSelect(Cond, True, False);\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13593,7 +13593,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       if (auto *I = dyn_cast<Instruction>(V))\n         V = propagateMetadata(I, E->Scalars);\n \n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13611,7 +13611,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       }\n \n       Value *V = Builder.CreateFreeze(Op);\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13655,7 +13655,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n                 auto *CI = dyn_cast<ConstantInt>(Op);\n                 return CI && CI->getValue().countr_one() >= It->second.first;\n               })) {\n-            V = FinalShuffle(I == 0 ? RHS : LHS, E, VecTy);\n+            V = FinalShuffle(I == 0 ? RHS : LHS, E);\n             E->VectorizedValue = V;\n             ++NumVectorInstructions;\n             return V;\n@@ -13688,7 +13688,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n           I->setHasNoUnsignedWrap(/*b=*/false);\n       }\n \n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13780,7 +13780,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       }\n       Value *V = propagateMetadata(NewLI, E->Scalars);\n \n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n       return V;\n@@ -13794,7 +13794,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       if (VecValue->getType() != VecTy)\n         VecValue =\n             Builder.CreateIntCast(VecValue, VecTy, GetOperandSignedness(0));\n-      VecValue = FinalShuffle(VecValue, E, VecTy);\n+      VecValue = FinalShuffle(VecValue, E);\n \n       Value *Ptr = SI->getPointerOperand();\n       Instruction *ST;\n@@ -13859,7 +13859,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n         V = propagateMetadata(I, GEPs);\n       }\n \n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -13941,7 +13941,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       Value *V = Builder.CreateCall(CF, OpVecs, OpBundles);\n \n       propagateIRFlags(V, E->Scalars, VL0);\n-      V = FinalShuffle(V, E, VecTy);\n+      V = FinalShuffle(V, E);\n \n       E->VectorizedValue = V;\n       ++NumVectorInstructions;\n@@ -14039,6 +14039,7 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n                      \"Expected same type as operand.\");\n               if (auto *I = dyn_cast<Instruction>(LHS))\n                 LHS = propagateMetadata(I, E->Scalars);\n+              LHS = FinalShuffle(LHS, E);\n               E->VectorizedValue = LHS;\n               ++NumVectorInstructions;\n               return LHS;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/resized-alt-shuffle-after-minbw.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-vectorize-hor=false < %s"
      ],
      "tests": [
        {
          "test_name": "func",
          "test_body": "define void @func(i32 %0) {\n  %2 = shl i32 %0, 0\n  %3 = sext i32 %2 to i64\n  %4 = shl i32 0, 0\n  %5 = sext i32 %4 to i64\n  %6 = or i32 0, 0\n  %7 = or i32 0, 0\n  %8 = zext i32 %6 to i64\n  %9 = zext i32 %7 to i64\n  %10 = zext i32 0 to i64\n  %11 = zext i32 0 to i64\n  %12 = zext i32 0 to i64\n  %13 = zext i32 0 to i64\n  %14 = zext i32 0 to i64\n  %15 = zext i32 0 to i64\n  %16 = zext i32 0 to i64\n  %17 = zext i32 0 to i64\n  %18 = zext i32 0 to i64\n  %19 = zext i32 0 to i64\n  %20 = zext i32 0 to i64\n  %21 = zext i32 0 to i64\n  %22 = zext i32 0 to i64\n  %23 = zext i32 0 to i64\n  %24 = zext i32 0 to i64\n  %25 = zext i32 0 to i64\n  %26 = zext i32 0 to i64\n  %27 = or i64 %3, 0\n  %28 = or i64 %3, %8\n  %29 = or i64 %3, %9\n  %30 = or i64 %3, %10\n  %31 = or i64 %3, %11\n  %32 = or i64 %3, %12\n  %33 = or i64 %3, %13\n  %34 = or i64 %3, %14\n  %35 = or i64 %3, %15\n  %36 = or i64 %3, %16\n  %37 = or i64 %3, %17\n  %38 = or i64 %3, %18\n  %39 = or i64 %3, %19\n  %40 = or i64 %3, %20\n  %41 = or i64 %3, %21\n  %42 = or i64 %3, %22\n  %43 = or i64 %3, %23\n  %44 = or i64 %3, %24\n  %45 = or i64 %3, %25\n  %46 = or i64 %3, 0\n  %47 = or i64 %3, 0\n  %48 = or i64 %3, 0\n  %49 = or i64 %3, 0\n  %50 = or i64 %3, 0\n  %51 = or i64 %3, 0\n  %52 = or i64 %3, 0\n  %53 = or i64 %3, 0\n  %54 = or i64 %3, 0\n  %55 = or i64 %3, 0\n  %56 = or i64 %3, 0\n  %57 = or i64 %3, 0\n  %58 = or i64 %3, 0\n  %59 = icmp slt i64 %28, 0\n  %60 = icmp slt i64 %29, 0\n  %61 = icmp slt i64 %30, 0\n  %62 = icmp slt i64 %31, 0\n  %63 = icmp slt i64 %32, 0\n  %64 = icmp slt i64 %33, 0\n  %65 = icmp slt i64 %34, 0\n  %66 = icmp slt i64 %35, 0\n  %67 = icmp slt i64 %36, 0\n  %68 = icmp slt i64 %37, 0\n  %69 = icmp slt i64 %38, 0\n  %70 = icmp slt i64 %39, 0\n  %71 = icmp slt i64 %40, 0\n  %72 = icmp slt i64 %41, 0\n  %73 = icmp slt i64 %42, 0\n  %74 = icmp slt i64 %43, 0\n  %75 = icmp slt i64 %44, 0\n  %76 = icmp slt i64 %45, 0\n  %77 = icmp slt i64 %46, 0\n  %78 = icmp slt i64 %47, 0\n  %79 = icmp slt i64 %48, 0\n  %80 = icmp slt i64 %49, 0\n  %81 = icmp slt i64 %50, 0\n  %82 = icmp slt i64 %51, 0\n  %83 = icmp slt i64 %52, 0\n  %84 = icmp slt i64 %53, 0\n  %85 = icmp slt i64 %54, 0\n  %86 = icmp slt i64 %55, 0\n  %87 = icmp slt i64 %56, 0\n  %88 = icmp slt i64 %57, 0\n  %89 = icmp slt i64 %58, 0\n  %90 = and i1 false, %59\n  %91 = and i1 false, %60\n  %92 = and i1 false, %61\n  %93 = and i1 false, %62\n  %94 = and i1 false, %63\n  %95 = and i1 false, %64\n  %96 = and i1 false, %65\n  %97 = and i1 false, %66\n  %98 = and i1 false, %67\n  %99 = and i1 false, %68\n  %100 = and i1 false, %69\n  %101 = and i1 false, %70\n  %102 = and i1 false, %71\n  %103 = and i1 false, %72\n  %104 = and i1 false, %73\n  %105 = and i1 false, %74\n  %106 = and i1 false, %75\n  %107 = and i1 false, %76\n  %108 = icmp eq i32 %2, 0\n  %109 = and i1 false, %77\n  %110 = and i1 false, %78\n  %111 = and i1 false, %79\n  %112 = and i1 false, %80\n  %113 = and i1 false, %81\n  %114 = and i1 false, %82\n  %115 = and i1 false, %83\n  %116 = and i1 false, %84\n  %117 = and i1 false, %85\n  %118 = and i1 false, %86\n  %119 = or i64 %5, %26\n  %120 = getelementptr float, ptr addrspace(1) null, i64 %119\n  %121 = icmp slt i64 %119, 0\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] Assertion `I >= 0 && I < (NumOpElts * 2) && \"Out-of-bounds shuffle mask element\"' failed.",
    "body": "Live link: https://godbolt.org/z/nePMscjGr\r\n\r\nTest case:\r\n\r\n```ll\r\ndefine void @func(i32 %0) {\r\n  %2 = shl i32 %0, 0\r\n  %3 = sext i32 %2 to i64\r\n  %4 = shl i32 0, 0\r\n  %5 = sext i32 %4 to i64\r\n  %6 = or i32 0, 0\r\n  %7 = or i32 0, 0\r\n  %8 = zext i32 %6 to i64\r\n  %9 = zext i32 %7 to i64\r\n  %10 = zext i32 0 to i64\r\n  %11 = zext i32 0 to i64\r\n  %12 = zext i32 0 to i64\r\n  %13 = zext i32 0 to i64\r\n  %14 = zext i32 0 to i64\r\n  %15 = zext i32 0 to i64\r\n  %16 = zext i32 0 to i64\r\n  %17 = zext i32 0 to i64\r\n  %18 = zext i32 0 to i64\r\n  %19 = zext i32 0 to i64\r\n  %20 = zext i32 0 to i64\r\n  %21 = zext i32 0 to i64\r\n  %22 = zext i32 0 to i64\r\n  %23 = zext i32 0 to i64\r\n  %24 = zext i32 0 to i64\r\n  %25 = zext i32 0 to i64\r\n  %26 = zext i32 0 to i64\r\n  %27 = or i64 %3, 0\r\n  %28 = or i64 %3, %8\r\n  %29 = or i64 %3, %9\r\n  %30 = or i64 %3, %10\r\n  %31 = or i64 %3, %11\r\n  %32 = or i64 %3, %12\r\n  %33 = or i64 %3, %13\r\n  %34 = or i64 %3, %14\r\n  %35 = or i64 %3, %15\r\n  %36 = or i64 %3, %16\r\n  %37 = or i64 %3, %17\r\n  %38 = or i64 %3, %18\r\n  %39 = or i64 %3, %19\r\n  %40 = or i64 %3, %20\r\n  %41 = or i64 %3, %21\r\n  %42 = or i64 %3, %22\r\n  %43 = or i64 %3, %23\r\n  %44 = or i64 %3, %24\r\n  %45 = or i64 %3, %25\r\n  %46 = or i64 %3, 0\r\n  %47 = or i64 %3, 0\r\n  %48 = or i64 %3, 0\r\n  %49 = or i64 %3, 0\r\n  %50 = or i64 %3, 0\r\n  %51 = or i64 %3, 0\r\n  %52 = or i64 %3, 0\r\n  %53 = or i64 %3, 0\r\n  %54 = or i64 %3, 0\r\n  %55 = or i64 %3, 0\r\n  %56 = or i64 %3, 0\r\n  %57 = or i64 %3, 0\r\n  %58 = or i64 %3, 0\r\n  %59 = icmp slt i64 %28, 0\r\n  %60 = icmp slt i64 %29, 0\r\n  %61 = icmp slt i64 %30, 0\r\n  %62 = icmp slt i64 %31, 0\r\n  %63 = icmp slt i64 %32, 0\r\n  %64 = icmp slt i64 %33, 0\r\n  %65 = icmp slt i64 %34, 0\r\n  %66 = icmp slt i64 %35, 0\r\n  %67 = icmp slt i64 %36, 0\r\n  %68 = icmp slt i64 %37, 0\r\n  %69 = icmp slt i64 %38, 0\r\n  %70 = icmp slt i64 %39, 0\r\n  %71 = icmp slt i64 %40, 0\r\n  %72 = icmp slt i64 %41, 0\r\n  %73 = icmp slt i64 %42, 0\r\n  %74 = icmp slt i64 %43, 0\r\n  %75 = icmp slt i64 %44, 0\r\n  %76 = icmp slt i64 %45, 0\r\n  %77 = icmp slt i64 %46, 0\r\n  %78 = icmp slt i64 %47, 0\r\n  %79 = icmp slt i64 %48, 0\r\n  %80 = icmp slt i64 %49, 0\r\n  %81 = icmp slt i64 %50, 0\r\n  %82 = icmp slt i64 %51, 0\r\n  %83 = icmp slt i64 %52, 0\r\n  %84 = icmp slt i64 %53, 0\r\n  %85 = icmp slt i64 %54, 0\r\n  %86 = icmp slt i64 %55, 0\r\n  %87 = icmp slt i64 %56, 0\r\n  %88 = icmp slt i64 %57, 0\r\n  %89 = icmp slt i64 %58, 0\r\n  %90 = and i1 false, %59\r\n  %91 = and i1 false, %60\r\n  %92 = and i1 false, %61\r\n  %93 = and i1 false, %62\r\n  %94 = and i1 false, %63\r\n  %95 = and i1 false, %64\r\n  %96 = and i1 false, %65\r\n  %97 = and i1 false, %66\r\n  %98 = and i1 false, %67\r\n  %99 = and i1 false, %68\r\n  %100 = and i1 false, %69\r\n  %101 = and i1 false, %70\r\n  %102 = and i1 false, %71\r\n  %103 = and i1 false, %72\r\n  %104 = and i1 false, %73\r\n  %105 = and i1 false, %74\r\n  %106 = and i1 false, %75\r\n  %107 = and i1 false, %76\r\n  %108 = icmp eq i32 %2, 0\r\n  %109 = and i1 false, %77\r\n  %110 = and i1 false, %78\r\n  %111 = and i1 false, %79\r\n  %112 = and i1 false, %80\r\n  %113 = and i1 false, %81\r\n  %114 = and i1 false, %82\r\n  %115 = and i1 false, %83\r\n  %116 = and i1 false, %84\r\n  %117 = and i1 false, %85\r\n  %118 = and i1 false, %86\r\n  %119 = or i64 %5, %26\r\n  %120 = getelementptr float, ptr addrspace(1) null, i64 %119\r\n  %121 = icmp slt i64 %119, 0\r\n  ret void\r\n}\r\n```\r\n\r\nRunning via `opt --passes=slp-vectorizer -slp-vectorize-hor=false`:\r\n\r\n```sh\r\nopt: /root/llvm-project/llvm/lib/IR/Instructions.cpp:1853: bool isSingleSourceMaskImpl(llvm::ArrayRef<int>, int): Assertion `I >= 0 && I < (NumOpElts * 2) && \"Out-of-bounds shuffle mask element\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S --passes=slp-vectorizer -slp-vectorize-hor=false <source>\r\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\r\n2.\tRunning pass \"slp-vectorizer\" on function \"func\"\r\n #0 0x0000000004fa4138 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4fa4138)\r\n #1 0x0000000004fa18ac SignalHandler(int) Signals.cpp:0:0\r\n #2 0x000073f701e42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x000073f701e969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x000073f701e42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x000073f701e287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x000073f701e2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x000073f701e39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x0000000004d097f6 isSingleSourceMaskImpl(llvm::ArrayRef<int>, int) Instructions.cpp:0:0\r\n #9 0x0000000004d1097a llvm::ShuffleVectorInst::isExtractSubvectorMask(llvm::ArrayRef<int>, int, int&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d1097a)\r\n#10 0x000000000400fc53 (anonymous namespace)::BaseShuffleAnalysis::isIdentityMask(llvm::ArrayRef<int>, llvm::FixedVectorType const*, bool) SLPVectorizer.cpp:0:0\r\n#11 0x0000000004043781 (anonymous namespace)::BaseShuffleAnalysis::peekThroughShuffles(llvm::Value*&, llvm::SmallVectorImpl<int>&, bool) SLPVectorizer.cpp:0:0\r\n#12 0x000000000405bd21 llvm::Value* (anonymous namespace)::BaseShuffleAnalysis::createShuffle<llvm::Value*, llvm::slpvectorizer::BoUpSLP::ShuffleInstructionBuilder::ShuffleIRBuilder>(llvm::Value*, llvm::Value*, llvm::ArrayRef<int>, llvm::slpvectorizer::BoUpSLP::ShuffleInstructionBuilder::ShuffleIRBuilder&) SLPVectorizer.cpp:0:0\r\n#13 0x000000000405c50a llvm::slpvectorizer::BoUpSLP::ShuffleInstructionBuilder::createShuffle(llvm::Value*, llvm::Value*, llvm::ArrayRef<int>) (.isra.0) SLPVectorizer.cpp:0:0\r\n#14 0x000000000405ce73 llvm::slpvectorizer::BoUpSLP::ShuffleInstructionBuilder::finalize(llvm::ArrayRef<int>, llvm::ArrayRef<std::pair<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, unsigned int>>, unsigned int, llvm::function_ref<void (llvm::Value*&, llvm::SmallVectorImpl<int>&)>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x405ce73)\r\n#15 0x000000000405d3d9 llvm::slpvectorizer::BoUpSLP::vectorizeOperand(llvm::slpvectorizer::BoUpSLP::TreeEntry*, unsigned int, bool)::'lambda1'(llvm::Value*, llvm::ArrayRef<int>)::operator()(llvm::Value*, llvm::ArrayRef<int>) const SLPVectorizer.cpp:0:0\r\n#16 0x0000000004095c0a llvm::slpvectorizer::BoUpSLP::vectorizeOperand(llvm::slpvectorizer::BoUpSLP::TreeEntry*, unsigned int, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4095c0a)\r\n#17 0x0000000004097032 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4097032)\r\n#18 0x0000000004095aa8 llvm::slpvectorizer::BoUpSLP::vectorizeOperand(llvm::slpvectorizer::BoUpSLP::TreeEntry*, unsigned int, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4095aa8)\r\n#19 0x0000000004097294 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4097294)\r\n#20 0x00000000040b31cc llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::MapVector<llvm::Value*, llvm::SmallVector<llvm::Instruction*, 2u>, llvm::DenseMap<llvm::Value*, unsigned int, llvm::DenseMapInfo<llvm::Value*, void>, llvm::detail::DenseMapPair<llvm::Value*, unsigned int>>, llvm::SmallVector<std::pair<llvm::Value*, llvm::SmallVector<llvm::Instruction*, 2u>>, 0u>> const&, llvm::SmallVectorImpl<std::pair<llvm::Value*, llvm::Value*>>&, llvm::Instruction*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40b31cc)\r\n#21 0x00000000040b6d45 llvm::slpvectorizer::BoUpSLP::vectorizeTree() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40b6d45)\r\n#22 0x00000000040c3b2a llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40c3b2a)\r\n#23 0x00000000040c78a7 bool llvm::SLPVectorizerPass::vectorizeCmpInsts<std::reverse_iterator<llvm::CmpInst* const*>>(llvm::iterator_range<std::reverse_iterator<llvm::CmpInst* const*>>, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40c78a7)\r\n#24 0x00000000040cb5d0 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40cb5d0)\r\n#25 0x00000000040d1d49 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n#26 0x00000000040d29fb llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40d29fb)\r\n...\r\n```\r\n\r\nBisected to f3d2609af3031ddb54030548e86335f295cf49ca / https://github.com/llvm/llvm-project/pull/104144",
    "author": "rupprecht",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "dklimkin",
        "body": "Confirmed this resolved the issue. Thanks!"
      }
    ]
  },
  "verified": true
}