{
  "bug_id": "92887",
  "issue_url": "https://github.com/llvm/llvm-project/issues/92887",
  "bug_type": "miscompilation",
  "base_commit": "f78b1a40864470f7eb30dfda44a6ea8e845346a5",
  "knowledge_cutoff": "2024-05-21T09:38:14Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "263224e4481b0850539a93a272184aac4abe86d4",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp": [
        [
          2901,
          2907
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp": [
        "InstCombinerImpl::visitShuffleVectorInst"
      ]
    }
  },
  "patch": "commit 263224e4481b0850539a93a272184aac4abe86d4\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Tue May 21 14:57:19 2024 +0200\n\n    [InstCombine] Require poison operand in canEvaluateShuffled transform\n    \n    This transform works on single-source shuffles, which require that\n    the second operand is poison, not undef. Otherwise we may convert\n    undef to poison.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/92887.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp b/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\nindex 99f1f8eb34bb..745ccbfe9dc7 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\n@@ -2901,7 +2901,7 @@ Instruction *InstCombinerImpl::visitShuffleVectorInst(ShuffleVectorInst &SVI) {\n   if (Instruction *I = foldIdentityPaddedShuffles(SVI))\n     return I;\n \n-  if (match(RHS, m_Undef()) && canEvaluateShuffled(LHS, Mask)) {\n+  if (match(RHS, m_Poison()) && canEvaluateShuffled(LHS, Mask)) {\n     Value *V = evaluateInDifferentElementOrder(LHS, Mask, Builder);\n     return replaceInstUsesWith(SVI, V);\n   }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/vec_shuffle.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "blend_elements_from_load",
          "test_body": "define <4 x i16> @blend_elements_from_load(ptr align 8 %_0) {\n  %load = load <3 x i16>, ptr %_0, align 8\n  %rv = shufflevector <3 x i16> <i16 0, i16 undef, i16 undef>, <3 x i16> %load, <4 x i32> <i32 0, i32 1, i32 3, i32 5>\n  ret <4 x i16> %rv\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Miscompile with opt -passes=\"instcombine\"",
    "body": "llvm commit: 502bea25bdc07d1\r\n\r\nReproduce with:\r\n```opt -passes=\"instcombine\" bbi-95633_2.ll -S -o -```\r\n\r\nResult:\r\n```\r\ndefine i16 @foo() {\r\nentry:\r\n  store i16 0, ptr @bit, align 2\r\n  store i16 0, ptr getelementptr inbounds (i8, ptr @bit, i64 2), align 2\r\n  store i16 0, ptr getelementptr inbounds (i8, ptr @bit, i64 4), align 2\r\n  store i16 0, ptr getelementptr inbounds (i8, ptr @bit, i64 6), align 2\r\n  store i16 2, ptr getelementptr inbounds (i8, ptr @bit, i64 8), align 2\r\n  store i16 0, ptr getelementptr inbounds (i8, ptr @bit, i64 10), align 2\r\n  ret i16 poison\r\n}\r\n```\r\nNote the poison return value which I think is wrong.\r\n\r\nBefore commit e93d324adb4ff8\r\n```\r\n[InstCombine] Preserve poison in evaluateInDifferentElementOrder()\r\n\r\nDon't unnecessarily replace poison with undef.\r\n```\r\nwe instead got\r\n```\r\ndefine i16 @foo() {\r\nentry:\r\n  store i16 0, ptr @bit, align 2\r\n  store i16 0, ptr getelementptr inbounds (%struct.bit, ptr @bit, i64 0, i32 1), align 2\r\n  store i16 0, ptr getelementptr inbounds (%struct.bit, ptr @bit, i64 0, i32 2), align 2\r\n  store i16 0, ptr getelementptr inbounds (%struct.bit, ptr @bit, i64 0, i32 3), align 2\r\n  store i16 2, ptr getelementptr inbounds (%struct.bit, ptr @bit, i64 0, i32 4), align 2\r\n  store i16 0, ptr getelementptr inbounds (%struct.bit, ptr @bit, i64 0, i32 5), align 2\r\n  ret i16 1\r\n}\r\n```\r\nwhere we return 1 instead of poison.\r\n\r\nI tried to use Alive2 on the input/output in\r\n https://alive2.llvm.org/ce/z/1GVkRh\r\nand it says\r\n```\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n```\r\n\r\n[bbi-95633_2.ll.gz](https://github.com/llvm/llvm-project/files/15387836/bbi-95633_2.ll.gz)\r\n",
    "author": "mikaelholmen",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "mikaelholmen",
        "body": "@nikic : Any idea about this?"
      },
      {
        "author": "artagnon",
        "body": "Here's a reduced test case:\r\n\r\n```llvm\r\n; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5\r\n; RUN: opt -passes=instcombine -S %s | FileCheck %s\r\n\r\n%struct.widget = type { i16, i16, i16, i16, i16, i16 }\r\n\r\n; Miscompile. Correct output: 1, incorrect output: poison.\r\ndefine i16 @pr92887(ptr %p, i16 %x, i16 %y) {\r\n; CHECK-LABEL: define i16 @pr92887(\r\n; CHECK-SAME: ptr [[P:%.*]], i16 [[X:%.*]], i16 [[Y:%.*]]) {\r\n; CHECK-NEXT:    store i16 0, ptr [[P]], align 2\r\n; CHECK-NEXT:    [[P_REPACK1:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 2\r\n; CHECK-NEXT:    store i16 0, ptr [[P_REPACK1]], align 2\r\n; CHECK-NEXT:    [[P_REPACK2:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 4\r\n; CHECK-NEXT:    store i16 0, ptr [[P_REPACK2]], align 2\r\n; CHECK-NEXT:    [[P_REPACK3:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 6\r\n; CHECK-NEXT:    store i16 0, ptr [[P_REPACK3]], align 2\r\n; CHECK-NEXT:    [[P_REPACK4:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 8\r\n; CHECK-NEXT:    store i16 2, ptr [[P_REPACK4]], align 2\r\n; CHECK-NEXT:    [[P_REPACK5:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 10\r\n; CHECK-NEXT:    store i16 0, ptr [[P_REPACK5]], align 2\r\n; CHECK-NEXT:    ret i16 poison\r\n;\r\n  store %struct.widget { i16 0, i16 0, i16 0, i16 0, i16 2, i16 0 }, ptr %p\r\n  %insert.y = insertelement <2 x i16> zeroinitializer, i16 %y, i64 0\r\n  %insert.x = insertelement <2 x i16> %insert.y, i16 %x, i64 1\r\n  %shufflevector = shufflevector <2 x i16> %insert.x, <2 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>\r\n  %extract = extractelement <4 x i16> %shufflevector, i32 2 ; undef\r\n  %and = and i16 %extract, 0 ; 0\r\n  %gep = getelementptr %struct.widget, ptr %p, i32 0, i32 4\r\n  %load = load i16, ptr %gep ; 2\r\n  %or = or i16 %and, %load ; 2\r\n  %ashr = ashr i16 %or, 1 ; 1\r\n  ret i16 %ashr ; 1\r\n}\r\n```\r\n\r\nEDIT: Sorry, Alive2 verifies the transformation as correct."
      },
      {
        "author": "nikic",
        "body": "The problematic transform is:\r\n```llvm\r\ndefine i16 @src(<2 x i16> %v) {\r\n  %v0 = extractelement <2 x i16> %v, i64 0\r\n  %v0lo = and i16 %v0, 1\r\n  %v1 = extractelement <2 x i16> %v, i64 1\r\n  %v1lo = and i16 %v1, 1\r\n  %ins1 = insertelement <4 x i16> poison, i16 %v0lo, i64 0\r\n  %ins2 = insertelement <4 x i16> %ins1, i16 %v1lo, i64 1\r\n  %shuf = shufflevector <4 x i16> %ins2, <4 x i16> <i16 poison, i16 poison, i16 undef, i16 undef>, <4 x i32> <i32 0, i32 1, i32 6, i32 7>\r\n  %extract = extractelement <4 x i16> %shuf, i32 2\r\n  ret i16 %extract\r\n}\r\n```\r\nTo:\r\n```\r\ndefine i16 @src(<2 x i16> %v) {\r\n  %v0 = extractelement <2 x i16> %v, i64 0\r\n  %v0lo = and i16 %v0, 1\r\n  %v1 = extractelement <2 x i16> %v, i64 1\r\n  %v1lo = and i16 %v1, 1\r\n  %1 = insertelement <4 x i16> poison, i16 %v0lo, i64 0\r\n  %shuf = insertelement <4 x i16> %1, i16 %v1lo, i64 1\r\n  %extract = extractelement <4 x i16> %shuf, i32 2\r\n  ret i16 %extract\r\n}\r\n```\r\n\r\nAt a glance, the problem is likely that https://github.com/llvm/llvm-project/blob/e93d324adb4ff80dcbf0e5b678ed3342350eb2de/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp#L2881 should be matching m_Poison, not m_Undef, otherwise it's not a real single-source shuffle."
      },
      {
        "author": "mikaelholmen",
        "body": "Thanks for the quick fix!\r\nI've verified that it solves the problem we saw."
      },
      {
        "author": "nikic",
        "body": "As a bonus, fixed a similar miscompile in https://github.com/llvm/llvm-project/commit/ecd269e8305330c185bbedbd5a59e887122333ba."
      },
      {
        "author": "nikic",
        "body": "Another one in https://github.com/llvm/llvm-project/commit/8f1c984325bd679b2634a6173db69548da87ac71."
      },
      {
        "author": "nikic",
        "body": "And... one more in https://github.com/llvm/llvm-project/commit/d0e0205bfc5a147f8744a176a10f185af7520c26."
      },
      {
        "author": "mikaelholmen",
        "body": "Nice, four fixes from just one issue! :)"
      }
    ]
  }
}