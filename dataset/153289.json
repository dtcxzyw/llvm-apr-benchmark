{
  "bug_id": "153289",
  "issue_url": "https://github.com/llvm/llvm-project/issues/153289",
  "bug_type": "crash",
  "base_commit": "0f6d3ad0feb42fbe36e1878fe9ffff67195c50d2",
  "knowledge_cutoff": "2025-08-12T20:46:33Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "dd5ba694bde6c92259c518b9eb2888163a812433",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          5689,
          5695
        ],
        [
          20727,
          20741
        ],
        [
          20748,
          20755
        ],
        [
          20783,
          20789
        ],
        [
          21048,
          21056
        ],
        [
          21293,
          21298
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::BlockScheduling::calculateDependencies",
        "BoUpSLP::BlockScheduling::initScheduleData",
        "BoUpSLP::BlockScheduling::tryScheduleBundle"
      ]
    }
  },
  "patch": "commit dd5ba694bde6c92259c518b9eb2888163a812433\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Aug 13 05:57:07 2025 -0700\n\n    [SLP]Recalculate deps for potential control-dependent schedule data\n    \n    After clearing the dependencies in copyable data, need to recalculate\n    dependencies for the original ScheduleData, if it can be marked as\n    control dependent.\n    \n    Fixes #153289\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 98011174bd70..a3cb4d138789 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -5689,7 +5689,8 @@ private:\n     /// Updates the dependency information of a bundle and of all instructions/\n     /// bundles which depend on the original bundle.\n     void calculateDependencies(ScheduleBundle &Bundle, bool InsertInReadyList,\n-                               BoUpSLP *SLP);\n+                               BoUpSLP *SLP,\n+                               ArrayRef<ScheduleData *> ControlDeps = {});\n \n     /// Sets all instruction in the scheduling region to un-scheduled.\n     void resetSchedule();\n@@ -20727,15 +20728,21 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n   LLVM_DEBUG(dbgs() << \"SLP:  bundle: \" << *S.getMainOp() << \"\\n\");\n \n   auto TryScheduleBundleImpl = [=](bool ReSchedule, ScheduleBundle &Bundle) {\n-    // Clear deps or reculate the region, if the memory instruction is a\n-    // copyable. It may have memory deps, which must be reaculated.\n+    // Clear deps or recalculate the region, if the memory instruction is a\n+    // copyable. It may have memory deps, which must be recalculated.\n+    SmallVector<ScheduleData *> ControlDependentMembers;\n     auto CheckIfNeedToClearDeps = [&](ScheduleBundle &Bundle) {\n       SmallDenseMap<std::pair<Instruction *, Value *>, unsigned> UserOpToNumOps;\n       for (ScheduleEntity *SE : Bundle.getBundle()) {\n         if (ScheduleCopyableData *SD = dyn_cast<ScheduleCopyableData>(SE)) {\n           if (ScheduleData *BundleMember = getScheduleData(SD->getInst());\n-              BundleMember && BundleMember->hasValidDependencies())\n+              BundleMember && BundleMember->hasValidDependencies()) {\n             BundleMember->clearDirectDependencies();\n+            if (RegionHasStackSave ||\n+                !isGuaranteedToTransferExecutionToSuccessor(\n+                    BundleMember->getInst()))\n+              ControlDependentMembers.push_back(BundleMember);\n+          }\n           continue;\n         }\n         auto *SD = cast<ScheduleData>(SE);\n@@ -20748,8 +20755,12 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n           if (auto *Op = dyn_cast<Instruction>(U.get());\n               Op && areAllOperandsReplacedByCopyableData(SD->getInst(), Op,\n                                                          *SLP, NumOps)) {\n-            if (ScheduleData *OpSD = getScheduleData(Op))\n+            if (ScheduleData *OpSD = getScheduleData(Op)) {\n               OpSD->clearDirectDependencies();\n+              if (RegionHasStackSave ||\n+                  !isGuaranteedToTransferExecutionToSuccessor(OpSD->getInst()))\n+                ControlDependentMembers.push_back(OpSD);\n+            }\n           }\n         }\n       }\n@@ -20783,7 +20794,8 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n         CheckIfNeedToClearDeps(Bundle);\n       LLVM_DEBUG(dbgs() << \"SLP: try schedule bundle \" << Bundle << \" in block \"\n                         << BB->getName() << \"\\n\");\n-      calculateDependencies(Bundle, /*InsertInReadyList=*/!ReSchedule, SLP);\n+      calculateDependencies(Bundle, /*InsertInReadyList=*/!ReSchedule, SLP,\n+                            ControlDependentMembers);\n     }\n \n     if (ReSchedule) {\n@@ -21048,9 +21060,9 @@ void BoUpSLP::BlockScheduling::initScheduleData(Instruction *FromI,\n   }\n }\n \n-void BoUpSLP::BlockScheduling::calculateDependencies(ScheduleBundle &Bundle,\n-                                                     bool InsertInReadyList,\n-                                                     BoUpSLP *SLP) {\n+void BoUpSLP::BlockScheduling::calculateDependencies(\n+    ScheduleBundle &Bundle, bool InsertInReadyList, BoUpSLP *SLP,\n+    ArrayRef<ScheduleData *> ControlDeps) {\n   SmallVector<ScheduleEntity *> WorkList;\n   auto ProcessNode = [&](ScheduleEntity *SE) {\n     if (auto *CD = dyn_cast<ScheduleCopyableData>(SE)) {\n@@ -21293,6 +21305,7 @@ void BoUpSLP::BlockScheduling::calculateDependencies(ScheduleBundle &Bundle,\n   };\n \n   WorkList.push_back(Bundle.getBundle().front());\n+  WorkList.append(ControlDeps.begin(), ControlDeps.end());\n   SmallPtrSet<ScheduleBundle *, 16> Visited;\n   while (!WorkList.empty()) {\n     ScheduleEntity *SD = WorkList.pop_back_val();\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/control-dependent-schedule.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(i32 %0, i32 %1) {\n;\nentry:\n  %k = alloca [4 x i32], align 16\n  %add1 = add i32 %0, %1\n  %sub2 = add i32 %add1, -1\n  %call = tail call i32 (ptr, ...) @printf(ptr null, i32 %add1)\n  %add2 = add i32 %1, -1\n  %sub3 = add i32 %add2, %call\n  %add4 = add i32 %sub3, %0\n  store i32 %add4, ptr %k, align 16\n  %arrayinit.element = getelementptr i8, ptr %k, i64 4\n  store i32 0, ptr %arrayinit.element, align 4\n  %arrayinit.element5 = getelementptr i8, ptr %k, i64 8\n  %add7 = add i32 %add2, %sub2\n  %sub8 = add i32 %add7, %0\n  store i32 %sub8, ptr %arrayinit.element5, align 8\n  %arrayinit.element9 = getelementptr i8, ptr %k, i64 12\n  %add13 = add i32 %1, 1\n  %add10 = add i32 %add13, %0\n  %add11 = add i32 %add10, %add1\n  %add12 = add i32 %add11, %0\n  store i32 %add12, ptr %arrayinit.element9, align 4\n  %call15 = call i32 (ptr, ...) @printf(ptr null, ptr %k)\n  ret i32 %call15\n}\n\ndeclare i32 @printf(ptr, ...)"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O{s,2,3} on x86_64-linux-gnu: Assertion `hasValidDependencies() && \"increment of unscheduled deps would be meaningless\"' failed",
    "body": "Compiler Explorer: https://godbolt.org/z/xWvWKe3fj\n\nNote:\n- fails: trunk\n- works: 20.1.0 and earlier (so a recent regression)\n\n```\n[569] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 44f41f55b4df5ec490df0d69e046b2d1a58acaeb)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[570] % \n[570] % clangtk -O3 small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4773: int llvm::slpvectorizer::BoUpSLP::ScheduleData::incrementUnscheduledDeps(int): Assertion `hasValidDependencies() && \"increment of unscheduled deps would be meaningless\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O3 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/bug138/red1 -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/bug138/red1 -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -ferror-limit 19 -fmessage-length=130 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-6dbb88.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,chr,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O3>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x0000563336e85430 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4263430)\n #1 0x0000563336e820df llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x42600df)\n #2 0x0000563336e82232 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007f2abf190520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f2abf1e49fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f2abf1e49fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f2abf1e49fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f2abf190476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f2abf1767f3 abort ./stdlib/abort.c:81:7\n #9 0x00007f2abf17671b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f2abf187e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x0000563338a0edf4 auto void llvm::slpvectorizer::BoUpSLP::BlockScheduling::schedule<llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>>(llvm::slpvectorizer::BoUpSLP const&, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>&)::'lambda'(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>)::operator()(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>) const::'lambda'(llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>*, bool)::operator()<llvm::slpvectorizer::BoUpSLP::ScheduleData>(llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>*, bool) const SLPVectorizer.cpp:0:0\n#12 0x0000563338a11f92 void llvm::slpvectorizer::BoUpSLP::BlockScheduling::schedule<llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>>(llvm::slpvectorizer::BoUpSLP const&, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>&)::'lambda'(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>)::operator()(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>) const SLPVectorizer.cpp:0:0\n#13 0x0000563338a12def llvm::slpvectorizer::BoUpSLP::BlockScheduling::tryScheduleBundle(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP*, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&)::'lambda0'(bool, llvm::slpvectorizer::BoUpSLP::ScheduleBundle&)::operator()(bool, llvm::slpvectorizer::BoUpSLP::ScheduleBundle&) const SLPVectorizer.cpp:0:0\n#14 0x0000563338a14217 llvm::slpvectorizer::BoUpSLP::BlockScheduling::tryScheduleBundle(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP*, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) SLPVectorizer.cpp:0:0\n#15 0x0000563338a15cbe llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df3cbe)\n#16 0x0000563338a17ed9 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df5ed9)\n#17 0x0000563338a17ed9 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df5ed9)\n#18 0x0000563338a17237 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df5237)\n#19 0x0000563338a1a360 llvm::slpvectorizer::BoUpSLP::buildTree(llvm::ArrayRef<llvm::Value*>) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df8360)\n#20 0x0000563338a5c1ba llvm::SLPVectorizerPass::vectorizeStoreChain(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, unsigned int, unsigned int, unsigned int&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e3a1ba)\n#21 0x0000563338a5e014 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&)::'lambda'(std::map<long, unsigned int, std::less<long>, std::allocator<std::pair<long const, unsigned int>>> const&)::operator()(std::map<long, unsigned int, std::less<long>, std::allocator<std::pair<long const, unsigned int>>> const&) const SLPVectorizer.cpp:0:0\n#22 0x0000563338a5ff00 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e3df00)\n#23 0x0000563338a6081b llvm::SLPVectorizerPass::vectorizeStoreChains(llvm::slpvectorizer::BoUpSLP&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e3e81b)\n#24 0x0000563338a61d95 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#25 0x0000563338a62981 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e40981)\n#26 0x0000563337f6caf6 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x534aaf6)\n#27 0x00005633367c6e57 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba4e57)\n#28 0x0000563333f1b836 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f9836)\n#29 0x00005633367c7379 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba5379)\n#30 0x0000563333f1bf26 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f9f26)\n#31 0x00005633367c5194 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba3194)\n#32 0x000056333712bd13 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#33 0x00005633371302b3 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x450e2b3)\n#34 0x000056333782a05f clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4c0805f)\n#35 0x000056333928da0c clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x666ba0c)\n#36 0x0000563337b47b59 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f25b59)\n#37 0x0000563337ac34c5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4ea14c5)\n#38 0x0000563337c38628 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5016628)\n#39 0x0000563333a9bd58 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe79d58)\n#40 0x0000563333a9235a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#41 0x0000563333a96e14 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe74e14)\n#42 0x000056333396306b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd4106b)\n#43 0x00007f2abf177d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#44 0x00007f2abf177e40 call_init ./csu/../csu/libc-start.c:128:20\n#45 0x00007f2abf177e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#46 0x0000563333a91a85 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe6fa85)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 44f41f55b4df5ec490df0d69e046b2d1a58acaeb)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-859782.c\nclangtk: note: diagnostic msg: /tmp/small-859782.sh\nclangtk: note: diagnostic msg: \n\n********************\n[571] % \n[571] % cat small.c\nint printf(const char *, ...);\nint a, b, d, g, c, f;\nint main() {\n  int h, i, j;\n  i = c;\n  for (int e = 0; e < 1; e++)\n    if (a)\n      b = e;\n  j = d + i - 1;\n  g = printf(\"%d\", j);\n  h = j + 3;\n  int k[] = {g + i - 1 + j, 0, f + j + i - 1, h + j + i + c};\n  if (a)\n    printf(\"%p\", (void *)k);\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}