{
  "bug_id": "107569",
  "issue_url": "https://github.com/llvm/llvm-project/issues/107569",
  "bug_type": "crash",
  "base_commit": "b0428870dae980af84e50dfa3ee6ed2165998678",
  "knowledge_cutoff": "2024-09-06T11:56:19Z",
  "lit_test_dir": [
    "llvm/test/Transforms/DeadArgElim"
  ],
  "hints": {
    "fix_commit": "5978bb2936d9a71d8e6891c640a36be760b569d3",
    "components": [
      "DeadArgumentElimination"
    ],
    "bug_location_lineno": {
      "llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h": [
        [
          106,
          118
        ],
        [
          131,
          142
        ]
      ],
      "llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp": [
        [
          87,
          97
        ],
        [
          280,
          286
        ],
        [
          496,
          502
        ],
        [
          504,
          510
        ],
        [
          522,
          550
        ],
        [
          555,
          562
        ],
        [
          564,
          577
        ],
        [
          610,
          620
        ],
        [
          628,
          646
        ],
        [
          680,
          693
        ],
        [
          696,
          701
        ],
        [
          710,
          716
        ],
        [
          734,
          741
        ],
        [
          807,
          813
        ],
        [
          1109,
          1134
        ],
        [
          1149,
          1156
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp": [
        "DeadArgumentEliminationPass::isLive",
        "DeadArgumentEliminationPass::markLive",
        "DeadArgumentEliminationPass::markValue",
        "DeadArgumentEliminationPass::propagateVirtMustcallLiveness",
        "DeadArgumentEliminationPass::removeDeadArgumentsFromCallers",
        "DeadArgumentEliminationPass::removeDeadStuffFromFunction",
        "DeadArgumentEliminationPass::run",
        "DeadArgumentEliminationPass::surveyFunction",
        "isMustTailCalleeAnalyzable"
      ]
    }
  },
  "patch": "commit 5978bb2936d9a71d8e6891c640a36be760b569d3\nAuthor: u4f3 <ricoafoat@gmail.com>\nDate:   Thu Apr 10 22:08:09 2025 +0800\n\n    [DeadArgElim] fix verifier failure when changing musttail's function signature (#127366)\n    \n    This commit is for #107569 and #126817.\n    \n    Stop changing musttail's caller and callee's function signature when\n    calling convention is not swifttailcc nor tailcc. Verifier makes sure\n    musttail's caller and callee shares exactly the same signature, see\n    commit 9ff2eb1 and #54964.\n    \n    Otherwise just make sure the return type is the same and then process\n    musttail like usual calls.\n    \n    close #107569, #126817\n\ndiff --git a/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h b/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h\nindex 63e1ad043d49..efa9c4bdc496 100644\n--- a/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h\n+++ b/llvm/include/llvm/Transforms/IPO/DeadArgumentElimination.h\n@@ -106,13 +106,16 @@ public:\n   UseMap Uses;\n \n   using LiveSet = std::set<RetOrArg>;\n-  using LiveFuncSet = std::set<const Function *>;\n+  using FuncSet = std::set<const Function *>;\n \n   /// This set contains all values that have been determined to be live.\n   LiveSet LiveValues;\n \n-  /// This set contains all values that are cannot be changed in any way.\n-  LiveFuncSet LiveFunctions;\n+  /// This set contains all functions that cannot be changed in any way.\n+  FuncSet FrozenFunctions;\n+\n+  /// This set contains all functions that cannot change return type;\n+  FuncSet FrozenRetTyFunctions;\n \n   using UseVector = SmallVector<RetOrArg, 5>;\n \n@@ -131,12 +134,13 @@ private:\n   void markValue(const RetOrArg &RA, Liveness L,\n                  const UseVector &MaybeLiveUses);\n   void markLive(const RetOrArg &RA);\n-  void markLive(const Function &F);\n+  void markFrozen(const Function &F);\n+  void markRetTyFrozen(const Function &F);\n+  bool markFnOrRetTyFrozenOnMusttail(const Function &F);\n   void propagateLiveness(const RetOrArg &RA);\n   bool removeDeadStuffFromFunction(Function *F);\n   bool deleteDeadVarargs(Function &F);\n   bool removeDeadArgumentsFromCallers(Function &F);\n-  void propagateVirtMustcallLiveness(const Module &M);\n };\n \n } // end namespace llvm\ndiff --git a/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp b/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp\nindex ed93b4491c50..2e2687a5ff6e 100644\n--- a/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp\n+++ b/llvm/lib/Transforms/IPO/DeadArgumentElimination.cpp\n@@ -87,11 +87,6 @@ public:\n   virtual bool shouldHackArguments() const { return false; }\n };\n \n-bool isMustTailCalleeAnalyzable(const CallBase &CB) {\n-  assert(CB.isMustTailCall());\n-  return CB.getCalledFunction() && !CB.getCalledFunction()->isDeclaration();\n-}\n-\n } // end anonymous namespace\n \n char DAE::ID = 0;\n@@ -280,7 +275,7 @@ bool DeadArgumentEliminationPass::removeDeadArgumentsFromCallers(Function &F) {\n   // they are fully alive (e.g., called indirectly) and except for the fragile\n   // (variadic) ones. In these cases, we may still be able to improve their\n   // statically known call sites.\n-  if ((F.hasLocalLinkage() && !LiveFunctions.count(&F)) &&\n+  if ((F.hasLocalLinkage() && !FrozenFunctions.count(&F)) &&\n       !F.getFunctionType()->isVarArg())\n     return false;\n \n@@ -496,7 +491,7 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n   // particular register and memory layout.\n   if (F.getAttributes().hasAttrSomewhere(Attribute::InAlloca) ||\n       F.getAttributes().hasAttrSomewhere(Attribute::Preallocated)) {\n-    markLive(F);\n+    markFrozen(F);\n     return;\n   }\n \n@@ -504,7 +499,7 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n   // otherwise rely on the frame layout in a way that this analysis will not\n   // see.\n   if (F.hasFnAttribute(Attribute::Naked)) {\n-    markLive(F);\n+    markFrozen(F);\n     return;\n   }\n \n@@ -522,29 +517,17 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n   // MaybeLive. Initialized to a list of RetCount empty lists.\n   RetUses MaybeLiveRetUses(RetCount);\n \n-  bool HasMustTailCalls = false;\n   for (const BasicBlock &BB : F) {\n-    // If we have any returns of `musttail` results - the signature can't\n-    // change\n-    if (const auto *TC = BB.getTerminatingMustTailCall()) {\n-      HasMustTailCalls = true;\n-      // In addition, if the called function is not locally defined (or unknown,\n-      // if this is an indirect call), we can't change the callsite and thus\n-      // can't change this function's signature either.\n-      if (!isMustTailCalleeAnalyzable(*TC)) {\n-        markLive(F);\n+    if (BB.getTerminatingMustTailCall()) {\n+      LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - \" << F.getName()\n+                        << \" has musttail calls\\n\");\n+      if (markFnOrRetTyFrozenOnMusttail(F))\n         return;\n-      }\n     }\n   }\n \n-  if (HasMustTailCalls) {\n-    LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - \" << F.getName()\n-                      << \" has musttail calls\\n\");\n-  }\n-\n   if (!F.hasLocalLinkage() && (!ShouldHackArguments || F.isIntrinsic())) {\n-    markLive(F);\n+    markFrozen(F);\n     return;\n   }\n \n@@ -555,8 +538,6 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n   // of them turn out to be live.\n   unsigned NumLiveRetVals = 0;\n \n-  bool HasMustTailCallers = false;\n-\n   // Loop all uses of the function.\n   for (const Use &U : F.uses()) {\n     // If the function is PASSED IN as an argument, its address has been\n@@ -564,14 +545,16 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n     const auto *CB = dyn_cast<CallBase>(U.getUser());\n     if (!CB || !CB->isCallee(&U) ||\n         CB->getFunctionType() != F.getFunctionType()) {\n-      markLive(F);\n+      markFrozen(F);\n       return;\n     }\n \n-    // The number of arguments for `musttail` call must match the number of\n-    // arguments of the caller\n-    if (CB->isMustTailCall())\n-      HasMustTailCallers = true;\n+    if (CB->isMustTailCall()) {\n+      LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - \" << F.getName()\n+                        << \" has musttail callers\\n\");\n+      if (markFnOrRetTyFrozenOnMusttail(F))\n+        return;\n+    }\n \n     // If we end up here, we are looking at a direct call to our function.\n \n@@ -610,11 +593,6 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n     }\n   }\n \n-  if (HasMustTailCallers) {\n-    LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - \" << F.getName()\n-                      << \" has musttail callers\\n\");\n-  }\n-\n   // Now we've inspected all callers, record the liveness of our return values.\n   for (unsigned Ri = 0; Ri != RetCount; ++Ri)\n     markValue(createRet(&F, Ri), RetValLiveness[Ri], MaybeLiveRetUses[Ri]);\n@@ -628,19 +606,12 @@ void DeadArgumentEliminationPass::surveyFunction(const Function &F) {\n   for (Function::const_arg_iterator AI = F.arg_begin(), E = F.arg_end();\n        AI != E; ++AI, ++ArgI) {\n     Liveness Result;\n-    if (F.getFunctionType()->isVarArg() || HasMustTailCallers ||\n-        HasMustTailCalls) {\n+    if (F.getFunctionType()->isVarArg()) {\n       // Variadic functions will already have a va_arg function expanded inside\n       // them, making them potentially very sensitive to ABI changes resulting\n       // from removing arguments entirely, so don't. For example AArch64 handles\n       // register and stack HFAs very differently, and this is reflected in the\n       // IR which has already been generated.\n-      //\n-      // `musttail` calls to this function restrict argument removal attempts.\n-      // The signature of the caller must match the signature of the function.\n-      //\n-      // `musttail` calls in this function prevents us from changing its\n-      // signature\n       Result = Live;\n     } else {\n       // See what the effect of this use is (recording any uses that cause\n@@ -680,14 +651,30 @@ void DeadArgumentEliminationPass::markValue(const RetOrArg &RA, Liveness L,\n   }\n }\n \n+/// Return true if we freeze the whole function.\n+/// If the calling convention is not swifttailcc or tailcc, the caller and\n+/// callee of musttail must have exactly the same signature. Otherwise we\n+/// only needs to guarantee they have the same return type.\n+bool DeadArgumentEliminationPass::markFnOrRetTyFrozenOnMusttail(\n+    const Function &F) {\n+  if (F.getCallingConv() != CallingConv::SwiftTail ||\n+      F.getCallingConv() != CallingConv::Tail) {\n+    markFrozen(F);\n+    return true;\n+  } else {\n+    markRetTyFrozen(F);\n+    return false;\n+  }\n+}\n+\n /// Mark the given Function as alive, meaning that it cannot be changed in any\n /// way. Additionally, mark any values that are used as this function's\n /// parameters or by its return values (according to Uses) live as well.\n-void DeadArgumentEliminationPass::markLive(const Function &F) {\n-  LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - Intrinsically live fn: \"\n+void DeadArgumentEliminationPass::markFrozen(const Function &F) {\n+  LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - frozen fn: \"\n                     << F.getName() << \"\\n\");\n-  // Mark the function as live.\n-  LiveFunctions.insert(&F);\n+  // Mark the function as frozen.\n+  FrozenFunctions.insert(&F);\n   // Mark all arguments as live.\n   for (unsigned ArgI = 0, E = F.arg_size(); ArgI != E; ++ArgI)\n     propagateLiveness(createArg(&F, ArgI));\n@@ -696,6 +683,12 @@ void DeadArgumentEliminationPass::markLive(const Function &F) {\n     propagateLiveness(createRet(&F, Ri));\n }\n \n+void DeadArgumentEliminationPass::markRetTyFrozen(const Function &F) {\n+  LLVM_DEBUG(dbgs() << \"DeadArgumentEliminationPass - frozen return type fn: \"\n+                    << F.getName() << \"\\n\");\n+  FrozenRetTyFunctions.insert(&F);\n+}\n+\n /// Mark the given return value or argument as live. Additionally, mark any\n /// values that are used by this value (according to Uses) live as well.\n void DeadArgumentEliminationPass::markLive(const RetOrArg &RA) {\n@@ -710,7 +703,7 @@ void DeadArgumentEliminationPass::markLive(const RetOrArg &RA) {\n }\n \n bool DeadArgumentEliminationPass::isLive(const RetOrArg &RA) {\n-  return LiveFunctions.count(RA.F) || LiveValues.count(RA);\n+  return FrozenFunctions.count(RA.F) || LiveValues.count(RA);\n }\n \n /// Given that RA is a live value, propagate it's liveness to any other values\n@@ -734,8 +727,8 @@ void DeadArgumentEliminationPass::propagateLiveness(const RetOrArg &RA) {\n /// Transform the function and all the callees of the function to not have these\n /// arguments and return values.\n bool DeadArgumentEliminationPass::removeDeadStuffFromFunction(Function *F) {\n-  // Don't modify fully live functions\n-  if (LiveFunctions.count(F))\n+  // Don't modify frozen functions\n+  if (FrozenFunctions.count(F))\n     return false;\n \n   // Start by computing a new prototype for the function, which is the same as\n@@ -807,7 +800,8 @@ bool DeadArgumentEliminationPass::removeDeadStuffFromFunction(Function *F) {\n   // performance win, so the second option can just be used always for now.\n   //\n   // This should be revisited if 'returned' is ever applied more liberally.\n-  if (RetTy->isVoidTy() || HasLiveReturnedArg) {\n+  if (RetTy->isVoidTy() || HasLiveReturnedArg ||\n+      FrozenRetTyFunctions.count(F)) {\n     NRetTy = RetTy;\n   } else {\n     // Look at each of the original return values individually.\n@@ -1109,26 +1103,6 @@ bool DeadArgumentEliminationPass::removeDeadStuffFromFunction(Function *F) {\n   return true;\n }\n \n-void DeadArgumentEliminationPass::propagateVirtMustcallLiveness(\n-    const Module &M) {\n-  // If a function was marked \"live\", and it has musttail callers, they in turn\n-  // can't change either.\n-  LiveFuncSet NewLiveFuncs(LiveFunctions);\n-  while (!NewLiveFuncs.empty()) {\n-    LiveFuncSet Temp;\n-    for (const auto *F : NewLiveFuncs)\n-      for (const auto *U : F->users())\n-        if (const auto *CB = dyn_cast<CallBase>(U))\n-          if (CB->isMustTailCall())\n-            if (!LiveFunctions.count(CB->getParent()->getParent()))\n-              Temp.insert(CB->getParent()->getParent());\n-    NewLiveFuncs.clear();\n-    NewLiveFuncs.insert(Temp.begin(), Temp.end());\n-    for (const auto *F : Temp)\n-      markLive(*F);\n-  }\n-}\n-\n PreservedAnalyses DeadArgumentEliminationPass::run(Module &M,\n                                                    ModuleAnalysisManager &) {\n   bool Changed = false;\n@@ -1149,8 +1123,6 @@ PreservedAnalyses DeadArgumentEliminationPass::run(Module &M,\n   for (auto &F : M)\n     surveyFunction(F);\n \n-  propagateVirtMustcallLiveness(M);\n-\n   // Now, remove all dead arguments and return values from each function in\n   // turn.  We use make_early_inc_range here because functions will probably get\n   // removed (i.e. replaced by new ones).\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/DeadArgElim/musttail-caller.ll",
      "commands": [
        "opt -passes=deadargelim -S < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define hidden void @test(i32 %a, i32 %b) {\n  musttail call void @foo(i32 %a, i32 0)\n  ret void\n}\n\ndeclare hidden void @foo(i32, i32)\n"
        },
        {
          "test_name": "foo",
          "test_body": "define hidden void @foo(i32 %a, i32 %b) {\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/DeadArgElim/musttail-verifier.ll",
      "commands": [
        "opt -passes=deadargelim -S < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "; Testcases comes from PR126817 and PR107569\n; See PR54964 and langref for more information about how llvm deal with musttail currently\n\ndefine i64 @A() {\n;\nentry:\n  %v2660 = musttail call i64 @B()\n  ret i64 %v2660\n}\n\ndefine internal i64 @B() {\n;\nentry:\n  ret i64 0\n}\n\ndefine internal i64 @C() {\n;\nentry:\n  %v30543 = musttail call i64 @B()\n  ret i64 %v30543\n}\n\n%struct.S = type { double }\n\ndefine internal %struct.S @F38() {\n;\n  ret %struct.S { double 0.0 }\n}\n\ndefine internal %struct.S @F36() {\n;\n  %1 = alloca %struct.S, align 8\n  %3 = musttail call %struct.S @F38()\n  ret %struct.S %3\n}\n\ndefine double @foo() {\n;\n  %3 = call %struct.S @F36()\n  %5 = extractvalue %struct.S %3, 0\n  ret double %5\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "DeadArgumentElimination creates invalid code with musttail calls returning structs",
    "body": "The DeadArgumentElimination pass creates code which fails the IR verifier when run on this input:\r\n\r\n```test.ll\r\n%struct.S = type { i32 }\r\n\r\ndefine internal %struct.S @F38()  {\r\n  ret %struct.S { i32 0 }\r\n}\r\n\r\ndefine %struct.S @F36() {\r\n  %3 = musttail call %struct.S @F38()\r\n  ret %struct.S %3\r\n}\r\n```\r\n\r\n```\r\n$ /work/llvm/build/bin/opt test.ll -passes=deadargelim -S\r\ncannot guarantee tail call due to mismatched return types\r\n  %1 = musttail call i32 @F38()\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /work/llvm/build/bin/opt test.ll -passes=deadargelim -S\r\n1.      Running pass \"verify\" on module \"test.ll\"\r\n #0 0x000055c16a99ca37 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/work/llvm/build/bin/opt+0x4133a37)\r\n #1 0x000055c16a99a57e llvm::sys::RunSignalHandlers() (/work/llvm/build/bin/opt+0x413157e)\r\n #2 0x000055c16a99d27a SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007f38e3a42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007f38e3a969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007f38e3a969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007f38e3a969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007f38e3a42476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007f38e3a287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x000055c16a9857a3 llvm::report_fatal_error(llvm::Twine const&, bool) (/work/llvm/build/bin/opt+0x411c7a3)\r\n#10 0x000055c16a9855f6 (/work/llvm/build/bin/opt+0x411c5f6)\r\n#11 0x000055c16afe2d4a (/work/llvm/build/bin/opt+0x4779d4a)\r\n#12 0x000055c16bd1b53d llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) NewPMDriver.cpp:0:0\r\n#13 0x000055c16abad88a llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/work/llvm/build/bin/opt+0x434488a)\r\n#14 0x000055c16bd146eb llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/work/llvm/build/bin/opt+0x54ab6eb)\r\n#15 0x000055c16a964609 optMain (/work/llvm/build/bin/opt+0x40fb609)\r\n#16 0x00007f38e3a29d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#17 0x00007f38e3a29e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#18 0x00007f38e3a29e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#19 0x000055c16a95e0a5 _start (/work/llvm/build/bin/opt+0x40f50a5)\r\nfish: Job 1, '/work/llvm/build/bin/opt test.l\u2026' terminated by signal SIGABRT (Abort)\r\n```\r\n\r\nFound using a fuzzer while testing #102896.",
    "author": "ostannard",
    "labels": [
      "ipo",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "ostannard",
        "body": "Related case with a different assertion message:\r\n```test2.ll\r\n%struct.S = type { double }\r\n\r\ndefine internal %struct.S @F38() {\r\n  ret %struct.S { double 0.0 }\r\n}\r\n\r\ndefine internal %struct.S @F36() {\r\n  %1 = alloca %struct.S, align 8\r\n  %3 = musttail call %struct.S @F38()\r\n  ret %struct.S %3\r\n}\r\n\r\ndefine double @foo() {\r\n  %3 = call %struct.S @F36()\r\n  %5 = extractvalue %struct.S %3, 0\r\n  ret double %5\r\n}\r\n```\r\n\r\n```\r\n$ /work/llvm/build/bin/opt test2.ll -passes=deadargelim -S -print-after-all\r\n; *** IR Dump After DeadArgumentEliminationPass on [module] ***\r\n; ModuleID = 'test2.ll'\r\nsource_filename = \"test2.ll\"\r\n\r\n%struct.S = type { double }\r\n\r\ndefine internal double @F38() {\r\n  %oldret = extractvalue %struct.S zeroinitializer, 0\r\n  ret double %oldret\r\n}\r\n\r\ndefine internal double @F36() {\r\n  %1 = alloca %struct.S, align 8\r\n  %2 = musttail call double @F38()\r\n  %oldret = insertvalue %struct.S poison, double %2, 0\r\n  %oldret1 = extractvalue %struct.S %oldret, 0\r\n  ret double %oldret1\r\n}\r\n\r\ndefine double @foo() {\r\n  %1 = call double @F36()\r\n  %oldret = insertvalue %struct.S poison, double %1, 0\r\n  %2 = extractvalue %struct.S %oldret, 0\r\n  ret double %2\r\n}\r\nmusttail call must precede a ret with an optional bitcast\r\n  %2 = musttail call double @F38()\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /work/llvm/build/bin/opt test2.ll -passes=deadargelim -S -print-after-all\r\n1.      Running pass \"verify\" on module \"test2.ll\"\r\n #0 0x000055c5f980ca37 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/work/llvm/build/bin/opt+0x4133a37)\r\n #1 0x000055c5f980a57e llvm::sys::RunSignalHandlers() (/work/llvm/build/bin/opt+0x413157e)\r\n #2 0x000055c5f980d27a SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007faf4da42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007faf4da969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007faf4da969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007faf4da969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007faf4da42476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007faf4da287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x000055c5f97f57a3 llvm::report_fatal_error(llvm::Twine const&, bool) (/work/llvm/build/bin/opt+0x411c7a3)\r\n#10 0x000055c5f97f55f6 (/work/llvm/build/bin/opt+0x411c5f6)\r\n#11 0x000055c5f9e52d4a (/work/llvm/build/bin/opt+0x4779d4a)\r\n#12 0x000055c5fab8b53d llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) NewPMDriver.cpp:0:0\r\n#13 0x000055c5f9a1d88a llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/work/llvm/build/bin/opt+0x434488a)\r\n#14 0x000055c5fab846eb llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/work/llvm/build/bin/opt+0x54ab6eb)\r\n#15 0x000055c5f97d4609 optMain (/work/llvm/build/bin/opt+0x40fb609)\r\n#16 0x00007faf4da29d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#17 0x00007faf4da29e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#18 0x00007faf4da29e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#19 0x000055c5f97ce0a5 _start (/work/llvm/build/bin/opt+0x40f50a5)\r\nfish: Job 1, '/work/llvm/build/bin/opt test2.\u2026' terminated by signal SIGABRT (Abort)\r\n```"
      },
      {
        "author": "ParkHanbum",
        "body": "we have the test for second case at musttail-invalid.ll\r\n```declare i32 @not_tail_pos_callee()\r\ndefine i32 @not_tail_pos() {\r\n; CHECK: musttail call must precede a ret with an optional bitcast\r\n  %v = musttail call i32 @not_tail_pos_callee()\r\n  %w = add i32 %v, 1\r\n  ret i32 %w\r\n}\r\n```\r\n\r\nbut first case is not. maybe we need to add this into testcase.\r\n\r\nfirst case \r\n```void Verifier::verifyMustTailCall(CallInst &CI) {\r\n  Check(!CI.isInlineAsm(), \"cannot use musttail call with inline asm\", &CI);\r\n\r\n  Function *F = CI.getParent()->getParent();\r\n  FunctionType *CallerTy = F->getFunctionType();\r\n  FunctionType *CalleeTy = CI.getFunctionType();\r\n  Check(CallerTy->isVarArg() == CalleeTy->isVarArg(),\r\n        \"cannot guarantee tail call due to mismatched varargs\", &CI);\r\n  Check(isTypeCongruent(CallerTy->getReturnType(), CalleeTy->getReturnType()),\r\n        \"cannot guarantee tail call due to mismatched return types\", F, CallerTy->getReturnType(), &CI, CalleeTy->getReturnType());\r\n```\r\n\r\nCallInst:  %1 = musttail call i32 @F38()\r\nReturn type of Caller :  %struct.S = type { i32 }\r\nReturn type of Callee:  i32\r\n\r\nThis is weird. \r\nI couldn't understand why `%struct.S = type { i32 }` is changed to `i32` at `%3 = musttail call %struct.S @F38()`\r\n\r\nbut after change it to `i32` then it works.\r\n```\r\n%struct.S = type { i32 }\r\n\r\ndefine internal %struct.S @F38()  {\r\n  ret %struct.S { i32 0 }\r\n}\r\n\r\ndefine i32 @F36() {\r\n  %3 = musttail call i32 @F38()\r\n  ret i32 %3\r\n}\r\n```\r\n```\r\n% bin/opt --passes=deadargelim  test.ll -S       \r\n; ModuleID = 'test.ll'\r\nsource_filename = \"test.ll\"\r\n\r\n%struct.S = type { i32 }\r\n\r\ndefine internal %struct.S @F38() {\r\n  ret %struct.S zeroinitializer\r\n}\r\n\r\ndefine i32 @F36() {\r\n  %1 = musttail call i32 @F38()\r\n  ret i32 %1\r\n}\r\n\r\n```\r\n\r\nis this normal?"
      },
      {
        "author": "ParkHanbum",
        "body": "I found why it causes, maybe.\r\n```\r\nsource_filename = \"test.ll\"\r\n\r\n%struct.S = type { i32 }\r\n\r\ndefine internal i32 @F38() {\r\n  %oldret = extractvalue %struct.S zeroinitializer, 0\r\n  ret i32 %oldret\r\n}\r\n\r\ndefine %struct.S @F36() {\r\n  %1 = musttail call i32 @F38()\r\n  %oldret = insertvalue %struct.S poison, i32 %1, 0\r\n  ret %struct.S %oldret\r\n}\r\n\r\n```\r\n\r\n"
      },
      {
        "author": "ParkHanbum",
        "body": "we create new return type in here\r\n```\r\n// Look at each of the original return values individually.\r\n    for (unsigned Ri = 0; Ri != RetCount; ++Ri) {\r\n      RetOrArg Ret = createRet(F, Ri);\r\n      if (LiveValues.erase(Ret)) {\r\n        RetTypes.push_back(getRetComponentType(F, Ri));\r\n        NewRetIdxs[Ri] = RetTypes.size() - 1;\r\n      } else {\r\n        ++NumRetValsEliminated;\r\n        LLVM_DEBUG(\r\n            dbgs() << \"DeadArgumentEliminationPass - Removing return value \"\r\n                   << Ri << \" from \" << F->getName() << \"\\n\");\r\n      }\r\n    \r\n```\r\n\r\nI tested disabling the code that creates the new return type to see if it would make a quick improvement\r\n```\r\nNRetTy = RetTy;\r\n```\r\n\r\nit seems to work\r\n```\r\n; ModuleID = 'test.ll'\r\nsource_filename = \"test.ll\"\r\n\r\n%struct.S = type { i32 }\r\n\r\ndefine internal %struct.S @F38() {\r\n  ret %struct.S zeroinitializer\r\n}\r\n\r\ndefine %struct.S @F36() {\r\n  %1 = musttail call %struct.S @F38()\r\n  ret %struct.S %1\r\n}\r\n\r\n```\r\n\r\nIf this is a defect,\r\n1. do not change return type if it conflict with caller's return type when CB was musttail call.\r\n2. if caller's return type is conflict with new return type then change all of uses type.\r\n\r\nwe can fix it by choosing one of above. IMO\r\nhow do you think?\r\n\r\nplease let me know this issue need to fix or not~\r\n\r\n@dtcxzyw Can you please review this issue?\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "cc @nikic @efriedma-quic "
      },
      {
        "author": "efriedma-quic",
        "body": "I'm not sure why we're trying to run DAE on functions where we can't change the signature; why doesn't the current check for musttail callers handle this?"
      },
      {
        "author": "ParkHanbum",
        "body": "@efriedma-quic Don't think it needs to be fix?\r\n"
      },
      {
        "author": "efriedma-quic",
        "body": "Not sure what you're saying.  I'm asking about the structure of the existing code.  There are already checks for musttail calls in DeadArgumentElimination, which at first glance should exclude transforming cases like this.  Can those checks be extended to also exclude this case?"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  }
}