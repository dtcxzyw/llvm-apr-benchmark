{
  "bug_id": "87410",
  "issue_url": "https://github.com/llvm/llvm-project/issues/87410",
  "bug_type": "crash",
  "base_commit": "0bbe953aa3289a32cd816647820c8676bb3a61bc",
  "knowledge_cutoff": "2024-04-02T21:05:28Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "c83698367125703827f1b739393f006c399cb213",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          8233,
          8238
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlan.h": [
        [
          1932,
          1945
        ],
        [
          1949,
          1963
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          1513,
          1518
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "VPRecipeBuilder::tryToBlend"
      ],
      "llvm/lib/Transforms/Vectorize/VPlan.h": [
        "VPBlendRecipe",
        "clone",
        "getIncomingValue",
        "getMask",
        "getNumIncomingValues"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPBlendRecipe::print"
      ]
    }
  },
  "patch": "commit c83698367125703827f1b739393f006c399cb213\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Apr 9 11:14:05 2024 +0100\n\n    [VPlan] Remove unused first mask op from VPBlendRecipe. (#87770)\n    \n    VPBlendRecipe does not use the first mask operand. Removing it allows\n    VPlan-based DCE to remove unused mask computations.\n    \n    This also fixes #87410, where unused Not VPInstructions are considered\n    having only their first lane demanded, but some of their operands\n    providing a vector value due to other users.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/87410\n    \n    PR: https://github.com/llvm/llvm-project/pull/87770\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex fd54faf17ca3..5535cc55e932 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -8221,6 +8221,8 @@ VPBlendRecipe *VPRecipeBuilder::tryToBlend(PHINode *Phi,\n   // builder. At this point we generate the predication tree. There may be\n   // duplications since this is a simple recursive scan, but future\n   // optimizations will clean it up.\n+  // TODO: At the moment the first mask is always skipped, but it would be\n+  // better to skip the most expensive mask.\n   SmallVector<VPValue *, 2> OperandsWithMask;\n \n   for (unsigned In = 0; In < NumIncoming; In++) {\n@@ -8233,6 +8235,8 @@ VPBlendRecipe *VPRecipeBuilder::tryToBlend(PHINode *Phi,\n              \"Distinct incoming values with one having a full mask\");\n       break;\n     }\n+    if (In == 0)\n+      continue;\n     OperandsWithMask.push_back(EdgeMask);\n   }\n   return new VPBlendRecipe(Phi, OperandsWithMask);\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.h b/llvm/lib/Transforms/Vectorize/VPlan.h\nindex 5f6334b974cf..5dc905a3c407 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.h\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.h\n@@ -1932,14 +1932,12 @@ public:\n class VPBlendRecipe : public VPSingleDefRecipe {\n public:\n   /// The blend operation is a User of the incoming values and of their\n-  /// respective masks, ordered [I0, M0, I1, M1, ...]. Note that a single value\n-  /// might be incoming with a full mask for which there is no VPValue.\n+  /// respective masks, ordered [I0, I1, M1, I2, M2, ...]. Note that the first\n+  /// incoming value does not have a mask associated.\n   VPBlendRecipe(PHINode *Phi, ArrayRef<VPValue *> Operands)\n       : VPSingleDefRecipe(VPDef::VPBlendSC, Operands, Phi, Phi->getDebugLoc()) {\n-    assert(Operands.size() > 0 &&\n-           ((Operands.size() == 1) || (Operands.size() % 2 == 0)) &&\n-           \"Expected either a single incoming value or a positive even number \"\n-           \"of operands\");\n+    assert((Operands.size() + 1) % 2 == 0 &&\n+           \"Expected an odd number of operands\");\n   }\n \n   VPRecipeBase *clone() override {\n@@ -1949,15 +1947,20 @@ public:\n \n   VP_CLASSOF_IMPL(VPDef::VPBlendSC)\n \n-  /// Return the number of incoming values, taking into account that a single\n+  /// Return the number of incoming values, taking into account that the first\n   /// incoming value has no mask.\n   unsigned getNumIncomingValues() const { return (getNumOperands() + 1) / 2; }\n \n   /// Return incoming value number \\p Idx.\n-  VPValue *getIncomingValue(unsigned Idx) const { return getOperand(Idx * 2); }\n+  VPValue *getIncomingValue(unsigned Idx) const {\n+    return Idx == 0 ? getOperand(0) : getOperand(Idx * 2 - 1);\n+  }\n \n   /// Return mask number \\p Idx.\n-  VPValue *getMask(unsigned Idx) const { return getOperand(Idx * 2 + 1); }\n+  VPValue *getMask(unsigned Idx) const {\n+    assert(Idx > 0 && \"First index has no mask associated.\");\n+    return getOperand(Idx * 2);\n+  }\n \n   /// Generate the phi/select nodes.\n   void execute(VPTransformState &State) override;\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 2438e4dae3eb..625319954e9b 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -1513,6 +1513,8 @@ void VPBlendRecipe::print(raw_ostream &O, const Twine &Indent,\n     for (unsigned I = 0, E = getNumIncomingValues(); I < E; ++I) {\n       O << \" \";\n       getIncomingValue(I)->printAsOperand(O, SlotTracker);\n+      if (I == 0)\n+        continue;\n       O << \"/\";\n       getMask(I)->printAsOperand(O, SlotTracker);\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/unused-blend-mask-for-first-operand.ll",
      "commands": [
        "opt -p loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_not_first_lane_only_constant",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine void @test_not_first_lane_only_constant(ptr %A, ptr noalias %B) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %gep.A = getelementptr inbounds i16, ptr %A, i16 %iv\n  br i1 false, label %loop.latch, label %else.1\n\nelse.1:                                           ; preds = %loop.header\n  br i1 false, label %then.2, label %else.2\n\nthen.2:                                           ; preds = %else.1\n  br label %else.2\n\nelse.2:                                           ; preds = %then.2, %else.1\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %else.2, %loop.header\n  %merge = phi ptr [ %B, %else.2 ], [ poison, %loop.header ]\n  %l = load i16, ptr %merge, align 2\n  %iv.next = add i16 %iv, 1\n  store i16 %l, ptr %gep.A, align 2\n  %c.2 = icmp eq i16 %iv.next, 1000\n  br i1 %c.2, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        },
        {
          "test_name": "test_not_first_lane_only_wide_compare",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine void @test_not_first_lane_only_wide_compare(ptr %A, ptr noalias %B, i16 %x, i16 %y) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %gep.A = getelementptr inbounds i16, ptr %A, i16 %iv\n  %l.0 = load i16, ptr %gep.A, align 2\n  %c.0 = icmp ult i16 %l.0, %x\n  br i1 %c.0, label %loop.latch, label %else.1\n\nelse.1:                                           ; preds = %loop.header\n  %c.1 = icmp ult i16 %l.0, %y\n  br i1 %c.1, label %then.2, label %else.2\n\nthen.2:                                           ; preds = %else.1\n  br label %else.2\n\nelse.2:                                           ; preds = %then.2, %else.1\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %else.2, %loop.header\n  %merge = phi ptr [ %B, %else.2 ], [ poison, %loop.header ]\n  %l = load i16, ptr %merge, align 2\n  %iv.next = add i16 %iv, 1\n  store i16 %l, ptr %gep.A, align 2\n  %c.2 = icmp eq i16 %iv.next, 1000\n  br i1 %c.2, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize][VPlan] Assertion \"Trying to access a single scalar per part but has multiple scalars per part.\" failed.",
    "body": "Reduced LLVM IR\r\n```llvm ir\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\ndefine i32 @main() #0 {\r\nentry:\r\n  br label %for.body.i\r\n\r\nfor.body.i:                                       ; preds = %if.end.i, %entry\r\n  %q.0139.i = phi i16 [ 0, %entry ], [ %add.i, %if.end.i ]\r\n  %idxprom.i = sext i16 0 to i64\r\n  br i1 false, label %if.end.i, label %if.then.i\r\n\r\nif.then.i:                                        ; preds = %for.body.i\r\n  br i1 false, label %cond.end41.i, label %cond.end41.i\r\n\r\ncond.end41.i:                                     ; preds = %if.then.i, %if.then.i\r\n  br label %if.end.i\r\n\r\nif.end.i:                                         ; preds = %cond.end41.i, %for.body.i\r\n  %.in.i = phi ptr [ null, %cond.end41.i ], [ poison, %for.body.i ]\r\n  %0 = load i16, ptr %.in.i, align 2\r\n  %add.i = add i16 %q.0139.i, 1\r\n  %tobool.not.i = icmp eq i16 %add.i, 0\r\n  br i1 %tobool.not.i, label %m.exit, label %for.body.i\r\n\r\nm.exit:                                           ; preds = %if.end.i\r\n  %.lcssa = phi i16 [ %0, %if.end.i ]\r\n  ret i32 0\r\n}\r\n\r\nattributes #0 = { \"target-features\"=\"+64bit,+v\" }\r\n```\r\n\r\nBacktrace:\r\n```\r\nopt: /scratch/tc-testing/tc-apr-2/llvm/llvm/lib/Transforms/Vectorize/VPlan.cpp:249: llvm::Value* llvm::VPTransformState::get(llvm::VPValue*, unsigned int, bool): Assertion `(VF.isScalar() || Def->isLiveIn() || (hasScalarValue(Def, VPIteration(Part, 0)) && Data.PerPartScalars[Def][Part].size() == 1)) && \"Trying to access a single scalar per part but has multiple scalars \" \"per part.\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt --passes=loop-vectorize reduced.ll\r\n #0 0x00005ed60f56eb60 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2d84b60)\r\n #1 0x00005ed60f56bf6f llvm::sys::RunSignalHandlers() (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2d81f6f)\r\n #2 0x00005ed60f56c0c5 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007f973de42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007f973de969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007f973de969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007f973de969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007f973de42476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007f973de287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00007f973de2871b _nl_load_domain ./intl/loadmsgcat.c:1177:9\r\n#10 0x00007f973de39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n#11 0x00005ed60e6cbb72 llvm::VPTransformState::get(llvm::VPValue*, unsigned int, bool) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1ee1b72)\r\n#12 0x00005ed60e6fa9a6 llvm::VPInstruction::generatePerPart(llvm::VPTransformState&, unsigned int) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1f109a6)\r\n#13 0x00005ed60e6fbbdf llvm::VPInstruction::execute(llvm::VPTransformState&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1f11bdf)\r\n#14 0x00005ed60e6d74ff llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1eed4ff)\r\n#15 0x00005ed60e6cd9e0 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1ee39e0)\r\n#16 0x00005ed60e6d90e6 llvm::VPlan::execute(llvm::VPTransformState*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1eef0e6)\r\n#17 0x00005ed60e5d76f3 llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>> const*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1ded6f3)\r\n#18 0x00005ed60e5e9718 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1dff718)\r\n#19 0x00005ed60e5eb73e llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1e0173e)\r\n#20 0x00005ed60e5ec88d llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1e0288d)\r\n#21 0x00005ed60d4f3276 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd09276)\r\n#22 0x00005ed60f395141 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2bab141)\r\n#23 0x00005ed60d4eabd6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd00bd6)\r\n#24 0x00005ed60f393e3b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2ba9e3b)\r\n#25 0x00005ed60d4f2dc6 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd08dc6)\r\n#26 0x00005ed60f391cb1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2ba7cb1)\r\n#27 0x00005ed60cd6cce5 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x582ce5)\r\n#28 0x00005ed60cd5f316 optMain (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x575316)\r\n#29 0x00007f973de29d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#30 0x00007f973de29e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#31 0x00007f973de29e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#32 0x00005ed60cd54f95 _start (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x56af95)\r\nzsh: IOT instruction (core dumped)  /scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt\r\n```\r\nGodbolt: https://godbolt.org/z/jYWea8z4q\r\n\r\nFound via fuzzer.",
    "author": "patrick-rivos",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  }
}