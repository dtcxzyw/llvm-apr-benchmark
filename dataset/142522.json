{
  "bug_id": "142522",
  "issue_url": "https://github.com/llvm/llvm-project/issues/142522",
  "bug_type": "crash",
  "base_commit": "dc513fa8dc361cb71a2c607f2bd75d812f31459b",
  "knowledge_cutoff": "2025-06-03T03:01:15Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SimplifyCFG"
  ],
  "hints": {
    "fix_commit": "7e1fa09ce2a228c949ce4490c98f2c73ed8ada00",
    "components": [
      "SimplifyCFG"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        [
          8108,
          8113
        ],
        [
          8165,
          8170
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        "passingValueIsAlwaysUndefined"
      ]
    }
  },
  "patch": "commit 7e1fa09ce2a228c949ce4490c98f2c73ed8ada00\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Jun 4 12:37:30 2025 +0800\n\n    [SimplifyCFG] Bail out on vector GEPs in `passingValueIsAlwaysUndefined` (#142526)\n    \n    Closes https://github.com/llvm/llvm-project/issues/142522.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\nindex 245d0c4f073d..e221022bb836 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n@@ -8108,6 +8108,7 @@ bool SimplifyCFGOpt::simplifyCondBranch(BranchInst *BI, IRBuilder<> &Builder) {\n \n /// Check if passing a value to an instruction will cause undefined behavior.\n static bool passingValueIsAlwaysUndefined(Value *V, Instruction *I, bool PtrValueMayBeModified) {\n+  assert(V->getType() == I->getType() && \"Mismatched types\");\n   Constant *C = dyn_cast<Constant>(V);\n   if (!C)\n     return false;\n@@ -8165,6 +8166,10 @@ static bool passingValueIsAlwaysUndefined(Value *V, Instruction *I, bool PtrValu\n     // Look through GEPs. A load from a GEP derived from NULL is still undefined\n     if (GetElementPtrInst *GEP = dyn_cast<GetElementPtrInst>(User))\n       if (GEP->getPointerOperand() == I) {\n+        // The type of GEP may differ from the type of base pointer.\n+        // Bail out on vector GEPs, as they are not handled by other checks.\n+        if (GEP->getType()->isVectorTy())\n+          return false;\n         // The current base address is null, there are four cases to consider:\n         // getelementptr (TY, null, 0)                 -> null\n         // getelementptr (TY, null, not zero)          -> may be modified\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SimplifyCFG/UnreachableEliminate.ll",
      "commands": [
        "opt < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1  -S"
      ],
      "tests": [
        {
          "test_name": "test9_gep_splat",
          "test_body": "declare void @fn_arg_vec(<2 x ptr>)\n\ndefine void @test9_gep_splat(i1 %X, ptr %Y) {\nentry:\n  br i1 %X, label %if, label %else\n\nif:                                               ; preds = %entry\n  br label %else\n\nelse:                                             ; preds = %if, %entry\n  %phi = phi ptr [ %Y, %entry ], [ null, %if ]\n  %gep = getelementptr i8, ptr %phi, <2 x i64> zeroinitializer\n  call void @fn_arg_vec(<2 x ptr> %gep)\n  ret void\n}\n"
        },
        {
          "test_name": "test9",
          "test_body": "declare ptr @fn_nonnull_noundef_arg(ptr noundef nonnull)\n\ndefine void @test9(i1 %X, ptr %Y) {\nentry:\n  br i1 %X, label %if, label %else\n\nif:                                               ; preds = %entry\n  br label %else\n\nelse:                                             ; preds = %if, %entry\n  %phi = phi ptr [ %Y, %entry ], [ null, %if ]\n  %0 = call ptr @fn_nonnull_noundef_arg(ptr %phi)\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SimplifyCFG] Assertion `getArgOperand(ArgNo)->getType()->isPointerTy() && \"Argument must be a pointer\"' failed.",
    "body": "Reproducer:\n```\n; bin/opt -passes=simplifycfg test.ll -S\ndefine void @test9(i1 %X, ptr %Y) {\nentry:\n  br i1 %X, label %if, label %else\nif:\n  br label %else\nelse:\n  %phi = phi ptr [ %Y, %entry ], [ null, %if ]\n  %gep = getelementptr i8, ptr %phi, <2 x i64> zeroinitializer\n  call void @fn_arg_vec(<2 x ptr> %gep)\n  ret void\n}\n\ndeclare void @fn_arg_vec(<2 x ptr>)\n```\n```\nopt: /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/lib/IR/Instructions.cpp:446: bool llvm::CallBase::paramHasNonNullAttr(unsigned int, bool) const: Assertion `getArgOperand(ArgNo)->getType()->isPointerTy() && \"Argument must be a pointer\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: bin/opt -passes=simplifycfg test.ll -S\n1.      Running pass \"function(simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;no-switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>)\" on module \"test.ll\"\n2.      Running pass \"simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;no-switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>\" on function \"test9\"\n #0 0x000073bf132279f2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x2279f2)\n #1 0x000073bf132248cf llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x2248cf)\n #2 0x000073bf13224a14 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x000073bf12c45330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x000073bf12c9eb2c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x000073bf12c9eb2c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x000073bf12c9eb2c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x000073bf12c4527e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x000073bf12c288ff abort ./stdlib/abort.c:81:7\n #9 0x000073bf12c2881b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x000073bf12c3b517 (/lib/x86_64-linux-gnu/libc.so.6+0x3b517)\n#11 0x000073bf098908a3 llvm::CallBase::paramHasNonNullAttr(unsigned int, bool) const (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x2908a3)\n#12 0x000073bf0a6c321f passingValueIsAlwaysUndefined(llvm::Value*, llvm::Instruction*, bool) SimplifyCFG.cpp:0:0\n#13 0x000073bf0a6c30db passingValueIsAlwaysUndefined(llvm::Value*, llvm::Instruction*, bool) SimplifyCFG.cpp:0:0\n#14 0x000073bf0a6c61ab (anonymous namespace)::SimplifyCFGOpt::speculativelyExecuteBB(llvm::BranchInst*, llvm::BasicBlock*) SimplifyCFG.cpp:0:0\n#15 0x000073bf0a6daeb2 (anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&) SimplifyCFG.cpp:0:0\n#16 0x000073bf0a6dc91e llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMTransformUtils.so.21.0git+0x2dc91e)\n#17 0x000073bf0afb76c6 iterativelySimplifyCFG(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#18 0x000073bf0afb852c simplifyFunctionCFGImpl(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DominatorTree*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#19 0x000073bf0afb93b5 simplifyFunctionCFG(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DominatorTree*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#20 0x000073bf0afb9510 llvm::SimplifyCFGPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMScalarOpts.so.21.0git+0x3b9510)\n#21 0x000073bf0cfac495 llvm::detail::PassModel<llvm::Function, llvm::SimplifyCFGPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libPolly.so.21.0git+0x1ac495)\n#22 0x000073bf09927164 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x327164)\n#23 0x000073bf11edb7c5 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdb7c5)\n#24 0x000073bf09927680 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x327680)\n#25 0x000073bf11edc185 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdc185)\n#26 0x000073bf09928805 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x328805)\n#27 0x000073bf135203d9 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x2d3d9)\n#28 0x000073bf1352b416 optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x38416)\n#29 0x000073bf12c2a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#30 0x000073bf12c2a28b call_init ./csu/../csu/libc-start.c:128:20\n#31 0x000073bf12c2a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#32 0x000056ddb347a095 _start (bin/opt+0x1095)\n\nAborted (core dumped)\n```\nReported by https://github.com/llvm/llvm-project/pull/125383#issuecomment-2932967834\n\n",
    "author": "dtcxzyw",
    "labels": [
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}