{
  "bug_id": "79742",
  "issue_url": "https://github.com/llvm/llvm-project/issues/79742",
  "bug_type": "crash",
  "base_commit": "a9689c6029e3078e09e43a4efb2b2ced98e9020f",
  "knowledge_cutoff": "2024-01-28T09:40:40Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "17fb3e82f6c950267bb01cc2fd2a84b0d9e9d0d8",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          1031,
          1037
        ],
        [
          1040,
          1047
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "VPlanTransforms::truncateToMinimalBitwidths"
      ]
    }
  },
  "patch": "commit 17fb3e82f6c950267bb01cc2fd2a84b0d9e9d0d8\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Apr 23 11:50:25 2024 +0100\n\n    [VPlan] Skip extending ICmp results in trunateToMinimalBitwidth.\n    \n    Results of icmp don't need extending after truncating their operands, as\n    the result will always be i1. Skip them during extending.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/79742\n    Fixes https://github.com/llvm/llvm-project/issues/85185\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex 007dc3f89b3f..9580dc4a27f6 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -1031,7 +1031,9 @@ void VPlanTransforms::truncateToMinimalBitwidths(\n       if (auto *VPW = dyn_cast<VPRecipeWithIRFlags>(&R))\n         VPW->dropPoisonGeneratingFlags();\n \n-      if (OldResSizeInBits != NewResSizeInBits) {\n+      using namespace llvm::VPlanPatternMatch;\n+      if (OldResSizeInBits != NewResSizeInBits &&\n+          !match(&R, m_Binary<Instruction::ICmp>(m_VPValue(), m_VPValue()))) {\n         // Extend result to original width.\n         auto *Ext =\n             new VPWidenCastRecipe(Instruction::ZExt, ResultVPV, OldResTy);\n@@ -1040,8 +1042,9 @@ void VPlanTransforms::truncateToMinimalBitwidths(\n         Ext->setOperand(0, ResultVPV);\n         assert(OldResSizeInBits > NewResSizeInBits && \"Nothing to shrink?\");\n       } else\n-        assert(cast<VPWidenRecipe>(&R)->getOpcode() == Instruction::ICmp &&\n-               \"Only ICmps should not need extending the result.\");\n+        assert(\n+            match(&R, m_Binary<Instruction::ICmp>(m_VPValue(), m_VPValue())) &&\n+            \"Only ICmps should not need extending the result.\");\n \n       assert(!isa<VPWidenStoreRecipe>(&R) && \"stores cannot be narrowed\");\n       if (isa<VPWidenLoadRecipe>(&R))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/trunc-extended-icmps.ll",
      "commands": [
        "opt -p loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_icmp_and_op_zext",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine i32 @test_icmp_and_op_zext(ptr %dst, i64 %a) {\nentry:\n  %and = and i64 %a, 7304878031173690989\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i16 [ 1, %entry ], [ %iv.next, %loop ]\n  %c = icmp ne i64 %and, 0\n  %c.ext = zext i1 %c to i64\n  %or = or i64 %and, %c.ext\n  %or.trunc = trunc i64 %or to i8\n  %gep = getelementptr i8, ptr %dst, i16 %iv\n  store i8 %or.trunc, ptr %gep, align 1\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 1000\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret i32 0\n}\n"
        },
        {
          "test_name": "ext_cmp",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine void @ext_cmp(ptr %src.1, ptr %src.2, ptr noalias %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %gep.src.1 = getelementptr inbounds i16, ptr %src.1, i64 %iv\n  %i2 = load i16, ptr %gep.src.1, align 2\n  %i3 = sext i16 %i2 to i32\n  %c.1 = icmp sgt i32 0, %i3\n  %gep.src.2 = getelementptr inbounds i8, ptr %src.2, i64 %iv\n  %i4 = load i8, ptr %gep.src.2, align 2\n  %i5 = zext i8 %i4 to i32\n  %i6 = select i1 %c.1, i32 0, i32 %i5\n  %i7 = and i32 %i6, 0\n  %i8 = trunc nuw nsw i32 %i7 to i16\n  %gep.dst = getelementptr inbounds i16, ptr %dst, i64 %iv\n  store i16 %i8, ptr %gep.dst, align 2\n  %iv.next = add nsw i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, 1000\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "test_icmp_constant_op_zext",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine i32 @test_icmp_constant_op_zext(ptr %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i16 [ 1, %entry ], [ %iv.next, %loop ]\n  %c = icmp ne i64 7304878031173690989, 0\n  %c.ext = zext i1 %c to i64\n  %or = or i64 7304878031173690989, %c.ext\n  %or.trunc = trunc i64 %or to i8\n  %gep = getelementptr i8, ptr %dst, i16 %iv\n  store i8 %or.trunc, ptr %gep, align 1\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 1000\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret i32 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "llvm crash on loop-vectorize: Assertion `OldResSizeInBits > NewResSizeInBits && \"Nothing to shrink?\"' failed.",
    "body": "llvm crashes on the following IR.\r\n\r\nBisected to 822c749aec69ace75bd3923a4c850e2fd2e34fb1, which was committed by @fhahn \r\n\r\nCompiler explorer: https://godbolt.org/z/rWj9dhvPo\r\n\r\n```llvm\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @i(i64 %0) {\r\nentry:\r\n  %conv = sext i16 1 to i32\r\n  br label %for.body\r\n\r\nfor.body:                                         ; preds = %for.body, %entry\r\n  %1 = phi i32 [ 0, %entry ], [ %inc, %for.body ]\r\n  %tobool.not.i = icmp eq i64 %0, 0\r\n  %..i = select i1 %tobool.not.i, i32 0, i32 0\r\n  %cmp = icmp eq i32 %..i, 0\r\n  %conv1 = zext i1 %tobool.not.i to i32\r\n  %or = or i32 %conv1, %conv\r\n  %cmp2 = icmp slt i32 %or, 7\r\n  %conv4 = zext i1 %cmp2 to i64\r\n  store i64 %conv4, ptr null, align 8\r\n  %inc = add i32 %1, 1\r\n  %tobool.not = icmp eq i32 %inc, 0\r\n  br i1 %tobool.not, label %for.cond.for.end_crit_edge, label %for.body\r\n\r\nfor.cond.for.end_crit_edge:                       ; preds = %for.body\r\n  ret void\r\n}\r\n```\r\n\r\n```console\r\n% opt -passes=loop-vectorize reduced.ll\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/opt -disable-output -passes=loop-vectorize reduced.ll\r\n #0 0x00007f5302fedeff llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x902eff)\r\n #1 0x00007f5302feb654 SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007f5302300090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\r\n #3 0x00007f5304a458f0 llvm::InnerLoopVectorizer::truncateToMinimalBitwidths(llvm::VPTransformState&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x235a8f0)\r\n #4 0x00007f5304a49d95 llvm::InnerLoopVectorizer::fixVectorizedLoop(llvm::VPTransformState&, llvm::VPlan&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x235ed95)\r\n #5 0x00007f5304a4abb1 llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>>*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x235fbb1)\r\n #6 0x00007f5304a4d564 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x2362564)\r\n #7 0x00007f5304a4fbdd llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x2364bdd)\r\n #8 0x00007f5304a50e20 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x2365e20)\r\n #9 0x00007f5305e0d916 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x3722916)\r\n#10 0x00007f53031fd3fd llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0xb123fd)\r\n#11 0x00007f5305e069f6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x371b9f6)\r\n#12 0x00007f53031fbc8d llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0xb10c8d)\r\n#13 0x00007f5305e0d696 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0x3722696)\r\n#14 0x00007f53031f9c0d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/../lib/libLLVM-18git.so+0xb0ec0d)\r\n#15 0x0000555c5281fcb5 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/opt+0x25cb5)\r\n#16 0x0000555c52813876 main (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/opt+0x19876)\r\n#17 0x00007f53022e1083 __libc_start_main /build/glibc-wuryBv/glibc-2.31/csu/../csu/libc-start.c:342:3\r\n#18 0x0000555c5281451e _start (/zdata/shaoli/compilers/ccbuilder-compilers/clang-822c749aec69ace75bd3923a4c850e2fd2e34fb1/bin/opt+0x1a51e)\r\n[1]    1975861 segmentation fault   -disable-output -passes=loop-vectorize reduced.ll\r\n```\r\n\r\n\r\nThis IR is reduced from \r\n```C\r\nlong a, b;\r\nint c, d, f;\r\nstatic long *e = &b;\r\nstatic short g = 5;\r\nint h() {\r\n  if (a)\r\n    return 0;\r\n  return 5;\r\n}\r\nvoid i() {\r\n  int j;\r\n  long **k = &e;\r\n  for (; d; d++) {\r\n    j = h();\r\n    *e = 6 >= (g | (j + c == 0));\r\n  }\r\n  j =  &k || 1;\r\n  short *l[6];\r\n  l[f] = &g;\r\n}\r\nint main() {}\r\n```",
    "author": "shao-hua-li",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}