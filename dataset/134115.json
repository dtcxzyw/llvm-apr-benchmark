{
  "bug_id": "134115",
  "issue_url": "https://github.com/llvm/llvm-project/issues/134115",
  "bug_type": "crash",
  "base_commit": "6388a7acf7e31fdc7b9c168bd6ce0f4d25c98cd0",
  "knowledge_cutoff": "2025-04-02T17:01:09Z",
  "lit_test_dir": [
    "llvm/test/Transforms/FunctionAttrs"
  ],
  "hints": {
    "fix_commit": "0547e84181ff10b24d6363bbfc97f168fe245397",
    "components": [
      "FunctionAttrs"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/IPO/FunctionAttrs.cpp": [
        [
          661,
          668
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/FunctionAttrs.cpp": [
        "getArgumentAccessInfo"
      ]
    }
  },
  "patch": "commit 0547e84181ff10b24d6363bbfc97f168fe245397\nAuthor: Arthur Eubanks <aeubanks@google.com>\nDate:   Wed Apr 23 15:56:24 2025 -0700\n\n    [FunctionAttrs] Bail if initializes range overflows 64-bit signed int (#137053)\n    \n    Otherwise the range doesn't make sense since we interpret it as signed.\n    \n    Fixes #134115\n\ndiff --git a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\nindex bbfed2ac2c09..74e8a849803d 100644\n--- a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\n+++ b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\n@@ -661,8 +661,13 @@ ArgumentAccessInfo getArgumentAccessInfo(const Instruction *I,\n     auto TypeSize = DL.getTypeStoreSize(Ty);\n     if (!TypeSize.isScalable() && Offset) {\n       int64_t Size = TypeSize.getFixedValue();\n-      return ConstantRange(APInt(64, *Offset, true),\n-                           APInt(64, *Offset + Size, true));\n+      APInt Low(64, *Offset, true);\n+      bool Overflow;\n+      APInt High = Low.sadd_ov(APInt(64, Size, true), Overflow);\n+      // Bail if the range overflows signed 64-bit int.\n+      if (Overflow)\n+        return std::nullopt;\n+      return ConstantRange(Low, High);\n     }\n     return std::nullopt;\n   };\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/FunctionAttrs/initializes.ll",
      "commands": [
        "opt -passes=function-attrs -S < %s"
      ],
      "tests": [
        {
          "test_name": "memset_offset_1_size_0",
          "test_body": "define void @memset_offset_1_size_0(ptr %dst, ptr %src) {\n  %dst.1 = getelementptr inbounds i8, ptr %dst, i64 1\n  call void @llvm.memmove.p0.p0.i64(ptr %dst.1, ptr %src, i64 0, i1 false)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memmove.p0.p0.i64(ptr writeonly captures(none), ptr readonly captures(none), i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\n"
        },
        {
          "test_name": "range_overflows_signed_64_bit_int",
          "test_body": "define void @range_overflows_signed_64_bit_int(ptr %arg) {\n  %getelementptr = getelementptr i8, ptr %arg, i64 9223372036854775804\n  store i32 0, ptr %getelementptr, align 4\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "FunctionAttrs: Assertion `isOrder edRanges(RangesRef)' failed.",
    "body": "```\n$ cat /tmp/f.ll\ndefine i32 @f(ptr %arg, ptr %arg2) {\n  store ptr %arg, ptr %arg2\n  %getelementptr = getelementptr float, ptr %arg, i64 2305843009213693951\n  %load = load i32, ptr %getelementptr, align 4\n  ret i32 %load\n}\n$ opt -p function-attrs /tmp/f.ll -disable-output\nopt: ../../llvm/include/llvm/IR/ConstantRangeList.h:36: llvm::ConstantRangeList::ConstantRangeList(ArrayRef<ConstantRange>): Assertion `isOrder\nedRanges(RangesRef)' failed.\n```",
    "author": "aeubanks",
    "labels": [
      "ipo",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}