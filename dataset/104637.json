{
  "bug_id": "104637",
  "issue_url": "https://github.com/llvm/llvm-project/issues/104637",
  "bug_type": "crash",
  "base_commit": "13779ec29ed724666407bd60f8c4cc8228107ea5",
  "knowledge_cutoff": "2024-08-16T19:54:48Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "4a0bbbcbcf6ebc87e794e7b86b9f4651bffcd806",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          7144,
          7149
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "getTreeEntry",
        "newTreeEntry",
        "BoUpSLP::buildTree_rec",
        "gather"
      ]
    }
  },
  "patch": "commit 4a0bbbcbcf6ebc87e794e7b86b9f4651bffcd806\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Aug 16 13:24:03 2024 -0700\n\n    [SLP]Fix PR104637: do not create new nodes for fully overlapped non-schedulable nodes\n    \n    If the scalars do not require scheduling and were already vectorized,\n    but in the different order, compiler still tries to create the new node.\n    It may cause the compiler crash for the gathered operands. Instead need\n    to consider such nodes as full overlap and just reshuffle vectorized\n    node.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/104637\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 667d0df781aa..9ecd8160a978 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -7144,6 +7144,21 @@ void BoUpSLP::buildTree_rec(ArrayRef<Value *> VL, unsigned Depth,\n                        ReuseShuffleIndices);\n         return;\n       }\n+      SmallPtrSet<const TreeEntry *, 4> Nodes;\n+      Nodes.insert(getTreeEntry(S.OpValue));\n+      for (const TreeEntry *E : MultiNodeScalars.lookup(S.OpValue))\n+        Nodes.insert(E);\n+      SmallPtrSet<Value *, 8> Values(VL.begin(), VL.end());\n+      if (any_of(Nodes, [&](const TreeEntry *E) {\n+            return all_of(E->Scalars,\n+                          [&](Value *V) { return Values.contains(V); });\n+          })) {\n+        LLVM_DEBUG(dbgs() << \"SLP: Gathering due to full overlap.\\n\");\n+        if (TryToFindDuplicates(S))\n+          newTreeEntry(VL, std::nullopt /*not vectorized*/, S, UserTreeIdx,\n+                       ReuseShuffleIndices);\n+        return;\n+      }\n     } else {\n       // Record the reuse of the tree node.  FIXME, currently this is only used\n       // to properly draw the graph rather than for the actual vectorization.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/full-non-schedulable-overlap.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test(double %v) {\nentry:\n  %mul.3 = fmul double 0.000000e+00, %v\n  %mul.4 = fmul double 0.000000e+00, 0.000000e+00\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %t48.0 = phi double [ 0.000000e+00, %entry ], [ %5, %loop ]\n  %t50.02 = phi double [ 0.000000e+00, %entry ], [ %3, %loop ]\n  %t52.0 = phi double [ 0.000000e+00, %entry ], [ %7, %loop ]\n  %0 = fmul double %t52.0, %mul.3\n  %1 = fmul double %t48.0, %mul.4\n  %2 = fadd double %1, %0\n  %3 = fadd double %2, %v\n  %4 = fmul double 0.000000e+00, %mul.3\n  %5 = fadd double 0.000000e+00, %4\n  %6 = fmul double 0.000000e+00, %mul.4\n  %7 = fadd double 0.000000e+00, %6\n  br label %loop\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "SLP Vectorizer crash due to commit ca654acc16c43191228eadfec8f7241dca10b0c3",
    "body": "ca654acc16c43191228eadfec8f7241dca10b0c3 change in SLP Vectorizer causes a crash for this test case:\r\n\r\n```\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @a_(double %c__fetch.3) {\r\nalloca_0:\r\n  %mul.3 = fmul double 0.000000e+00, %c__fetch.3\r\n  %mul.4 = fmul double 0.000000e+00, 0.000000e+00\r\n  br label %loop.69\r\n\r\nloop.69:                                          ; preds = %loop.69, %alloca_0\r\n  %t48.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %5, %loop.69 ]\r\n  %t50.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %3, %loop.69 ]\r\n  %t52.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %7, %loop.69 ]\r\n  %0 = fmul double %t52.0, %mul.3\r\n  %1 = fmul double %t48.0, %mul.4\r\n  %2 = fadd double %1, %0\r\n  %3 = fadd double %2, 0.000000e+00\r\n  %4 = fmul double 0.000000e+00, %mul.3\r\n  %5 = fadd double 0.000000e+00, %4\r\n  %6 = fmul double 0.000000e+00, %mul.4\r\n  %7 = fadd double 0.000000e+00, %6\r\n  br label %loop.69\r\n}\r\n```\r\n\r\nAfter slp-vectorizer pass IR is being transformed to as incorrect one:\r\n```\r\ndefine void @a_(double %c__fetch.3) {\r\nalloca_0:\r\n  %0 = shufflevector <2 x double> %2, <2 x double> <double 0.000000e+00, double poison>, <2 x i32> <i32 2, i32 0>\r\n  %1 = fmul <2 x double> zeroinitializer, %0\r\n  %2 = insertelement <2 x double> <double poison, double 0.000000e+00>, double %c__fetch.3, i32 0\r\n  %3 = fmul <2 x double> zeroinitializer, %2\r\n  br label %loop.69\r\n\r\nloop.69:                                          ; preds = %loop.69, %alloca_0\r\n  %t50.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %9, %loop.69 ]\r\n  %4 = phi <2 x double> [ zeroinitializer, %alloca_0 ], [ %11, %loop.69 ]\r\n  %5 = fmul <2 x double> %4, %1\r\n  %6 = extractelement <2 x double> %5, i32 0\r\n  %7 = extractelement <2 x double> %5, i32 1\r\n  %8 = fadd double %6, %7\r\n  %9 = fadd double %8, 0.000000e+00\r\n  %10 = fmul <2 x double> zeroinitializer, %3\r\n  %11 = fadd <2 x double> zeroinitializer, %10\r\n  br label %loop.69\r\n}\r\n```\r\n\r\nError message:\r\n\r\n```\r\nInstruction does not dominate all uses!\r\n  %2 = insertelement <2 x double> <double poison, double 0.000000e+00>, double %c__fetch.3, i32 0\r\n  %0 = shufflevector <2 x double> %2, <2 x double> <double 0.000000e+00, double poison>, <2 x i32> <i32 2, i32 0>\r\nLLVM ERROR: Broken module found, compilation aborted!\r\n```\r\n\r\nReverting the mentioned commit makes this test pass. @alexey-bataev could you please take a look?\r\n",
    "author": "ivankelarev",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "ivankelarev",
        "body": "Update: It appears that the mentioned commit merely obscures a more fundamental issue. The following test continues to fail even after the commit has been reverted:\r\n\r\n```\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @a_(double %c__fetch.3) {\r\nalloca_0:\r\n  %mul.3 = fmul double 0.000000e+00, %c__fetch.3\r\n  %mul.4 = fmul double 0.000000e+00, 0.000000e+00\r\n  br label %loop.69\r\n\r\nloop.69:                                          ; preds = %loop.69, %alloca_0\r\n  %t48.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %5, %loop.69 ]\r\n  %t50.02 = phi double [ 0.000000e+00, %alloca_0 ], [ %3, %loop.69 ]\r\n  %t52.0 = phi double [ 0.000000e+00, %alloca_0 ], [ %7, %loop.69 ]\r\n  %0 = fmul double %t52.0, %mul.3\r\n  %1 = fmul double %t48.0, %mul.4\r\n  %2 = fadd double %1, %0\r\n  %3 = fadd double %2, %c__fetch.3\r\n  %4 = fmul double 0.000000e+00, %mul.3\r\n  %5 = fadd double 0.000000e+00, %4\r\n  %6 = fmul double 0.000000e+00, %mul.4\r\n  %7 = fadd double 0.000000e+00, %6\r\n  br label %loop.69\r\n}\r\n```"
      },
      {
        "author": "ivankelarev",
        "body": "It appears that the actual problematic commit is the following:\r\n\r\n```\r\ncommit 66775f8ccdcc8264ef349518e1c59d96d4227823\r\nAuthor: Alexey Bataev <a.bataev@outlook.com>\r\nDate:   Mon Oct 16 12:50:29 2023 -0700\r\n\r\n    [SLP]Fix PR69196: Instruction does not dominate all uses\r\n    \r\n    During emission of the postponed gathers, need to insert them before\r\n    user instruction to avoid use before definition crash.\r\n```\r\nFor compiler builds prior to this change, the test passes, and the correct code is generated as follows:\r\n```\r\ndefine void @a_(double %c__fetch.3) {\r\nalloca_0:\r\n  %0 = insertelement <2 x double> <double poison, double 0.000000e+00>, double %c__fetch.3, i32 0\r\n  %1 = fmul <2 x double> zeroinitializer, %0\r\n  %2 = shufflevector <2 x double> %0, <2 x double> <double 0.000000e+00, double poison>, <2 x i32> <i32 2, i32 0>\r\n  %3 = fmul <2 x double> zeroinitializer, %2\r\n  br label %loop.69\r\n\r\nloop.69:                                          ; preds = %loop.69, %alloca_0\r\n  %t50.02 = phi double [ 0.000000e+00, %alloca_0 ], [ %9, %loop.69 ]\r\n  %4 = phi <2 x double> [ zeroinitializer, %alloca_0 ], [ %11, %loop.69 ]\r\n  %5 = fmul <2 x double> %4, %3\r\n  %6 = extractelement <2 x double> %5, i32 0\r\n  %7 = extractelement <2 x double> %5, i32 1\r\n  %8 = fadd double %6, %7\r\n  %9 = fadd double %8, %c__fetch.3\r\n  %10 = fmul <2 x double> zeroinitializer, %1\r\n  %11 = fadd <2 x double> zeroinitializer, %10\r\n  br label %loop.69\r\n}\r\n```\r\n\r\nAlthough the commit may seem quite old, there is a test case for which it causes incorrect code generation. Alexey, could you please revisit this change and address the code generation issue for the provided test case?"
      },
      {
        "author": "alexey-bataev",
        "body": "> It appears that the actual problematic commit is the following:\r\n> \r\n> ```\r\n> commit 66775f8ccdcc8264ef349518e1c59d96d4227823\r\n> Author: Alexey Bataev <a.bataev@outlook.com>\r\n> Date:   Mon Oct 16 12:50:29 2023 -0700\r\n> \r\n>     [SLP]Fix PR69196: Instruction does not dominate all uses\r\n>     \r\n>     During emission of the postponed gathers, need to insert them before\r\n>     user instruction to avoid use before definition crash.\r\n> ```\r\n> \r\n> For compiler builds prior to this change, the test passes, and the correct code is generated as follows:\r\n> \r\n> ```\r\n> define void @a_(double %c__fetch.3) {\r\n> alloca_0:\r\n>   %0 = insertelement <2 x double> <double poison, double 0.000000e+00>, double %c__fetch.3, i32 0\r\n>   %1 = fmul <2 x double> zeroinitializer, %0\r\n>   %2 = shufflevector <2 x double> %0, <2 x double> <double 0.000000e+00, double poison>, <2 x i32> <i32 2, i32 0>\r\n>   %3 = fmul <2 x double> zeroinitializer, %2\r\n>   br label %loop.69\r\n> \r\n> loop.69:                                          ; preds = %loop.69, %alloca_0\r\n>   %t50.02 = phi double [ 0.000000e+00, %alloca_0 ], [ %9, %loop.69 ]\r\n>   %4 = phi <2 x double> [ zeroinitializer, %alloca_0 ], [ %11, %loop.69 ]\r\n>   %5 = fmul <2 x double> %4, %3\r\n>   %6 = extractelement <2 x double> %5, i32 0\r\n>   %7 = extractelement <2 x double> %5, i32 1\r\n>   %8 = fadd double %6, %7\r\n>   %9 = fadd double %8, %c__fetch.3\r\n>   %10 = fmul <2 x double> zeroinitializer, %1\r\n>   %11 = fadd <2 x double> zeroinitializer, %10\r\n>   br label %loop.69\r\n> }\r\n> ```\r\n> \r\n> Although the commit may seem quite old, there is a test case for which it causes incorrect code generation. Alexey, could you please revisit this change and address the code generation issue for the provided test case?\r\n\r\nThe actual problem is not in this commit, the fix is almost ready"
      },
      {
        "author": "alexey-bataev",
        "body": "/cherry-pick 4a0bbbcbcf6ebc87e794e7b86b9f4651bffcd806"
      },
      {
        "author": "llvmbot",
        "body": "<!--IGNORE-->\n>/cherry-pick 4a0bbbcbcf6ebc87e794e7b86b9f4651bffcd806\n\nError: Command failed due to missing milestone."
      }
    ]
  }
}
