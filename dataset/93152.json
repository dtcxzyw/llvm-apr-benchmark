{
  "bug_id": "93152",
  "issue_url": "https://github.com/llvm/llvm-project/issues/93152",
  "bug_type": "crash",
  "base_commit": "d3ce1078186389ce39505f06c2a0100dce9187a5",
  "knowledge_cutoff": "2024-05-23T08:42:34Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LowerSwitch"
  ],
  "hints": {
    "fix_commit": "67aec0cd62d607b4e5b7198769be061454ce67b3",
    "components": [
      "LowerSwitch"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/LowerSwitch.cpp": [
        [
          208,
          214
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/LowerSwitch.cpp": [
        "NewLeafBlock"
      ]
    }
  },
  "patch": "commit 67aec0cd62d607b4e5b7198769be061454ce67b3\nAuthor: Peter Rong <peterrong96@gmail.com>\nDate:   Mon May 27 10:58:22 2024 -0700\n\n    [LowerSwitch] Use unsigned integer for range comparison (#93237)\n    \n    Commit 1db51d8eb2 switched from int64_t to `APInt` to prevent high precision integer overflow.\n    However, when comparing the \"range\" of switch cases, we should switch to unsigned integer to prevent overflow.\n    This patch fixes https://github.com/llvm/llvm-project/issues/93152.\n    Some test cases are added.\n    \n    Signed-off-by: Peter Rong <PeterRong96@gmail.com>\n\ndiff --git a/llvm/lib/Transforms/Utils/LowerSwitch.cpp b/llvm/lib/Transforms/Utils/LowerSwitch.cpp\nindex f5921e5ccb09..f4ef6d02abf0 100644\n--- a/llvm/lib/Transforms/Utils/LowerSwitch.cpp\n+++ b/llvm/lib/Transforms/Utils/LowerSwitch.cpp\n@@ -208,7 +208,7 @@ BasicBlock *NewLeafBlock(CaseRange &Leaf, Value *Val, ConstantInt *LowerBound,\n     PHINode *PN = cast<PHINode>(I);\n     // Remove all but one incoming entries from the cluster\n     APInt Range = Leaf.High->getValue() - Leaf.Low->getValue();\n-    for (APInt j(Range.getBitWidth(), 0, true); j.slt(Range); ++j) {\n+    for (APInt j(Range.getBitWidth(), 0, false); j.ult(Range); ++j) {\n       PN->removeIncomingValue(OrigBlock);\n     }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LowerSwitch/93152.ll",
      "commands": [
        "opt < %s -passes=lower-switch -S"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "define void @i3_range_4(i3 %0) {\n;\nbb.0:\n  switch i3 %0, label %bb.2 [\n  i3 -1, label %bb.1\n  i3 -2, label %bb.1\n  i3 2, label %bb.1\n  i3 1, label %bb.1\n  i3 0, label %bb.1\n  ]\n\nbb.1:                                             ; preds = %bb.0, %bb.0, %bb.0, %bb.0, %bb.0\n  %tmp = phi i3 [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\n  br label %bb.2\n\nbb.2:                                             ; preds = %bb.1, %bb.0\n  ret void\n}\n\ndefine void @i3_range_6(i3 %0) {\n;\nbb.0:\n  switch i3 %0, label %bb.2 [\n  i3 -1, label %bb.1\n  i3 -2, label %bb.1\n  i3 -3, label %bb.1\n  i3 3, label %bb.1\n  i3 2, label %bb.1\n  i3 1, label %bb.1\n  i3 0, label %bb.1\n  ]\n\nbb.1:                                             ; preds = %bb.0, %bb.0, %bb.0, %bb.0, %bb.0\n  %tmp = phi i3 [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\n  br label %bb.2\n\nbb.2:                                             ; preds = %bb.1, %bb.0\n  ret void\n}\n\n\ndefine void @i3_range_7(i3 %0) {\n;\nbb.0:\n  switch i3 %0, label %bb.2 [\n  i3 -1, label %bb.1\n  i3 -2, label %bb.1\n  i3 -3, label %bb.1\n  i3 -4, label %bb.1\n  i3 3, label %bb.1\n  i3 2, label %bb.1\n  i3 1, label %bb.1\n  i3 0, label %bb.1\n  ]\n\nbb.1:                                             ; preds = %bb.0, %bb.0, %bb.0, %bb.0, %bb.0\n  %tmp = phi i3 [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\n  br label %bb.2\n\nbb.2:                                             ; preds = %bb.1, %bb.0\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "LLVM ERROR: Broken function found after pass \"LowerSwitchPass\", compilation aborted!",
    "body": "llvm commit: 4cc6d0f4dfb26d\r\nReproduce with:\r\n```opt -passes=\"lower-switch\" -verify-each bbi-95731.ll -o /dev/null```\r\nResult:\r\n```\r\nPHINode should have one entry for each predecessor of its parent basic block!\r\n  %tmp = phi i3 [ 0, %LeafBlock ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\r\nLLVM ERROR: Broken function found after pass \"LowerSwitchPass\", compilation aborted!\r\n```\r\nIf we look at what lower-switch actually produces (-print-after-all) we see\r\n```\r\n; *** IR Dump After LowerSwitchPass on v_257_0 ***\r\ndefine void @v_257_0(i3 %0) {\r\nbb.0:\r\n  br label %LeafBlock\r\n\r\nLeafBlock:                                        ; preds = %bb.0\r\n  %.off = add i3 %0, 2\r\n  %SwitchLeaf = icmp ule i3 %.off, -4\r\n  br i1 %SwitchLeaf, label %bb.1, label %bb.2\r\n\r\nbb.1:                                             ; preds = %LeafBlock\r\n  %tmp = phi i3 [ 0, %LeafBlock ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\r\n  br label %bb.2\r\n\r\nbb.2:                                             ; preds = %LeafBlock, %bb.1\r\n  ret void\r\n}\r\nPHINode should have one entry for each predecessor of its parent basic block!\r\n  %tmp = phi i3 [ 0, %LeafBlock ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\r\n```\r\nSo it has removed the switch instruction but it only updated one of the five phi operands for %bb.0.\r\nThe input looked like\r\n```\r\ndefine void @v_257_0(i3 %0) {\r\nbb.0:\r\n  switch i3 %0, label %bb.2 [\r\n    i3 -1, label %bb.1\r\n    i3 -2, label %bb.1\r\n    i3 2, label %bb.1\r\n    i3 1, label %bb.1\r\n    i3 0, label %bb.1\r\n  ]\r\n\r\nbb.1:                                             ; preds = %bb.0, %bb.0, %bb.0, %bb.0, %bb.0\r\n  %tmp = phi i3 [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ], [ 0, %bb.0 ]\r\n  br label %bb.2\r\n\r\nbb.2:                                             ; preds = %bb.1, %bb.0\r\n  ret void\r\n}\r\n```\r\nSo there is one phi operand for each of the values that makes it jump from %bb.0 to %bb.1 and lower-switch only updated one of them when it changed things.\r\n[bbi-95731.ll.gz](https://github.com/llvm/llvm-project/files/15414163/bbi-95731.ll.gz)\r\n",
    "author": "mikaelholmen",
    "labels": [
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "mikaelholmen",
        "body": "This starts happening with 1db51d8eb2d\r\n```\r\n[Transform] Rewrite LowerSwitch using APInt\r\n\r\nThis rewrite fixes https://github.com/llvm/llvm-project/issues/59316.\r\n\r\nPreviously LowerSwitch uses int64_t, which will crash on case branches using integers with more than 64 bits.\r\nUsing APInt fixes this problem. This patch also includes a test\r\n\r\nReviewed By: RKSimon\r\n\r\nDifferential Revision: https://reviews.llvm.org/D140747\r\n```"
      },
      {
        "author": "DataCorrupted",
        "body": "I am taking a look. Some initial thoughts:\r\n\r\n- https://github.com/llvm/llvm-project/commit/1db51d8eb2d220a4f0000555ada310990098cf5b didn't attempt to change how it optimizes the switch. Maybe we forgot to change the API in that optimization.\r\n- `i3` is playing a role here: if you switch it to `i32`, [it'll pass](https://godbolt.org/z/c5Yveb8Kf). "
      },
      {
        "author": "DataCorrupted",
        "body": "I found the problem. Fixing it now. Will push a patch shortly"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}