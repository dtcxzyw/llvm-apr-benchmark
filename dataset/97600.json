{
  "bug_id": "97600",
  "issue_url": "https://github.com/llvm/llvm-project/issues/97600",
  "bug_type": "miscompilation",
  "base_commit": "97a2bd8415dc6792b99ec0f091ad7570673c3f37",
  "knowledge_cutoff": "2024-07-03T16:13:45Z",
  "lit_test_dir": [
    "llvm/test/Analysis/BasicAA"
  ],
  "hints": {
    "fix_commit": "ebab105670a409e426ddcb0278578711a622b1b2",
    "components": [
      "IR",
      "ValueTracking"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        [
          6403,
          6411
        ]
      ],
      "llvm/lib/IR/Value.cpp": [
        [
          652,
          660
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        "llvm::getUnderlyingObject"
      ],
      "llvm/lib/IR/Value.cpp": [
        "stripPointerCastsAndOffsets"
      ]
    }
  },
  "patch": "commit ebab105670a409e426ddcb0278578711a622b1b2\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Thu Jul 4 09:43:16 2024 +0200\n\n    [IR] Don't strip through pointer to vector of pointer bitcasts\n    \n    When using stripPointerCasts() and getUnderlyingObject(), don't\n    strip through a bitcast from ptr to <1 x ptr>, which is not a\n    no-op pointer cast. Calling code is generally not prepared to\n    handle that situation, resulting in incorrect alias analysis\n    results for example.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/97600.\n\ndiff --git a/llvm/lib/Analysis/ValueTracking.cpp b/llvm/lib/Analysis/ValueTracking.cpp\nindex 5476dc5d8518..258576f0cdff 100644\n--- a/llvm/lib/Analysis/ValueTracking.cpp\n+++ b/llvm/lib/Analysis/ValueTracking.cpp\n@@ -6403,9 +6403,10 @@ const Value *llvm::getUnderlyingObject(const Value *V, unsigned MaxLookup) {\n       V = GEP->getPointerOperand();\n     } else if (Operator::getOpcode(V) == Instruction::BitCast ||\n                Operator::getOpcode(V) == Instruction::AddrSpaceCast) {\n-      V = cast<Operator>(V)->getOperand(0);\n-      if (!V->getType()->isPointerTy())\n+      Value *NewV = cast<Operator>(V)->getOperand(0);\n+      if (!NewV->getType()->isPointerTy())\n         return V;\n+      V = NewV;\n     } else if (auto *GA = dyn_cast<GlobalAlias>(V)) {\n       if (GA->isInterposable())\n         return V;\ndiff --git a/llvm/lib/IR/Value.cpp b/llvm/lib/IR/Value.cpp\nindex 8522747ccf12..b2ee75811fbb 100644\n--- a/llvm/lib/IR/Value.cpp\n+++ b/llvm/lib/IR/Value.cpp\n@@ -652,9 +652,10 @@ static const Value *stripPointerCastsAndOffsets(\n       }\n       V = GEP->getPointerOperand();\n     } else if (Operator::getOpcode(V) == Instruction::BitCast) {\n-      V = cast<Operator>(V)->getOperand(0);\n-      if (!V->getType()->isPointerTy())\n+      Value *NewV = cast<Operator>(V)->getOperand(0);\n+      if (!NewV->getType()->isPointerTy())\n         return V;\n+      V = NewV;\n     } else if (StripKind != PSK_ZeroIndicesSameRepresentation &&\n                Operator::getOpcode(V) == Instruction::AddrSpaceCast) {\n       // TODO: If we know an address space cast will not change the\n",
  "tests": [
    {
      "file": "llvm/test/Analysis/BasicAA/ptr-vector.ll",
      "commands": [
        "opt -S -passes=licm < %s 2>&1"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "@c = dso_local global i32 0, align 4\n@d = dso_local local_unnamed_addr global ptr @c, align 8\n\ndefine i32 @main() {\nentry:\n  br label %for.cond\n\nfor.cond:                                         ; preds = %f.exit.split, %entry\n  %b.0 = phi i32 [ 0, %entry ], [ %inc6, %f.exit.split ]\n  %cmp = icmp ult i32 %b.0, 2\n  br i1 %cmp, label %for.cond1.preheader, label %for.cond.cleanup\n\nfor.cond1.preheader:                              ; preds = %for.cond\n  br label %for.cond1\n\nfor.cond.cleanup:                                 ; preds = %for.cond\n  %0 = load i32, ptr @c, align 4, !tbaa !13\n  %retval = xor i32 %0, 7\n  ret i32 %retval\n\nfor.cond1:                                        ; preds = %for.cond1, %for.cond1.preheader\n  %i.0 = phi i32 [ %inc, %for.cond1 ], [ 0, %for.cond1.preheader ]\n  %cmp2 = icmp ult i32 %i.0, 2\n  %inc = add nuw nsw i32 %i.0, 1\n  br i1 %cmp2, label %for.cond1, label %for.body.i.preheader, !llvm.loop !17\n\nfor.body.i.preheader:                             ; preds = %for.cond1\n  %cmp2.lcssa = phi i1 [ %cmp2, %for.cond1 ]\n  %1 = xor i1 %cmp2.lcssa, true\n  %2 = bitcast i1 %1 to <1 x i1>\n  %3 = call <1 x ptr> @llvm.masked.load.v1p0.p0(ptr @d, i32 8, <1 x i1> %2, <1 x ptr> poison), !tbaa !9\n  %4 = bitcast <1 x ptr> %3 to ptr\n  store i32 0, ptr @c, align 4, !tbaa !13\n  %5 = load i32, ptr %4, align 4, !tbaa !13\n  %tobool1.not.i = icmp ne i32 %5, 0\n  %tobool1.not.i.fr = freeze i1 %tobool1.not.i\n  br i1 %tobool1.not.i.fr, label %f.exit.split, label %for.body.i.preheader.split\n\nfor.body.i.preheader.split:                       ; preds = %for.body.i.preheader\n  br label %for.body.i\n\nfor.body.i:                                       ; preds = %for.body.i.preheader.split, %for.body.i\n  %n.04.i = phi i8 [ %add.i, %for.body.i ], [ -66, %for.body.i.preheader.split ]\n  %add.i = add nsw i8 %n.04.i, 1\n  %tobool.not.i = icmp eq i8 %add.i, 0\n  br i1 %tobool.not.i, label %f.exit, label %for.body.i, !llvm.loop !15\n\nf.exit:                                           ; preds = %for.body.i\n  br label %f.exit.split\n\nf.exit.split:                                     ; preds = %for.body.i.preheader, %f.exit\n  store i32 7, ptr %4, align 4, !tbaa !13\n  %inc6 = add nuw nsw i32 %b.0, 1\n  br label %for.cond, !llvm.loop !18\n}\n\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"any pointer\", !11, i64 0}\n!11 = !{!\"omnipotent char\", !12, i64 0}\n!12 = !{!\"Simple C/C++ TBAA\"}\n!13 = !{!14, !14, i64 0}\n!14 = !{!\"int\", !11, i64 0}\n!15 = distinct !{!15, !16}\n!16 = !{!\"llvm.loop.mustprogress\"}\n!17 = distinct !{!17, !16}\n!18 = distinct !{!18, !16}",
          "lli_expected_out": ""
        }
      ]
    }
  ],
  "issue": {
    "title": "[LICM] Miscompilation caused by wrong AA result",
    "body": "Reproducer: https://godbolt.org/z/Y1vvbndf8\r\n```\r\n@c = dso_local global i32 0, align 4\r\n@d = dso_local local_unnamed_addr global ptr @c, align 8\r\n\r\ndefine i32 @main() {\r\nentry:\r\n  br label %for.cond\r\n\r\nfor.cond:                                         ; preds = %f.exit.split, %entry\r\n  %b.0 = phi i32 [ 0, %entry ], [ %inc6, %f.exit.split ]\r\n  %cmp = icmp ult i32 %b.0, 2\r\n  br i1 %cmp, label %for.cond1.preheader, label %for.cond.cleanup\r\n\r\nfor.cond1.preheader:                              ; preds = %for.cond\r\n  br label %for.cond1\r\n\r\nfor.cond.cleanup:                                 ; preds = %for.cond\r\n  %0 = load i32, ptr @c, align 4, !tbaa !13\r\n  ret i32 %0\r\n\r\nfor.cond1:                                        ; preds = %for.cond1, %for.cond1.preheader\r\n  %i.0 = phi i32 [ %inc, %for.cond1 ], [ 0, %for.cond1.preheader ]\r\n  %cmp2 = icmp ult i32 %i.0, 2\r\n  %inc = add nuw nsw i32 %i.0, 1\r\n  br i1 %cmp2, label %for.cond1, label %for.body.i.preheader, !llvm.loop !17\r\n\r\nfor.body.i.preheader:                             ; preds = %for.cond1\r\n  %cmp2.lcssa = phi i1 [ %cmp2, %for.cond1 ]\r\n  %1 = xor i1 %cmp2.lcssa, true\r\n  %2 = bitcast i1 %1 to <1 x i1>\r\n  %3 = call <1 x ptr> @llvm.masked.load.v1p0.p0(ptr @d, i32 8, <1 x i1> %2, <1 x ptr> poison), !tbaa !9\r\n  %4 = bitcast <1 x ptr> %3 to ptr\r\n  store i32 0, ptr @c, align 4, !tbaa !13\r\n  %5 = load i32, ptr %4, align 4, !tbaa !13\r\n  %tobool1.not.i = icmp ne i32 %5, 0\r\n  %tobool1.not.i.fr = freeze i1 %tobool1.not.i\r\n  br i1 %tobool1.not.i.fr, label %f.exit.split, label %for.body.i.preheader.split\r\n\r\nfor.body.i.preheader.split:                       ; preds = %for.body.i.preheader\r\n  br label %for.body.i\r\n\r\nfor.body.i:                                       ; preds = %for.body.i.preheader.split, %for.body.i\r\n  %n.04.i = phi i8 [ %add.i, %for.body.i ], [ -66, %for.body.i.preheader.split ]\r\n  %add.i = add nsw i8 %n.04.i, 1\r\n  %tobool.not.i = icmp eq i8 %add.i, 0\r\n  br i1 %tobool.not.i, label %f.exit, label %for.body.i, !llvm.loop !15\r\n\r\nf.exit:                                           ; preds = %for.body.i\r\n  br label %f.exit.split\r\n\r\nf.exit.split:                                     ; preds = %for.body.i.preheader, %f.exit\r\n  store i32 7, ptr %4, align 4, !tbaa !13\r\n  %inc6 = add nuw nsw i32 %b.0, 1\r\n  br label %for.cond, !llvm.loop !18\r\n}\r\n\r\n!9 = !{!10, !10, i64 0}\r\n!10 = !{!\"any pointer\", !11, i64 0}\r\n!11 = !{!\"omnipotent char\", !12, i64 0}\r\n!12 = !{!\"Simple C/C++ TBAA\"}\r\n!13 = !{!14, !14, i64 0}\r\n!14 = !{!\"int\", !11, i64 0}\r\n!15 = distinct !{!15, !16}\r\n!16 = !{!\"llvm.loop.mustprogress\"}\r\n!17 = distinct !{!17, !16}\r\n!18 = distinct !{!18, !16}\r\n```\r\nAfter LICM:\r\n```\r\nsource_filename = \"/app/example.ll\"\r\n\r\ndefine i32 @main() {\r\nentry:\r\n  br label %for.cond\r\n\r\nfor.cond:                                         ; preds = %f.exit.split, %entry\r\n  %0 = phi i32 [ poison, %entry ], [ 0, %f.exit.split ]\r\n  %b.0 = phi i32 [ 0, %entry ], [ %inc6, %f.exit.split ]\r\n  %cmp = icmp ult i32 %b.0, 2\r\n  br i1 %cmp, label %for.cond1.preheader, label %for.cond.cleanup\r\n\r\nfor.cond1.preheader:                              ; preds = %for.cond\r\n  br label %for.cond1\r\n\r\nfor.cond.cleanup:                                 ; preds = %for.cond\r\n  %.lcssa = phi i32 [ %0, %for.cond ]\r\n  store i32 %.lcssa, ptr @c, align 4, !tbaa !0\r\n  %1 = load i32, ptr @c, align 4, !tbaa !0\r\n  ret i32 %1\r\n\r\nfor.cond1:                                        ; preds = %for.cond1, %for.cond1.preheader\r\n  %i.0 = phi i32 [ %inc, %for.cond1 ], [ 0, %for.cond1.preheader ]\r\n  %cmp2 = icmp ult i32 %i.0, 2\r\n  %inc = add nuw nsw i32 %i.0, 1\r\n  br i1 %cmp2, label %for.cond1, label %for.body.i.preheader, !llvm.loop !4\r\n\r\nfor.body.i.preheader:                             ; preds = %for.cond1\r\n  %cmp2.lcssa = phi i1 [ %cmp2, %for.cond1 ]\r\n  %2 = xor i1 %cmp2.lcssa, true\r\n  %3 = bitcast i1 %2 to <1 x i1>\r\n  %4 = call <1 x ptr> @llvm.masked.load.v1p0.p0(ptr @d, i32 8, <1 x i1> %3, <1 x ptr> poison), !tbaa !6\r\n  %5 = bitcast <1 x ptr> %4 to ptr\r\n  %6 = load i32, ptr %5, align 4, !tbaa !0\r\n  %tobool1.not.i = icmp ne i32 %6, 0\r\n  %tobool1.not.i.fr = freeze i1 %tobool1.not.i\r\n  br i1 %tobool1.not.i.fr, label %f.exit.split, label %for.body.i.preheader.split\r\n\r\nfor.body.i.preheader.split:                       ; preds = %for.body.i.preheader\r\n  br label %for.body.i\r\n\r\nfor.body.i:                                       ; preds = %for.body.i, %for.body.i.preheader.split\r\n  %n.04.i = phi i8 [ %add.i, %for.body.i ], [ -66, %for.body.i.preheader.split ]\r\n  %add.i = add nsw i8 %n.04.i, 1\r\n  %tobool.not.i = icmp eq i8 %add.i, 0\r\n  br i1 %tobool.not.i, label %f.exit, label %for.body.i, !llvm.loop !8\r\n\r\nf.exit:                                           ; preds = %for.body.i\r\n  br label %f.exit.split\r\n\r\nf.exit.split:                                     ; preds = %f.exit, %for.body.i.preheader\r\n  store i32 7, ptr %5, align 4, !tbaa !0\r\n  %inc6 = add nuw nsw i32 %b.0, 1\r\n  br label %for.cond, !llvm.loop !9\r\n}\r\n\r\ndeclare <1 x ptr> @llvm.masked.load.v1p0.p0(ptr nocapture, i32 immarg, <1 x i1>, <1 x ptr>) #0\r\n\r\nattributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }\r\n\r\n!0 = !{!1, !1, i64 0}\r\n!1 = !{!\"int\", !2, i64 0}\r\n!2 = !{!\"omnipotent char\", !3, i64 0}\r\n!3 = !{!\"Simple C/C++ TBAA\"}\r\n!4 = distinct !{!4, !5}\r\n!5 = !{!\"llvm.loop.mustprogress\"}\r\n!6 = !{!7, !7, i64 0}\r\n!7 = !{!\"any pointer\", !2, i64 0}\r\n!8 = distinct !{!8, !5}\r\n!9 = distinct !{!9, !5}\r\n```\r\n```\r\n> lli test.ll\r\n> echo $?\r\n7\r\n> bin/opt -passes=licm test.ll -S -o out.ll\r\n> lli out.ll\r\n> echo $?\r\n0\r\n```\r\n`store i32 7, ptr %5, align 4, !tbaa !0` may write something to `@c`. So this transform is incorrect.\r\n\r\nRelated patch: https://github.com/llvm/llvm-project/pull/96878\r\nOriginal C code (needs x86 +cf or riscv +zicldst):\r\n```\r\n#include \"csmith.h\"\r\nuint32_t c = 0;\r\nint32_t *d = &c;\r\nvoid f(int32_t *o) {\r\n  uint8_t n;\r\n  for (n = 190; n; n += 1) {\r\n    *o = 0;\r\n    if (*d)\r\n      break;\r\n  }\r\n}\r\nint main() {\r\n  for (int b = 0; b <= 1; b++) {\r\n    uint64_t j[2];\r\n    int i;\r\n    for (i = 0; i < 2; i++)\r\n      j[i] = 1;\r\n    f(&c);\r\n    safe_add_func_int32_t_s_s(0, j[1]);\r\n    *d = 7;\r\n  }\r\n  printf(\"%d\\n\", c);\r\n  return 0;\r\n}\r\n```\r\n\r\ncc @nikic @fhahn @KanRobert \r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "TBAA",
      "llvm:ir",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "KanRobert",
        "body": "Which patch supports `zicldst` for riscv? @dtcxzyw "
      },
      {
        "author": "nikic",
        "body": "Hm, we probably have a lot of places that don't handle things like `bitcast <1 x ptr> %3 to ptr` correctly, and assume that bitcast of pointer is always a pointer to pointer cast."
      },
      {
        "author": "dtcxzyw",
        "body": "> Which patch supports `zicldst` for riscv? @dtcxzyw\r\n\r\nWe have a prototype which is still working in progress:\r\n+ llvm support: https://github.com/llvm/llvm-project/compare/main...dtcxzyw:llvm-project:zicldst-support\r\n+ qemu support: https://github.com/qemu/qemu/compare/master...cyyself:qemu:exp_rv_zicldst\r\n"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  },
  "bisect": "Cannot find a good commit"
}