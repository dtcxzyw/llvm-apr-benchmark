{
  "bug_id": "98753",
  "issue_url": "https://github.com/llvm/llvm-project/issues/98753",
  "bug_type": "miscompilation",
  "base_commit": "c30ce8b9d33d1050ead549705702c1472b7a7d3f",
  "knowledge_cutoff": "2024-07-13T17:35:41Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstSimplify"
  ],
  "hints": {
    "fix_commit": "de29b850f03092195bf21f3a39402adb4ed3c216",
    "components": [
      "InstructionSimplify"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        [
          1975,
          1987
        ],
        [
          4300,
          4305
        ],
        [
          4347,
          4352
        ],
        [
          4467,
          4472
        ],
        [
          4606,
          4612
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        "llvm::simplifyWithOpReplaced",
        "simplifySelectWithICmpEq",
        "simplifyAndOrWithICmpEq"
      ]
    }
  },
  "patch": "commit de29b850f03092195bf21f3a39402adb4ed3c216\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Tue Jul 16 11:40:04 2024 +0200\n\n    [InstSimplify] Fix simplifyAndOrWithICmpEq with undef refinement (#98898)\n    \n    The final case in Simplify (where Res == Absorber and the predicate is\n    inverted) is not generally safe when the simplification is a refinement.\n    In particular, we may simplify assuming a specific value for undef, but\n    then chose a different one later.\n    \n    However, it *is* safe to refine poison in this context, unlike in the\n    equivalent select folds. This is the reason why this fold did not use\n    AllowRefinement=false in the first place, and using that option would\n    introduce a lot of test regressions.\n    \n    This patch takes the middle path of disabling undef refinements in\n    particular using the getWithoutUndef() SimplifyQuery option. However,\n    this option doesn't actually work in this case, because the problematic\n    fold is inside constant folding, and we currently don't propagate this\n    option all the way from InstSimplify over ConstantFolding to\n    ConstantFold. Work around this by explicitly checking for undef operands\n    in simplifyWithOpReplaced().\n    \n    Finally, make sure that places where AllowRefinement=false also use\n    Q.getWithoutUndef(). I don't have a specific test case for this (the\n    original one does not work because we don't simplify selects with\n    constant condition in this mode in the first place) but this seems like\n    the correct thing to do to be conservative.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/98753.\n\ndiff --git a/llvm/lib/Analysis/InstructionSimplify.cpp b/llvm/lib/Analysis/InstructionSimplify.cpp\nindex 242c200f7ef1..3a7ae577bb06 100644\n--- a/llvm/lib/Analysis/InstructionSimplify.cpp\n+++ b/llvm/lib/Analysis/InstructionSimplify.cpp\n@@ -1975,13 +1975,16 @@ static Value *simplifyAndOrWithICmpEq(unsigned Opcode, Value *Op0, Value *Op1,\n     return nullptr;\n   };\n \n-  if (Value *Res =\n-          simplifyWithOpReplaced(Op1, A, B, Q, /* AllowRefinement */ true,\n-                                 /* DropFlags */ nullptr, MaxRecurse))\n+  // In the final case (Res == Absorber with inverted predicate), it is safe to\n+  // refine poison during simplification, but not undef. For simplicity always\n+  // disable undef-based folds here.\n+  if (Value *Res = simplifyWithOpReplaced(Op1, A, B, Q.getWithoutUndef(),\n+                                          /* AllowRefinement */ true,\n+                                          /* DropFlags */ nullptr, MaxRecurse))\n     return Simplify(Res);\n-  if (Value *Res =\n-          simplifyWithOpReplaced(Op1, B, A, Q, /* AllowRefinement */ true,\n-                                 /* DropFlags */ nullptr, MaxRecurse))\n+  if (Value *Res = simplifyWithOpReplaced(Op1, B, A, Q.getWithoutUndef(),\n+                                          /* AllowRefinement */ true,\n+                                          /* DropFlags */ nullptr, MaxRecurse))\n     return Simplify(Res);\n \n   return nullptr;\n@@ -4300,6 +4303,9 @@ static Value *simplifyWithOpReplaced(Value *V, Value *Op, Value *RepOp,\n                                      bool AllowRefinement,\n                                      SmallVectorImpl<Instruction *> *DropFlags,\n                                      unsigned MaxRecurse) {\n+  assert((AllowRefinement || !Q.CanUseUndef) &&\n+         \"If AllowRefinement=false then CanUseUndef=false\");\n+\n   // Trivial replacement.\n   if (V == Op)\n     return RepOp;\n@@ -4347,6 +4353,11 @@ static Value *simplifyWithOpReplaced(Value *V, Value *Op, Value *RepOp,\n     } else {\n       NewOps.push_back(InstOp);\n     }\n+\n+    // Bail out if any operand is undef and SimplifyQuery disables undef\n+    // simplification. Constant folding currently doesn't respect this option.\n+    if (isa<UndefValue>(NewOps.back()) && !Q.CanUseUndef)\n+      return nullptr;\n   }\n \n   if (!AnyReplaced)\n@@ -4467,6 +4478,11 @@ Value *llvm::simplifyWithOpReplaced(Value *V, Value *Op, Value *RepOp,\n                                     const SimplifyQuery &Q,\n                                     bool AllowRefinement,\n                                     SmallVectorImpl<Instruction *> *DropFlags) {\n+  // If refinement is disabled, also disable undef simplifications (which are\n+  // always refinements) in SimplifyQuery.\n+  if (!AllowRefinement)\n+    return ::simplifyWithOpReplaced(V, Op, RepOp, Q.getWithoutUndef(),\n+                                    AllowRefinement, DropFlags, RecursionLimit);\n   return ::simplifyWithOpReplaced(V, Op, RepOp, Q, AllowRefinement, DropFlags,\n                                   RecursionLimit);\n }\n@@ -4606,7 +4622,7 @@ static Value *simplifySelectWithICmpEq(Value *CmpLHS, Value *CmpRHS,\n                                        Value *TrueVal, Value *FalseVal,\n                                        const SimplifyQuery &Q,\n                                        unsigned MaxRecurse) {\n-  if (simplifyWithOpReplaced(FalseVal, CmpLHS, CmpRHS, Q,\n+  if (simplifyWithOpReplaced(FalseVal, CmpLHS, CmpRHS, Q.getWithoutUndef(),\n                              /* AllowRefinement */ false,\n                              /* DropFlags */ nullptr, MaxRecurse) == TrueVal)\n     return FalseVal;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstSimplify/and-or-implied-cond.ll",
      "commands": [
        "opt -S -passes=instsimplify < %s"
      ],
      "tests": [
        {
          "test_name": "and_is_constant",
          "test_body": "define i1 @and_is_constant(ptr %arg, ptr %arg2) {\n  %icmp = icmp eq ptr %arg, %arg2\n  %call = call i1 @llvm.is.constant.i1(i1 %icmp)\n  %and = and i1 %call, %icmp\n  ret i1 %and\n}\n\n; Function Attrs: convergent nocallback nofree nosync nounwind willreturn memory(none)\ndeclare i1 @llvm.is.constant.i1(i1) #0\n\nattributes #0 = { convergent nocallback nofree nosync nounwind willreturn memory(none) }\n"
        },
        {
          "test_name": "pr98753",
          "test_body": "define i1 @pr98753(i32 noundef %x, i32 %y) {\n  %cmp1 = icmp ne i32 %x, 0\n  %sel = select i1 %cmp1, i32 %y, i32 undef\n  %cmp2 = icmp sgt i32 %sel, 0\n  %and = and i1 %cmp1, %cmp2\n  ret i1 %and\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Miscompilation with libstdc++'s std::optional<int> and -O1",
    "body": "https://godbolt.org/z/KjEreWf57\r\n\r\nWith Clang 18.1 and libstdc++, we get different behavior when compared to Clang 17 in the code below.\r\nEDIT: requires at least -O1.\r\n\r\n```cpp\r\n#include <optional>\r\n#include <iostream>\r\n\r\n// defined in a separate compilation unit\r\nint takeIntRefAndReturn0(int&);\r\n\r\nstd::optional<int> shouldReturnEmptyOptional() {\r\n  int v = 5;\r\n  if (takeIntRefAndReturn0(v))\r\n    return v;\r\n  return std::nullopt;\r\n}\r\n\r\nint main() {\r\n  auto opt = shouldReturnEmptyOptional();\r\n  if (opt && *opt > 0) {\r\n    std::cout << \"SHOULD NOT BE PRINTED: *opt = \" << *opt << std::endl;\r\n    return 1;\r\n  }\r\n  std::cout << \"SHOULD BE PRINTED\" << std::endl;\r\n}\r\n```\r\n\r\nWith Clang 17, we get `SHOULD BE PRINTED`, while with with Clang 18.1 we get  `SHOULD NOT BE PRINTED: *opt = 5`.\r\n\r\nWith git-bisect, I found that this is caused by https://github.com/llvm/llvm-project/commit/060de415af335fdd82910f409e2be3b8457eaa43.\r\n\r\nAn isomorphic example to reproduce this (https://godbolt.org/z/9PsjY17sT):\r\n```cpp\r\nint takeIntRefReturn0(int &);\r\nvoid assertNotReached(int);\r\n\r\nstatic bool logicalAnd(bool a, bool b) { return a && b; }\r\n\r\nint main() {\r\n  int v4;\r\n  bool v3;\r\n  {\r\n    int v1 = 5;\r\n    int v2 = takeIntRefReturn0(v1);\r\n    v3 = v2 != 0;\r\n    if (v3)\r\n      v4 = v1;\r\n  }\r\n  // Move  to a function so that && is not short cutted.\r\n  // v4 will be undefined if v2 == 0, but v3 is false, so the branch shouldn't be entered.\r\n  if (logicalAnd(v3, v4 > 0))\r\n    assertNotReached(v4);\r\n\r\n  return 0;\r\n}\r\n```\r\nNote in the generated LLVM IR that\r\n```llvm\r\n%6 = icmp sgt i32 %5, 0\r\n%7 = and i1 %3, %6\r\nbr i1 %7, label %8, label %9\r\n``` \r\nwas reduced to only\r\n```llvm\r\n%6 = icmp sgt i32 %5, 0\r\nbr i1 %6, label %7, label %8\r\n```",
    "author": "cadubentzen",
    "labels": [
      "regression",
      "miscompilation",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/p4ZGxe\r\n```\r\n; bin/opt -passes=instcombine test.ll -S\r\ndefine i1 @src(i32 noundef %x, i32 %y) {\r\n  %3 = icmp ne i32 %x, 0\r\n  %5 = select i1 %3, i32 %y, i32 undef\r\n  %6 = icmp sgt i32 %5, 0\r\n  %7 = and i1 %3, %6\r\n  br i1 %7, label %if.then, label %if.else\r\n\r\nif.then:\r\n  call void @use(i32 noundef %5)\r\n  ret i1 true\r\n\r\nif.else:\r\n  ret i1 false\r\n}\r\n\r\ndefine i1 @tgt(i32 noundef %x, i32 %y) {\r\n  %.not = icmp eq i32 %x, 0\r\n  %1 = select i1 %.not, i32 undef, i32 %y\r\n  %2 = icmp sgt i32 %1, 0\r\n  br i1 %2, label %if.then, label %if.else\r\n\r\nif.then:                                          ; preds = %0\r\n  call void @use(i32 noundef %1)\r\n  ret i1 true\r\n\r\nif.else:                                          ; preds = %0\r\n  ret i1 false\r\n}\r\n\r\ndeclare void @use(i32 %x)\r\n```\r\ncc @nikic"
      },
      {
        "author": "nikic",
        "body": "A bit simpler using just instsimplify: https://alive2.llvm.org/ce/z/tnkf6A"
      },
      {
        "author": "nikic",
        "body": "I expect the fix here is to perform replacements with `Q.getWithoutUndef()`. But probably not just here, but also in other places using simplifyWithOpReplaced(). (Possibly making it always use that mode.)"
      },
      {
        "author": "cadubentzen",
        "body": "Thanks a lot for fixing this so quickly! I wonder if this should be included in 18.1.9?"
      },
      {
        "author": "nikic",
        "body": "The LLVM 18 branch is already closed, there will be no further releases."
      },
      {
        "author": "thesamesam",
        "body": "I'll add the milestone anyway as it's easier to track for downstream backports then."
      }
    ]
  },
  "verified": true
}