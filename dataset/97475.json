{
  "bug_id": "97475",
  "issue_url": "https://github.com/llvm/llvm-project/issues/97475",
  "bug_type": "miscompilation",
  "base_commit": "b77e734e4e6c8f5e016ba3ac49526862e6039482",
  "knowledge_cutoff": "2024-07-02T20:25:03Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "3969d2c3b5f42e4a180f5205efa780b0f950d733",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          4049,
          4055
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::visitSelectInst"
      ]
    }
  },
  "patch": "commit 3969d2c3b5f42e4a180f5205efa780b0f950d733\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Jul 3 09:47:01 2024 +0200\n\n    [InstCombine] Disable select known bits fold for vectors\n    \n    This is not safe if the simplification ends up looking through\n    lane-crossing operations. For now, we don't have a good way to\n    limit this in computeKnownBits(), so just disable vector handling\n    entirely.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/97475.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 736013395e8c..394dfca262e1 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -4049,7 +4049,9 @@ Instruction *InstCombinerImpl::visitSelectInst(SelectInst &SI) {\n   if (CondVal->getType() == SI.getType() && isKnownInversion(FalseVal, TrueVal))\n     return BinaryOperator::CreateXor(CondVal, FalseVal);\n \n-  if (SelType->isIntOrIntVectorTy() &&\n+  // For vectors, this transform is only safe if the simplification does not\n+  // look through any lane-crossing operations. For now, limit to scalars only.\n+  if (SelType->isIntegerTy() &&\n       (!isa<Constant>(TrueVal) || !isa<Constant>(FalseVal))) {\n     // Try to simplify select arms based on KnownBits implied by the condition.\n     CondContext CC(CondVal);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select-binop-cmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "select_xor_icmp_vec_bad",
          "test_body": "define <2 x i8> @select_xor_icmp_vec_bad(<2 x i8> %x, <2 x i8> %y, <2 x i8> %z) {\n  %A = icmp eq <2 x i8> %x, <i8 5, i8 3>\n  %B = xor <2 x i8> %x, %z\n  %C = select <2 x i1> %A, <2 x i8> %B, <2 x i8> %y\n  ret <2 x i8> %C\n}\n"
        },
        {
          "test_name": "vec_select_no_equivalence",
          "test_body": "define <2 x i32> @vec_select_no_equivalence(<2 x i32> %x) {\n  %x10 = shufflevector <2 x i32> %x, <2 x i32> undef, <2 x i32> <i32 1, i32 0>\n  %cond = icmp eq <2 x i32> %x, zeroinitializer\n  %s = select <2 x i1> %cond, <2 x i32> %x10, <2 x i32> %x\n  ret <2 x i32> %s\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "integer vector miscompile from instcombine",
    "body": "I believe this is being mis-optimized:\r\n```lllvm\r\ndefine <4 x i32> @f(<4 x i32> %0) {\r\n  %2 = icmp eq <4 x i32> %0, zeroinitializer\r\n  %3 = shufflevector <4 x i32> %0, <4 x i32> zeroinitializer, <4 x i32> <i32 1, i32 1, i32 0, i32 3>\r\n  %4 = select <4 x i1> %2, <4 x i32> %3, <4 x i32> zeroinitializer\r\n  ret <4 x i32> %4\r\n}\r\n```\r\nI'll just give Alive's reasoning, which is pretty easy to follow and seems correct:\r\n```\r\nregehr@ohm:~$ ~/alive2-regehr/build/alive-tv -passes=instcombine foo.ll\r\n\r\n----------------------------------------\r\ndefine <4 x i32> @f(<4 x i32> %#0) {\r\n#1:\r\n  %#2 = icmp eq <4 x i32> %#0, { 0, 0, 0, 0 }\r\n  %#3 = shufflevector <4 x i32> %#0, <4 x i32> { 0, 0, 0, 0 }, 1, 1, 0, 3\r\n  %#4 = select <4 x i1> %#2, <4 x i32> %#3, <4 x i32> { 0, 0, 0, 0 }\r\n  ret <4 x i32> %#4\r\n}\r\n=>\r\ndefine <4 x i32> @f(<4 x i32> %#0) {\r\n#1:\r\n  ret <4 x i32> { 0, 0, 0, 0 }\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Value mismatch\r\n\r\nExample:\r\n<4 x i32> %#0 = < #x00000000 (0), #x00000001 (1), #x00000000 (0), poison >\r\n\r\nSource:\r\n<4 x i1> %#2 = < #x1 (1), #x0 (0), #x1 (1), poison >\r\n<4 x i32> %#3 = < #x00000001 (1), #x00000001 (1), #x00000000 (0), poison >\r\n<4 x i32> %#4 = < #x00000001 (1), #x00000000 (0), #x00000000 (0), poison >\r\n\r\nTarget:\r\nSource value: < #x00000001 (1), #x00000000 (0), #x00000000 (0), poison >\r\nTarget value: < #x00000000 (0), #x00000000 (0), #x00000000 (0), #x00000000 (0) >\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\nregehr@ohm:~$ \r\n```\r\ncc @nunoplopes ",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Probably caused by https://github.com/llvm/llvm-project/commit/77eb05683082dd3751ccfab963f5160f1852058d. Fell into the vector select trap again."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "77eb05683082dd3751ccfab963f5160f1852058d"
}