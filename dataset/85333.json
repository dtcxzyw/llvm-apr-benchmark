{
  "bug_id": "85333",
  "issue_url": "https://github.com/llvm/llvm-project/issues/85333",
  "bug_type": "miscompilation",
  "base_commit": "fa67986d5b309ddd4c2ea74e8a5eeb0559aa8022",
  "knowledge_cutoff": "2024-03-14T23:23:02Z",
  "lit_test_dir": [
    "llvm/test/Transforms/GVNSink"
  ],
  "hints": {
    "fix_commit": "1c979ab7e59feb03c58cac631a93143b0c776c20",
    "components": [
      "GVNSink"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/GVNSink.cpp": [
        [
          719,
          730
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/GVNSink.cpp": [
        "GVNSink::analyzeInstructionForSinking"
      ]
    }
  },
  "patch": "commit 1c979ab7e59feb03c58cac631a93143b0c776c20\nAuthor: AdityaK <hiraditya@msn.com>\nDate:   Tue Apr 30 11:31:45 2024 -0700\n\n    [GVNSink] Fix incorrect codegen with respect to GEPs #85333 (#88440)\n    \n    As mentioned in #68882 and\n    https://discourse.llvm.org/t/rfc-replacing-getelementptr-with-ptradd/68699\n    \n    Gep arithmetic isn't consistent with different types. GVNSink didn't\n    realize this and sank all geps\n    as long as their operands can be wired via PHIs\n    in a post-dominator.\n    \n    Fixes: #85333\n\ndiff --git a/llvm/lib/Transforms/Scalar/GVNSink.cpp b/llvm/lib/Transforms/Scalar/GVNSink.cpp\nindex d4907326eb0a..1d2577e1da33 100644\n--- a/llvm/lib/Transforms/Scalar/GVNSink.cpp\n+++ b/llvm/lib/Transforms/Scalar/GVNSink.cpp\n@@ -719,12 +719,11 @@ GVNSink::analyzeInstructionForSinking(LockstepReverseIterator &LRI,\n   // try and continue making progress.\n   Instruction *I0 = NewInsts[0];\n \n-  // If all instructions that are going to participate don't have the same\n-  // number of operands, we can't do any useful PHI analysis for all operands.\n-  auto hasDifferentNumOperands = [&I0](Instruction *I) {\n-    return I->getNumOperands() != I0->getNumOperands();\n+  auto isNotSameOperation = [&I0](Instruction *I) {\n+    return !I0->isSameOperationAs(I);\n   };\n-  if (any_of(NewInsts, hasDifferentNumOperands))\n+\n+  if (any_of(NewInsts, isNotSameOperation))\n     return std::nullopt;\n \n   for (unsigned OpNum = 0, E = I0->getNumOperands(); OpNum != E; ++OpNum) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/GVNSink/different-gep-types.ll",
      "commands": [
        "opt -passes=gvn-sink -S %s"
      ],
      "tests": [
        {
          "test_name": "bar",
          "test_body": "target datalayout = \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"\n\n%\"struct.std::pair\" = type <{ i32, %struct.substruct, [2 x i8] }>\n%struct.substruct = type { i8, i8 }\n\ndefine void @bar(ptr noundef nonnull align 4 dereferenceable(4) %__i, i32 noundef %__n) {\nentry:\n  %cmp = icmp eq i32 %__n, 1\n  br i1 %cmp, label %if.then, label %if.else\n\nif.then:                                          ; preds = %entry\n  %0 = load ptr, ptr %__i, align 4\n  %incdec.ptr4 = getelementptr inbounds i8, ptr %0, i32 -8\n  br label %if.end6\n\nif.else:                                          ; preds = %entry\n  %1 = load ptr, ptr %__i, align 4\n  %add.ptr = getelementptr inbounds %\"struct.std::pair\", ptr %1, i32 %__n\n  br label %if.end6\n\nif.end6:                                          ; preds = %if.else, %if.then\n  %incdec.ptr.sink = phi ptr [ %incdec.ptr4, %if.then ], [ %add.ptr, %if.else ]\n  store ptr %incdec.ptr.sink, ptr %__i, align 4\n  ret void\n}\n"
        },
        {
          "test_name": "foo",
          "test_body": "target datalayout = \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"\n\ndefine void @foo(ptr noundef nonnull align 4 dereferenceable(4) %__i, i32 noundef %__n) {\nentry:\n  %cmp = icmp eq i32 %__n, 1\n  br i1 %cmp, label %if.then, label %if.else\n\nif.then:                                          ; preds = %entry\n  %0 = load ptr, ptr %__i, align 4\n  %incdec.ptr = getelementptr inbounds i8, ptr %0, i32 8\n  store ptr %incdec.ptr, ptr %__i, align 4\n  br label %if.end6\n\nif.else:                                          ; preds = %entry\n  %cmp2 = icmp eq i32 %__n, -1\n  br i1 %cmp2, label %if.then3, label %if.else5\n\nif.then3:                                         ; preds = %if.else\n  %1 = load ptr, ptr %__i, align 4\n  %incdec.ptr4 = getelementptr inbounds i8, ptr %1, i32 -8\n  store ptr %incdec.ptr4, ptr %__i, align 4\n  br label %if.end6\n\nif.else5:                                         ; preds = %if.else\n  %2 = load ptr, ptr %__i, align 4\n  %add.ptr = getelementptr inbounds i8, ptr %2, i32 -4\n  store ptr %add.ptr, ptr %__i, align 4\n  br label %if.end6\n\nif.end6:                                          ; preds = %if.else5, %if.then3, %if.then\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "GVNSink produces incorrect codegen with respect to GEPs",
    "body": "```llvm\r\ntarget datalayout = \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"\r\ntarget triple = \"thumbv7em-none-unknown-eabi\"\r\n\r\n%\"struct.std::pair\" = type <{ i32, %struct.substruct, [2 x i8] }>\r\n%struct.substruct = type { i8, i8 }\r\n%\"struct.std::random_access_iterator_tag\" = type { i8 }\r\n\r\ndefine linkonce_odr dso_local void @__advance(ptr noundef nonnull align 4 dereferenceable(4) %__i, i32 noundef %__n) local_unnamed_addr {\r\nentry:\r\n  %0 = call i1 @llvm.is.constant.i32(i32 %__n)\r\n  %cmp = icmp eq i32 %__n, 1\r\n  %or.cond = and i1 %0, %cmp\r\n  br i1 %or.cond, label %if.then, label %if.else\r\n\r\nif.then:                                          ; preds = %entry\r\n  %1 = load ptr, ptr %__i, align 4\r\n  %incdec.ptr = getelementptr inbounds i8, ptr %1, i32 8\r\n  store ptr %incdec.ptr, ptr %__i, align 4\r\n  br label %if.end6\r\n\r\nif.else:                                          ; preds = %entry\r\n  %2 = call i1 @llvm.is.constant.i32(i32 %__n)\r\n  %cmp2 = icmp eq i32 %__n, -1\r\n  %or.cond7 = and i1 %2, %cmp2\r\n  br i1 %or.cond7, label %if.then3, label %if.else5\r\n\r\nif.then3:                                         ; preds = %if.else\r\n  %3 = load ptr, ptr %__i, align 4\r\n  %incdec.ptr4 = getelementptr inbounds i8, ptr %3, i32 -8\r\n  store ptr %incdec.ptr4, ptr %__i, align 4\r\n  br label %if.end6\r\n\r\nif.else5:                                         ; preds = %if.else\r\n  %4 = load ptr, ptr %__i, align 4\r\n  %add.ptr = getelementptr inbounds %\"struct.std::pair\", ptr %4, i32 %__n\r\n  store ptr %add.ptr, ptr %__i, align 4\r\n  br label %if.end6\r\n\r\nif.end6:                                          ; preds = %if.then3, %if.else5, %if.then\r\n  ret void\r\n}\r\n```\r\n\r\nThe above IR when piped through gvn-sink via `./bin/opt < /tmp/repro.ll -passes=gvn-sink -S` produces:\r\n\r\n```llvm\r\n; ModuleID = '<stdin>'\r\nsource_filename = \"<stdin>\"\r\ntarget datalayout = \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\"\r\ntarget triple = \"thumbv7em-none-unknown-eabi\"\r\n\r\ndefine linkonce_odr dso_local void @__advance(ptr noundef nonnull align 4 dereferenceable(4) %__i, i32 noundef %__n) local_unnamed_addr {\r\nentry:\r\n  %0 = call i1 @llvm.is.constant.i32(i32 %__n)\r\n  %cmp = icmp eq i32 %__n, 1\r\n  %or.cond = and i1 %0, %cmp\r\n  br i1 %or.cond, label %if.then, label %if.else\r\n\r\nif.then:                                          ; preds = %entry\r\n  br label %if.end6\r\n\r\nif.else:                                          ; preds = %entry\r\n  %1 = call i1 @llvm.is.constant.i32(i32 %__n)\r\n  %cmp2 = icmp eq i32 %__n, -1\r\n  %or.cond7 = and i1 %1, %cmp2\r\n  br i1 %or.cond7, label %if.then3, label %if.else5\r\n\r\nif.then3:                                         ; preds = %if.else\r\n  br label %if.end6\r\n\r\nif.else5:                                         ; preds = %if.else\r\n  br label %if.end6\r\n\r\nif.end6:                                          ; preds = %if.else5, %if.then3, %if.then\r\n  %.sink1 = phi i32 [ 8, %if.then ], [ -8, %if.then3 ], [ %__n, %if.else5 ]\r\n  %2 = load ptr, ptr %__i, align 4\r\n  %incdec.ptr = getelementptr inbounds i8, ptr %2, i32 %.sink1\r\n  store ptr %incdec.ptr, ptr %__i, align 4\r\n  ret void\r\n}\r\n\r\n; Function Attrs: convergent nocallback nofree nosync nounwind willreturn memory(none)\r\ndeclare i1 @llvm.is.constant.i32(i32) #0\r\n\r\nattributes #0 = { convergent nocallback nofree nosync nounwind willreturn memory(none) }\r\n```\r\n\r\nThe GEP in the result is incorrect. Prior, the GEPs were\r\n```llvm\r\n  %incdec.ptr = getelementptr inbounds i8, ptr %1, i32 8\r\n  %incdec.ptr4 = getelementptr inbounds i8, ptr %3, i32 -8\r\n  %add.ptr = getelementptr inbounds %\"struct.std::pair\", ptr %4, i32 %__n\r\n```\r\nbut now it's\r\n```llvm\r\n%incdec.ptr = getelementptr inbounds i8, ptr %2, i32 %.sink1\r\n```\r\nThis results in an incorrect offset for `%add.ptr = getelementptr inbounds %\"struct.std::pair\", ptr %4, i32 %__n` since we'd now just add `%.sink1` bytes (where `%.sink1 = %__n` which is the second argument), whereas before we'd add `%__n * 8` bytes (where 8 is the sizeof `%\"struct.std::pair\"`).\r\n\r\nThe before ASM is:\r\n```asm\r\n__advance:\r\n        ldr     r2, [r0]\r\n        add.w   r1, r2, r1, lsl #3\r\n        str     r1, [r0]\r\n        bx      lr\r\n```\r\nbut the after asm is:\r\n```asm\r\n__advance:\r\n        ldr     r2, [r0]\r\n        add     r1, r2\r\n        str     r1, [r0]\r\n        bx      lr\r\n```\r\n\r\nThe GEP should not be a candidate for sinking.",
    "author": "PiJoules",
    "labels": [
      "bug",
      "miscompilation",
      "llvm:GVN"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}