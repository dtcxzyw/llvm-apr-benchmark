{
  "bug_id": "148260",
  "issue_url": "https://github.com/llvm/llvm-project/issues/148260",
  "bug_type": "crash",
  "base_commit": "69ea174bf07533b7f63139f78b0ec3d3766aedc4",
  "knowledge_cutoff": "2025-07-11T16:27:05Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "c363a3f9c858b38afa34f3a8ebcc3fa7a4062315",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          8112,
          8118
        ],
        [
          8120,
          8125
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "VPRecipeBuilder::getScaledReductions"
      ]
    }
  },
  "patch": "commit c363a3f9c858b38afa34f3a8ebcc3fa7a4062315\nAuthor: David Sherwood <david.sherwood@arm.com>\nDate:   Tue Jul 15 09:54:58 2025 +0100\n\n    [LV] Ensure getScaledReductions only matches extends inside the loop (#148264)\n    \n    In getScaledReductions for the case where we try to match a partial\n    reduction of the form:\n    \n    %phi = phi i32 ...\n    ...\n    %add = add i32 %phi, %zext\n    \n    where\n    \n    %zext = i8 %some_val to i32\n    \n    we should ensure that %zext is actually inside the loop.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/148260\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 5380a0fc6498..06db89a89bc3 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -8112,7 +8112,7 @@ bool VPRecipeBuilder::getScaledReductions(\n   std::optional<unsigned> BinOpc;\n   Type *ExtOpTypes[2] = {nullptr};\n \n-  auto CollectExtInfo = [&Exts,\n+  auto CollectExtInfo = [this, &Exts,\n                          &ExtOpTypes](SmallVectorImpl<Value *> &Ops) -> bool {\n     unsigned I = 0;\n     for (Value *OpI : Ops) {\n@@ -8120,6 +8120,11 @@ bool VPRecipeBuilder::getScaledReductions(\n       if (!match(OpI, m_ZExtOrSExt(m_Value(ExtOp))))\n         return false;\n       Exts[I] = cast<Instruction>(OpI);\n+\n+      // TODO: We should be able to support live-ins.\n+      if (!CM.TheLoop->contains(Exts[I]))\n+        return false;\n+\n       ExtOpTypes[I] = ExtOp->getType();\n       I++;\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/partial-reduce.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-interleave=1 -enable-epilogue-vectorization=false -S < %s",
        "opt -passes=loop-vectorize -enable-epilogue-vectorization=false -S < %s",
        "opt -passes=loop-vectorize -force-vector-interleave=1 -vectorizer-maximize-bandwidth -enable-epilogue-vectorization=false -S < %s"
      ],
      "tests": [
        {
          "test_name": "add_of_zext_outside_loop",
          "test_body": "target datalayout = \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"aarch64-none-unknown-elf\"\n\n; Function Attrs: vscale_range(1,16)\ndefine i32 @add_of_zext_outside_loop(i32 %a, ptr noalias %b, i8 %c, i32 %d) #0 {\nentry:\n  %conv1 = zext i8 %c to i32\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i32 [ %d, %entry ], [ %iv.next, %for.body ]\n  %rdx = phi i32 [ %a, %entry ], [ %rdx.next, %for.body ]\n  %arrayidx = getelementptr inbounds i8, ptr %b, i32 %iv\n  store i8 0, ptr %arrayidx, align 1\n  %rdx.next = add nsw i32 %rdx, %conv1\n  %iv.next = add nuw nsw i32 %iv, 1\n  %cmp = icmp eq i32 %iv.next, 1024\n  br i1 %cmp, label %exit, label %for.body\n\nexit:                                             ; preds = %for.body\n  %add.lcssa = phi i32 [ %rdx.next, %for.body ]\n  ret i32 %add.lcssa\n}\n\nattributes #0 = { vscale_range(1,16) \"target-features\"=\"+sve\" }\n"
        },
        {
          "test_name": "add_of_loop_invariant_zext",
          "test_body": "target datalayout = \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"aarch64-none-unknown-elf\"\n\n; Function Attrs: vscale_range(1,16)\ndefine i32 @add_of_loop_invariant_zext(i32 %a, ptr %b, i8 %c, i32 %d) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i32 [ %d, %entry ], [ %iv.next, %for.body ]\n  %rdx = phi i32 [ %a, %entry ], [ %rdx.next, %for.body ]\n  %arrayidx = getelementptr inbounds i8, ptr %b, i32 %iv\n  store i8 0, ptr %arrayidx, align 1\n  %conv1 = zext i8 %c to i32\n  %rdx.next = add nsw i32 %rdx, %conv1\n  %iv.next = add nuw nsw i32 %iv, 1\n  %cmp = icmp eq i32 %iv.next, 1024\n  br i1 %cmp, label %exit, label %for.body\n\nexit:                                             ; preds = %for.body\n  %add.lcssa = phi i32 [ %rdx.next, %for.body ]\n  ret i32 %add.lcssa\n}\n\nattributes #0 = { vscale_range(1,16) \"target-features\"=\"+sve\" }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LV] Assertion `Val && \"isa<> used on a null pointer\"' failed",
    "body": "Compile this:\n\n```\nint a;\nextern bool b[];\nchar d, c;\nvoid f() {\n  for (int e(d); e; e += 4LL) {\n    b[e] = 0;\n    a += c;\n  }\n}\n```\n\nwith:\n\n    clang++  -Ofast  -mcpu=grace  -c func.cpp\n\nto trigger this assert:\n\n```\nllvm/include/llvm/Support/Casting.h:109: static bool llvm::isa_impl_cl<llvm::VPWidenCastRecipe, const llvm::VPRecipeBase *>::doit(const From *) [To = llvm::VPWidenCastRecipe, From = const llvm::VPRecipeBase *]: Assertion `Val && \"isa<> used on a null pointer\"' failed.\n```\n\nSee also: https://godbolt.org/z/G9nM71bbr",
    "author": "sjoerdmeijer",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "david-arm",
        "body": "OK I'll take a look."
      },
      {
        "author": "david-arm",
        "body": "I think I have a fix. We're attempting to match a partial reduction where the extended value lives outside the loop."
      },
      {
        "author": "david-arm",
        "body": "@sjoerdmeijer FYI https://github.com/llvm/llvm-project/pull/148264"
      },
      {
        "author": "sjoerdmeijer",
        "body": "Thanks for the quick fix @david-arm !"
      }
    ]
  },
  "verified": true
}