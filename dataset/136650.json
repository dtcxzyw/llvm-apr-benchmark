{
  "bug_id": "136650",
  "issue_url": "https://github.com/llvm/llvm-project/issues/136650",
  "bug_type": "miscompilation",
  "base_commit": "2e389cb9aae0e9734fc8e16f6ebc6edb392d79a9",
  "knowledge_cutoff": "2025-04-22T03:44:35Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "8abc917fe04140b6c6088a67e0398f637efde808",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          1480,
          1486
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "InstCombinerImpl::foldLogicOfFCmps"
      ]
    }
  },
  "patch": "commit 8abc917fe04140b6c6088a67e0398f637efde808\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu Apr 24 00:12:30 2025 +0800\n\n    [InstCombine] Do not fold logical is_finite test (#136851)\n    \n    This patch disables the fold for logical is_finite test (i.e., `and\n    (fcmp ord x, 0), (fcmp u* x, inf) -> fcmp o* x, inf`).\n    It is still possible to allow this fold for several logical cases (e.g.,\n    `stripSignOnlyFPOps(RHS0)` does not strip any operations). Since this\n    patch has no real-world impact, I decided to disable this fold for all\n    logical cases.\n    \n    Alive2: https://alive2.llvm.org/ce/z/aH4LC7\n    Closes https://github.com/llvm/llvm-project/issues/136650.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex f1b225c0f238..979a9cbedf2e 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -1480,7 +1480,9 @@ Value *InstCombinerImpl::foldLogicOfFCmps(FCmpInst *LHS, FCmpInst *RHS,\n     }\n   }\n \n-  if (IsAnd && stripSignOnlyFPOps(LHS0) == stripSignOnlyFPOps(RHS0)) {\n+  // This transform is not valid for a logical select.\n+  if (!IsLogicalSelect && IsAnd &&\n+      stripSignOnlyFPOps(LHS0) == stripSignOnlyFPOps(RHS0)) {\n     // and (fcmp ord x, 0), (fcmp u* x, inf) -> fcmp o* x, inf\n     // and (fcmp ord x, 0), (fcmp u* fabs(x), inf) -> fcmp o* x, inf\n     if (Value *Left = matchIsFiniteTest(Builder, LHS, RHS))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/and-fcmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "clang_builtin_isnormal_inf_check_fabs_nnan_logical_select",
          "test_body": "define i1 @clang_builtin_isnormal_inf_check_fabs_nnan_logical_select(half %x) {\n  %copysign.x = call nnan half @llvm.fabs.f16(half %x)\n  %ord = fcmp ord half %x, 0xH0000\n  %cmp = fcmp uge half %copysign.x, 0xH7C00\n  %and = select i1 %ord, i1 %cmp, i1 false\n  ret i1 %and\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare half @llvm.fabs.f16(half) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "clang_builtin_isnormal_inf_check_copysign_logical_select",
          "test_body": "define i1 @clang_builtin_isnormal_inf_check_copysign_logical_select(half %x, half %y) {\n  %copysign.x = call half @llvm.copysign.f16(half %x, half %y)\n  %ord = fcmp ord half %x, 0xH0000\n  %cmp = fcmp uge half %copysign.x, 0xH7C00\n  %and = select i1 %ord, i1 %cmp, i1 false\n  ret i1 %and\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare half @llvm.copysign.f16(half, half) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "isnormal_logical_select_0",
          "test_body": "define i1 @isnormal_logical_select_0(half %x) {\n  %fabs.x = call half @llvm.fabs.f16(half %x)\n  %ord = fcmp ord half %fabs.x, 0xH0000\n  %cmp.inf = fcmp uge half %fabs.x, 0xH7C00\n  %and = select i1 %ord, i1 %cmp.inf, i1 false\n  ret i1 %and\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare half @llvm.fabs.f16(half) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "clang_builtin_isnormal_inf_check_copysign",
          "test_body": "define i1 @clang_builtin_isnormal_inf_check_copysign(half %x, half %y) {\n  %copysign.x = call half @llvm.copysign.f16(half %x, half %y)\n  %ord = fcmp ord half %x, 0xH0000\n  %cmp = fcmp uge half %copysign.x, 0xH7C00\n  %and = and i1 %ord, %cmp\n  ret i1 %and\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare half @llvm.copysign.f16(half, half) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Poison safety violation in `foldLogicOfFCmps`",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/Qcvvgi\n```\n----------------------------------------\ndefine i1 @src(half %x, half %y) {\n#0:\n  %copysign.x = copysign half %x, %y\n  %ord = fcmp ord half %x, 0x0000\n  %cmp = fcmp uge half %copysign.x, 0x7c00\n  %#1 = select i1 %ord, i1 %cmp, i1 0\n  ret i1 %#1\n}\n=>\ndefine i1 @src(half %x, half %y) nofree willreturn memory(none) {\n#0:\n  %copysign.x = copysign half %x, %y\n  %#1 = fcmp oeq half %copysign.x, 0x7c00\n  ret i1 %#1\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\nhalf %x = #x7c02 (SNaN)\nhalf %y = poison\n\nSource:\nhalf %copysign.x = poison\ni1 %ord = #x0 (0)\ni1 %cmp = poison\ni1 %#1 = #x0 (0)\n\nTarget:\nhalf %copysign.x = poison\ni1 %#1 = poison\nSource value: #x0 (0)\nTarget value: poison\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true
}