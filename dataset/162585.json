{
  "bug_id": "162585",
  "issue_url": "https://github.com/llvm/llvm-project/issues/162585",
  "bug_type": "crash",
  "base_commit": "ab897ae2e08646e7c60fb61d71df5616950beb66",
  "knowledge_cutoff": "2025-10-09T02:23:05Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SimplifyCFG"
  ],
  "hints": {
    "fix_commit": "e9205ca8cf4235647c3ec2a1946850751ce4e1c8",
    "components": [
      "SimplifyCFG"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        [
          5959,
          5965
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        "SimplifyCFGOpt::turnSwitchRangeIntoICmp"
      ]
    }
  },
  "patch": "commit e9205ca8cf4235647c3ec2a1946850751ce4e1c8\nAuthor: dianqk <dianqk@dianqk.net>\nDate:   Fri Oct 10 06:44:00 2025 +0800\n\n    [SimplifyCFG] Remove all incoming values from OtherDest if OtherDest is unreachable (#162677)\n    \n    Fixes #162585.\n    \n    #161000 changed `br i1 true, label %if, label %else` to `br label %if`,\n    so we should remove one more incoming value.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\nindex 155fcc50bdeb..9ac3be1e1206 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n@@ -5959,7 +5959,11 @@ bool SimplifyCFGOpt::turnSwitchRangeIntoICmp(SwitchInst *SI,\n     unsigned PreviousEdges = OtherCases->size();\n     if (OtherDest == SI->getDefaultDest())\n       ++PreviousEdges;\n-    for (unsigned I = 0, E = PreviousEdges - 1; I != E; ++I)\n+    unsigned E = PreviousEdges - 1;\n+    // Remove all incoming values from OtherDest if OtherDest is unreachable.\n+    if (NewBI->isUnconditional())\n+      ++E;\n+    for (unsigned I = 0; I != E; ++I)\n       cast<PHINode>(BBI)->removeIncomingValue(SI->getParent());\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SimplifyCFG/switch-range-to-icmp.ll",
      "commands": [
        "opt %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -switch-range-to-icmp -S"
      ],
      "tests": [
        {
          "test_name": "else_will_be_unreachable",
          "test_body": "define i32 @else_will_be_unreachable(i1 %arg) {\nentry:\n  switch i1 %arg, label %else [\n    i1 false, label %if\n    i1 true, label %if\n  ]\n\nif:                                               ; preds = %entry, %entry\n  br i1 %arg, label %else, label %bb\n\nbb:                                               ; preds = %if\n  br label %else\n\nelse:                                             ; preds = %bb, %if, %entry\n  %i = phi i32 [ 0, %entry ], [ 0, %if ], [ 1, %bb ]\n  ret i32 %i\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SimplifyCFG] PHINode should have one entry for each predecessor of its parent basic block!",
    "body": "Reproducer: https://godbolt.org/z/aP7nrYf57\n```\n; bin/opt -passes=\"simplifycfg<switch-range-to-icmp>\" reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32\"\ntarget triple = \"aarch64-unknown-linux\"\n\ndefine i32 @r535_gr_promote_ctx(i1 %0) {\n  switch i1 %0, label %5 [\n    i1 false, label %2\n    i1 true, label %2\n  ]\n\n2:\n  br i1 %0, label %5, label %3\n\n3:\n  br label %5\n\n5:\n  %6 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 1, %3 ]\n  ret i32 %6\n}\n```\n```\nPHINode should have one entry for each predecessor of its parent basic block!\n  %4 = phi i32 [ %spec.select, %1 ], [ 0, %1 ], [ %spec.select, %2 ]\nLLVM ERROR: Broken module found, compilation aborted!\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace and instructions to reproduce the bug.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=simplifycfg<switch-range-to-icmp> <source>\n1.\tRunning pass \"verify\" on module \"<source>\"\n #0 0x0000000005915ae8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5915ae8)\n #1 0x0000000005912994 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007062ae242520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007062ae2969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007062ae242476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007062ae2287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00000000008322ef llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\n #7 0x000000000584be91 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x584be91)\n #8 0x000000000573c998 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x573c998)\n #9 0x00000000009766ce llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9766ce)\n#10 0x00000000056f9da1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x56f9da1)\n#11 0x000000000098080a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x98080a)\n#12 0x0000000000974a57 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x974a57)\n#13 0x00007062ae229d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#14 0x00007062ae229e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#15 0x000000000096bb65 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96bb65)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\nOriginally reported by @nathanchance :https://github.com/llvm/llvm-project/pull/161000#issuecomment-3382948552\n",
    "author": "dtcxzyw",
    "labels": [
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true
}