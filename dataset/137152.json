{
  "bug_id": "137152",
  "issue_url": "https://github.com/llvm/llvm-project/issues/137152",
  "bug_type": "crash",
  "base_commit": "224cd50e005a9215e8c528d5ce68d4fcdfcdb98f",
  "knowledge_cutoff": "2025-04-24T10:47:46Z",
  "lit_test_dir": [
    "llvm/test/Transforms/GlobalOpt"
  ],
  "hints": {
    "fix_commit": "57530c23a53b5e003d389437637f61c5b9814e22",
    "components": [
      "GlobalOpt"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/IPO/GlobalOpt.cpp": [
        [
          719,
          728
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/GlobalOpt.cpp": [
        "allUsesOfLoadedValueWillTrapIfNull"
      ]
    }
  },
  "patch": "commit 57530c23a53b5e003d389437637f61c5b9814e22\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Thu Apr 24 15:15:47 2025 +0200\n\n    [GlobalOpt] Do not promote malloc if there are atomic loads/stores (#137158)\n    \n    When converting a malloc stored to a global into a global, we will\n    introduce an i1 flag to track whether the global has been initialized.\n    \n    In case of atomic loads/stores, this will result in verifier failures,\n    because atomic ops on i1 are illegal. Even if we changed this to i8, I\n    don't think it is a good idea to change atomic types in that way.\n    \n    Instead, bail out of the transform is we encounter any atomic\n    loads/stores of the global.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/137152.\n\ndiff --git a/llvm/lib/Transforms/IPO/GlobalOpt.cpp b/llvm/lib/Transforms/IPO/GlobalOpt.cpp\nindex cfba8dcc05b2..3771cccbde17 100644\n--- a/llvm/lib/Transforms/IPO/GlobalOpt.cpp\n+++ b/llvm/lib/Transforms/IPO/GlobalOpt.cpp\n@@ -719,10 +719,14 @@ static bool allUsesOfLoadedValueWillTrapIfNull(const GlobalVariable *GV) {\n     const Value *P = Worklist.pop_back_val();\n     for (const auto *U : P->users()) {\n       if (auto *LI = dyn_cast<LoadInst>(U)) {\n+        if (!LI->isSimple())\n+          return false;\n         SmallPtrSet<const PHINode *, 8> PHIs;\n         if (!AllUsesOfValueWillTrapIfNull(LI, PHIs))\n           return false;\n       } else if (auto *SI = dyn_cast<StoreInst>(U)) {\n+        if (!SI->isSimple())\n+          return false;\n         // Ignore stores to the global.\n         if (SI->getPointerOperand() != P)\n           return false;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/GlobalOpt/malloc-promote-atomic.ll",
      "commands": [
        "opt -passes=globalopt -S < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n@g = internal global ptr null, align 8\n\ndefine void @init() {\n;\n  %alloc = call ptr @malloc(i64 48)\n  store atomic ptr %alloc, ptr @g seq_cst, align 8\n  ret void\n}\n\ndefine i1 @check() {\n;\n  %val = load atomic ptr, ptr @g seq_cst, align 8\n  %cmp = icmp eq ptr %val, null\n  ret i1 %cmp\n}\n\ndeclare ptr @malloc(i64) allockind(\"alloc,uninitialized\") allocsize(0)"
        }
      ]
    }
  ],
  "issue": {
    "title": "[GlobalOpt] Incorrect change of atomic type",
    "body": "```llvm\n; RUN: opt -S -passes=globalopt\n@g = internal global ptr null, align 8\n\ndefine void @init() {\n  %alloc = call ptr @malloc(i64 48)\n  store atomic ptr %alloc, ptr @g seq_cst, align 8\n  ret void\n} \n\ndefine i1 @check() {\n  %val = load atomic ptr, ptr @g seq_cst, align 8\n  %cmp = icmp eq ptr %val, null\n  ret i1 %cmp\n}\n\ndeclare ptr @malloc(i64) allockind(\"alloc,uninitialized\") allocsize(0)\n```\nResults in:\n```\natomic memory access' size must be byte-sized\n i1  store atomic i1 true, ptr @g.init seq_cst, align 1\natomic memory access' size must be byte-sized\n i1  %g.init.val = load atomic i1, ptr @g.init seq_cst, align 1\nLLVM ERROR: Broken module found, compilation aborted!\n```\n",
    "author": "nikic",
    "labels": [
      "ipo",
      "release:backport",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}