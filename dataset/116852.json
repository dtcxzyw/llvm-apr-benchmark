{
  "bug_id": "116852",
  "issue_url": "https://github.com/llvm/llvm-project/issues/116852",
  "bug_type": "crash",
  "base_commit": "d8a1c6d72739c99f4b52a84e907b96b685b44c5e",
  "knowledge_cutoff": "2024-11-19T18:03:10Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "79682c4d57620e623fb30271cc8003d0c9e14a01",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13614,
          13620
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::gather"
      ]
    }
  },
  "patch": "commit 79682c4d57620e623fb30271cc8003d0c9e14a01\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Nov 19 11:03:11 2024 -0800\n\n    [SLP]Check if the buildvector root is not a part of the graph before deletion\n    \n    If the buildvector root has no uses, it might be still needed as a part\n    of the graph, so need to check that it is not a part of the graph before\n    deletion.\n    \n    Fixes #116852\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex dc0dffd9fcbf..e70627b6afc1 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13614,7 +13614,10 @@ Value *BoUpSLP::gather(\n     } else {\n       Vec = CreateShuffle(Root, Vec, Mask);\n       if (auto *OI = dyn_cast<Instruction>(OriginalRoot);\n-          OI && OI->hasNUses(0))\n+          OI && OI->hasNUses(0) &&\n+          none_of(VectorizableTree, [&](const std::unique_ptr<TreeEntry> &TE) {\n+            return TE->VectorizedValue == OI;\n+          }))\n         eraseInstruction(OI);\n     }\n   }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/bv-root-part-of-graph.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test() {\n;\nbb:\n  br label %bb1\n\nbb1:\n  %phi = phi i32 [ 0, %bb ], [ %or21, %bb1 ]\n  %sitofp = sitofp i32 0 to float\n  %fadd = fadd float %sitofp, %sitofp\n  %fadd2 = fadd float %fadd, 0.000000e+00\n  %fcmp = fcmp ogt float %fadd2, 0.000000e+00\n  %select = select i1 %fcmp, i32 0, i32 0\n  %select3 = select i1 false, i32 %select, i32 0\n  %fadd4 = fadd float %sitofp, 0.000000e+00\n  %fadd5 = fadd float %fadd4, 0.000000e+00\n  %fcmp6 = fcmp ogt float %fadd5, 0.000000e+00\n  %select7 = select i1 %fcmp6, i32 0, i32 0\n  %select8 = select i1 false, i32 %select7, i32 0\n  %or = or i32 %select3, %select8\n  %sitofp9 = sitofp i32 0 to float\n  %fmul = fmul float 0.000000e+00, 0.000000e+00\n  %fadd10 = fadd float %sitofp9, %fmul\n  %fadd11 = fadd float %fadd10, 0.000000e+00\n  %fcmp12 = fcmp ogt float %fadd11, 0.000000e+00\n  %select13 = select i1 %fcmp12, i32 0, i32 0\n  %select14 = select i1 false, i32 %select13, i32 0\n  %or15 = or i32 %select14, %or\n  %fadd16 = fadd float %fmul, 0.000000e+00\n  %fadd17 = fadd float %fadd16, 0.000000e+00\n  %fcmp18 = fcmp ogt float %fadd17, 0.000000e+00\n  %select19 = select i1 %fcmp18, i32 0, i32 0\n  %select20 = select i1 false, i32 %select19, i32 0\n  %or21 = or i32 %or15, %select20\n  br label %bb1\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `I->use_empty() && \"trying to erase instruction with users.\"' failed.",
    "body": "To reproduce run the test below with -passes=slp-vectorizer\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @wombat() gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb1, %bb\r\n  %phi = phi i32 [ 0, %bb ], [ %or21, %bb1 ]\r\n  %sitofp = sitofp i32 0 to float\r\n  %fadd = fadd float %sitofp, %sitofp\r\n  %fadd2 = fadd float %fadd, 0.000000e+00\r\n  %fcmp = fcmp ogt float %fadd2, 0.000000e+00\r\n  %select = select i1 %fcmp, i32 0, i32 0\r\n  %select3 = select i1 false, i32 %select, i32 0\r\n  %fadd4 = fadd float %sitofp, 0.000000e+00\r\n  %fadd5 = fadd float %fadd4, 0.000000e+00\r\n  %fcmp6 = fcmp ogt float %fadd5, 0.000000e+00\r\n  %select7 = select i1 %fcmp6, i32 0, i32 0\r\n  %select8 = select i1 false, i32 %select7, i32 0\r\n  %or = or i32 %select3, %select8\r\n  %sitofp9 = sitofp i32 0 to float\r\n  %fmul = fmul float 0.000000e+00, 0.000000e+00\r\n  %fadd10 = fadd float %sitofp9, %fmul\r\n  %fadd11 = fadd float %fadd10, 0.000000e+00\r\n  %fcmp12 = fcmp ogt float %fadd11, 0.000000e+00\r\n  %select13 = select i1 %fcmp12, i32 0, i32 0\r\n  %select14 = select i1 false, i32 %select13, i32 0\r\n  %or15 = or i32 %select14, %or\r\n  %fadd16 = fadd float %fmul, 0.000000e+00\r\n  %fadd17 = fadd float %fadd16, 0.000000e+00\r\n  %fcmp18 = fcmp ogt float %fadd17, 0.000000e+00\r\n  %select19 = select i1 %fcmp18, i32 0, i32 0\r\n  %select20 = select i1 false, i32 %select19, i32 0\r\n  %or21 = or i32 %or15, %select20\r\n  br label %bb1\r\n}\r\n```\r\nReproducer: https://godbolt.org/z/T8j1xEoKM\r\nStack dump:\r\n```\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\r\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\r\n2.\tRunning pass \"slp-vectorizer\" on function \"wombat\"\r\n #0 0x0000000005194b38 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5194b38)\r\n #1 0x000000000519252c SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007eacdf842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x00007eacdf8969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x00007eacdf842476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x00007eacdf8287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00007eacdf82871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x00007eacdf839e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x000000000419bb4f (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x419bb4f)\r\n #9 0x000000000425f0bf llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n#10 0x000000000425fa7b llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x425fa7b)\r\n#11 0x0000000002fbe41e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2fbe41e)\r\n#12 0x0000000004f949e8 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f949e8)\r\n#13 0x0000000000e4027e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe4027e)\r\n#14 0x0000000004f9340e llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f9340e)\r\n#15 0x0000000000e3f92e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe3f92e)\r\n#16 0x0000000004f92e40 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f92e40)\r\n#17 0x0000000000909fda llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x909fda)\r\n#18 0x00000000008fc70a optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8fc70a)\r\n#19 0x00007eacdf829d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#20 0x00007eacdf829e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#21 0x00000000008f3e9e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8f3e9e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```\r\n",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}