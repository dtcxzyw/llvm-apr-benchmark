{
  "bug_id": "113869",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113869",
  "bug_type": "miscompilation",
  "base_commit": "c752efbdcc1ebd81f879633d6b798248064e2ae2",
  "knowledge_cutoff": "2024-10-28T06:34:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "e577f14b670ee2ae6bb717133310b215be4331b3",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1056,
          1062
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "canonicalizeSaturatedAdd"
      ]
    }
  },
  "patch": "commit e577f14b670ee2ae6bb717133310b215be4331b3\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Nov 1 22:18:44 2024 +0800\n\n    [InstCombine] Use `m_NotForbidPoison` when folding `(X u< Y) ? -1 : (~X + Y) --> uadd.sat(~X, Y)` (#114345)\n    \n    Alive2: https://alive2.llvm.org/ce/z/mTGCo-\n    We cannot reuse `~X` if `m_AllOnes` matches a vector constant with some\n    poison elts. An alternative solution is to create a new not instead of\n    reusing `~X`. But it doesn't worth the effort because we need to add a\n    one-use check.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/113869.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 162ebebf1b8f..999ad1adff20 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1056,7 +1056,7 @@ static Value *canonicalizeSaturatedAdd(ICmpInst *Cmp, Value *TVal, Value *FVal,\n   // Strictness of the comparison is irrelevant.\n   X = Cmp0;\n   Y = Cmp1;\n-  if (match(FVal, m_c_Add(m_Not(m_Specific(X)), m_Specific(Y)))) {\n+  if (match(FVal, m_c_Add(m_NotForbidPoison(m_Specific(X)), m_Specific(Y)))) {\n     // (X u< Y) ? -1 : (~X + Y) --> uadd.sat(~X, Y)\n     // (X u< Y) ? -1 : (Y + ~X) --> uadd.sat(Y, ~X)\n     BinaryOperator *BO = cast<BinaryOperator>(FVal);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/saturating-add-sub.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "uadd_sat_not_commute_select",
          "test_body": "define i32 @uadd_sat_not_commute_select(i32 %x, i32 %y) {\n  %notx = xor i32 %x, -1\n  %a = add i32 %notx, %y\n  %c = icmp ult i32 %y, %x\n  %r = select i1 %c, i32 %a, i32 -1\n  ret i32 %r\n}\n"
        },
        {
          "test_name": "uadd_sat_not_ugt_commute_add",
          "test_body": "define <2 x i32> @uadd_sat_not_ugt_commute_add(<2 x i32> %x, <2 x i32> %yp) {\n  %y = sdiv <2 x i32> %yp, <i32 2442, i32 4242>\n  %notx = xor <2 x i32> %x, splat (i32 -1)\n  %a = add <2 x i32> %y, %notx\n  %c = icmp ugt <2 x i32> %y, %x\n  %r = select <2 x i1> %c, <2 x i32> splat (i32 -1), <2 x i32> %a\n  ret <2 x i32> %r\n}\n"
        },
        {
          "test_name": "uadd_sat_not_ugt_commute_add_partial_poison",
          "test_body": "define <2 x i32> @uadd_sat_not_ugt_commute_add_partial_poison(<2 x i32> %x, <2 x i32> %yp) {\n  %notx = xor <2 x i32> %x, <i32 -1, i32 poison>\n  %a = add nuw <2 x i32> %yp, %notx\n  %c = icmp ugt <2 x i32> %yp, %x\n  %r = select <2 x i1> %c, <2 x i32> splat (i32 -1), <2 x i32> %a\n  ret <2 x i32> %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Poison value wrongly propagates through vector operations on an optimized code",
    "body": "https://github.com/llvm/llvm-project/blob/5d4a0d54b5269bad1410e6db957836fe98634069/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp#L1050-L1060\r\n\r\nAlive2 report: https://alive2.llvm.org/ce/z/6tSdhb\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine <2 x i32> @uadd_sat_not_ugt_commute_add.2(<2 x i32> %x, <2 x i32> %yp) {\r\n#0:\r\n  %#1 = sdiv <2 x i32> { 2442, 4242 }, %yp\r\n  %notx = xor <2 x i32> %x, { 4294967295, poison }\r\n  %a = add nuw <2 x i32> %#1, %notx\r\n  %c = icmp ugt <2 x i32> %#1, %x\r\n  %r = select <2 x i1> %c, <2 x i32> { 4294967295, 4294967295 }, <2 x i32> %a\r\n  ret <2 x i32> %r\r\n}\r\n=>\r\ndefine <2 x i32> @uadd_sat_not_ugt_commute_add.2(<2 x i32> %x, <2 x i32> %yp) {\r\n#0:\r\n  %#1 = sdiv <2 x i32> { 2442, 4242 }, %yp\r\n  %notx = xor <2 x i32> %x, { 4294967295, poison }\r\n  %r = uadd_sat <2 x i32> %#1, %notx\r\n  ret <2 x i32> %r\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\n<2 x i32> %x = < poison, #x00000000 (0) >\r\n<2 x i32> %yp = < #x00000008 (8), #x0000000e (14) >\r\n\r\nSource:\r\n<2 x i32> %#1 = < #x00000131 (305), #x0000012f (303) >\r\n<2 x i32> %notx = < poison, poison >\r\n<2 x i32> %a = < poison, poison >\r\n<2 x i1> %c = < poison, #x1 (1) >\r\n<2 x i32> %r = < poison, #xffffffff (4294967295, -1) >\r\n\r\nTarget:\r\n<2 x i32> %#1 = < #x00000131 (305), #x0000012f (303) >\r\n<2 x i32> %notx = < poison, poison >\r\n<2 x i32> %r = < poison, poison >\r\nSource value: < poison, #xffffffff (4294967295, -1) >\r\nTarget value: < poison, poison >\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}