{
  "bug_id": "116249",
  "issue_url": "https://github.com/llvm/llvm-project/issues/116249",
  "bug_type": "miscompilation",
  "base_commit": "c1f6cb74634509d0e4204dadd46566185fa33e2b",
  "knowledge_cutoff": "2024-11-14T15:57:03Z",
  "lit_test_dir": [
    "llvm/test/Transforms/IndVarSimplify"
  ],
  "hints": {
    "fix_commit": "40a647fc7dc6048c92e2d580b61f5feca0785980",
    "components": [
      "IndVarSimplify"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/IndVarSimplify.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/IndVarSimplify.cpp": [
        [
          1530,
          1535
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/IndVarSimplify.cpp": [
        "IndVarSimplify::canonicalizeExitCondition"
      ]
    }
  },
  "patch": "commit 40a647fc7dc6048c92e2d580b61f5feca0785980\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Nov 15 09:15:37 2024 +0800\n\n    [IndVarSimplify] Drop samesign flags after narrowing compares (#116263)\n    \n    Samesign flag cannot be preserved after narrowing the compare since the\n    position of the sign bit is changed.\n    \n    Closes https://github.com/llvm/llvm-project/issues/116249.\n\ndiff --git a/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp b/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp\nindex 2b2d516a7079..8a3e0bc3eb97 100644\n--- a/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp\n+++ b/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp\n@@ -1530,6 +1530,8 @@ bool IndVarSimplify::canonicalizeExitCondition(Loop *L) {\n           L->getLoopPreheader()->getTerminator()->getIterator());\n       ICmp->setOperand(Swapped ? 1 : 0, LHSOp);\n       ICmp->setOperand(Swapped ? 0 : 1, NewRHS);\n+      // Samesign flag cannot be preserved after narrowing the compare.\n+      ICmp->setSameSign(false);\n       if (LHS->use_empty())\n         DeadInsts.push_back(LHS);\n     };\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/IndVarSimplify/finite-exit-comparisons.ll",
      "commands": [
        "opt -passes=indvars -S < %s -indvars-predicate-loops=0"
      ],
      "tests": [
        {
          "test_name": "ult_multiuse_profit2",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine i16 @ult_multiuse_profit2(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv2 = phi i16 [ %zext, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret i16 %iv2\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_neg_abnormal_exit",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndeclare void @unknown()\n\n; Function Attrs: mustprogress\ndefine void @slt_neg_abnormal_exit(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  call void @unknown()\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_neg_multiple_use2",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_neg_multiple_use2(i8 %start, i16 %n) #0 {\nentry:\n  %zext = zext i8 %start to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.body:                                         ; preds = %for.body, %entry\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body, %entry\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_neg_no_mustprogress",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine void @slt_neg_no_mustprogress(i16 %n) {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n"
        },
        {
          "test_name": "ugt_neg_non_loop",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ugt_neg_non_loop(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ugt i16 %zext, -2\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_constant_rhs_maythrow",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_constant_rhs_maythrow(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  call void @unknown()\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\ndeclare void @unknown()\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ult_non_constant_lhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ult_non_constant_lhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 %n, %zext\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ule_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ule_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ule i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "eq_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @eq_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp eq i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ugt_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ugt_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ugt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_constant_rhs_multiexit",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_constant_rhs_multiexit(i16 %n.raw, i8 %start, i1 %c) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %latch, %entry\n  %iv = phi i8 [ %iv.next, %latch ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  br i1 %c, label %latch, label %for.end\n\nlatch:                                            ; preds = %for.body\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %latch, %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ne_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ne_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ne i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ne_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ne_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ne i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "uge_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @uge_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp uge i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_non_constant_rhs_no_mustprogress",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine void @slt_non_constant_rhs_no_mustprogress(i16 %n.raw) {\nentry:\n  %n = and i16 %n.raw, 255\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n"
        },
        {
          "test_name": "ult_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ult_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ule_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ule_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ule i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sle_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sle_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sle i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_neg_multiple_use",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_neg_multiple_use(i8 %start) #0 {\nentry:\n  %zext = zext i8 %start to i16\n  %cmp = icmp slt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.body:                                         ; preds = %for.body, %entry\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body, %entry\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ugt_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ugt_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ugt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_non_constant_lhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_non_constant_lhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %n, %zext\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sge_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sge_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sge i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sgt_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sgt_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sgt i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sge_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sge_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sge i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "eq_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @eq_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp eq i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_guarded_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_guarded_rhs(i16 %n) #0 {\nentry:\n  %in_range = icmp ult i16 %n, 256\n  br i1 %in_range, label %for.body, label %for.end\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body, %entry\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "test_drop_icmp_samesign",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i8 @test_drop_icmp_samesign(i1 %cond, i32 range(i32 0, 32) %x) {\nentry:\n  br i1 %cond, label %for.body, label %else\n\nelse:                                             ; preds = %entry\n  %call1 = call i8 @callee()\n  br label %exit\n\nfor.body:                                         ; preds = %for.body, %entry\n  %call2 = call i8 @callee()\n  %ext = zext i8 %call2 to i32\n  %cond2 = icmp samesign ugt i32 %x, %ext\n  br i1 %cond2, label %for.body, label %exit\n\nexit:                                             ; preds = %for.body, %else\n  %res = phi i8 [ %call1, %else ], [ %call2, %for.body ]\n  ret i8 %res\n}\n\ndeclare i8 @callee()\n"
        },
        {
          "test_name": "slt_constant_lhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_constant_lhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 254, %zext\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_neg_well_defined_infinite",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n@G = external global i8\n\n; Function Attrs: mustprogress\ndefine void @slt_neg_well_defined_infinite(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  store volatile i8 %iv, ptr @G, align 1\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ult_multiuse_profit",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine i16 @ult_multiuse_profit(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret i16 %zext\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "slt_restricted_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @slt_restricted_rhs(i16 %n.raw) #0 {\nentry:\n  %n = and i16 %n.raw, 255\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp slt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "uge_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @uge_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp uge i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ult_constant_lhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ult_constant_lhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 254, %zext\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sgt_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sgt_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sgt i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ult_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @ult_constant_rhs(i16 %n.raw, i8 %start) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ %start, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp ult i16 %zext, 254\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "sle_non_constant_rhs",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: mustprogress\ndefine void @sle_non_constant_rhs(i16 %n) #0 {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %iv = phi i8 [ %iv.next, %for.body ], [ 0, %entry ]\n  %iv.next = add i8 %iv, 1\n  %zext = zext i8 %iv.next to i16\n  %cmp = icmp sle i16 %zext, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret void\n}\n\nattributes #0 = { mustprogress }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[IndVarSimplify] samesign flag should be dropped after narrowing",
    "body": "Found with https://github.com/dtcxzyw/llvm-ub-aware-interpreter.\r\nReproducer: https://alive2.llvm.org/ce/z/fcnvLv\r\n```\r\n; bin/opt -passes=indvars test.ll -S\r\ndefine i8 @test(i1 %cond, i32 range(i32 0, 32) %x) {\r\nentry:\r\n  br i1 %cond, label %for.body, label %else\r\n\r\nelse:\r\n  %call1 = call i8 @callee()\r\n  br label %exit\r\n\r\nfor.body:\r\n  %call2 = call i8 @callee()\r\n  %ext = zext i8 %call2 to i32\r\n  %cond2 = icmp samesign ugt i32 %x, %ext\r\n  br i1 %cond2, label %for.body, label %exit\r\n\r\nexit:\r\n  %res = phi i8 [ %call1, %else ], [ %call2, %for.body ]\r\n  ret i8 %res\r\n}\r\n```\r\n```\r\n\r\n----------------------------------------\r\ndeclare i8 @callee()\r\n\r\ndefine i8 @test(i1 %cond, i32 %x) {\r\ninit:\r\n  %#range_0_%x = !range i32 %x, i32 0, i32 32\r\n  br label %entry\r\n\r\nentry:\r\n  br i1 %cond, label %for.body, label %else\r\n\r\nelse:\r\n  %call1 = call i8 @callee()\r\n  br label %exit\r\n\r\nfor.body:\r\n  %call2 = call i8 @callee()\r\n  %ext = zext i8 %call2 to i32\r\n  %cond2 = icmp samesign ugt i32 %#range_0_%x, %ext\r\n  br i1 %cond2, label %for.body, label %exit\r\n\r\nexit:\r\n  %res = phi i8 [ %call1, %else ], [ %call2, %for.body ]\r\n  ret i8 %res\r\n}\r\n=>\r\ndeclare i8 @callee()\r\n\r\ndefine i8 @test(i1 %cond, i32 %x) {\r\ninit:\r\n  %#range_0_%x = !range i32 %x, i32 0, i32 32\r\n  br label %entry\r\n\r\nentry:\r\n  br i1 %cond, label %for.body.preheader, label %else\r\n\r\nelse:\r\n  %call1 = call i8 @callee()\r\n  br label %exit\r\n\r\nfor.body.preheader:\r\n  %#0 = trunc i32 %#range_0_%x to i8\r\n  br label %for.body\r\n\r\nfor.body:\r\n  %call2 = call i8 @callee()\r\n  %cond2 = icmp samesign ugt i8 %#0, %call2\r\n  br i1 %cond2, label %for.body, label %exit.loopexit\r\n\r\nexit.loopexit:\r\n  %call2.lcssa = phi i8 [ %call2, %for.body ]\r\n  br label %exit\r\n\r\nexit:\r\n  %res = phi i8 [ %call1, %else ], [ %call2.lcssa, %exit.loopexit ]\r\n  ret i8 %res\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Source is more defined than target\r\n\r\nExample:\r\ni1 %cond = #x1 (1)\r\ni32 %x = #x00000000 (0)\r\n\r\nSource:\r\ni32 %#range_0_%x = #x00000000 (0)\r\n  >> Jump to %entry\r\n  >> Jump to %for.body\r\ni8 %call2 = #x80 (128, -128)\r\ni32 %ext = #x00000080 (128)\r\ni1 %cond2 = #x0 (0)\r\n  >> Jump to %exit\r\ni8 %res = #x80 (128, -128)\r\n\r\nSOURCE MEMORY STATE\r\n===================\r\nNON-LOCAL BLOCKS:\r\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: 0\r\nBlock 1 >\tsize: 4\talign: 1\talloc type: 0\talive: true\taddress: 1\r\n\r\nTarget:\r\ni32 %#range_0_%x = #x00000000 (0)\r\n  >> Jump to %entry\r\n  >> Jump to %for.body.preheader\r\ni8 %#0 = #x00 (0)\r\n  >> Jump to %for.body\r\ni8 %call2 = #x80 (128, -128)\r\ni1 %cond2 = poison\r\nUB triggered on br\r\n\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:transforms"
    ],
    "comments": []
  }
}