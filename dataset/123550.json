{
  "bug_id": "123550",
  "issue_url": "https://github.com/llvm/llvm-project/issues/123550",
  "bug_type": "miscompilation",
  "base_commit": "a3aa452a21f983237873fa85c866b9f0224789bd",
  "knowledge_cutoff": "2025-01-20T06:37:58Z",
  "lit_test_dir": [
    "llvm/test/Analysis/ScalarEvolution"
  ],
  "hints": {
    "fix_commit": "07efe2c18a63423943a4f9d9daeada23601f84c8",
    "components": [
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        [
          5917,
          5936
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        "ScalarEvolution::createAddRecFromPHI"
      ]
    }
  },
  "patch": "commit 07efe2c18a63423943a4f9d9daeada23601f84c8\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Jan 29 09:09:14 2025 +0100\n\n    [SCEV] Check correct value for UB (#124302)\n    \n    This is a followup to #117152. That patch introduced a check for\n    UB/poison on BEValue. However, the SCEV we're actually going to use is\n    Shifted. In some cases, it's possible for Shifted to contain UB, while\n    BEValue doesn't.\n    \n    In the test case the values are:\n    \n    BEValue: (-1 * (zext i8 (-83 + ((-83 /u {1,+,1}<%loop>) *\n    {-1,+,-1}<%loop>)) to i32))<nuw><nsw>\n    Shifted: (-173 + (-1 * (zext i8 ((-83 /u {0,+,1}<%loop>) *\n    {0,+,-1}<%loop>) to i32))<nuw><nsw>)<nuw><nsw>\n    \n    Fixes https://github.com/llvm/llvm-project/issues/123550.\n\ndiff --git a/llvm/lib/Analysis/ScalarEvolution.cpp b/llvm/lib/Analysis/ScalarEvolution.cpp\nindex 7d7d37b3d228..2ce40877b523 100644\n--- a/llvm/lib/Analysis/ScalarEvolution.cpp\n+++ b/llvm/lib/Analysis/ScalarEvolution.cpp\n@@ -5917,20 +5917,18 @@ const SCEV *ScalarEvolution::createAddRecFromPHI(PHINode *PN) {\n     //   PHI(f(0), f({1,+,1})) --> f({0,+,1})\n \n     // Do not allow refinement in rewriting of BEValue.\n-    if (isGuaranteedNotToCauseUB(BEValue)) {\n-      const SCEV *Shifted = SCEVShiftRewriter::rewrite(BEValue, L, *this);\n-      const SCEV *Start = SCEVInitRewriter::rewrite(Shifted, L, *this, false);\n-      if (Shifted != getCouldNotCompute() && Start != getCouldNotCompute() &&\n-          ::impliesPoison(BEValue, Start)) {\n-        const SCEV *StartVal = getSCEV(StartValueV);\n-        if (Start == StartVal) {\n-          // Okay, for the entire analysis of this edge we assumed the PHI\n-          // to be symbolic.  We now need to go back and purge all of the\n-          // entries for the scalars that use the symbolic expression.\n-          forgetMemoizedResults(SymbolicName);\n-          insertValueToMap(PN, Shifted);\n-          return Shifted;\n-        }\n+    const SCEV *Shifted = SCEVShiftRewriter::rewrite(BEValue, L, *this);\n+    const SCEV *Start = SCEVInitRewriter::rewrite(Shifted, L, *this, false);\n+    if (Shifted != getCouldNotCompute() && Start != getCouldNotCompute() &&\n+        isGuaranteedNotToCauseUB(Shifted) && ::impliesPoison(Shifted, Start)) {\n+      const SCEV *StartVal = getSCEV(StartValueV);\n+      if (Start == StartVal) {\n+        // Okay, for the entire analysis of this edge we assumed the PHI\n+        // to be symbolic.  We now need to go back and purge all of the\n+        // entries for the scalars that use the symbolic expression.\n+        forgetMemoizedResults(SymbolicName);\n+        insertValueToMap(PN, Shifted);\n+        return Shifted;\n       }\n     }\n   }\n",
  "tests": [
    {
      "file": "llvm/test/Analysis/ScalarEvolution/pr123550.ll",
      "commands": [
        "opt -S -passes=indvars < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @src() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb4, %bb\n  %phi = phi i32 [ -173, %bb ], [ %sub, %bb4 ]\n  %phi2 = phi i32 [ 1, %bb ], [ %add, %bb4 ]\n  %srem = srem i32 729259140, %phi\n  %trunc = trunc i32 %phi2 to i8\n  %urem = urem i8 -83, %trunc\n  %zext = zext i8 %urem to i32\n  %sub = sub nsw i32 0, %zext\n  br label %bb4\n\nbb4:                                              ; preds = %bb1\n  %add = add nuw nsw i32 %phi2, 1\n  %icmp = icmp eq i32 %sub, 0\n  br i1 %icmp, label %bb5, label %bb1\n\nbb5:                                              ; preds = %bb4\n  %phi6 = phi i32 [ %srem, %bb4 ]\n  ret i32 %phi6\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[Indvars] Miscompile: SSA value incorrectly simplified",
    "body": "One can find the incorrect transformation here: https://godbolt.org/z/T9qMhT7rb\nAnd the proof of incorrect transformation here: https://alive2.llvm.org/ce/z/PXjb5J\n\nFor the record, I describe the problem here. Given the IR:\n```\ndefine i32 @widget() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb4, %bb\n  %phi = phi i32 [ -173, %bb ], [ %sub, %bb4 ]\n  %phi2 = phi i32 [ 1, %bb ], [ %add, %bb4 ]\n  %srem = srem i32 729259140, %phi\n  %trunc = trunc i32 %phi2 to i8\n  %urem = urem i8 -83, %trunc\n  %zext = zext i8 %urem to i32\n  %sub = sub nsw i32 0, %zext\n  br label %bb4\n\nbb4:                                              ; preds = %bb1\n  %add = add nuw nsw i32 %phi2, 1\n  %icmp = icmp eq i32 %sub, 0\n  br i1 %icmp, label %bb5, label %bb1\n\nbb5:                                              ; preds = %bb4\n  %phi6 = phi i32 [ %srem, %bb4 ]\n  ret i32 %phi6\n}\n```\nwhich returns `srem i32 729259140, -173` which is `130`. The above IR under the `indvars` pass transforms to:\n```\ndefine i32 @widget() {\n  br label %bb1\n\nbb1:                                              ; preds = %bb4, %bb\n  br label %bb4\n\nbb4:                                              ; preds = %bb1\n  br i1 true, label %bb5, label %bb1\n\nbb5:                                              ; preds = %bb4\n  ret i32 729259140\n}\n```\nwhich returns `729259140` which is the wrong answer. ",
    "author": "Nirhar",
    "labels": [
      "miscompilation",
      "release:backport",
      "llvm:SCEV"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Slightly cleaned up:\n```\ndefine i32 @test() {\nbb:\n  br label %loop \n\nloop:                                             \n  %phi = phi i32 [ -173, %bb ], [ %sub, %loop ]\n  %iv2 = phi i32 [ 1, %bb ], [ %iv2.inc, %loop ]\n  %srem = srem i32 729259140, %phi\n  %trunc = trunc i32 %iv2 to i8\n  %urem = urem i8 -83, %trunc\n  %zext = zext i8 %urem to i32\n  %sub = sub i32 0, %zext \n  %iv2.inc = add i32 %iv2, 1\n  %icmp = icmp eq i32 %zext, 0\n  br i1 %icmp, label %exit, label %loop\n\nexit:\n  %srem.lcssa = phi i32 [ %srem, %loop ]\n  ret i32 %srem.lcssa\n}\n```\n\nIncorrect exit value is computed by SCEV:\n```\n  -->  (729259140 + (-1 * (-173 + (-1 * (zext i8 ((-83 /u {0,+,1}<%loop>) * {0,+,-1}<%loop>) to i32))<nuw><nsw>)<nuw><nsw> * (729259140 /u (-173 + (-1 * (zext i8 ((-83 /u {0,+,1}<%loop>) * {0,+,-1}<%loop>) to i32))<nuw><nsw>)<nuw><nsw>)))<nuw><nsw> U: empty-set S: empty-set\t\tExits: 729259140\t\tLoopDispositions: { %loop: Computable }\n```"
      }
    ]
  },
  "verified": true
}