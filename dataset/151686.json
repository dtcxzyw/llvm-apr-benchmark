{
  "bug_id": "151686",
  "issue_url": "https://github.com/llvm/llvm-project/issues/151686",
  "bug_type": "crash",
  "base_commit": "55c2b273ea5d3b949c6431d429a4da20612d9808",
  "knowledge_cutoff": "2025-08-01T10:41:30Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "eee9755881bf39bc15e6e05697abbbfabb51cb78",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          9788,
          9793
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "preparePlanForEpilogueVectorLoop"
      ]
    }
  },
  "patch": "commit eee9755881bf39bc15e6e05697abbbfabb51cb78\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Fri Aug 1 20:54:38 2025 +0100\n\n    [LV] Refine check to find epilogue IV resume value.\n    \n    Make sure to check that the vector trip count is containedin the list of\n    incoming values to serve as tie-breaker with phis with all-zero incoming\n    values.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/151686.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 20528089c000..b4ea70e0e5cc 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -9788,6 +9788,10 @@ preparePlanForEpilogueVectorLoop(VPlan &Plan, Loop *L,\n                 match(\n                     P.getIncomingValueForBlock(EPI.MainLoopIterationCountCheck),\n                     m_SpecificInt(0)) &&\n+                any_of(P.incoming_values(),\n+                       [&EPI](Value *Inc) {\n+                         return Inc == EPI.VectorTripCount;\n+                       }) &&\n                 all_of(P.incoming_values(), [&EPI](Value *Inc) {\n                   return Inc == EPI.VectorTripCount ||\n                          match(Inc, m_SpecificInt(0));\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/epilog-vectorization-inductions.ll",
      "commands": [
        "opt -passes=loop-vectorize -mcpu=znver2 -S %s"
      ],
      "tests": [
        {
          "test_name": "multiple_inductions_start_at_0",
          "test_body": "target triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i8 @multiple_inductions_start_at_0() {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]\n  %iv.2 = phi i32 [ 0, %entry ], [ %add, %loop ]\n  %add = add i32 %iv.2, -16777216\n  %trunc = trunc i32 %iv.2 to i8\n  %iv.next = add i32 %iv, 1\n  %ec = icmp ugt i32 %iv, 1050\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %res = phi i8 [ %trunc, %loop ]\n  ret i8 %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `EPResumeVal && \"must have a resume value for the canonical IV\"' failed.",
    "body": "To reproduce run opt with the test below using -passes=loop-vectorize:\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @wombat() gc \"statepoint-example\" {\nbb:\n  br label %bb2\n\nbb1:                                              ; preds = %bb2\n  %phi = phi i8 [ %trunc, %bb2 ]\n  ret i32 0\n\nbb2:                                              ; preds = %bb2, %bb\n  %phi3 = phi i32 [ 0, %bb ], [ %add5, %bb2 ]\n  %phi4 = phi i32 [ 0, %bb ], [ %add, %bb2 ]\n  %add = add i32 %phi4, -16777216\n  %trunc = trunc i32 %phi4 to i8\n  %add5 = add i32 %phi3, 1\n  %icmp = icmp ugt i32 %phi3, 1050\n  br i1 %icmp, label %bb1, label %bb2\n}\n```\nReproducer: https://godbolt.org/z/xz3sEWhTY\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"wombat\"\n #0 0x00000000056729e8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x56729e8)\n #1 0x000000000566f894 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007685c0442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007685c04969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007685c0442476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007685c04287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007685c042871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007685c0439e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000034821cd preparePlanForEpilogueVectorLoop(llvm::VPlan&, llvm::Loop*, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>> const&, llvm::EpilogueLoopVectorizationInfo const&) LoopVectorize.cpp:0:0\n #9 0x00000000034a4c56 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x34a4c56)\n#10 0x00000000034a6690 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x34a6690)\n#11 0x00000000034a6cf7 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x34a6cf7)\n#12 0x0000000002db62be llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2db62be)\n#13 0x0000000005464431 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5464431)\n#14 0x0000000000ebde5e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xebde5e)\n#15 0x0000000005464904 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5464904)\n#16 0x00000000009637fe llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9637fe)\n#17 0x00000000054624d1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54624d1)\n#18 0x000000000096daca llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96daca)\n#19 0x0000000000961b7b optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x961b7b)\n#20 0x00007685c0429d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#21 0x00007685c0429e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#22 0x0000000000958c35 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x958c35)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}