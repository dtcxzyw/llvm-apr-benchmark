{
  "bug_id": "158319",
  "issue_url": "https://github.com/llvm/llvm-project/issues/158319",
  "bug_type": "crash",
  "base_commit": "111de45e838a7d33637da8807212284c988f7fae",
  "knowledge_cutoff": "2025-09-12T16:14:59Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "ef7e03a2d1571e3c651fa9ccd205dbacf1a103c8",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          1272,
          1280
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "simplifyRecipe"
      ]
    }
  },
  "patch": "commit ef7e03a2d1571e3c651fa9ccd205dbacf1a103c8\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sat Sep 13 18:13:22 2025 +0100\n\n    [VPlan] Limit ExtractLastElem fold to recipes guaranteed single-scalar.\n    \n    vputils::isSingleScalar(A) may return true to recipes that produce only\n    a single scalar value, but they could still end up as vector\n    instruction, because the recipe could not be converted to a\n    single-scalar VPInstruction/VPReplicateRecipe.\n    \n    For now, only apply the fold for recipes guaranteed to produce a single\n    value, i.e. single-scalar VPInstructions and VPReplicateRecipes.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/158319.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex fcd85ba9ab7f..a193c438e7ea 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -1272,9 +1272,11 @@ static void simplifyRecipe(VPRecipeBase &R, VPTypeAnalysis &TypeInfo) {\n \n   if (match(Def,\n             m_VPInstruction<VPInstruction::ExtractLastElement>(m_VPValue(A))) &&\n-      vputils::isSingleScalar(A) && all_of(A->users(), [Def, A](VPUser *U) {\n-        return U->usesScalars(A) || Def == U;\n-      })) {\n+      ((isa<VPInstruction>(A) && vputils::isSingleScalar(A)) ||\n+       (isa<VPReplicateRecipe>(A) &&\n+        cast<VPReplicateRecipe>(A)->isSingleScalar())) &&\n+      all_of(A->users(),\n+             [Def, A](VPUser *U) { return U->usesScalars(A) || Def == U; })) {\n     return Def->replaceAllUsesWith(A);\n   }\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence-with-uniform-ops.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -S %s",
        "opt -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=2 -S %s",
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Test case for https://github.com/llvm/llvm-project/issues/95520.\ndefine i32 @recurence_uniform_load(ptr %src, ptr noalias %dst, i64 %n) {\n; UNROLL-NO-IC-LABEL: define i32 @recurence_uniform_load(\n; UNROLL-NO-IC-SAME: ptr [[SRC:%.*]], ptr noalias [[DST:%.*]], i64 [[N:%.*]]) {\n; UNROLL-NO-IC-NEXT:  [[ENTRY:.*]]:\n; UNROLL-NO-IC-NEXT:    [[TMP0:%.*]] = add i64 [[N]], 1\n; UNROLL-NO-IC-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], 8\n; UNROLL-NO-IC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; UNROLL-NO-IC:       [[VECTOR_PH]]:\n; UNROLL-NO-IC-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], 8\n; UNROLL-NO-IC-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]\n; UNROLL-NO-IC-NEXT:    br label %[[VECTOR_BODY:.*]]\n; UNROLL-NO-IC:       [[VECTOR_BODY]]:\n; UNROLL-NO-IC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; UNROLL-NO-IC-NEXT:    [[TMP1:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-IC-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8\n; UNROLL-NO-IC-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\n; UNROLL-NO-IC-NEXT:    br i1 [[TMP2]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\n; UNROLL-NO-IC:       [[MIDDLE_BLOCK]]:\n; UNROLL-NO-IC-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]\n; UNROLL-NO-IC-NEXT:    br i1 [[CMP_N]], label %[[EXIT:.*]], label %[[SCALAR_PH]]\n; UNROLL-NO-IC:       [[SCALAR_PH]]:\n; UNROLL-NO-IC-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-IC-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i32 [ [[TMP1]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-IC-NEXT:    br label %[[LOOP:.*]]\n; UNROLL-NO-IC:       [[LOOP]]:\n; UNROLL-NO-IC-NEXT:    [[PHI:%.*]] = phi i64 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[ADD:%.*]], %[[LOOP]] ]\n; UNROLL-NO-IC-NEXT:    [[RECUR:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[LOAD:%.*]], %[[LOOP]] ]\n; UNROLL-NO-IC-NEXT:    [[ADD]] = add i64 [[PHI]], 1\n; UNROLL-NO-IC-NEXT:    [[LOAD]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-IC-NEXT:    [[ICMP:%.*]] = icmp ult i64 [[PHI]], [[N]]\n; UNROLL-NO-IC-NEXT:    br i1 [[ICMP]], label %[[LOOP]], label %[[EXIT]], !llvm.loop [[LOOP3:![0-9]+]]\n; UNROLL-NO-IC:       [[EXIT]]:\n; UNROLL-NO-IC-NEXT:    [[RECUR_LCSSA:%.*]] = phi i32 [ [[RECUR]], %[[LOOP]] ], [ [[TMP1]], %[[MIDDLE_BLOCK]] ]\n; UNROLL-NO-IC-NEXT:    ret i32 [[RECUR_LCSSA]]\n;\n; UNROLL-NO-VF-LABEL: define i32 @recurence_uniform_load(\n; UNROLL-NO-VF-SAME: ptr [[SRC:%.*]], ptr noalias [[DST:%.*]], i64 [[N:%.*]]) {\n; UNROLL-NO-VF-NEXT:  [[ENTRY:.*]]:\n; UNROLL-NO-VF-NEXT:    [[TMP1:%.*]] = add i64 [[N]], 1\n; UNROLL-NO-VF-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], 2\n; UNROLL-NO-VF-NEXT:    br i1 [[MIN_ITERS_CHECK]], label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; UNROLL-NO-VF:       [[VECTOR_PH]]:\n; UNROLL-NO-VF-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], 2\n; UNROLL-NO-VF-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP1]], [[N_MOD_VF]]\n; UNROLL-NO-VF-NEXT:    br label %[[VECTOR_BODY:.*]]\n; UNROLL-NO-VF:       [[VECTOR_BODY]]:\n; UNROLL-NO-VF-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; UNROLL-NO-VF-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-VF-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2\n; UNROLL-NO-VF-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\n; UNROLL-NO-VF-NEXT:    br i1 [[TMP2]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\n; UNROLL-NO-VF:       [[MIDDLE_BLOCK]]:\n; UNROLL-NO-VF-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP1]], [[N_VEC]]\n; UNROLL-NO-VF-NEXT:    br i1 [[CMP_N]], label %[[EXIT:.*]], label %[[SCALAR_PH]]\n; UNROLL-NO-VF:       [[SCALAR_PH]]:\n; UNROLL-NO-VF-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-VF-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i32 [ [[TMP0]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-VF-NEXT:    br label %[[LOOP:.*]]\n; UNROLL-NO-VF:       [[LOOP]]:\n; UNROLL-NO-VF-NEXT:    [[PHI:%.*]] = phi i64 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[ADD:%.*]], %[[LOOP]] ]\n; UNROLL-NO-VF-NEXT:    [[RECUR:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[LOAD:%.*]], %[[LOOP]] ]\n; UNROLL-NO-VF-NEXT:    [[ADD]] = add i64 [[PHI]], 1\n; UNROLL-NO-VF-NEXT:    [[LOAD]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-VF-NEXT:    [[ICMP:%.*]] = icmp ult i64 [[PHI]], [[N]]\n; UNROLL-NO-VF-NEXT:    br i1 [[ICMP]], label %[[LOOP]], label %[[EXIT]], !llvm.loop [[LOOP3:![0-9]+]]\n; UNROLL-NO-VF:       [[EXIT]]:\n; UNROLL-NO-VF-NEXT:    [[RECUR_LCSSA:%.*]] = phi i32 [ [[RECUR]], %[[LOOP]] ], [ [[TMP0]], %[[MIDDLE_BLOCK]] ]\n; UNROLL-NO-VF-NEXT:    ret i32 [[RECUR_LCSSA]]\n;\n; SINK-AFTER-LABEL: define i32 @recurence_uniform_load(\n; SINK-AFTER-SAME: ptr [[SRC:%.*]], ptr noalias [[DST:%.*]], i64 [[N:%.*]]) {\n; SINK-AFTER-NEXT:  [[ENTRY:.*]]:\n; SINK-AFTER-NEXT:    [[TMP0:%.*]] = add i64 [[N]], 1\n; SINK-AFTER-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP0]], 4\n; SINK-AFTER-NEXT:    br i1 [[MIN_ITERS_CHECK]], label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; SINK-AFTER:       [[VECTOR_PH]]:\n; SINK-AFTER-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP0]], 4\n; SINK-AFTER-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP0]], [[N_MOD_VF]]\n; SINK-AFTER-NEXT:    br label %[[VECTOR_BODY:.*]]\n; SINK-AFTER:       [[VECTOR_BODY]]:\n; SINK-AFTER-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; SINK-AFTER-NEXT:    [[TMP1:%.*]] = load i32, ptr [[SRC]], align 4\n; SINK-AFTER-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4\n; SINK-AFTER-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]\n; SINK-AFTER-NEXT:    br i1 [[TMP2]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]\n; SINK-AFTER:       [[MIDDLE_BLOCK]]:\n; SINK-AFTER-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP0]], [[N_VEC]]\n; SINK-AFTER-NEXT:    br i1 [[CMP_N]], label %[[EXIT:.*]], label %[[SCALAR_PH]]\n; SINK-AFTER:       [[SCALAR_PH]]:\n; SINK-AFTER-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; SINK-AFTER-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i32 [ [[TMP1]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; SINK-AFTER-NEXT:    br label %[[LOOP:.*]]\n; SINK-AFTER:       [[LOOP]]:\n; SINK-AFTER-NEXT:    [[PHI:%.*]] = phi i64 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[ADD:%.*]], %[[LOOP]] ]\n; SINK-AFTER-NEXT:    [[RECUR:%.*]] = phi i32 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[LOAD:%.*]], %[[LOOP]] ]\n; SINK-AFTER-NEXT:    [[ADD]] = add i64 [[PHI]], 1\n; SINK-AFTER-NEXT:    [[LOAD]] = load i32, ptr [[SRC]], align 4\n; SINK-AFTER-NEXT:    [[ICMP:%.*]] = icmp ult i64 [[PHI]], [[N]]\n; SINK-AFTER-NEXT:    br i1 [[ICMP]], label %[[LOOP]], label %[[EXIT]], !llvm.loop [[LOOP3:![0-9]+]]\n; SINK-AFTER:       [[EXIT]]:\n; SINK-AFTER-NEXT:    [[RECUR_LCSSA:%.*]] = phi i32 [ [[RECUR]], %[[LOOP]] ], [ [[TMP1]], %[[MIDDLE_BLOCK]] ]\n; SINK-AFTER-NEXT:    ret i32 [[RECUR_LCSSA]]\n;\nentry:\n  br label %loop\n\nloop:\n  %phi = phi i64 [ 0, %entry ], [ %add, %loop ]\n  %recur = phi i32 [ 0, %entry ], [ %load, %loop ]\n  %add = add i64 %phi, 1\n  %load = load i32, ptr %src, align 4\n  %icmp = icmp ult i64 %phi, %n\n  br i1 %icmp, label %loop, label %exit\n\nexit:\n  ret i32 %recur\n}\n\n; Test for https://github.com/llvm/llvm-project/issues/158319. The recurrence\n; phi can be removed.\ndefine i16 @for_phi_removed(ptr  %src) {\n; UNROLL-NO-IC-LABEL: define i16 @for_phi_removed(\n; UNROLL-NO-IC-SAME: ptr [[SRC:%.*]]) {\n; UNROLL-NO-IC-NEXT:  [[ENTRY:.*]]:\n; UNROLL-NO-IC-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; UNROLL-NO-IC:       [[VECTOR_PH]]:\n; UNROLL-NO-IC-NEXT:    br label %[[VECTOR_BODY:.*]]\n; UNROLL-NO-IC:       [[VECTOR_BODY]]:\n; UNROLL-NO-IC-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; UNROLL-NO-IC-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-IC-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0\n; UNROLL-NO-IC-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer\n; UNROLL-NO-IC-NEXT:    [[TMP1:%.*]] = icmp eq <4 x i32> [[BROADCAST_SPLAT]], zeroinitializer\n; UNROLL-NO-IC-NEXT:    [[TMP2:%.*]] = select <4 x i1> [[TMP1]], <4 x i16> splat (i16 1), <4 x i16> zeroinitializer\n; UNROLL-NO-IC-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 8\n; UNROLL-NO-IC-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[INDEX_NEXT]], 104\n; UNROLL-NO-IC-NEXT:    br i1 [[TMP3]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\n; UNROLL-NO-IC:       [[MIDDLE_BLOCK]]:\n; UNROLL-NO-IC-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <4 x i16> [[TMP2]], i32 3\n; UNROLL-NO-IC-NEXT:    br label %[[SCALAR_PH]]\n; UNROLL-NO-IC:       [[SCALAR_PH]]:\n; UNROLL-NO-IC-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i16 [ 104, %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-IC-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i16 [ [[VECTOR_RECUR_EXTRACT]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-IC-NEXT:    br label %[[LOOP:.*]]\n; UNROLL-NO-IC:       [[LOOP]]:\n; UNROLL-NO-IC-NEXT:    [[IV:%.*]] = phi i16 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]\n; UNROLL-NO-IC-NEXT:    [[P:%.*]] = phi i16 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[SEL:%.*]], %[[LOOP]] ]\n; UNROLL-NO-IC-NEXT:    [[L:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-IC-NEXT:    [[C:%.*]] = icmp eq i32 [[L]], 0\n; UNROLL-NO-IC-NEXT:    [[SEL]] = select i1 [[C]], i16 1, i16 0\n; UNROLL-NO-IC-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1\n; UNROLL-NO-IC-NEXT:    [[EC:%.*]] = icmp eq i16 [[IV_NEXT]], 111\n; UNROLL-NO-IC-NEXT:    br i1 [[EC]], label %[[EXIT:.*]], label %[[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]\n; UNROLL-NO-IC:       [[EXIT]]:\n; UNROLL-NO-IC-NEXT:    [[P_LCSSA:%.*]] = phi i16 [ [[P]], %[[LOOP]] ]\n; UNROLL-NO-IC-NEXT:    ret i16 [[P_LCSSA]]\n;\n; UNROLL-NO-VF-LABEL: define i16 @for_phi_removed(\n; UNROLL-NO-VF-SAME: ptr [[SRC:%.*]]) {\n; UNROLL-NO-VF-NEXT:  [[ENTRY:.*]]:\n; UNROLL-NO-VF-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; UNROLL-NO-VF:       [[VECTOR_PH]]:\n; UNROLL-NO-VF-NEXT:    br label %[[VECTOR_BODY:.*]]\n; UNROLL-NO-VF:       [[VECTOR_BODY]]:\n; UNROLL-NO-VF-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; UNROLL-NO-VF-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-VF-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[TMP0]], 0\n; UNROLL-NO-VF-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i16 1, i16 0\n; UNROLL-NO-VF-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2\n; UNROLL-NO-VF-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[INDEX_NEXT]], 110\n; UNROLL-NO-VF-NEXT:    br i1 [[TMP3]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\n; UNROLL-NO-VF:       [[MIDDLE_BLOCK]]:\n; UNROLL-NO-VF-NEXT:    br label %[[SCALAR_PH]]\n; UNROLL-NO-VF:       [[SCALAR_PH]]:\n; UNROLL-NO-VF-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i16 [ 110, %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-VF-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i16 [ [[TMP2]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; UNROLL-NO-VF-NEXT:    br label %[[LOOP:.*]]\n; UNROLL-NO-VF:       [[LOOP]]:\n; UNROLL-NO-VF-NEXT:    [[IV:%.*]] = phi i16 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]\n; UNROLL-NO-VF-NEXT:    [[P:%.*]] = phi i16 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[SEL:%.*]], %[[LOOP]] ]\n; UNROLL-NO-VF-NEXT:    [[L:%.*]] = load i32, ptr [[SRC]], align 4\n; UNROLL-NO-VF-NEXT:    [[C:%.*]] = icmp eq i32 [[L]], 0\n; UNROLL-NO-VF-NEXT:    [[SEL]] = select i1 [[C]], i16 1, i16 0\n; UNROLL-NO-VF-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1\n; UNROLL-NO-VF-NEXT:    [[EC:%.*]] = icmp eq i16 [[IV_NEXT]], 111\n; UNROLL-NO-VF-NEXT:    br i1 [[EC]], label %[[EXIT:.*]], label %[[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]\n; UNROLL-NO-VF:       [[EXIT]]:\n; UNROLL-NO-VF-NEXT:    [[P_LCSSA:%.*]] = phi i16 [ [[P]], %[[LOOP]] ]\n; UNROLL-NO-VF-NEXT:    ret i16 [[P_LCSSA]]\n;\n; SINK-AFTER-LABEL: define i16 @for_phi_removed(\n; SINK-AFTER-SAME: ptr [[SRC:%.*]]) {\n; SINK-AFTER-NEXT:  [[ENTRY:.*]]:\n; SINK-AFTER-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]\n; SINK-AFTER:       [[VECTOR_PH]]:\n; SINK-AFTER-NEXT:    br label %[[VECTOR_BODY:.*]]\n; SINK-AFTER:       [[VECTOR_BODY]]:\n; SINK-AFTER-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]\n; SINK-AFTER-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SRC]], align 4\n; SINK-AFTER-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[TMP0]], i64 0\n; SINK-AFTER-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer\n; SINK-AFTER-NEXT:    [[TMP1:%.*]] = icmp eq <4 x i32> [[BROADCAST_SPLAT]], zeroinitializer\n; SINK-AFTER-NEXT:    [[TMP2:%.*]] = select <4 x i1> [[TMP1]], <4 x i16> splat (i16 1), <4 x i16> zeroinitializer\n; SINK-AFTER-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4\n; SINK-AFTER-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[INDEX_NEXT]], 108\n; SINK-AFTER-NEXT:    br i1 [[TMP3]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]\n; SINK-AFTER:       [[MIDDLE_BLOCK]]:\n; SINK-AFTER-NEXT:    [[VECTOR_RECUR_EXTRACT:%.*]] = extractelement <4 x i16> [[TMP2]], i32 3\n; SINK-AFTER-NEXT:    br label %[[SCALAR_PH]]\n; SINK-AFTER:       [[SCALAR_PH]]:\n; SINK-AFTER-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i16 [ 108, %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; SINK-AFTER-NEXT:    [[SCALAR_RECUR_INIT:%.*]] = phi i16 [ [[VECTOR_RECUR_EXTRACT]], %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]\n; SINK-AFTER-NEXT:    br label %[[LOOP:.*]]\n; SINK-AFTER:       [[LOOP]]:\n; SINK-AFTER-NEXT:    [[IV:%.*]] = phi i16 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]\n; SINK-AFTER-NEXT:    [[P:%.*]] = phi i16 [ [[SCALAR_RECUR_INIT]], %[[SCALAR_PH]] ], [ [[SEL:%.*]], %[[LOOP]] ]\n; SINK-AFTER-NEXT:    [[L:%.*]] = load i32, ptr [[SRC]], align 4\n; SINK-AFTER-NEXT:    [[C:%.*]] = icmp eq i32 [[L]], 0\n; SINK-AFTER-NEXT:    [[SEL]] = select i1 [[C]], i16 1, i16 0\n; SINK-AFTER-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1\n; SINK-AFTER-NEXT:    [[EC:%.*]] = icmp eq i16 [[IV_NEXT]], 111\n; SINK-AFTER-NEXT:    br i1 [[EC]], label %[[EXIT:.*]], label %[[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]\n; SINK-AFTER:       [[EXIT]]:\n; SINK-AFTER-NEXT:    [[P_LCSSA:%.*]] = phi i16 [ [[P]], %[[LOOP]] ]\n; SINK-AFTER-NEXT:    ret i16 [[P_LCSSA]]\n;\nentry:\n  br label %loop\n\nloop:\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop ]\n  %p = phi i16 [ 0, %entry ] , [ %sel, %loop ]\n  %l = load i32, ptr %src, align 4\n  %c = icmp eq i32 %l, 0\n  %sel = select i1 %c, i16 1, i16 0\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 111\n  br i1 %ec, label %exit, label %loop\n\nexit:\n  ret i16 %p\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Instruction does not dominate all uses!",
    "body": "Reproducer: https://godbolt.org/z/P1ea8d1bT\n```\n; bin/opt -passes=loop-vectorize test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i16 @main() {\nentry:\n  br label %safe_lshift_func_uint16_t_u_s.exit.i.i\n\nsafe_lshift_func_uint16_t_u_s.exit.i.i:           ; preds = %safe_lshift_func_uint16_t_u_s.exit.i.i, %entry\n  %l_1488.0377.i.i = phi i16 [ 0, %entry ], [ %l_1488.2.lcssa.2.i.i, %safe_lshift_func_uint16_t_u_s.exit.i.i ]\n  %storemerge376.i.i = phi i16 [ 1, %entry ], [ %inc275.i.i, %safe_lshift_func_uint16_t_u_s.exit.i.i ]\n  %0 = load i32, ptr null, align 4\n  %tobool254.not.2.i.i = icmp eq i32 %0, 0\n  %l_1488.2.lcssa.2.i.i = select i1 %tobool254.not.2.i.i, i16 1, i16 0\n  %inc275.i.i = add i16 %storemerge376.i.i, 1\n  %exitcond.not.i.i = icmp eq i16 %inc275.i.i, 0\n  br i1 %exitcond.not.i.i, label %func_210.exit, label %safe_lshift_func_uint16_t_u_s.exit.i.i\n\nfunc_210.exit:                                    ; preds = %safe_lshift_func_uint16_t_u_s.exit.i.i\n  ret i16 %l_1488.0377.i.i\n}\n```\n```\nInstruction does not dominate all uses!\n  %4 = extractelement <4 x i16> %2, i32 0\n  %scalar.recur.init = phi i16 [ %4, %middle.block ], [ 0, %entry ]\nInstruction does not dominate all uses!\n  %2 = select <4 x i1> %1, <4 x i16> splat (i16 1), <4 x i16> zeroinitializer\n  %4 = extractelement <4 x i16> %2, i32 0\nPHI nodes not grouped at top of basic block!\n  %bc.resume.val = phi i16 [ -7, %middle.block ], [ 1, %entry ]\nlabel %scalar.ph\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10182: bool llvm::LoopVectorizePass::processLoop(llvm::Loop*): Assertion `!verifyFunction(*F, &dbgs())' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace and instructions to reproduce the bug.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"main\"\n #0 0x000000000589ea68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x589ea68)\n #1 0x000000000589b914 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007e16e6e42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007e16e6e969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007e16e6e42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007e16e6e287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007e16e6e2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007e16e6e39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000036379e9 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x36379e9)\n #9 0x0000000003639970 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3639970)\n#10 0x000000000363a055 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x363a055)\n#11 0x0000000002f3481e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2f3481e)\n#12 0x0000000005687c01 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5687c01)\n#13 0x0000000000eeb6ee llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xeeb6ee)\n#14 0x000000000568616a llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x568616a)\n#15 0x000000000096f08e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96f08e)\n#16 0x0000000005685b21 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5685b21)\n#17 0x0000000000979388 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x979388)\n#18 0x000000000096d409 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96d409)\n#19 0x00007e16e6e29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#20 0x00007e16e6e29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#21 0x0000000000964555 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x964555)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\ncc @fhahn \n",
    "author": "dtcxzyw",
    "labels": [
      "vectorizers",
      "crash-on-valid",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "c4b17bf9ed46acbd8b28987f2a6262964e4e2072"
}