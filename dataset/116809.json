{
  "bug_id": "116809",
  "issue_url": "https://github.com/llvm/llvm-project/issues/116809",
  "bug_type": "crash",
  "base_commit": "0a1795f781163a8e7b72fee492f87ab27d5e3995",
  "knowledge_cutoff": "2024-11-19T14:26:43Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LICM"
  ],
  "hints": {
    "fix_commit": "18b02bbf441660683df7f3925946984203d49bab",
    "components": [
      "LICM",
      "MemorySSAUpdater"
    ],
    "bug_location_lineno": {
      "llvm/include/llvm/Analysis/MemorySSAUpdater.h": [
        [
          190,
          196
        ]
      ],
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        [
          1403,
          1411
        ]
      ],
      "llvm/lib/Transforms/Scalar/LICM.cpp": [
        [
          1465,
          1472
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        "MemorySSAUpdater::createMemoryAccessBefore",
        "MemorySSAUpdater::createMemoryAccessInBB"
      ],
      "llvm/lib/Transforms/Scalar/LICM.cpp": [
        "cloneInstructionInExitBlock"
      ]
    }
  },
  "patch": "commit 18b02bbf441660683df7f3925946984203d49bab\nAuthor: DianQK <dianqk@dianqk.net>\nDate:   Wed Nov 20 19:52:51 2024 +0800\n\n    [LICM] allow MemoryAccess creation failure (#116813)\n    \n    Fixes #116809.\n    \n    After running some passes (SimpleLoopUnswitch, LoopInstSimplify, etc.),\n    MemorySSA might be outdated, and the instruction `I` may have become a\n    non-memory touching instruction.\n    \n    LICM has already handled this, but it does not pass\n    `CreationMustSucceed=false` to `createDefinedAccess`.\n\ndiff --git a/llvm/include/llvm/Analysis/MemorySSAUpdater.h b/llvm/include/llvm/Analysis/MemorySSAUpdater.h\nindex d4da3ef1146d..055feceefb05 100644\n--- a/llvm/include/llvm/Analysis/MemorySSAUpdater.h\n+++ b/llvm/include/llvm/Analysis/MemorySSAUpdater.h\n@@ -190,7 +190,8 @@ public:\n   /// inaccessible and it *must* have removeMemoryAccess called on it.\n   MemoryAccess *createMemoryAccessInBB(Instruction *I, MemoryAccess *Definition,\n                                        const BasicBlock *BB,\n-                                       MemorySSA::InsertionPlace Point);\n+                                       MemorySSA::InsertionPlace Point,\n+                                       bool CreationMustSucceed = true);\n \n   /// Create a MemoryAccess in MemorySSA before an existing MemoryAccess.\n   ///\ndiff --git a/llvm/lib/Analysis/MemorySSAUpdater.cpp b/llvm/lib/Analysis/MemorySSAUpdater.cpp\nindex aa550f0b6a7b..f672bd0e1e13 100644\n--- a/llvm/lib/Analysis/MemorySSAUpdater.cpp\n+++ b/llvm/lib/Analysis/MemorySSAUpdater.cpp\n@@ -1403,9 +1403,11 @@ void MemorySSAUpdater::changeToUnreachable(const Instruction *I) {\n \n MemoryAccess *MemorySSAUpdater::createMemoryAccessInBB(\n     Instruction *I, MemoryAccess *Definition, const BasicBlock *BB,\n-    MemorySSA::InsertionPlace Point) {\n-  MemoryUseOrDef *NewAccess = MSSA->createDefinedAccess(I, Definition);\n-  MSSA->insertIntoListsForBlock(NewAccess, BB, Point);\n+    MemorySSA::InsertionPlace Point, bool CreationMustSucceed) {\n+  MemoryUseOrDef *NewAccess = MSSA->createDefinedAccess(\n+      I, Definition, /*Template=*/nullptr, CreationMustSucceed);\n+  if (NewAccess)\n+    MSSA->insertIntoListsForBlock(NewAccess, BB, Point);\n   return NewAccess;\n }\n \ndiff --git a/llvm/lib/Transforms/Scalar/LICM.cpp b/llvm/lib/Transforms/Scalar/LICM.cpp\nindex fa04ced7182d..94bfe44a847a 100644\n--- a/llvm/lib/Transforms/Scalar/LICM.cpp\n+++ b/llvm/lib/Transforms/Scalar/LICM.cpp\n@@ -1465,8 +1465,11 @@ static Instruction *cloneInstructionInExitBlock(\n \n   if (MSSAU.getMemorySSA()->getMemoryAccess(&I)) {\n     // Create a new MemoryAccess and let MemorySSA set its defining access.\n+    // After running some passes, MemorySSA might be outdated, and the\n+    // instruction `I` may have become a non-memory touching instruction.\n     MemoryAccess *NewMemAcc = MSSAU.createMemoryAccessInBB(\n-        New, nullptr, New->getParent(), MemorySSA::Beginning);\n+        New, nullptr, New->getParent(), MemorySSA::Beginning,\n+        /*CreationMustSucceed=*/false);\n     if (NewMemAcc) {\n       if (auto *MemDef = dyn_cast<MemoryDef>(NewMemAcc))\n         MSSAU.insertDef(MemDef, /*RenameUses=*/true);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LICM/PR116813-memoryssa-outdated.ll",
      "commands": [
        "opt -passes='loop-mssa(simple-loop-unswitch<nontrivial>,licm)' -verify-memoryssa -S < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Check that running LICM after SimpleLoopUnswitch does not result in a crash.\n\ndefine i32 @foo(i1 %arg, ptr %arg1) {\n;\nstart:\n  br label %loop\n\nloop:                                              ; preds = %loop, %bb\n  %i = select i1 %arg, ptr %arg1, ptr @bar\n  %i3 = call i32 %i()\n  br i1 %arg, label %loop, label %ret\n\nret:                                              ; preds = %loop\n  ret i32 %i3\n}\n\ndeclare i32 @bar() nounwind willreturn memory(none)"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SimpleLoopUnswitch][LICM] Assertion `NewAccess != nullptr && \"Tried to create a memory access for a \" \"non-memory touching instruction\"'",
    "body": "The following IR triggers the assertion mentioned in the title:\r\n\r\n```llvm\r\n; opt -passes='loop-mssa(simple-loop-unswitch<nontrivial>,licm)'\r\ndefine i32 @foo(i1 %arg, ptr %arg1) {\r\nbb:\r\n  br label %bb2\r\n\r\nbb2:                                              ; preds = %bb2, %bb\r\n  %i = select i1 %arg, ptr %arg1, ptr @bar\r\n  %i3 = call i32 %i()\r\n  br i1 %arg, label %bb2, label %bb4\r\n\r\nbb4:                                              ; preds = %bb2\r\n  ret i32 %i3\r\n}\r\n\r\ndeclare i32 @bar() nounwind willreturn memory(none)\r\n```\r\n\r\nhttps://llvm.godbolt.org/z/bj79jxo8x",
    "author": "DianQK",
    "labels": [
      "crash",
      "llvm:analysis",
      "llvm:transforms"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  }
}