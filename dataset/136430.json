{
  "bug_id": "136430",
  "issue_url": "https://github.com/llvm/llvm-project/issues/136430",
  "bug_type": "miscompilation",
  "base_commit": "1f69d6354a4b088bda5ee62c31411a75eead8b0c",
  "knowledge_cutoff": "2025-04-19T13:06:10Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a0c4876eede8e68de22dc5296b037556c7cca981",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          3929,
          3944
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::visitSelectInst"
      ]
    }
  },
  "patch": "commit a0c4876eede8e68de22dc5296b037556c7cca981\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Apr 28 17:24:46 2025 +0800\n\n    [InstCombine] Fix ninf propagation for fcmp+sel -> minmax (#136433)\n    \n    Proof: https://alive2.llvm.org/ce/z/nCrvfr\n    Closes https://github.com/llvm/llvm-project/issues/136430\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 5a42a5c996da..b5a40892694c 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -3929,16 +3929,20 @@ Instruction *InstCombinerImpl::visitSelectInst(SelectInst &SI) {\n       if (match(&SI, m_OrdOrUnordFMax(m_Value(X), m_Value(Y)))) {\n         Value *BinIntr =\n             Builder.CreateBinaryIntrinsic(Intrinsic::maxnum, X, Y, &SI);\n-        if (auto *BinIntrInst = dyn_cast<Instruction>(BinIntr))\n+        if (auto *BinIntrInst = dyn_cast<Instruction>(BinIntr)) {\n           BinIntrInst->setHasNoNaNs(FCmp->hasNoNaNs());\n+          BinIntrInst->setHasNoInfs(FCmp->hasNoInfs());\n+        }\n         return replaceInstUsesWith(SI, BinIntr);\n       }\n \n       if (match(&SI, m_OrdOrUnordFMin(m_Value(X), m_Value(Y)))) {\n         Value *BinIntr =\n             Builder.CreateBinaryIntrinsic(Intrinsic::minnum, X, Y, &SI);\n-        if (auto *BinIntrInst = dyn_cast<Instruction>(BinIntr))\n+        if (auto *BinIntrInst = dyn_cast<Instruction>(BinIntr)) {\n           BinIntrInst->setHasNoNaNs(FCmp->hasNoNaNs());\n+          BinIntrInst->setHasNoInfs(FCmp->hasNoInfs());\n+        }\n         return replaceInstUsesWith(SI, BinIntr);\n       }\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/fcmp-fadd-select.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_fcmp_ogt_fadd_select_rewrite_flags2",
          "test_body": "define float @test_fcmp_ogt_fadd_select_rewrite_flags2(float %in) {\n  %cmp1 = fcmp ogt float %in, 0.000000e+00\n  %add = fadd float %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, float %add, float 1.000000e+00\n  ret float %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ogt_fadd_select_rewrite_and_fastmath",
          "test_body": "define float @test_fcmp_ogt_fadd_select_rewrite_and_fastmath(float %in) {\n  %cmp1 = fcmp nnan ogt float %in, 0.000000e+00\n  %add = fadd nnan ninf nsz float %in, 1.000000e+00\n  %sel = select nnan ninf nsz i1 %cmp1, float %add, float 1.000000e+00\n  ret float %sel\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/minmax-fp.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "maxnum_ogt_fmf_on_select",
          "test_body": "define float @maxnum_ogt_fmf_on_select(float %a, float %b) {\n  %cond = fcmp ogt float %a, %b\n  %f = select nnan nsz i1 %cond, float %a, float %b\n  ret float %f\n}\n"
        },
        {
          "test_name": "maxnum_oge_fmf_on_select",
          "test_body": "define <2 x float> @maxnum_oge_fmf_on_select(<2 x float> %a, <2 x float> %b) {\n  %cond = fcmp oge <2 x float> %a, %b\n  %f = select nnan ninf nsz <2 x i1> %cond, <2 x float> %a, <2 x float> %b\n  ret <2 x float> %f\n}\n"
        },
        {
          "test_name": "minnum_olt_fmf_on_select_both_ninf",
          "test_body": "define float @minnum_olt_fmf_on_select_both_ninf(float %a, float %b) {\n  %cond = fcmp ninf olt float %a, %b\n  %f = select nnan ninf nsz i1 %cond, float %a, float %b\n  ret float %f\n}\n"
        },
        {
          "test_name": "minnum_ole_fmf_on_select",
          "test_body": "define <2 x float> @minnum_ole_fmf_on_select(<2 x float> %a, <2 x float> %b) {\n  %cond = fcmp ole <2 x float> %a, %b\n  %f = select nnan ninf nsz <2 x i1> %cond, <2 x float> %a, <2 x float> %b\n  ret <2 x float> %f\n}\n"
        },
        {
          "test_name": "minnum_olt_fmf_on_select",
          "test_body": "define float @minnum_olt_fmf_on_select(float %a, float %b) {\n  %cond = fcmp olt float %a, %b\n  %f = select nnan nsz i1 %cond, float %a, float %b\n  ret float %f\n}\n"
        },
        {
          "test_name": "maxnum_no_nnan",
          "test_body": "define float @maxnum_no_nnan(float %a, float %b) {\n  %cond = fcmp oge float %a, %b\n  %f = select nsz i1 %cond, float %a, float %b\n  ret float %f\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/unordered-fcmp-select.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "select_max_ugt_2_use_cmp",
          "test_body": "declare void @foo(i1)\n\ndefine float @select_max_ugt_2_use_cmp(float %a, float %b) {\n  %cmp = fcmp ugt float %a, %b\n  call void @foo(i1 %cmp)\n  %sel = select nnan ninf nsz i1 %cmp, float %a, float %b\n  ret float %sel\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] ninf should not be propagated",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/cmneUX\n```\ndefine half @test_fcmp_select_maxnum(half %x) {\n#0:\n  %cmp2 = fcmp ogt half %x, 0x5bf8\n  %sel2 = select nnan ninf nsz i1 %cmp2, half %x, half 0x5bf8\n  ret half %sel2\n}\n=>\ndefine half @test_fcmp_select_maxnum(half %x) {\n#0:\n  %sel2 = fmax ninf nsz half %x, 0x5bf8\n  ret half %sel2\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\nhalf %x = #xfc00 (-oo)\n\nSource:\ni1 %cmp2 = #x0 (0)\nhalf %sel2 = #x5bf8 (255)\n\nTarget:\nhalf %sel2 = poison\nSource value: #x5bf8 (255)\nTarget value: poison\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}