{
  "bug_id": "76986",
  "issue_url": "https://github.com/llvm/llvm-project/issues/76986",
  "bug_type": "crash",
  "base_commit": "71c17424b5d5c22c0ce6b4c41acaa0401515baca",
  "knowledge_cutoff": "2024-01-04T18:14:09Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "2ab5c47c8752b444885d6bfaf6f570a482fb4cdf",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          829,
          843
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "simplifyRecipe"
      ]
    }
  },
  "patch": "commit 2ab5c47c8752b444885d6bfaf6f570a482fb4cdf\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Thu Jan 4 20:39:44 2024 +0000\n\n    [VPlan] Don't replace scalarizing recipe with VPWidenCastRecipe.\n    \n    Don't replace a scalarizing recipe with a VPWidenCastRecipe. This would\n    introduce wide (vectorizing) recipes when interleaving only.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/76986\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex 33132880d5a4..5c430620a2dc 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -829,15 +829,20 @@ static void simplifyRecipe(VPRecipeBase &R, VPTypeAnalysis &TypeInfo) {\n     Type *ATy = TypeInfo.inferScalarType(A);\n     if (TruncTy == ATy) {\n       Trunc->replaceAllUsesWith(A);\n-    } else if (ATy->getScalarSizeInBits() < TruncTy->getScalarSizeInBits()) {\n-      auto *VPC =\n-          new VPWidenCastRecipe(Instruction::CastOps(ExtOpcode), A, TruncTy);\n-      VPC->insertBefore(&R);\n-      Trunc->replaceAllUsesWith(VPC);\n-    } else if (ATy->getScalarSizeInBits() > TruncTy->getScalarSizeInBits()) {\n-      auto *VPC = new VPWidenCastRecipe(Instruction::Trunc, A, TruncTy);\n-      VPC->insertBefore(&R);\n-      Trunc->replaceAllUsesWith(VPC);\n+    } else {\n+      // Don't replace a scalarizing recipe with a widened cast.\n+      if (isa<VPReplicateRecipe>(&R))\n+        break;\n+      if (ATy->getScalarSizeInBits() < TruncTy->getScalarSizeInBits()) {\n+        auto *VPC =\n+            new VPWidenCastRecipe(Instruction::CastOps(ExtOpcode), A, TruncTy);\n+        VPC->insertBefore(&R);\n+        Trunc->replaceAllUsesWith(VPC);\n+      } else if (ATy->getScalarSizeInBits() > TruncTy->getScalarSizeInBits()) {\n+        auto *VPC = new VPWidenCastRecipe(Instruction::Trunc, A, TruncTy);\n+        VPC->insertBefore(&R);\n+        Trunc->replaceAllUsesWith(VPC);\n+      }\n     }\n #ifndef NDEBUG\n     // Verify that the cached type info is for both A and its users is still\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/interleave-and-scalarize-only.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=2 -debug -disable-output %s 2>&1",
        "opt -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=2 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_scalarize_call",
          "test_body": "define void @test_scalarize_call(i32 %start, ptr %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i32 [ %start, %entry ], [ %iv.next, %loop ]\n  %min = tail call i32 @llvm.smin.i32(i32 %iv, i32 65535)\n  %arrayidx = getelementptr inbounds i32, ptr %dst, i32 %iv\n  store i32 %min, ptr %arrayidx, align 8\n  %iv.next = add nsw i32 %iv, 1\n  %tobool.not = icmp eq i32 %iv.next, 1000\n  br i1 %tobool.not, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.smin.i32(i32, i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "scalarize_ptrtoint",
          "test_body": "define void @scalarize_ptrtoint(ptr %src, ptr %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %gep = getelementptr ptr, ptr %src, i64 %iv\n  %l = load ptr, ptr %gep, align 8\n  %cast = ptrtoint ptr %l to i64\n  %add = add i64 %cast, 10\n  %cast.2 = inttoptr i64 %add to ptr\n  store ptr %cast.2, ptr %dst, align 8\n  %iv.next = add i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, 0\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "first_order_recurrence_using_induction",
          "test_body": "define void @first_order_recurrence_using_induction(i32 %n, ptr %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %for = phi i32 [ 0, %entry ], [ %iv.trunc, %loop ]\n  %iv.trunc = trunc i64 %iv to i32\n  store i32 %for, ptr %dst, align 4\n  %iv.next = add nuw nsw i64 %iv, 1\n  %iv.next.trunc = trunc i64 %iv.next to i32\n  %ec = icmp slt i32 %iv.next.trunc, %n\n  br i1 %ec, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "reduction_with_casts",
          "test_body": "define i16 @reduction_with_casts() {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %count.0.in1 = phi i32 [ 0, %entry ], [ %add, %loop ]\n  %iv = phi i16 [ 1, %entry ], [ %iv.next, %loop ]\n  %conv1 = and i32 %count.0.in1, 65535\n  %add = add nuw nsw i32 %conv1, 1\n  %iv.next = add i16 %iv, 1\n  %cmp = icmp eq i16 %iv.next, 10000\n  br i1 %cmp, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %add.lcssa = phi i32 [ %add, %loop ]\n  %count.0 = trunc i32 %add.lcssa to i16\n  ret i16 %count.0\n}\n"
        },
        {
          "test_name": "pr76986_trunc_sext_interleaving_only",
          "test_body": "define void @pr76986_trunc_sext_interleaving_only(i16 %arg, ptr noalias %src, ptr noalias %dst) {\nbb:\n  br label %loop\n\nloop:                                             ; preds = %loop, %bb\n  %iv = phi i64 [ 0, %bb ], [ %iv.next, %loop ]\n  %gep.src = getelementptr inbounds i8, ptr %src, i64 %iv\n  %l = load i8, ptr %gep.src, align 1\n  %sext = sext i8 %l to i32\n  %trunc = trunc i32 %sext to i16\n  %sdiv = sdiv i16 %trunc, %arg\n  %gep.dst = getelementptr inbounds i16, ptr %dst, i64 %iv\n  store i16 %sdiv, ptr %gep.dst, align 2\n  %iv.next = add i64 %iv, 1\n  %icmp = icmp ult i64 %iv, 14933\n  br i1 %icmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "test_scalarize_with_branch_cond",
          "test_body": "define void @test_scalarize_with_branch_cond(ptr %src, ptr %dst) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %d = phi i1 [ false, %entry ], [ %d.next, %loop.latch ]\n  %d.next = xor i1 %d, true\n  br i1 %d, label %cond.false, label %loop.latch\n\ncond.false:                                       ; preds = %loop.header\n  %gep.src = getelementptr inbounds i32, ptr %src, i64 %iv\n  %gep.dst = getelementptr inbounds i32, ptr %dst, i64 %iv\n  %l = load i32, ptr %gep.src, align 4\n  store i32 %l, ptr %gep.dst, align 4\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %cond.false, %loop.header\n  %iv.next = add nsw i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, 1000\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `State.VF.isVector() && \"Not vectorizing?\"' failed.",
    "body": "Run opt with -passes=loop-vectorize\r\n\r\nhttps://godbolt.org/z/xdrTfEddx\r\n\r\nTest.ll\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"aarch64-none-linux-gnu\"\r\n\r\ndefine void @wombat(i16 %arg) gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb1, %bb\r\n  %phi = phi i64 [ 0, %bb ], [ %add, %bb1 ]\r\n  %sext = sext i8 0 to i32\r\n  %add = add i64 %phi, 1\r\n  %trunc = trunc i32 %sext to i16\r\n  %sdiv = sdiv i16 0, %arg\r\n  %sext2 = sext i16 %trunc to i32\r\n  %sext3 = sext i32 %sext2 to i64\r\n  %icmp = icmp ult i64 %phi, 14933\r\n  br i1 %icmp, label %bb1, label %bb4\r\n\r\nbb4:                                              ; preds = %bb1\r\n  %phi5 = phi i64 [ %sext3, %bb1 ]\r\n  ret void\r\n}\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Taking a look now!"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}