{
  "bug_id": "80597",
  "issue_url": "https://github.com/llvm/llvm-project/issues/80597",
  "bug_type": "crash",
  "base_commit": "8f4d8945536e9fc45db0e349b91c2f4b3a9cae29",
  "knowledge_cutoff": "2024-02-04T14:06:35Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "cb8d83a77c25e529f58eba17bb1ec76069a04e90",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        [
          802,
          807
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        "InstCombinerImpl::SimplifyDemandedUseBits"
      ]
    }
  },
  "patch": "commit cb8d83a77c25e529f58eba17bb1ec76069a04e90\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Tue Feb 6 01:29:38 2024 +0800\n\n    [InstCombine] Fix assertion failure in issue80597 (#80614)\n    \n    The assertion in #80597 failed when we were trying to compute known bits\n    of a value in an unreachable BB.\n    \n    https://github.com/llvm/llvm-project/blob/859b09da08c2a47026ba0a7d2f21b7dca705864d/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp#L749-L810\n    \n    In this case, `SignBits` is 30 (deduced from instr info), but `Known` is\n    `10000101010111010011110101000?0?00000000000000000000000000000000`\n    (deduced from dom cond). Setting high bits of `lshr Known, 1` will lead\n    to conflict.\n    \n    This patch masks out high bits of `Known.Zero` to address this problem.\n    \n    Fixes #80597.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\nindex a8a5f9831e15..79873a9b4cbb 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n@@ -802,6 +802,9 @@ Value *InstCombinerImpl::SimplifyDemandedUseBits(Value *V, APInt DemandedMask,\n         return InsertNewInstWith(LShr, I->getIterator());\n       } else if (Known.One[BitWidth-ShiftAmt-1]) { // New bits are known one.\n         Known.One |= HighBits;\n+        // SignBits may be out-of-sync with Known.countMinSignBits(). Mask out\n+        // high bits of Known.Zero to avoid conflicts.\n+        Known.Zero &= ~HighBits;\n       }\n     } else {\n       computeKnownBits(I, Known, Depth, CxtI);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/pr80597.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "pr80597",
          "test_body": "define i64 @pr80597(i1 %cond) {\nentry:\n  %add = select i1 %cond, i64 0, i64 4294967293\n  %add8 = shl i64 %add, 32\n  %sext1 = add i64 %add8, 8836839514384105472\n  %cmp = icmp ult i64 %sext1, -34359738368\n  br i1 %cmp, label %if.then, label %if.else\n\nif.else:                                          ; preds = %entry\n  %sext2 = or i64 %add8, 8836839522974040064\n  %ashr = ashr i64 %sext2, 1\n  ret i64 %ashr\n\nif.then:                                          ; preds = %entry\n  ret i64 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "llvm crash: Assertion `!LHSKnown.hasConflict() && \"Bits known to be one AND zero?\"' failed.",
    "body": "llvm crashes in `instcombine`\r\n\r\nBisected to d77067d08a3f56dc2d0e6c95bd2852c943df743a, which was committed by @nikic \r\n\r\nCompiler explorer: https://godbolt.org/z/e4jrvf5Wr\r\n\r\n```console\r\n% cat reduced.ll\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine i32 @main(i1 %.b.i) {\r\nentry:\r\n  %add.i = select i1 %.b.i, i64 0, i64 4294967293\r\n  %add8.i = shl i64 %add.i, 32\r\n  %sext.2.i = add i64 %add8.i, 8836839514384105472\r\n  %cmp11.2.i = icmp ult i64 %sext.2.i, -34359738368\r\n  br i1 %cmp11.2.i, label %return.loopexit.i, label %for.inc.2.i\r\n\r\nfor.inc.2.i:                                      ; preds = %entry\r\n  %sext.4.i = or i64 %add8.i, 8836839522974040064\r\n  %conv9.4.i = ashr i64 %sext.4.i, 1\r\n  %cmp11.4.i = icmp ult i64 %conv9.4.i, 0\r\n  br i1 %cmp11.4.i, label %return.loopexit.i, label %return.loopexit.i\r\n\r\nreturn.loopexit.i:                                ; preds = %for.inc.2.i, %for.inc.2.i, %entry\r\n  ret i32 0\r\n}\r\n%\r\n% opt -disable-output -passes=instcombine reduced.ll\r\nopt: /tmp/tmpzoi34eaf/tmporhhh5ti/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:246: llvm::Value* llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*): Assertion `!LHSKnown.hasConflict() && \"Bits known to be one AND zero?\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/opt -disable-output -passes=instcombine reduced.ll\r\n #0 0x00007f7698f4558f llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x93858f)\r\n #1 0x00007f7698f42ab4 SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007f7698222090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\r\n #3 0x00007f769822200b raise /build/glibc-wuryBv/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\r\n #4 0x00007f7698201859 abort /build/glibc-wuryBv/glibc-2.31/stdlib/abort.c:81:7\r\n #5 0x00007f7698201729 get_sysdep_segment_value /build/glibc-wuryBv/glibc-2.31/intl/loadmsgcat.c:509:8\r\n #6 0x00007f7698201729 _nl_load_domain /build/glibc-wuryBv/glibc-2.31/intl/loadmsgcat.c:970:34\r\n #7 0x00007f7698212fd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\r\n #8 0x00007f769a44445d llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1e3745d)\r\n #9 0x00007f769a444d25 llvm::InstCombinerImpl::SimplifyDemandedInstructionBits(llvm::Instruction&, llvm::KnownBits&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1e37d25)\r\n#10 0x00007f769a4459c5 llvm::InstCombinerImpl::SimplifyDemandedInstructionBits(llvm::Instruction&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1e389c5)\r\n#11 0x00007f769a38cdc3 llvm::InstCombinerImpl::visitOr(llvm::BinaryOperator&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1d7fdc3)\r\n#12 0x00007f769a3537b1 llvm::InstCombinerImpl::run() (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1d467b1)\r\n#13 0x00007f769a355002 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, llvm::LoopInfo*, llvm::InstCombineOptions const&) (.isra.0) InstructionCombining.cpp:0:0\r\n#14 0x00007f769a355fbb llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x1d48fbb)\r\n#15 0x00007f769bea5916 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x3898916)\r\n#16 0x00007f769916239d llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0xb5539d)\r\n#17 0x00007f769be9e506 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x3891506)\r\n#18 0x00007f7699160c2d llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0xb53c2d)\r\n#19 0x00007f769bea5556 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0x3898556)\r\n#20 0x00007f769915eb5d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/../lib/libLLVM-18git.so+0xb51b5d)\r\n#21 0x000055c7b779e395 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/opt+0x26395)\r\n#22 0x000055c7b7791e8a main (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/opt+0x19e8a)\r\n#23 0x00007f7698203083 __libc_start_main /build/glibc-wuryBv/glibc-2.31/csu/../csu/libc-start.c:342:3\r\n#24 0x000055c7b7792a5e _start (/zdata/shaoli/compilers/ccbuilder-compilers/clang-d77067d08a3f56dc2d0e6c95bd2852c943df743a/bin/opt+0x1aa5e)\r\n[1]    880216 abort       -disable-output -passes=instcombine reduced.ll\r\n%\r\n```\r\n\r\nThe above test case was reduced from\r\n```C\r\nlong a, i;\r\nstatic long b = -4;\r\nchar c;\r\nint d;\r\nstatic int *e = &d, *h = &d;\r\nstatic long *f = &b, *g = &b;\r\nint j() {\r\n  for (; a;) {\r\n    c = 0;\r\n    for (; c <= 6; c++) {\r\n      unsigned long k = 1;\r\n      i = -8;\r\n      *h = i >= (int)k + (int)*f + c + 2057487030 + k;\r\n      if (*e)\r\n        break;\r\n    }\r\n    return 0;\r\n  }\r\n  *g = 0;\r\n  return 0;\r\n}\r\nint main() { j(); }\r\n```",
    "author": "shao-hua-li",
    "labels": [
      "release:backport",
      "llvm:instcombine",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Minimal reproduction: https://godbolt.org/z/5bzaqP65P"
      },
      {
        "author": "dtcxzyw",
        "body": "Reopen this issue to backport the fix to the 18.X release.\r\n"
      }
    ]
  }
}
