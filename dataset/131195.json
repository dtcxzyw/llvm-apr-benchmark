{
  "bug_id": "131195",
  "issue_url": "https://github.com/llvm/llvm-project/issues/131195",
  "bug_type": "crash",
  "base_commit": "8413f4d837a96458104f63bab72c751b8285a458",
  "knowledge_cutoff": "2025-03-13T19:24:54Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "605a9f590d91a42ae652c2ab13487b5ad57c58a5",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          14081,
          14086
        ],
        [
          14121,
          14126
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::isGatherShuffledSingleRegisterEntry"
      ]
    }
  },
  "patch": "commit 605a9f590d91a42ae652c2ab13487b5ad57c58a5\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Mar 14 13:40:15 2025 -0700\n\n    [SLP]Check if user node is same as other node and check operand order\n    \n    Need to check if the user node is same as other node and check operand\n    order to prevent a compiler crash when trying to find matching gather\n    node with user nodes, having the same last instruction.\n    \n    Fixes #131195\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 9c3992b4a713..708dda9bd7f8 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -14081,6 +14081,17 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n     }\n     return true;\n   };\n+  auto CheckParentNodes = [&](const TreeEntry *User1, const TreeEntry *User2,\n+                              unsigned EdgeIdx) {\n+    const TreeEntry *Ptr1 = User1;\n+    while (Ptr1) {\n+      unsigned Idx = Ptr1->UserTreeIndex.EdgeIdx;\n+      Ptr1 = Ptr1->UserTreeIndex.UserTE;\n+      if (Ptr1 == User2)\n+        return Idx < EdgeIdx;\n+    }\n+    return false;\n+  };\n   for (Value *V : VL) {\n     if (isConstant(V) || !VisitedValue.insert(V).second)\n       continue;\n@@ -14121,6 +14132,9 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n             (TEUseEI.UserTE->Idx < UseEI.UserTE->Idx ||\n              HasGatherUser(TEUseEI.UserTE)))\n           continue;\n+        // If the user node is the operand of the other user node - skip.\n+        if (CheckParentNodes(TEUseEI.UserTE, UseEI.UserTE, UseEI.EdgeIdx))\n+          continue;\n       }\n \n       // Check if the user node of the TE comes after user node of TEPtr,\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/user-node-with-same-last-instr.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @wombat(i32 %arg) {\n;\nbb:\n  br label %bb1\n\nbb1:\n  br i1 false, label %bb2, label %bb5\n\nbb2:\n  %phi = phi i32 [ %or, %bb4 ], [ 0, %bb1 ]\n  %phi3 = phi i32 [ %sub, %bb4 ], [ 0, %bb1 ]\n  %or = or i32 %phi, 1\n  %and = and i32 0, %phi\n  %sub = sub i32 %phi3, %arg\n  br label %bb4\n\nbb4:\n  br i1 false, label %bb2, label %bb5\n\nbb5:\n  %phi6 = phi i32 [ 0, %bb1 ], [ %and, %bb4 ]\n  %phi7 = phi i32 [ 0, %bb1 ], [ %sub, %bb4 ]\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Instruction does not dominate all uses! ...LLVM ERROR: Broken module found, compilation aborted!",
    "body": "To reproduce run opt with the test below with -passes=slp-vectorizer -slp-threshold=-99999:\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @wombat(i32 %arg) #0 gc \"statepoint-example\" {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb\n  br i1 false, label %bb2, label %bb5\n\nbb2:                                              ; preds = %bb4, %bb1\n  %phi = phi i32 [ %or, %bb4 ], [ 0, %bb1 ]\n  %phi3 = phi i32 [ %sub, %bb4 ], [ 0, %bb1 ]\n  %or = or i32 %phi, 1\n  %and = and i32 0, %phi\n  %sub = sub i32 %phi3, %arg\n  br label %bb4\n\nbb4:                                              ; preds = %bb2\n  br i1 false, label %bb2, label %bb5\n\nbb5:                                              ; preds = %bb4, %bb1\n  %phi6 = phi i32 [ 0, %bb1 ], [ %and, %bb4 ]\n  %phi7 = phi i32 [ 0, %bb1 ], [ %sub, %bb4 ]\n  ret void\n}\n\nattributes #0 = { \"target-features\"=\"+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,-amx-fp8,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx512ifma,+xsave,+sse4.2,-tsxldtrk,-sm3,-ptwrite,-widekl,-movrs,+invpcid,+64bit,+xsavec,-avx10.1-512,-avx512vpopcntdq,+cmov,-avx512vp2intersect,+avx512cd,+movbe,-avxvnniint8,-ccmp,-amx-int8,-kl,-avx10.1-256,+evex512,-avxvnni,+rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-sha512,-vpclmulqdq,+avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-avx10.2-256,-gfni,-avxvnniint16,-amx-fp16,-zu,-ndd,+xsaveopt,+rdrnd,+avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,+avx512bw,+sse3,+pku,-nf,-amx-tf32,-amx-avx512,+fsgsbase,-clzero,-mwaitx,-lwp,+lzcnt,-sha,-movdir64b,-ppx,-wbnoinvd,-enqcmd,-amx-transpose,-avx10.2-512,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-amx-movrs,-rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,+avx512dq,-sse4a,-avx512f\" }\n```\nReproducer: https://godbolt.org/z/Pfa9ca1o9\n\n\n\nStack dump:\n```\nInstruction does not dominate all uses!\n  %5 = insertelement <2 x i32> <i32 poison, i32 0>, i32 %arg, i32 0\n  %1 = shufflevector <2 x i32> %5, <2 x i32> <i32 poison, i32 1>, <2 x i32> <i32 0, i32 3>\nLLVM ERROR: Broken module found, compilation aborted!\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer -slp-threshold=-99999 <source>\n1.\tRunning pass \"verify\" on module \"<source>\"\n #0 0x0000000005480a38 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5480a38)\n #1 0x000000000547e3f4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x000072fce1242520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x000072fce12969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x000072fce1242476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x000072fce12287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00000000008074fd llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\n #7 0x00000000053bec18 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53bec18)\n #8 0x00000000052bb868 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x52bb868)\n #9 0x000000000093768e llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93768e)\n#10 0x000000000527a030 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x527a030)\n#11 0x0000000000941b4a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x941b4a)\n#12 0x000000000093522c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93522c)\n#13 0x000072fce1229d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#14 0x000072fce1229e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#15 0x000000000092cd35 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x92cd35)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}