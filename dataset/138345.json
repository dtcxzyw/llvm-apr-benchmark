{
  "bug_id": "138345",
  "issue_url": "https://github.com/llvm/llvm-project/issues/138345",
  "bug_type": "crash",
  "base_commit": "1c1238d3615a7e1a99570d1e02de3b538d2e0669",
  "knowledge_cutoff": "2025-05-02T21:00:30Z",
  "lit_test_dir": [
    "llvm/test/Transforms/GVNSink"
  ],
  "hints": {
    "fix_commit": "43eafc0c4aca0b2fd159c09d4b162c1941b4f4ed",
    "components": [
      "Local"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/Local.cpp": [
        [
          4225,
          4232
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/Local.cpp": [
        "llvm::canReplaceOperandWithVariable"
      ]
    }
  },
  "patch": "commit 43eafc0c4aca0b2fd159c09d4b162c1941b4f4ed\nAuthor: Paul Kirth <paulkirth@google.com>\nDate:   Mon May 5 18:16:33 2025 -0700\n\n    [llvm][gvn-sink] Don't try to sink inline asm (#138414)\n    \n    Fixes #138345. Before this patch, gvn-sink would try to sink inline\n    assembly statements. Other GVN passes avoid them (see\n    https://github.com/llvm/llvm-project/blob/b4fac94181c4cf17dbb7ecc2ae975712b0e4a6d1/llvm/lib/Transforms/Scalar/GVN.cpp#L2932\n    Similarly, gvn-sink should skip these instructions, since they are not\n    safe to move. To do this, we update the early exit in\n    canReplaceOperandWithVariable, since it should have caught this case.\n    It's more efficient to also skip numbering in GVNSink if the instruction\n    is InlineAsm, but that should be infrequent.\n    \n    The test added is reduced from a failure when compiling Fuchsia with\n    gvn-sink.\n\ndiff --git a/llvm/lib/Transforms/Utils/Local.cpp b/llvm/lib/Transforms/Utils/Local.cpp\nindex 809a0d7ebeea..ce03bc066c6e 100644\n--- a/llvm/lib/Transforms/Utils/Local.cpp\n+++ b/llvm/lib/Transforms/Utils/Local.cpp\n@@ -4225,8 +4225,9 @@ bool llvm::canReplaceOperandWithVariable(const Instruction *I, unsigned OpIdx) {\n     return false;\n \n   // Early exit.\n-  if (!isa<Constant>(I->getOperand(OpIdx)))\n+  if (!isa<Constant, InlineAsm>(I->getOperand(OpIdx))) {\n     return true;\n+  }\n \n   switch (I->getOpcode()) {\n   default:\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/GVNSink/pr138345.ll",
      "commands": [
        "opt -passes=\"gvn-sink\" -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n;; See https://github.com/llvm/llvm-project/issues/138345 for details.\n;; The program below used to crash due to taking the address of the inline asm.\n;; gvn-sink shouldn't do anything in this case, so test that the pass no longer\n;; generates invalid IR and no longer crashes.\n\ndefine void @c(i64 %num, ptr %ptr) {\n;\nentry:\n  switch i64 %num, label %sw.epilog [\n  i64 1, label %sw.bb\n  i64 0, label %sw.bb1\n  ]\n\nsw.bb:                                            ; preds = %entry\n  %1 = load i8, ptr %ptr, align 1\n  call void asm sideeffect \"\", \"r,r,~{dirflag},~{fpsr},~{flags}\"(i8 %1, ptr @c)\n  br label %sw.epilog\n\nsw.bb1:                                           ; preds = %entry\n  %2 = load i8, ptr %ptr, align 1\n  call void asm sideeffect \"movdqu 0 %xmm0           \\0A\\09\", \"r,r,~{dirflag},~{fpsr},~{flags}\"(i8 %2, ptr @c)\n  br label %sw.epilog\n\nsw.epilog:                                        ; preds = %sw.bb1, %sw.bb, %entry\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion failure with gvn-sink",
    "body": "I tried to enable GVN hoist/sink when compiling Fuchsia at -Oz, since that should improve size slightly, and ran into this. I know those passes have had some issues, but I figured they had some attention a while back and we should try again. Probably some value as a regression test, if nothing else.\n\nAssertion:\n```console\n'llvm/lib/Analysis/LazyValueInfo.cpp:679: std::optional<ValueLatticeElement> llvm::LazyValueInfoImpl::solveBlockValueNonLocal(Value *, BasicBlock *): Assertion `isa<Argument>(Val) && \"Unknown live-in to the entry block\"' failed.\n```\n\nHere's a reduced test case where the assertion triggers.\n\n```LLVM\n; RUN:  opt -passes=\"gvn-sink,correlated-propagation\" -disable-output %s\n\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @c(i64 %0) {\nentry:\n  switch i64 %0, label %sw.epilog [\n    i64 1, label %sw.bb\n    i64 0, label %sw.bb1\n  ]\n\nsw.bb:                                            ; preds = %entry\n  %1 = load i8, ptr null, align 1\n  call void asm sideeffect \"\", \"r,r,~{dirflag},~{fpsr},~{flags}\"(i8 %1, ptr @c)\n  br label %sw.epilog\n\nsw.bb1:                                           ; preds = %entry\n  %2 = load i8, ptr null, align 1\n  call void asm sideeffect \"movdqu 0 %xmm0           \\0A\\09\", \"r,r,~{dirflag},~{fpsr},~{flags}\"(i8 %2, ptr @c)\n  br label %sw.epilog\n\nsw.epilog:                                        ; preds = %sw.bb1, %sw.bb, %entry\n  ret void\n}\n```\n\nFrom Clang:\n\n```c++\n// RUN: clang -cc1 -Os -mllvm -enable-gvn-hoist -mllvm -enable-gvn-sink -mllvm -wholeprogramdevirt-branch-funnel-threshold=0 -emit-llvm %s\nlong a;\nchar b;\nvoid c() {\n  switch (a) {\n  case 8:\n    __asm(\"\" : : \"r\"(b), \"r\"(c));\n    break;\n  case 6:\n    __asm(\"movdqu 0 %%xmm0           \\n\\t\" : : \"r\"(b), \"r\"(c));\n  }\n}\n```",
    "author": "ilovepi",
    "labels": [
      "crash-on-valid",
      "llvm:GVN"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}