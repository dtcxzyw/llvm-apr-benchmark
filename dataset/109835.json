{
  "bug_id": "109835",
  "issue_url": "https://github.com/llvm/llvm-project/issues/109835",
  "bug_type": "crash",
  "base_commit": "79ecb814d0c929a66ad92c7b3e91191f01247ac1",
  "knowledge_cutoff": "2024-09-24T17:26:42Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "cc01112660499a4db74bc3ee24b6f60b03d88dbd",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          11786,
          11792
        ],
        [
          11794,
          11799
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getTreeCost"
      ]
    }
  },
  "patch": "commit cc01112660499a4db74bc3ee24b6f60b03d88dbd\nAuthor: Han-Kuan Chen <hankuan.chen@sifive.com>\nDate:   Tue Oct 1 19:15:58 2024 +0800\n\n    [SLP][REVEC] getTypeSizeInBits should apply to scalar type instead of FixedVectorType. (#110610)\n    \n    reference: https://github.com/llvm/llvm-project/issues/109835\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 68bf5c52814f..54a1b99606bc 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -11786,7 +11786,7 @@ InstructionCost BoUpSLP::getTreeCost(ArrayRef<Value *> VectorizedVals) {\n     auto BWIt = MinBWs.find(&Root);\n     if (BWIt != MinBWs.end()) {\n       Type *DstTy = Root.Scalars.front()->getType();\n-      unsigned OriginalSz = DL->getTypeSizeInBits(DstTy);\n+      unsigned OriginalSz = DL->getTypeSizeInBits(DstTy->getScalarType());\n       unsigned SrcSz =\n           ReductionBitWidth == 0 ? BWIt->second.first : ReductionBitWidth;\n       if (OriginalSz != SrcSz) {\n@@ -11794,6 +11794,10 @@ InstructionCost BoUpSLP::getTreeCost(ArrayRef<Value *> VectorizedVals) {\n         if (OriginalSz > SrcSz)\n           Opcode = BWIt->second.second ? Instruction::SExt : Instruction::ZExt;\n         Type *SrcTy = IntegerType::get(DstTy->getContext(), SrcSz);\n+        if (auto *VecTy = dyn_cast<FixedVectorType>(DstTy)) {\n+          assert(SLPReVec && \"Only supported by REVEC.\");\n+          SrcTy = getWidenedType(SrcTy, VecTy->getNumElements());\n+        }\n         Cost += TTI->getCastInstrCost(Opcode, DstTy, SrcTy,\n                                       TTI::CastContextHint::None,\n                                       TTI::TCK_RecipThroughput);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/SystemZ/revec-fix-109835.ll",
      "commands": [
        "opt -mtriple=s390x-unknown-linux -mcpu=z16 -passes=slp-vectorizer -S -slp-revec %s"
      ],
      "tests": [
        {
          "test_name": "func_1",
          "test_body": "@g_3_1_0 = external dso_local global i32, align 4\n@g_7 = external dso_local global [5 x i32], align 4\n\ndefine void @func_1() {\n  %.pre = load i32, ptr @g_7, align 4\n  %1 = load <4 x i32>, ptr getelementptr inbounds nuw (i8, ptr @g_7, i64 4), align 4\n  br label %.loopexit\n\n.loopexit:                                        ; preds = %.loopexit, %0\n  %2 = phi i32 [ %op.rdx15, %.loopexit ], [ %.pre, %0 ]\n  %3 = phi <4 x i32> [ %71, %.loopexit ], [ %1, %0 ]\n  %4 = load volatile i32, ptr @g_3_1_0, align 4\n  %5 = load volatile i32, ptr @g_3_1_0, align 4\n  %6 = load volatile i32, ptr @g_3_1_0, align 4\n  %7 = load volatile i32, ptr @g_3_1_0, align 4\n  %8 = load volatile i32, ptr @g_3_1_0, align 4\n  %9 = load volatile i32, ptr @g_3_1_0, align 4\n  %10 = load volatile i32, ptr @g_3_1_0, align 4\n  %11 = load volatile i32, ptr @g_3_1_0, align 4\n  %12 = load volatile i32, ptr @g_3_1_0, align 4\n  %13 = load volatile i32, ptr @g_3_1_0, align 4\n  %14 = load volatile i32, ptr @g_3_1_0, align 4\n  %15 = load volatile i32, ptr @g_3_1_0, align 4\n  %16 = load volatile i32, ptr @g_3_1_0, align 4\n  %17 = load volatile i32, ptr @g_3_1_0, align 4\n  %18 = load volatile i32, ptr @g_3_1_0, align 4\n  %19 = load volatile i32, ptr @g_3_1_0, align 4\n  %20 = insertelement <4 x i32> poison, i32 %4, i32 0\n  %21 = insertelement <4 x i32> %20, i32 %9, i32 1\n  %22 = insertelement <4 x i32> %21, i32 %14, i32 2\n  %23 = insertelement <4 x i32> %22, i32 %19, i32 3\n  %24 = icmp eq <4 x i32> %23, zeroinitializer\n  %25 = load volatile i32, ptr @g_3_1_0, align 4\n  %26 = load volatile i32, ptr @g_3_1_0, align 4\n  %27 = load volatile i32, ptr @g_3_1_0, align 4\n  %28 = load volatile i32, ptr @g_3_1_0, align 4\n  %29 = load volatile i32, ptr @g_3_1_0, align 4\n  %.not2.410 = icmp eq i32 %29, 0\n  %30 = zext i1 %.not2.410 to i32\n  %31 = zext <4 x i1> %24 to <4 x i32>\n  %32 = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %31)\n  %op.rdx = xor i32 %32, %30\n  %op.rdx15 = xor i32 %op.rdx, %2\n  %33 = load volatile i32, ptr @g_3_1_0, align 4\n  %34 = load volatile i32, ptr @g_3_1_0, align 4\n  %35 = load volatile i32, ptr @g_3_1_0, align 4\n  %36 = load volatile i32, ptr @g_3_1_0, align 4\n  %37 = insertelement <4 x i32> poison, i32 %5, i32 0\n  %38 = insertelement <4 x i32> %37, i32 %6, i32 1\n  %39 = insertelement <4 x i32> %38, i32 %7, i32 2\n  %40 = insertelement <4 x i32> %39, i32 %8, i32 3\n  %41 = icmp eq <4 x i32> %40, zeroinitializer\n  %42 = zext <4 x i1> %41 to <4 x i32>\n  %43 = xor <4 x i32> %3, %42\n  %44 = insertelement <4 x i32> poison, i32 %10, i32 0\n  %45 = insertelement <4 x i32> %44, i32 %11, i32 1\n  %46 = insertelement <4 x i32> %45, i32 %12, i32 2\n  %47 = insertelement <4 x i32> %46, i32 %13, i32 3\n  %48 = icmp eq <4 x i32> %47, zeroinitializer\n  %49 = zext <4 x i1> %48 to <4 x i32>\n  %50 = xor <4 x i32> %43, %49\n  %51 = insertelement <4 x i32> poison, i32 %15, i32 0\n  %52 = insertelement <4 x i32> %51, i32 %16, i32 1\n  %53 = insertelement <4 x i32> %52, i32 %17, i32 2\n  %54 = insertelement <4 x i32> %53, i32 %18, i32 3\n  %55 = icmp eq <4 x i32> %54, zeroinitializer\n  %56 = zext <4 x i1> %55 to <4 x i32>\n  %57 = xor <4 x i32> %50, %56\n  %58 = insertelement <4 x i32> poison, i32 %25, i32 0\n  %59 = insertelement <4 x i32> %58, i32 %26, i32 1\n  %60 = insertelement <4 x i32> %59, i32 %27, i32 2\n  %61 = insertelement <4 x i32> %60, i32 %28, i32 3\n  %62 = icmp eq <4 x i32> %61, zeroinitializer\n  %63 = zext <4 x i1> %62 to <4 x i32>\n  %64 = xor <4 x i32> %57, %63\n  %65 = insertelement <4 x i32> poison, i32 %33, i32 0\n  %66 = insertelement <4 x i32> %65, i32 %34, i32 1\n  %67 = insertelement <4 x i32> %66, i32 %35, i32 2\n  %68 = insertelement <4 x i32> %67, i32 %36, i32 3\n  %69 = icmp eq <4 x i32> %68, zeroinitializer\n  %70 = zext <4 x i1> %69 to <4 x i32>\n  %71 = xor <4 x i32> %64, %70\n  br label %.loopexit\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.vector.reduce.xor.v4i32(<4 x i32>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP vectorizer] Assertion fails with slp-revec",
    "body": "[tc_slp_revec.tar.gz](https://github.com/user-attachments/files/17118250/tc_slp_revec.tar.gz)\r\n\r\nopt -mtriple=systemz-unknown -mcpu=z16 -O3 -o out.ll tc_crash22_aftercreduce.ll -slp-revec\r\n\r\nType.cpp:691: static llvm::FixedVectorType* llvm::FixedVectorType::get(llvm::Type*, unsigned int): Assertion `isValidElementType(\r\nElementType) && \"Element type of a VectorType must \" \"be an integer, floating point, or \" \"pointer type.\"' failed.\r\n\r\n#9 0x000002aa076e014e llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::finalize\r\n\r\n",
    "author": "JonPsson1",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "HanKuanChen",
        "body": "The fix is landing."
      },
      {
        "author": "JonPsson1",
        "body": "Still failing, but this time I see another assertion:\r\n\r\n[tc_slp_revec.tar.gz](https://github.com/user-attachments/files/17192435/tc_slp_revec.tar.gz)\r\n\r\nopt -mtriple=s390x-unknown-linux -mcpu=z16 -O3 tc_crash38_aftercreduce.ll -o /dev/null -slp-revec\r\n\r\nAssertion `!Dst->isVectorTy()' failed.\r\n14 0x00000000030504c2 llvm::SLPVectorizerPass::vectorizeHorReduction\r\n\r\n"
      },
      {
        "author": "HanKuanChen",
        "body": "The fix is landing."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}