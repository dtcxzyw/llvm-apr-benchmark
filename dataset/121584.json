{
  "bug_id": "121584",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121584",
  "bug_type": "miscompilation",
  "base_commit": "4a7c0b8afe6bf616cd6bb4f13b5b706a43c10e74",
  "knowledge_cutoff": "2025-01-03T17:05:45Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "24c2ba07ce65a5bf7d1113e05c517169d950b663",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp": [
        [
          2066,
          2079
        ],
        [
          2095,
          2101
        ],
        [
          2108,
          2114
        ],
        [
          2131,
          2137
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp": [
        "simplifyIRemMulShl"
      ]
    }
  },
  "patch": "commit 24c2ba07ce65a5bf7d1113e05c517169d950b663\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Jan 5 01:20:54 2025 +0800\n\n    [InstCombine] Drop NSW when converting `shl X, BW - 1` back into mul (#121633)\n    \n    `X <<s BW - 1` and `X *s INT_MIN` are not equivalent.\n    Alive2: https://alive2.llvm.org/ce/z/MKKFrj\n    Closes https://github.com/llvm/llvm-project/issues/121584\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp b/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp\nindex f85a3c936513..97a765ecfb6b 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp\n@@ -2066,14 +2066,18 @@ static Instruction *simplifyIRemMulShl(BinaryOperator &I,\n   bool ShiftByX = false;\n \n   // If V is not nullptr, it will be matched using m_Specific.\n-  auto MatchShiftOrMulXC = [](Value *Op, Value *&V, APInt &C) -> bool {\n+  auto MatchShiftOrMulXC = [](Value *Op, Value *&V, APInt &C,\n+                              bool &PreserveNSW) -> bool {\n     const APInt *Tmp = nullptr;\n     if ((!V && match(Op, m_Mul(m_Value(V), m_APInt(Tmp)))) ||\n         (V && match(Op, m_Mul(m_Specific(V), m_APInt(Tmp)))))\n       C = *Tmp;\n     else if ((!V && match(Op, m_Shl(m_Value(V), m_APInt(Tmp)))) ||\n-             (V && match(Op, m_Shl(m_Specific(V), m_APInt(Tmp)))))\n+             (V && match(Op, m_Shl(m_Specific(V), m_APInt(Tmp))))) {\n       C = APInt(Tmp->getBitWidth(), 1) << *Tmp;\n+      // We cannot preserve NSW when shifting by BW - 1.\n+      PreserveNSW = Tmp->ult(Tmp->getBitWidth() - 1);\n+    }\n     if (Tmp != nullptr)\n       return true;\n \n@@ -2095,7 +2099,9 @@ static Instruction *simplifyIRemMulShl(BinaryOperator &I,\n     return false;\n   };\n \n-  if (MatchShiftOrMulXC(Op0, X, Y) && MatchShiftOrMulXC(Op1, X, Z)) {\n+  bool Op0PreserveNSW = true, Op1PreserveNSW = true;\n+  if (MatchShiftOrMulXC(Op0, X, Y, Op0PreserveNSW) &&\n+      MatchShiftOrMulXC(Op1, X, Z, Op1PreserveNSW)) {\n     // pass\n   } else if (MatchShiftCX(Op0, Y, X) && MatchShiftCX(Op1, Z, X)) {\n     ShiftByX = true;\n@@ -2108,7 +2114,7 @@ static Instruction *simplifyIRemMulShl(BinaryOperator &I,\n   OverflowingBinaryOperator *BO0 = cast<OverflowingBinaryOperator>(Op0);\n   // TODO: We may be able to deduce more about nsw/nuw of BO0/BO1 based on Y >=\n   // Z or Z >= Y.\n-  bool BO0HasNSW = BO0->hasNoSignedWrap();\n+  bool BO0HasNSW = Op0PreserveNSW && BO0->hasNoSignedWrap();\n   bool BO0HasNUW = BO0->hasNoUnsignedWrap();\n   bool BO0NoWrap = IsSRem ? BO0HasNSW : BO0HasNUW;\n \n@@ -2131,7 +2137,7 @@ static Instruction *simplifyIRemMulShl(BinaryOperator &I,\n   };\n \n   OverflowingBinaryOperator *BO1 = cast<OverflowingBinaryOperator>(Op1);\n-  bool BO1HasNSW = BO1->hasNoSignedWrap();\n+  bool BO1HasNSW = Op1PreserveNSW && BO1->hasNoSignedWrap();\n   bool BO1HasNUW = BO1->hasNoUnsignedWrap();\n   bool BO1NoWrap = IsSRem ? BO1HasNSW : BO1HasNUW;\n   // (rem (mul X, Y), (mul nuw/nsw X, Z))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/rem-mul-shl.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "srem_XY_XZ_with_CY_gt_CZ_no_nuw_out",
          "test_body": "define <2 x i8> @srem_XY_XZ_with_CY_gt_CZ_no_nuw_out(<2 x i8> %X) {\n  %BO0 = mul nsw <2 x i8> %X, splat (i8 10)\n  %BO1 = shl nuw nsw <2 x i8> %X, splat (i8 3)\n  %r = srem <2 x i8> %BO0, %BO1\n  ret <2 x i8> %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Miscompilation in `simplifyIRemMulShl`",
    "body": "Alive2: https://alive2.llvm.org/ce/z/rdeehL\n```\n\n----------------------------------------\ndefine i8 @srem_XY_XZ_with_CY_gt_CZ_no_nuw_out1(i8 noundef %X) {\n#0:\n  %BO0 = mul nsw i8 noundef %X, 127\n  %BO1 = shl nsw i8 noundef %X, 7\n  %r = srem i8 %BO1, %BO0\n  ret i8 %r\n}\n=>\ndefine i8 @srem_XY_XZ_with_CY_gt_CZ_no_nuw_out1(i8 noundef %X) {\n#0:\n  %r = sub nsw i8 0, noundef %X\n  ret i8 %r\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\ni8 noundef %X = #xff (255, -1)\n\nSource:\ni8 %BO0 = #x81 (129, -127)\ni8 %BO1 = #x80 (128, -128)\ni8 %r = #xff (255, -1)\n\nTarget:\ni8 %r = #x01 (1)\nSource value: #xff (255, -1)\nTarget value: #x01 (1)\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}