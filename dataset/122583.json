{
  "bug_id": "122583",
  "issue_url": "https://github.com/llvm/llvm-project/issues/122583",
  "bug_type": "miscompilation",
  "base_commit": "16e45b8fac797c6d4ba161228b54665492204a9d",
  "knowledge_cutoff": "2025-01-11T07:48:51Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "066b88879ab5c195e7e14609e546cc238c2f3bf3",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          2441,
          2446
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "appendOperandsOfVL"
      ]
    }
  },
  "patch": "commit 066b88879ab5c195e7e14609e546cc238c2f3bf3\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Jan 13 10:51:26 2025 -0800\n\n    [SLP]Correctly set vector operand for extracts with poisons\n    \n    When extracts are vectorized and it has some poison values instead of\n    instructions, need to correctly set the vectorized operand not as\n    poison, but as a main vector operand of the main extract instruction.\n    \n    Fixes #122583\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 4b0ed5b30179..2742c3777c1e 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -2441,6 +2441,17 @@ public:\n           // operations or alternating sequences (e.g., +, -), we can safely\n           // tell the inverse operations by checking commutativity.\n           if (isa<PoisonValue>(VL[Lane])) {\n+            if (auto *EI = dyn_cast<ExtractElementInst>(VL0)) {\n+              if (OpIdx == 0) {\n+                OpsVec[OpIdx][Lane] = {EI->getVectorOperand(), true, false};\n+                continue;\n+              }\n+            } else if (auto *EV = dyn_cast<ExtractValueInst>(VL0)) {\n+              if (OpIdx == 0) {\n+                OpsVec[OpIdx][Lane] = {EV->getAggregateOperand(), true, false};\n+                continue;\n+              }\n+            }\n             OpsVec[OpIdx][Lane] = {\n                 PoisonValue::get(VL0->getOperand(OpIdx)->getType()), true,\n                 false};\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/extractelemets-extended-by-poison.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@j = global [4 x i64] zeroinitializer\n\ndefine i32 @main() {\nentry:\n  %.pre.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 24), align 8\n  %.pre50.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 16), align 16\n  %.pre51.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 8), align 8\n  %.pre52.i = load i64, ptr @j, align 16\n  %0 = or i64 %.pre51.i, 0\n  %1 = trunc i64 %.pre.i to i32\n  %2 = add i32 %1, 0\n  %3 = trunc i64 %.pre50.i to i32\n  %4 = add i32 %3, 0\n  %5 = trunc i64 %.pre51.i to i32\n  %6 = add i32 %5, 0\n  %7 = trunc i64 0 to i32\n  %8 = add i32 %5, 0\n  %9 = add i32 %7, 0\n  %10 = add i32 %1, 0\n  %11 = add i32 %3, 0\n  %12 = add i32 %5, 0\n  %13 = add i32 %7, 0\n  %14 = trunc i64 %.pre.i to i32\n  %15 = add i32 %14, 0\n  %16 = trunc i64 %.pre50.i to i32\n  %17 = add i32 %16, 0\n  %18 = trunc i64 %.pre51.i to i32\n  %19 = add i32 %18, 0\n  %20 = trunc i64 %.pre52.i to i32\n  %conv14.1.i = or i32 %9, %13\n  %21 = or i32 %conv14.1.i, %6\n  %22 = or i32 %21, %8\n  %23 = or i32 %22, %12\n  %24 = or i32 %23, %4\n  %25 = or i32 %24, %11\n  %26 = or i32 %25, %2\n  %27 = or i32 %26, %10\n  %28 = or i32 %27, %15\n  %29 = or i32 %28, %17\n  %30 = or i32 %29, %19\n  %31 = add i32 %14, 0\n  %32 = add i32 %16, 0\n  %33 = add i32 %18, 0\n  %34 = add i32 %20, 0\n  %35 = add i32 %14, 0\n  %36 = add i32 %16, 0\n  %37 = add i32 %18, 0\n  %38 = add i32 %20, 0\n  %39 = add i32 %14, 0\n  %40 = add i32 %16, 0\n  %41 = add i32 %18, 0\n  %42 = add i32 %20, 0\n  %inc.3.3.i.1 = or i64 %.pre52.i, 0\n  %conv14.i.1 = or i32 %38, %34\n  %conv14.1.i.1 = or i32 %conv14.i.1, %42\n  %conv14.3.i.1 = or i32 %conv14.1.i.1, %33\n  %conv14.145.i.1 = or i32 %conv14.3.i.1, %37\n  %conv14.1.1.i.1 = or i32 %conv14.145.i.1, %41\n  %conv14.3.1.i.1 = or i32 %conv14.1.1.i.1, %32\n  %conv14.247.i.1 = or i32 %conv14.3.1.i.1, %36\n  %conv14.1.2.i.1 = or i32 %conv14.247.i.1, %40\n  %conv14.3.2.i.1 = or i32 %conv14.1.2.i.1, %31\n  %conv14.349.i.1 = or i32 %conv14.3.2.i.1, %35\n  %conv14.1.3.i.1 = or i32 %conv14.349.i.1, %39\n  %conv14.3.3.i.1 = or i32 %conv14.1.3.i.1, %30\n  ret i32 %conv14.3.3.i.1\n}\n",
          "lli_expected_out": ""
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Miscompilation",
    "body": "Reproducer: https://godbolt.org/z/7eEEeeKoo\nSorry, I cannot provide alive2 link since `llvm.vector.insert.v8i64.v4i64` is not supported.\n```\n; bin/opt -passes=slp-vectorizer reduced.ll -S -o opt.ll\n\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@j = global [4 x i64] zeroinitializer\n\ndefine i32 @main() {\nentry:\n  %.pre.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 24), align 8\n  %.pre50.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 16), align 16\n  %.pre51.i = load i64, ptr getelementptr inbounds nuw (i8, ptr @j, i64 8), align 8\n  %.pre52.i = load i64, ptr @j, align 16\n  %0 = or i64 %.pre51.i, 0\n  %1 = trunc i64 %.pre.i to i32\n  %2 = add i32 %1, 0\n  %3 = trunc i64 %.pre50.i to i32\n  %4 = add i32 %3, 0\n  %5 = trunc i64 %.pre51.i to i32\n  %6 = add i32 %5, 0\n  %7 = trunc i64 0 to i32\n  %8 = add i32 %5, 0\n  %9 = add i32 %7, 0\n  %10 = add i32 %1, 0\n  %11 = add i32 %3, 0\n  %12 = add i32 %5, 0\n  %13 = add i32 %7, 0\n  %14 = trunc i64 %.pre.i to i32\n  %15 = add i32 %14, 0\n  %16 = trunc i64 %.pre50.i to i32\n  %17 = add i32 %16, 0\n  %18 = trunc i64 %.pre51.i to i32\n  %19 = add i32 %18, 0\n  %20 = trunc i64 %.pre52.i to i32\n  %conv14.1.i = or i32 %9, %13\n  %21 = or i32 %conv14.1.i, %6\n  %22 = or i32 %21, %8\n  %23 = or i32 %22, %12\n  %24 = or i32 %23, %4\n  %25 = or i32 %24, %11\n  %26 = or i32 %25, %2\n  %27 = or i32 %26, %10\n  %28 = or i32 %27, %15\n  %29 = or i32 %28, %17\n  %30 = or i32 %29, %19\n  %31 = add i32 %14, 0\n  %32 = add i32 %16, 0\n  %33 = add i32 %18, 0\n  %34 = add i32 %20, 0\n  %35 = add i32 %14, 0\n  %36 = add i32 %16, 0\n  %37 = add i32 %18, 0\n  %38 = add i32 %20, 0\n  %39 = add i32 %14, 0\n  %40 = add i32 %16, 0\n  %41 = add i32 %18, 0\n  %42 = add i32 %20, 0\n  %inc.3.3.i.1 = or i64 %.pre52.i, 0\n  %conv14.i.1 = or i32 %38, %34\n  %conv14.1.i.1 = or i32 %conv14.i.1, %42\n  %conv14.3.i.1 = or i32 %conv14.1.i.1, %33\n  %conv14.145.i.1 = or i32 %conv14.3.i.1, %37\n  %conv14.1.1.i.1 = or i32 %conv14.145.i.1, %41\n  %conv14.3.1.i.1 = or i32 %conv14.1.1.i.1, %32\n  %conv14.247.i.1 = or i32 %conv14.3.1.i.1, %36\n  %conv14.1.2.i.1 = or i32 %conv14.247.i.1, %40\n  %conv14.3.2.i.1 = or i32 %conv14.1.2.i.1, %31\n  %conv14.349.i.1 = or i32 %conv14.3.2.i.1, %35\n  %conv14.1.3.i.1 = or i32 %conv14.349.i.1, %39\n  %conv14.3.3.i.1 = or i32 %conv14.1.3.i.1, %30\n  ret i32 %conv14.3.3.i.1\n}\n```\nOutput:\n```\nsource_filename = \"/app/example.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main() {\n  %0 = load <4 x i64>, ptr @j, align 16\n  %1 = or i64 poison, 0\n  %2 = shufflevector <4 x i64> %0, <4 x i64> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 1, i32 poison, i32 poison>\n  %3 = shufflevector <4 x i64> %0, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>\n  %4 = shufflevector <8 x i64> %3, <8 x i64> <i64 poison, i64 poison, i64 poison, i64 poison, i64 0, i64 poison, i64 poison, i64 poison>, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 1, i32 poison, i32 poison>\n  %5 = call <8 x i64> @llvm.vector.insert.v8i64.v4i64(<8 x i64> %4, <4 x i64> %0, i64 0)\n  %6 = trunc <8 x i64> %5 to <8 x i32>\n  %7 = shufflevector <8 x i32> %6, <8 x i32> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5>\n  %8 = add <16 x i32> %7, zeroinitializer\n  %9 = extractelement <4 x i64> %0, i32 0\n  %inc.3.3.i.1 = or i64 %9, 0\n  %10 = call i32 @llvm.vector.reduce.or.v16i32(<16 x i32> %8)\n  %11 = call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> poison)\n  %op.rdx = or i32 %10, %11\n  ret i32 %op.rdx\n}\n\ndeclare <8 x i64> @llvm.vector.insert.v8i64.v4i64(<8 x i64>, <4 x i64>, i64 immarg) #0\n\ndeclare i32 @llvm.vector.reduce.or.v16i32(<16 x i32>) #0\n\ndeclare i32 @llvm.vector.reduce.or.v8i32(<8 x i32>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n```\nlli output:\n```\n> bin/lli reduced.ll\n> echo $?\n0\n> bin/lli opt.ll\n> echo $?\n255\n```\n[llubi](https://github.com/dtcxzyw/llvm-ub-aware-interpreter) output:\nBefore:\n```\n> ./llubi reduced.ll --verbose\nEntering function main\n  %0 = getelementptr inbounds nuw i8, ptr @j, i64 24 -> Ptr 40[@j + 24]\n  %.pre.i = load i64, ptr %0, align 8 -> i64 0\n  %1 = getelementptr inbounds nuw i8, ptr @j, i64 16 -> Ptr 32[@j + 16]\n  %.pre50.i = load i64, ptr %1, align 16 -> i64 0\n  %2 = getelementptr inbounds nuw i8, ptr @j, i64 8 -> Ptr 24[@j + 8]\n  %.pre51.i = load i64, ptr %2, align 8 -> i64 0\n  %.pre52.i = load i64, ptr @j, align 16 -> i64 0\n  %3 = or i64 %.pre51.i, 0 -> i64 0\n  %4 = trunc i64 %.pre.i to i32 -> i32 0\n  %5 = add i32 %4, 0 -> i32 0\n  %6 = trunc i64 %.pre50.i to i32 -> i32 0\n  %7 = add i32 %6, 0 -> i32 0\n  %8 = trunc i64 %.pre51.i to i32 -> i32 0\n  %9 = add i32 %8, 0 -> i32 0\n  %10 = trunc i64 0 to i32 -> i32 0\n  %11 = add i32 %8, 0 -> i32 0\n  %12 = add i32 %10, 0 -> i32 0\n  %13 = add i32 %4, 0 -> i32 0\n  %14 = add i32 %6, 0 -> i32 0\n  %15 = add i32 %8, 0 -> i32 0\n  %16 = add i32 %10, 0 -> i32 0\n  %17 = trunc i64 %.pre.i to i32 -> i32 0\n  %18 = add i32 %17, 0 -> i32 0\n  %19 = trunc i64 %.pre50.i to i32 -> i32 0\n  %20 = add i32 %19, 0 -> i32 0\n  %21 = trunc i64 %.pre51.i to i32 -> i32 0\n  %22 = add i32 %21, 0 -> i32 0\n  %23 = trunc i64 %.pre52.i to i32 -> i32 0\n  %conv14.1.i = or i32 %12, %16 -> i32 0\n  %24 = or i32 %conv14.1.i, %9 -> i32 0\n  %25 = or i32 %24, %11 -> i32 0\n  %26 = or i32 %25, %15 -> i32 0\n  %27 = or i32 %26, %7 -> i32 0\n  %28 = or i32 %27, %14 -> i32 0\n  %29 = or i32 %28, %5 -> i32 0\n  %30 = or i32 %29, %13 -> i32 0\n  %31 = or i32 %30, %18 -> i32 0\n  %32 = or i32 %31, %20 -> i32 0\n  %33 = or i32 %32, %22 -> i32 0\n  %34 = add i32 %17, 0 -> i32 0\n  %35 = add i32 %19, 0 -> i32 0\n  %36 = add i32 %21, 0 -> i32 0\n  %37 = add i32 %23, 0 -> i32 0\n  %38 = add i32 %17, 0 -> i32 0\n  %39 = add i32 %19, 0 -> i32 0\n  %40 = add i32 %21, 0 -> i32 0\n  %41 = add i32 %23, 0 -> i32 0\n  %42 = add i32 %17, 0 -> i32 0\n  %43 = add i32 %19, 0 -> i32 0\n  %44 = add i32 %21, 0 -> i32 0\n  %45 = add i32 %23, 0 -> i32 0\n  %inc.3.3.i.1 = or i64 %.pre52.i, 0 -> i64 0\n  %conv14.i.1 = or i32 %41, %37 -> i32 0\n  %conv14.1.i.1 = or i32 %conv14.i.1, %45 -> i32 0\n  %conv14.3.i.1 = or i32 %conv14.1.i.1, %36 -> i32 0\n  %conv14.145.i.1 = or i32 %conv14.3.i.1, %40 -> i32 0\n  %conv14.1.1.i.1 = or i32 %conv14.145.i.1, %44 -> i32 0\n  %conv14.3.1.i.1 = or i32 %conv14.1.1.i.1, %35 -> i32 0\n  %conv14.247.i.1 = or i32 %conv14.3.1.i.1, %39 -> i32 0\n  %conv14.1.2.i.1 = or i32 %conv14.247.i.1, %43 -> i32 0\n  %conv14.3.2.i.1 = or i32 %conv14.1.2.i.1, %34 -> i32 0\n  %conv14.349.i.1 = or i32 %conv14.3.2.i.1, %38 -> i32 0\n  %conv14.1.3.i.1 = or i32 %conv14.349.i.1, %42 -> i32 0\n  %conv14.3.3.i.1 = or i32 %conv14.1.3.i.1, %33 -> i32 0\n  ret i32 %conv14.3.3.i.1\nExiting function main\n```\nAfter:\n```\n> ./llubi opt.ll --verbose\nEntering function main\n  %0 = load <4 x i64>, ptr @j, align 16 -> { i64 0, i64 0, i64 0, i64 0 }\n  %1 = or i64 poison, 1 -> poison\n  %2 = or i64 poison, 0 -> poison\n  %3 = shufflevector <4 x i64> %0, <4 x i64> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 1, i32 poison, i32 poison> -> { poison, poison, poison, poison, poison, i64 0, poison, poison }\n  %4 = shufflevector <4 x i64> %0, <4 x i64> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison> -> { i64 0, i64 0, i64 0, i64 0, poison, poison, poison, poison }\n  %5 = shufflevector <8 x i64> %4, <8 x i64> <i64 poison, i64 poison, i64 poison, i64 poison, i64 0, i64 poison, i64 poison, i64 poison>, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 1, i32 poison, i32 poison> -> { poison, poison, poison, poison, i64 0, i64 0, poison, poison }\n  %6 = call <8 x i64> @llvm.vector.insert.v8i64.v4i64(<8 x i64> %5, <4 x i64> %0, i64 0) -> { i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, poison, poison }\n  %7 = trunc <8 x i64> %6 to <8 x i32> -> { i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, poison, poison }\n  %8 = shufflevector <8 x i32> %7, <8 x i32> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5> -> { i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 }\n  %9 = add <16 x i32> %8, zeroinitializer -> { i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 }\n  %10 = extractelement <4 x i64> %0, i32 0 -> i64 0\n  %inc.3.3.i.1 = or i64 %10, 0 -> i64 0\n  %11 = call i32 @llvm.vector.reduce.or.v16i32(<16 x i32> %9) -> i32 0\n  %12 = call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> poison) -> poison\n  %op.rdx = or i32 %11, %12 -> poison\n  ret i32 %op.rdx\nExiting function main\n\nUB triggered: Return a poison value\nExited with immediate UB.\nStacktrace:\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "llvm version: 6329355860e9b66bc7ed68b46c166763e408d4cc"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}