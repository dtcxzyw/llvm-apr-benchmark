{
  "bug_id": "118798",
  "issue_url": "https://github.com/llvm/llvm-project/issues/118798",
  "bug_type": "hang",
  "base_commit": "8a90b5b31776957cb9cfa4f9547d19544640c5cc",
  "knowledge_cutoff": "2024-12-05T13:19:25Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "27eaa8a40ef338bea611f693fa8e810b1fc8d78d",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp": [
        [
          427,
          433
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp": [
        "InstCombinerImpl::commonShiftTransforms"
      ]
    }
  },
  "patch": "commit 27eaa8a40ef338bea611f693fa8e810b1fc8d78d\nAuthor: Maurice Heumann <MauriceHeumann@gmail.com>\nDate:   Thu Dec 5 16:57:27 2024 +0100\n\n    [InstCombine] Prevent infinite loop with two shifts (#118806)\n    \n    The following pattern: `(C2 << X) << C1` will usually be transformed\n    into `(C2 << C1) << X`, essentially swapping `X` and `C1`.\n    \n    However, this should only be done when `C1` is an immediate constant,\n    otherwise thiscan lead to both constants being swapped forever.\n    \n    This fixes #118798.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp b/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp\nindex 10c3ccdb2243..d511e79e3e48 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp\n@@ -427,7 +427,8 @@ Instruction *InstCombinerImpl::commonShiftTransforms(BinaryOperator &I) {\n       if (Instruction *R = FoldOpIntoSelect(I, SI))\n         return R;\n \n-  if (Constant *CUI = dyn_cast<Constant>(Op1))\n+  Constant *CUI;\n+  if (match(Op1, m_ImmConstant(CUI)))\n     if (Instruction *Res = FoldShiftByConstant(Op0, CUI, I))\n       return Res;\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/shl-twice-constant.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "testfunc",
          "test_body": "@c = external constant i8\n@c2 = external constant i8\n\ndefine i64 @testfunc() {\n  %shl1 = shl i64 1, ptrtoint (ptr @c2 to i64)\n  %shl2 = shl i64 %shl1, ptrtoint (ptr @c to i64)\n  ret i64 %shl2\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Infinite loop when combining two `shl` instructions",
    "body": "The following sample triggers an infinite loop in instcombine:\n\n```\n@c = external constant i8\n@c2 = external constant i8\n\ndefine i16 @testfunc() {\nentry:\n  %0 = shl i64 1, ptrtoint (ptr @c2 to i64)\n  %1 = shl i64 %0, ptrtoint (ptr @c to i64)\n  %2 = inttoptr i64 %1 to ptr\n  %3 = load i16, ptr %2, align 1\n  ret i16 %3\n}\n```\n\nhttps://godbolt.org/z/WP6YvGjPq\n",
    "author": "momo5502",
    "labels": [
      "llvm:instcombine",
      "llvm:hang"
    ],
    "comments": [
      {
        "author": "momo5502",
        "body": "I have a potential fix and will create a PR soon"
      }
    ]
  },
  "verified": true
}