{
  "bug_id": "91883",
  "issue_url": "https://github.com/llvm/llvm-project/issues/91883",
  "bug_type": "crash",
  "base_commit": "90109d444839683b09f0aafdc50b749cb4b3203b",
  "knowledge_cutoff": "2024-05-12T12:03:48Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "67d840b60fbd75ca1b52d77bd3353771ec853735",
    "components": [
      "LoopVectorize"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/VPlan.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        [
          246,
          252
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        "VPTransformState::get"
      ]
    }
  },
  "patch": "commit 67d840b60fbd75ca1b52d77bd3353771ec853735\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue May 14 19:10:48 2024 +0100\n\n    [VPlan] Relax over-aggressive assertion in VPTransformState::get().\n    \n    There are cases where a vector value has some users that demand the\n    the single scalar value only (NeedsScalar), while other users demand the\n    vector value (see attached test cases). In those cases, the NeedsScalar\n    users should only demand the first lane.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/91883.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.cpp b/llvm/lib/Transforms/Vectorize/VPlan.cpp\nindex 999236ae8489..27f8e239b1c0 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.cpp\n@@ -246,7 +246,7 @@ Value *VPTransformState::get(VPValue *Def, const VPIteration &Instance) {\n \n Value *VPTransformState::get(VPValue *Def, unsigned Part, bool NeedsScalar) {\n   if (NeedsScalar) {\n-    assert((VF.isScalar() || Def->isLiveIn() ||\n+    assert((VF.isScalar() || Def->isLiveIn() || hasVectorValue(Def, Part) ||\n             (hasScalarValue(Def, VPIteration(Part, 0)) &&\n              Data.PerPartScalars[Def][Part].size() == 1)) &&\n            \"Trying to access a single scalar per part but has multiple scalars \"\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/widened-value-used-as-scalar-and-first-lane.ll",
      "commands": [
        "opt -S -passes=loop-vectorize -mcpu=skylake-avx512 -mtriple=x86_64-apple-macosx -S %s"
      ],
      "tests": [
        {
          "test_name": "iv.4_used_as_vector_and_first_lane",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\n\ndefine void @iv.4_used_as_vector_and_first_lane(ptr %src, ptr noalias %dst) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %g.src = getelementptr inbounds i64, ptr %src, i64 %iv\n  %l = load i64, ptr %g.src, align 8\n  %iv.4 = add nuw nsw i64 %iv, 4\n  %c = icmp ule i64 %l, 128\n  br i1 %c, label %loop.then, label %loop.latch\n\nloop.then:                                        ; preds = %loop.header\n  %or = or disjoint i64 %iv.4, 1\n  %g.dst = getelementptr inbounds i64, ptr %dst, i64 %or\n  store i64 %iv.4, ptr %g.dst, align 4\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %loop.then, %loop.header\n  %iv.next = add nuw nsw i64 %iv, 1\n  %exitcond = icmp eq i64 %iv.next, 32\n  br i1 %exitcond, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        },
        {
          "test_name": "iv.4_used_as_first_lane",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\n\ndefine void @iv.4_used_as_first_lane(ptr %src, ptr noalias %dst) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %g.src = getelementptr inbounds i64, ptr %src, i64 %iv\n  %l = load i64, ptr %g.src, align 8\n  %iv.4 = add nuw nsw i64 %iv, 4\n  %c = icmp ule i64 %l, 128\n  br i1 %c, label %loop.then, label %loop.latch\n\nloop.then:                                        ; preds = %loop.header\n  %or = or disjoint i64 %iv.4, 1\n  %g.dst = getelementptr inbounds i64, ptr %dst, i64 %or\n  store i64 %l, ptr %g.dst, align 4\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %loop.then, %loop.header\n  %iv.next = add nuw nsw i64 %iv, 1\n  %exitcond = icmp eq i64 %iv.next, 32\n  br i1 %exitcond, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "New LLVM vectorizer crash in assertion",
    "body": "@fhahn hits an assertion introduced in https://github.com/llvm/llvm-project/pull/80271\r\n\r\nInput file: https://gist.github.com/cheshire/e504c63db9bdb300fbdcc1df2e183bd8\r\n\r\nRepro:\r\n\r\n```\r\nopt -S -passes=loop-vectorize -mattr=+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx512ifma,+xsave,+sse4.2,-avx512pf,-tsxldtrk,-ptwrite,-widekl,-sm3,+invpcid,+64bit,+xsavec,-avx10.1-512,-avx512vpopcntdq,+cmov,-avx512vp2intersect,+avx512cd,+movbe,-avxvnniint8,-avx512er,-ccmp,-amx-int8,-kl,-avx10.1-256,+evex512,-avxvnni,+rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-sha512,-vpclmulqdq,+avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-gfni,-avxvnniint16,-amx-fp16,-ndd,+xsaveopt,+rdrnd,+avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,+avx512bw,+sse3,+pku,+fsgsbase,-clzero,-mwaitx,-lwp,+lzcnt,-sha,-movdir64b,-ppx,-wbnoinvd,-enqcmd,-prefetchwt1,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,+avx512dq,-sse4a -mcpu=skylake-avx512 /tmp/minimized_crash.ll\r\n```",
    "author": "cheshire",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  }
}