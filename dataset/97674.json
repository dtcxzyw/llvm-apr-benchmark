{
  "bug_id": "97674",
  "issue_url": "https://github.com/llvm/llvm-project/issues/97674",
  "bug_type": "crash",
  "base_commit": "c67653fbc3dd4ea9ab2a32c481a9ac4411020c7b",
  "knowledge_cutoff": "2024-07-04T04:06:51Z",
  "lit_test_dir": [
    "llvm/test/Transforms/CorrelatedValuePropagation"
  ],
  "hints": {
    "fix_commit": "899fe2cf318f6e3c7a183125ff17ef53944b2989",
    "components": [
      "LazyValueInfo"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/LazyValueInfo.cpp": [
        [
          1723,
          1729
        ],
        [
          1758,
          1764
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/LazyValueInfo.cpp": [
        "LazyValueInfo::getConstantOnEdge"
      ]
    }
  },
  "patch": "commit 899fe2cf318f6e3c7a183125ff17ef53944b2989\nAuthor: goldsteinn <35538541+goldsteinn@users.noreply.github.com>\nDate:   Thu Jul 4 15:14:39 2024 +0800\n\n    [CVP][LVI] Fix incorrect scalar type when getting constant folded vec (#97682)\n    \n    Fixes #97674\n    \n    After #97428 added support for vectors, our constant ranges can now be\n    from splat vectors so when they reduce to a singe constant value, we\n    need to return the original type as opposed to just an int.\n\ndiff --git a/llvm/lib/Analysis/LazyValueInfo.cpp b/llvm/lib/Analysis/LazyValueInfo.cpp\nindex b30e6a6a367c..4209ee4a7795 100644\n--- a/llvm/lib/Analysis/LazyValueInfo.cpp\n+++ b/llvm/lib/Analysis/LazyValueInfo.cpp\n@@ -1370,6 +1370,7 @@ LazyValueInfoImpl::getEdgeValueLocal(Value *Val, BasicBlock *BBFrom,\n \n       // If V is the condition of the branch itself, then we know exactly what\n       // it is.\n+      // NB: The condition on a `br` can't be a vector type.\n       if (Condition == Val)\n         return ValueLatticeElement::get(ConstantInt::get(\n                               Type::getInt1Ty(Val->getContext()), isTrueDest));\n@@ -1723,7 +1724,7 @@ Constant *LazyValueInfo::getConstant(Value *V, Instruction *CxtI) {\n   if (Result.isConstantRange()) {\n     const ConstantRange &CR = Result.getConstantRange();\n     if (const APInt *SingleVal = CR.getSingleElement())\n-      return ConstantInt::get(V->getContext(), *SingleVal);\n+      return ConstantInt::get(V->getType(), *SingleVal);\n   }\n   return nullptr;\n }\n@@ -1758,7 +1759,7 @@ Constant *LazyValueInfo::getConstantOnEdge(Value *V, BasicBlock *FromBB,\n   if (Result.isConstantRange()) {\n     const ConstantRange &CR = Result.getConstantRange();\n     if (const APInt *SingleVal = CR.getSingleElement())\n-      return ConstantInt::get(V->getContext(), *SingleVal);\n+      return ConstantInt::get(V->getType(), *SingleVal);\n   }\n   return nullptr;\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/CorrelatedValuePropagation/vectors.ll",
      "commands": [
        "opt -S -passes=correlated-propagation < %s"
      ],
      "tests": [
        {
          "test_name": "and_with_poison",
          "test_body": "define <2 x i16> @and_with_poison(<2 x i8> %a) {\n  %zext = zext <2 x i8> %a to <2 x i16>\n  %res = and <2 x i16> %zext, <i16 255, i16 poison>\n  ret <2 x i16> %res\n}\n"
        },
        {
          "test_name": "issue_97674_getConstant",
          "test_body": "define <4 x i64> @issue_97674_getConstant() {\nentry:\n  %folds = add <4 x i64> zeroinitializer, zeroinitializer\n  ret <4 x i64> %folds\n}\n"
        },
        {
          "test_name": "issue_97674_getConstantOnEdge",
          "test_body": "define <4 x i64> @issue_97674_getConstantOnEdge(i1 %cond) {\nentry:\n  br i1 %cond, label %if.then, label %if.end\n\nif.then:                                          ; preds = %entry\n  %folds = add <4 x i64> zeroinitializer, splat (i64 1)\n  br label %if.end\n\nif.end:                                           ; preds = %if.then, %entry\n  %r = phi <4 x i64> [ %folds, %if.then ], [ zeroinitializer, %entry ]\n  ret <4 x i64> %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "A/F: `getType() == V->getType() && \"All operands to PHI node must be the same type as the PHI node !\"' after 1eec81a",
    "body": "We have an internal test which started to hit an assertion failure when compiled which I bisected back to 1eec81a.\r\n\r\nConsider the following code:\r\n```c++\r\ntemplate <bool, class, class> using c = int;\r\ntypedef long cb __attribute__((__vector_size__(16)));\r\ncb d(cb);\r\ntypedef long e __attribute__((__vector_size__(32)));\r\nenum { f };\r\nstruct g {\r\n  enum { h };\r\n};\r\ntemplate <typename> struct i;\r\ntemplate <typename> struct aa;\r\ntemplate <typename> struct j;\r\ntemplate <typename> class k;\r\ntemplate <typename, int l, int m, int = 0, int = l, int = m> class n;\r\ntemplate <typename, typename> class o;\r\ntemplate <typename, int l, int m, int = 0, int = l, int = m> class p;\r\ntemplate <typename> struct q;\r\ntemplate <typename> struct r;\r\ntemplate <typename s> struct t { typedef q<s>::ab ab; };\r\ntemplate <typename ac> struct ad { typedef k<ac> ab; };\r\ntemplate <typename s> struct u {\r\n  operator s() { return ae; }\r\n  u(s v) : ae(v) {}\r\n  s ae;\r\n};\r\ntemplate <typename w> w x(const typename r<w>::ab &);\r\ntemplate <> struct q<int> { typedef u<e> ab; };\r\ntemplate <> struct r<u<e>> {\r\n  typedef int ab;\r\n  enum { af = 8 };\r\n};\r\ntemplate <> u<e> x(const int &) {\r\n  e y{};\r\n  return y;\r\n}\r\ne z;\r\ne ag(e a, u<e> b) {\r\n  __attribute__((__vector_size__(4 * sizeof(long)))) long ah = b;\r\n  z = a + ah;\r\n  return z;\r\n}\r\nstruct ai {\r\n  u<__attribute__((__vector_size__(4 * sizeof(long)))) long>\r\n  aj(u<__attribute__((__vector_size__(4 * sizeof(long)))) long> a,\r\n     const u<__attribute__((__vector_size__(4 * sizeof(long)))) long> &b) {\r\n    __attribute__((__vector_size__(4 * sizeof(long)))) long ak = a;\r\n    return ag(ak, b);\r\n  }\r\n};\r\nstruct al {\r\n  template <typename am> am aj() { return x<am>(an); }\r\n  int an;\r\n};\r\ntemplate <typename ac> long ao(ac);\r\ntemplate <typename ac> class k : j<ac> {\r\npublic:\r\n  typedef i<ac>::ap ap;\r\n  using j<ac>::aq;\r\n  static o<int, c<g::h, ac, p<ac, i<ac>::ar, i<ac>::as>>> at(long, long);\r\n  ap au() const;\r\n  template <typename av> ap aw(const av &) const;\r\n};\r\ntemplate <typename ac> struct j { ac aq() const; };\r\nstruct ax {\r\n  template <typename s, typename ay> s aj(al az, ay) { return az.aj<s>(); }\r\n};\r\ntemplate <typename ba, typename bb> struct aa<o<ba, bb>> {\r\n  aa(o<ba, bb>);\r\n  template <int, typename am, typename ay> am bc(ay) {\r\n    return be.aj<am>(bf, d);\r\n  }\r\n  ba bf;\r\n  ax be;\r\n};\r\ntemplate <typename ac> class bg : public ad<ac>::ab {};\r\ntemplate <typename bh, int l, int m, int bi, int bj, int bk>\r\nstruct i<n<bh, l, m, bi, bj, bk>> {\r\n  typedef bh ap;\r\n  enum { ar, as };\r\n};\r\ntemplate <typename bh, int l, int m, int bi, int bj, int bk>\r\nstruct i<p<bh, l, m, bi, bj, bk>> : i<n<bh, bj, bk>> {};\r\ntemplate <typename, int, int, int, int bj, int bk>\r\nclass p : public bg<p<int, bj, bk>> {};\r\ntemplate <typename ba, typename bb> struct i<o<ba, bb>> : i<bb> {};\r\ntemplate <typename, typename>\r\nclass o : public ad<o<al, p<int, 0, -1, 1, 0, 1>>>::ab {};\r\ntemplate <typename bl> struct bm {\r\n  typedef t<typename bl::ap>::ab am;\r\n  enum { bn = r<am>::af };\r\n  enum { bo };\r\n};\r\ntemplate <typename, typename bl, int = bm<bl>::bo> struct M;\r\ntemplate <typename bp, typename bl> struct M<bp, bl, f> {\r\n  typedef bm<bl>::am bq;\r\n  template <typename br> static bl bs(bl bt, bp bu, br bv) {\r\n    enum { alignment };\r\n    long bw = ao(bv);\r\n    bq bx = bt.template bc<alignment, bq>(bw);\r\n    if (bw > bm<bl>::bn) {\r\n      bq by = bt.template bc<alignment, bq>(bm<bl>::bn);\r\n      for (long bd; bd; bd += bm<bl>::bn) {\r\n        bx = bu.aj(bx, bt.template bc<alignment, bq>(d));\r\n        u bz = bt.template bc<alignment, bq>(bm<bl>::bn);\r\n        by = bu.aj(by, bz);\r\n      }\r\n      bx = bu.aj(bx, by);\r\n    }\r\n    __attribute__((__vector_size__(4 * sizeof(int)))) int ca =\r\n        __builtin_ia32_vextractf128_si256(bx, 0);\r\n    __attribute__((__vector_size__(2 * sizeof(long)))) long b = d(ca);\r\n  }\r\n};\r\nclass cc : public aa<o<al, p<int, 0, -1, 1, 0, 1>>> {\r\npublic:\r\n  typedef int ap;\r\n};\r\ntemplate <typename ac>\r\ntemplate <typename bp>\r\ni<ac>::ap k<ac>::aw(const bp &bu) const {\r\n  cc cd(aq());\r\n  o<int, int> ce;\r\n  M<bp, cc>::bs(cd, bu, ce);\r\n}\r\ntemplate <typename ac> i<ac>::ap k<ac>::au() const { aw(ai()); }\r\nvoid cf() { p<int, 1, 1>::at(0, 0).au(); }\r\n```\r\n\r\nWhen compiled with optimizations and AVX support with a compiler before 1eec81a, the compilation succeeds:\r\n```\r\n$ ~/src/upstream/b76dd4edbfbba5593b691ef92b755f25cf63f445-linux/bin/clang -c -O2 -mavx -Wno-return-type -std=c++20 repro.cpp\r\n$\r\n```\r\n\r\nWhen compiled with the same arguments but with a compiler built from 1eec81a, the compiler hits an assertion failure:\r\n```\r\n$ ~/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang -c -O2 -mavx -Wno-return-type -std=c++20 repro.cpp\r\nclang: /home/dyung/src/upstream/llvm_clean_git/llvm/include/llvm/IR/Instructions.h:2582: void llvm::PHINode::setIncomingValue(unsigned int, llvm::Value*): Assertion `getType() == V->getType() && \"All operands to PHI node must be the same type as the PHI node\r\n!\"' failed.                           \r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.                                                                                                       \r\nStack dump:\r\n0.      Program arguments: /home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang -c -O2 -mavx -Wno-return-type -std=c++20 repro.cpp\r\n1.      <eof> parser at end of file\r\n2.      Optimizer\r\n3.      Running pass \"require<globals-aa>,function(invalidate<aa>),require<profile-summary>,cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,speculative-\r\nexecution<only-if-divergent-target>,jump-threading,correlated-propagation,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-sink-common-insts;speculate-blocks;simplify-cond-\r\nbranch>,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-in\r\nsts;no-sink-common-insts;speculate-blocks;simplify-cond-branch>,reassociate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-un\r\nswitch<no-nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-sink-common-insts;speculate-blocks;simplify-cond-branch>,instcombine<max-iterations=1;no-use\r\n-loop-info;no-verify-fixpoint>,loop(loop-idiom,indvars,simple-loop-unswitch<no-nontrivial;trivial>,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-use-loop-info;\r\nno-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyopt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-commo\r\nn-insts;sink-common-insts;speculate-blocks;simplify-cond-branch>,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split)),function(invalidate<should-not-run-function-pass\r\nes>),cgscc(devirt<4>())\" on module \"repro.cpp\"\r\n4.      Running pass \"cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,speculative-execution<only-if-divergent-target>,jump-threading,correlated-propagat\r\nion,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-sink-common-insts;speculate-blocks;simplify-cond-branch>,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoi\r\nnt>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-sink-common-insts;speculate-blocks;simplify-cond-branch>,reasso\r\nciate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<no-nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-f\r\norward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-sink-common-insts;speculate-blocks;simplify-cond-branch>,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>,loop(loop-idiom,indvars,simple-loop-uns\r\nwitch<no-nontrivial;trivial>,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyo\r\npt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-common-insts;sink-common-insts;speculate-blocks;simplify-cond-branch>,instc\r\nombine<max-iterations=1;no-use-loop-info;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split))\" on module \"repro.cpp\"\r\n5.      Running pass \"correlated-propagation\" on function \"_ZN1MI2ai2ccLi0EE2bsI1oIiiEEES1_S1_S0_T_\"\r\n #0 0x000056411be676af llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x41856af)\r\n #1 0x000056411be6520c llvm::sys::CleanupOnSignal(unsigned long) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x418320c)\r\n #2 0x000056411bdaa728 CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0\r\n #3 0x00007f29a8886420 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x14420)\r\n #4 0x00007f29a835300b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\r\n #5 0x00007f29a8332859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\r\n #6 0x00007f29a8332729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\r\n #7 0x00007f29a8332729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\r\n #8 0x00007f29a8343fd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\r\n #9 0x00005641200199a5 processPHI(llvm::PHINode*, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) CorrelatedValuePropagation.cpp:0:0\r\n#10 0x000056412002131e runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) CorrelatedValuePropagation.cpp:0:0\r\n#11 0x0000564120022b4b llvm::CorrelatedValuePropagationPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x8340b4b)\r\n#12 0x000056411d2b9866 llvm::detail::PassModel<llvm::Function, llvm::CorrelatedValuePropagationPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x55d7866)\r\n#13 0x000056411b80daf1 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x3b2baf1)\r\n#14 0x00005641193e3d86 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x1701d86)\r\n#15 0x000056411acf6e91 llvm::CGSCCToFunctionPassAdaptor::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x3014e91)\r\n#16 0x00005641193e5326 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::CGSCCToFunctionPassAdaptor, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x1703326)\r\n#17 0x000056411aceef7f llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x300cf7f)\r\n#18 0x000056411d2b71b6 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x55d51b6)\r\n#19 0x000056411acf370d llvm::DevirtSCCRepeatedPass::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x301170d)\r\n#20 0x000056411d2b7206 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::DevirtSCCRepeatedPass, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x55d5206)\r\n#21 0x000056411acf150c llvm::ModuleToPostOrderCGSCCPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x300f50c)\r\n#22 0x000056411d2b7166 llvm::detail::PassModel<llvm::Module, llvm::ModuleToPostOrderCGSCCPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x55d5166)\r\n#23 0x000056411b80a601 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x3b28601)\r\n#24 0x000056411d4afdb5 llvm::ModuleInlinerWrapperPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x57cddb5)\r\n#25 0x000056411d2b68f6 llvm::detail::PassModel<llvm::Module, llvm::ModuleInlinerWrapperPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x55d48f6)\r\n#26 0x000056411b80a601 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x3b28601)\r\n#27 0x000056411c11c4d8 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\r\n#28 0x000056411c11f855 (anonymous namespace)::EmitAssemblyHelper::EmitAssembly(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) BackendUtil.cpp:0:0\r\n#29 0x000056411c11fef6 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x443def6)\r\n#30 0x000056411c792bea clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4ab0bea)\r\n#31 0x000056411e56cb8c clang::ParseAST(clang::Sema&, bool, bool) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x688ab8c)\r\n#32 0x000056411c793078 clang::CodeGenAction::ExecuteAction() (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4ab1078)\r\n#33 0x000056411ca26e79 clang::FrontendAction::Execute() (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4d44e79)\r\n#34 0x000056411c9aa76e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4cc876e)\r\n#35 0x000056411cb12366 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4e30366)\r\n#36 0x0000564118fcc89f cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x12ea89f)\r\n#37 0x0000564118fc594a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\r\n#38 0x000056411c7d833d void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const::'lambda'()>(long) Job.cpp:0:0\r\n#39 0x000056411bdaac30 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x40c8c30)\r\n#40 0x000056411c7d895f clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const (.part.0) Job.cpp:0:0\r\n#41 0x000056411c79cdbc clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4abadbc)\r\n#42 0x000056411c79d84d clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4abb84d)\r\n#43 0x000056411c7a5925 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x4ac3925)\r\n#44 0x0000564118fc9bab clang_main(int, char**, llvm::ToolContext const&) (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x12e7bab)\r\n#45 0x0000564118ebcc0b main (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x11dac0b)\r\n#46 0x00007f29a8334083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\r\n#47 0x0000564118fc53de _start (/home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin/clang+0x12e33de)\r\nclang: error: clang frontend command failed with exit code 134 (use -v to see invocation)\r\nclang version 19.0.0 (https://github.com/llvm/llvm-project.git 1eec81a831dcf925c0c86c153e8dce019a5b5436)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /home/dyung/src/upstream/1eec81a831dcf925c0c86c153e8dce019a5b5436-linux/bin\r\n```",
    "author": "dyung",
    "labels": [
      "crash",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "goldsteinn",
        "body": "Seems like when `CVP` finds a constant, its returning the scalar, not the VEC type.\r\n\r\nReducer of exact error:\r\n```\r\ndefine <4 x i64> @reduce(i1 %cond) {\r\nentry:\r\n  br i1 %cond, label %if.then, label %if.end\r\n\r\nif.then:\r\n  %folds = add <4 x i64> zeroinitializer, <i64 1, i64 1, i64 1, i64 1>\r\n  br label %if.end\r\n\r\nif.end:\r\n  %r = phi <4 x i64> [ %folds, %if.then ], [ zeroinitializer, %entry ]\r\n  ret <4 x i64> %r\r\n}\r\n```\r\nRepro with: `opt  -passes=correlated-propagation`\r\n\r\nOr an even simpler version (different assert location):\r\n```\r\ndefine <4 x i64> @reduce() {\r\nentry:\r\n  %folds = add <4 x i64> zeroinitializer, zeroinitializer\r\n  ret <4 x i64> %folds\r\n}\r\n    \r\n```\r\n\r\nSame command as above.\r\n"
      },
      {
        "author": "goldsteinn",
        "body": "Ill have a fix up shortly."
      },
      {
        "author": "goldsteinn",
        "body": "Fix at: https://github.com/llvm/llvm-project/pull/97682"
      }
    ]
  },
  "verified": true
}