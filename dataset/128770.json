{
  "bug_id": "128770",
  "issue_url": "https://github.com/llvm/llvm-project/issues/128770",
  "bug_type": "crash",
  "base_commit": "7f482aa848c5f136d2b32431f91f88492c78c709",
  "knowledge_cutoff": "2025-02-25T20:34:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "418a9872851ef5342b29baa36dd672129f129953",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13353,
          13358
        ],
        [
          13453,
          13459
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::isGatherShuffledSingleRegisterEntry"
      ]
    }
  },
  "patch": "commit 418a9872851ef5342b29baa36dd672129f129953\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Feb 26 12:59:27 2025 -0800\n\n    [SLP]Do not use node, if it is a subvector or buildvector node\n    \n    If the buildvector has some matches with another node, which is\n    a subvector of another buildvector node, need to check for this and\n    cancel matching to avoid incorrect ordering of the nodes.\n    \n    Fixes #128770\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 02fea2eaf9d4..b25b09306aca 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13353,6 +13353,14 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n       return EdgeInfo(const_cast<TreeEntry *>(TE), 0);\n     return TE->UserTreeIndex;\n   };\n+  auto HasGatherUser = [&](const TreeEntry *TE) {\n+    while (TE->Idx != 0 && TE->UserTreeIndex) {\n+      if (TE->UserTreeIndex.EdgeIdx == UINT_MAX)\n+        return true;\n+      TE = TE->UserTreeIndex.UserTE;\n+    }\n+    return false;\n+  };\n   const EdgeInfo TEUseEI = GetUserEntry(TE);\n   if (!TEUseEI)\n     return std::nullopt;\n@@ -13453,7 +13461,8 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n         // If the user instruction is used for some reason in different\n         // vectorized nodes - make it depend on index.\n         if (TEUseEI.UserTE != UseEI.UserTE &&\n-            TEUseEI.UserTE->Idx < UseEI.UserTE->Idx)\n+            (TEUseEI.UserTE->Idx < UseEI.UserTE->Idx ||\n+             HasGatherUser(TEUseEI.UserTE)))\n           continue;\n       }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/buildvector-reused-with-bv-subvector.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(ptr %0, i64 %1, i64 %2) {\n;\n  %4 = ptrtoint ptr %0 to i64\n  %5 = ptrtoint ptr %0 to i64\n  %6 = ptrtoint ptr %0 to i64\n  %7 = ptrtoint ptr %0 to i64\n  %8 = ptrtoint ptr %0 to i64\n  br label %.preheader.lr.ph\n\n.preheader.lr.ph:\n  br label %.preheader.us.us.preheader\n\n.preheader.us.us.preheader:\n  %9 = or i64 %1, %7\n  %10 = or i64 %2, %7\n  %11 = or i64 %1, %4\n  %12 = or i64 %1, %8\n  %13 = or i64 %5, %8\n  %14 = or i64 %8, %4\n  %15 = or i64 %5, %6\n  %16 = or i64 %6, %4\n  br label %.preheader.us.us\n\n.preheader.us.us:\n  %diff.check1 = icmp ult i64 %9, 32\n  %diff.check2 = icmp ult i64 %10, 32\n  %conflict.rdx3 = or i1 %diff.check1, %diff.check2\n  %diff.check4 = icmp ult i64 %11, 32\n  %conflict.rdx5 = or i1 %conflict.rdx3, %diff.check4\n  %diff.check6 = icmp ult i64 %12, 32\n  %conflict.rdx7 = or i1 %conflict.rdx5, %diff.check6\n  %diff.check8 = icmp ult i64 %13, 32\n  %conflict.rdx9 = or i1 %conflict.rdx7, %diff.check8\n  %diff.check10 = icmp ult i64 %14, 32\n  %conflict.rdx11 = or i1 %conflict.rdx9, %diff.check10\n  %diff.check12 = icmp ult i64 %15, 32\n  %conflict.rdx13 = or i1 %conflict.rdx11, %diff.check12\n  %diff.check14 = icmp ult i64 %16, 32\n  %conflict.rdx15 = or i1 %conflict.rdx13, %diff.check14\n  br i1 %conflict.rdx15, label %scalar.ph, label %.preheader.us.us\n\nscalar.ph:\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "SLP: Instruction does not dominate all uses (insertelement/shufflevector)",
    "body": "[slp.ll.gz](https://github.com/user-attachments/files/18972113/slp.ll.gz)\n\nReproducer: `opt -passes=slp-vectorizer slp.ll -mcpu=skylake`\n\n@alexey-bataev can you please take a look?",
    "author": "vzakhari",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}