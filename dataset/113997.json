{
  "bug_id": "113997",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113997",
  "bug_type": "miscompilation",
  "base_commit": "bef3b54ea10a564a2de72f658f2efd64f537c079",
  "knowledge_cutoff": "2024-10-29T04:11:49Z",
  "lit_test_dir": [
    "llvm/test/Transforms/GVN",
    "llvm/test/Transforms/NewGVN"
  ],
  "hints": {
    "fix_commit": "f16bff1261a92169992c6edf6bc6b38d1c815c8d",
    "components": [
      "GVN",
      "NewGVN",
      "Local"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/GVN.cpp": [
        [
          2189,
          2194
        ],
        [
          2734,
          2740
        ],
        [
          3000,
          3006
        ]
      ],
      "llvm/lib/Transforms/Scalar/NewGVN.cpp": [
        [
          3854,
          3859
        ],
        [
          3963,
          3968
        ],
        [
          4069,
          4076
        ],
        [
          4112,
          4128
        ]
      ],
      "llvm/lib/Transforms/Utils/Local.cpp": [
        [
          3508,
          3513
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/GVN.cpp": [
        "GVNPass::performScalarPRE",
        "GVNPass::processAssumeIntrinsic",
        "GVNPass::processInstruction",
        "patchAndReplaceAllUsesWith"
      ],
      "llvm/lib/Transforms/Scalar/NewGVN.cpp": [
        "NewGVN::eliminateInstructions",
        "NewGVN::findPHIOfOpsLeader"
      ],
      "llvm/lib/Transforms/Utils/Local.cpp": [
        "llvm::patchReplacementInstruction"
      ]
    }
  },
  "patch": "commit f16bff1261a92169992c6edf6bc6b38d1c815c8d\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Nov 1 12:44:33 2024 +0800\n\n    [GVN][NewGVN][Local] Handle attributes for function calls after CSE (#114011)\n    \n    This patch intersects attributes of two calls to avoid introducing UB.\n    It also skips incompatible call pairs in GVN/NewGVN. However, I cannot\n    provide negative tests for these changes.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/113997.\n\ndiff --git a/llvm/lib/Transforms/Scalar/GVN.cpp b/llvm/lib/Transforms/Scalar/GVN.cpp\nindex 2ba600497e00..ad9b1217089d 100644\n--- a/llvm/lib/Transforms/Scalar/GVN.cpp\n+++ b/llvm/lib/Transforms/Scalar/GVN.cpp\n@@ -2189,6 +2189,16 @@ bool GVNPass::processAssumeIntrinsic(AssumeInst *IntrinsicI) {\n   return Changed;\n }\n \n+// Return true iff V1 can be replaced with V2.\n+static bool canBeReplacedBy(Value *V1, Value *V2) {\n+  if (auto *CB1 = dyn_cast<CallBase>(V1))\n+    if (auto *CB2 = dyn_cast<CallBase>(V2))\n+      return CB1->getAttributes()\n+          .intersectWith(CB2->getContext(), CB2->getAttributes())\n+          .has_value();\n+  return true;\n+}\n+\n static void patchAndReplaceAllUsesWith(Instruction *I, Value *Repl) {\n   patchReplacementInstruction(I, Repl);\n   I->replaceAllUsesWith(Repl);\n@@ -2734,7 +2744,7 @@ bool GVNPass::processInstruction(Instruction *I) {\n   // Perform fast-path value-number based elimination of values inherited from\n   // dominators.\n   Value *Repl = findLeader(I->getParent(), Num);\n-  if (!Repl) {\n+  if (!Repl || !canBeReplacedBy(I, Repl)) {\n     // Failure, just remember this instance for future use.\n     LeaderTable.insert(Num, I, I->getParent());\n     return false;\n@@ -3000,7 +3010,7 @@ bool GVNPass::performScalarPRE(Instruction *CurInst) {\n \n     uint32_t TValNo = VN.phiTranslate(P, CurrentBlock, ValNo, *this);\n     Value *predV = findLeader(P, TValNo);\n-    if (!predV) {\n+    if (!predV || !canBeReplacedBy(CurInst, predV)) {\n       predMap.push_back(std::make_pair(static_cast<Value *>(nullptr), P));\n       PREPred = P;\n       ++NumWithout;\ndiff --git a/llvm/lib/Transforms/Scalar/NewGVN.cpp b/llvm/lib/Transforms/Scalar/NewGVN.cpp\nindex 13d9e8f186b4..6800ad51cc0a 100644\n--- a/llvm/lib/Transforms/Scalar/NewGVN.cpp\n+++ b/llvm/lib/Transforms/Scalar/NewGVN.cpp\n@@ -3854,6 +3854,16 @@ Value *NewGVN::findPHIOfOpsLeader(const Expression *E,\n   return nullptr;\n }\n \n+// Return true iff V1 can be replaced with V2.\n+static bool canBeReplacedBy(Value *V1, Value *V2) {\n+  if (auto *CB1 = dyn_cast<CallBase>(V1))\n+    if (auto *CB2 = dyn_cast<CallBase>(V2))\n+      return CB1->getAttributes()\n+          .intersectWith(CB2->getContext(), CB2->getAttributes())\n+          .has_value();\n+  return true;\n+}\n+\n bool NewGVN::eliminateInstructions(Function &F) {\n   // This is a non-standard eliminator. The normal way to eliminate is\n   // to walk the dominator tree in order, keeping track of available\n@@ -3963,6 +3973,9 @@ bool NewGVN::eliminateInstructions(Function &F) {\n           MembersLeft.insert(Member);\n           continue;\n         }\n+        if (!canBeReplacedBy(Member, Leader))\n+          continue;\n+\n         LLVM_DEBUG(dbgs() << \"Found replacement \" << *(Leader) << \" for \"\n                           << *Member << \"\\n\");\n         auto *I = cast<Instruction>(Member);\n@@ -4069,8 +4082,11 @@ bool NewGVN::eliminateInstructions(Function &F) {\n               if (DominatingLeader != Def) {\n                 // Even if the instruction is removed, we still need to update\n                 // flags/metadata due to downstreams users of the leader.\n-                if (!match(DefI, m_Intrinsic<Intrinsic::ssa_copy>()))\n+                if (!match(DefI, m_Intrinsic<Intrinsic::ssa_copy>())) {\n+                  if (!canBeReplacedBy(DefI, DominatingLeader))\n+                    continue;\n                   patchReplacementInstruction(DefI, DominatingLeader);\n+                }\n \n                 markInstructionForDeletion(DefI);\n               }\n@@ -4112,17 +4128,21 @@ bool NewGVN::eliminateInstructions(Function &F) {\n           // Don't replace our existing users with ourselves.\n           if (U->get() == DominatingLeader)\n             continue;\n-          LLVM_DEBUG(dbgs()\n-                     << \"Found replacement \" << *DominatingLeader << \" for \"\n-                     << *U->get() << \" in \" << *(U->getUser()) << \"\\n\");\n \n           // If we replaced something in an instruction, handle the patching of\n           // metadata.  Skip this if we are replacing predicateinfo with its\n           // original operand, as we already know we can just drop it.\n           auto *ReplacedInst = cast<Instruction>(U->get());\n           auto *PI = PredInfo->getPredicateInfoFor(ReplacedInst);\n-          if (!PI || DominatingLeader != PI->OriginalOp)\n+          if (!PI || DominatingLeader != PI->OriginalOp) {\n+            if (!canBeReplacedBy(ReplacedInst, DominatingLeader))\n+              continue;\n             patchReplacementInstruction(ReplacedInst, DominatingLeader);\n+          }\n+\n+          LLVM_DEBUG(dbgs()\n+                     << \"Found replacement \" << *DominatingLeader << \" for \"\n+                     << *U->get() << \" in \" << *(U->getUser()) << \"\\n\");\n           U->set(DominatingLeader);\n           // This is now a use of the dominating leader, which means if the\n           // dominating leader was dead, it's now live!\ndiff --git a/llvm/lib/Transforms/Utils/Local.cpp b/llvm/lib/Transforms/Utils/Local.cpp\nindex 65c1669f92b4..47a704925596 100644\n--- a/llvm/lib/Transforms/Utils/Local.cpp\n+++ b/llvm/lib/Transforms/Utils/Local.cpp\n@@ -3508,6 +3508,17 @@ void llvm::patchReplacementInstruction(Instruction *I, Value *Repl) {\n   else if (!isa<LoadInst>(I))\n     ReplInst->andIRFlags(I);\n \n+  // Handle attributes.\n+  if (auto *CB1 = dyn_cast<CallBase>(ReplInst)) {\n+    if (auto *CB2 = dyn_cast<CallBase>(I)) {\n+      bool Success = CB1->tryIntersectAttributes(CB2);\n+      assert(Success && \"We should not be trying to sink callbases \"\n+                        \"with non-intersectable attributes\");\n+      // For NDEBUG Compile.\n+      (void)Success;\n+    }\n+  }\n+\n   // FIXME: If both the original and replacement value are part of the\n   // same control-flow region (meaning that the execution of one\n   // guarantees the execution of the other), then we can combine the\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/GVN/pr113997.ll",
      "commands": [
        "opt -S -passes=gvn < %s"
      ],
      "tests": [
        {
          "test_name": "bucket",
          "test_body": "define i1 @bucket(i32 noundef %x) {\n  %cmp1 = icmp sgt i32 %x, 0\n  %ctpop1 = tail call range(i32 1, 32) i32 @llvm.ctpop.i32(i32 %x)\n  %cmp2 = icmp samesign ult i32 %ctpop1, 2\n  %cond = select i1 %cmp1, i1 %cmp2, i1 false\n  br i1 %cond, label %if.then, label %if.else\n\nif.else:                                          ; preds = %0\n  %ctpop2 = tail call range(i32 0, 33) i32 @llvm.ctpop.i32(i32 %x)\n  %res = icmp eq i32 %ctpop2, 1\n  ret i1 %res\n\nif.then:                                          ; preds = %0\n  ret i1 false\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctpop.i32(i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/NewGVN/pr113997.ll",
      "commands": [
        "opt -S -passes=newgvn < %s"
      ],
      "tests": [
        {
          "test_name": "bucket",
          "test_body": "define i1 @bucket(i32 noundef %x) {\n  %cmp1 = icmp sgt i32 %x, 0\n  %ctpop1 = tail call range(i32 1, 32) i32 @llvm.ctpop.i32(i32 %x)\n  %cmp2 = icmp samesign ult i32 %ctpop1, 2\n  %cond = select i1 %cmp1, i1 %cmp2, i1 false\n  br i1 %cond, label %if.then, label %if.else\n\nif.else:                                          ; preds = %0\n  %ctpop2 = tail call range(i32 0, 33) i32 @llvm.ctpop.i32(i32 %x)\n  %res = icmp eq i32 %ctpop2, 1\n  ret i1 %res\n\nif.then:                                          ; preds = %0\n  ret i1 false\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctpop.i32(i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[GVNPass] Range attribute should be handled after CSE",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/HAnoKn\r\n```\r\ndefine i1 @src(i32 noundef %x) {\r\n  %cmp1 = icmp sgt i32 %x, 0\r\n  %ctpop1 = tail call range(i32 1, 32) i32 @llvm.ctpop.i32(i32 %x)\r\n  %cmp2 = icmp samesign ult i32 %ctpop1, 2\r\n  %cond = select i1 %cmp1, i1 %cmp2, i1 false\r\n  br i1 %cond, label %if.then, label %if.else\r\n\r\nif.else:\r\n  %ctpop2 = tail call range(i32 0, 33) i32 @llvm.ctpop.i32(i32 %x)\r\n  %res = icmp eq i32 %ctpop2, 1\r\n  ret i1 %res\r\n\r\nif.then:\r\n  ret i1 false\r\n}\r\n\r\ndefine i1 @tgt(i32 noundef %x) {\r\n  %cmp1 = icmp sgt i32 %x, 0\r\n  %ctpop1 = tail call range(i32 1, 32) i32 @llvm.ctpop.i32(i32 %x)\r\n  %cmp2 = icmp samesign ult i32 %ctpop1, 2\r\n  %cond = select i1 %cmp1, i1 %cmp2, i1 false\r\n  br i1 %cond, label %if.then, label %if.else\r\n\r\nif.else:\r\n  %res = icmp eq i32 %ctpop1, 1\r\n  ret i1 %res\r\n\r\nif.then:\r\n  ret i1 false\r\n}\r\n```\r\n```\r\n\r\n----------------------------------------\r\ndefine i1 @src(i32 noundef %x) {\r\n#0:\r\n  %cmp1 = icmp sgt i32 noundef %x, 0\r\n  %ctpop1 = ctpop i32 noundef %x\r\n  %#range_0_%ctpop1 = !range i32 %ctpop1, i32 1, i32 32\r\n  %cmp2 = icmp samesign ult i32 %#range_0_%ctpop1, 2\r\n  %cond = select i1 %cmp1, i1 %cmp2, i1 0\r\n  br i1 %cond, label %if.then, label %if.else\r\n\r\nif.else:\r\n  %ctpop2 = ctpop i32 noundef %x\r\n  %#range_1_%ctpop2 = !range i32 %ctpop2, i32 0, i32 33\r\n  %res = icmp eq i32 %#range_1_%ctpop2, 1\r\n  ret i1 %res\r\n\r\nif.then:\r\n  ret i1 0\r\n}\r\n=>\r\ndefine i1 @tgt(i32 noundef %x) {\r\n#0:\r\n  %cmp1 = icmp sgt i32 noundef %x, 0\r\n  %ctpop1 = ctpop i32 noundef %x\r\n  %#range_0_%ctpop1 = !range i32 %ctpop1, i32 1, i32 32\r\n  %cmp2 = icmp samesign ult i32 %#range_0_%ctpop1, 2\r\n  %cond = select i1 %cmp1, i1 %cmp2, i1 0\r\n  br i1 %cond, label %if.then, label %if.else\r\n\r\nif.else:\r\n  %res = icmp eq i32 %#range_0_%ctpop1, 1\r\n  ret i1 %res\r\n\r\nif.then:\r\n  ret i1 0\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\ni32 noundef %x = #x00000000 (0)\r\n\r\nSource:\r\ni1 %cmp1 = #x0 (0)\r\ni32 %ctpop1 = #x00000000 (0)\r\ni32 %#range_0_%ctpop1 = poison\r\ni1 %cmp2 = poison\r\ni1 %cond = #x0 (0)\r\n  >> Jump to %if.else\r\ni32 %ctpop2 = #x00000000 (0)\r\ni32 %#range_1_%ctpop2 = #x00000000 (0)\r\ni1 %res = #x0 (0)\r\n\r\nTarget:\r\ni1 %cmp1 = #x0 (0)\r\ni32 %ctpop1 = #x00000000 (0)\r\ni32 %#range_0_%ctpop1 = poison\r\ni1 %cmp2 = poison\r\ni1 %cond = #x0 (0)\r\n  >> Jump to %if.else\r\ni1 %res = poison\r\nSource value: #x0 (0)\r\nTarget value: poison\r\n```\r\n\r\nReported by @pranavk. See https://github.com/llvm/llvm-project/pull/100899#issuecomment-2442780517.\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:GVN"
    ],
    "comments": []
  }
}