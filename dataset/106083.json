{
  "bug_id": "106083",
  "issue_url": "https://github.com/llvm/llvm-project/issues/106083",
  "bug_type": "crash",
  "base_commit": "d075debc508898d5f365f8e909c54d6f4edada85",
  "knowledge_cutoff": "2024-08-26T14:36:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/DFAJumpThreading"
  ],
  "hints": {
    "fix_commit": "d4a38c8ff5c993e14c42895b51a47272fb03a857",
    "components": [
      "DFAJumpThreading"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp": [
        [
          194,
          200
        ],
        [
          202,
          207
        ],
        [
          223,
          254
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp": [
        "getUse",
        "SelectInstToUnfold",
        "getInst",
        "unfold",
        "DFAJumpThreading",
        "push_back"
      ]
    }
  },
  "patch": "commit d4a38c8ff5c993e14c42895b51a47272fb03a857\nAuthor: Usman Nadeem <mnadeem@quicinc.com>\nDate:   Tue Sep 24 08:54:36 2024 -0700\n\n    [DFAJumpThreading] Handle select unfolding when user phi is not a dir\u2026 (#109511)\n    \n    \u2026ect successor\n    \n    Previously the code assumed that the select instruction is defined in a\n    block that is a direct predecessor of the block where the PHINode uses\n    it. So, we were hitting an assertion when we tried to access the def\n    block as an incoming block for the user phi node.\n    \n    This patch handles that case by using the correct end block and creating\n    a new phi node that aggregates both the values of the select in that end\n    block, and then using that new unfolded phi to overwrite the original\n    user phi node.\n    \n    Fixes #106083\n    \n    Change-Id: Ie471994cca232318f74a6e6438efa21e561c2dc0\n\ndiff --git a/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp b/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp\nindex ef9c264482a6..0e2b5c925a6a 100644\n--- a/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp\n+++ b/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp\n@@ -194,7 +194,6 @@ void unfold(DomTreeUpdater *DTU, LoopInfo *LI, SelectInstToUnfold SIToUnfold,\n   SelectInst *SI = SIToUnfold.getInst();\n   PHINode *SIUse = SIToUnfold.getUse();\n   BasicBlock *StartBlock = SI->getParent();\n-  BasicBlock *EndBlock = SIUse->getParent();\n   BranchInst *StartBlockTerm =\n       dyn_cast<BranchInst>(StartBlock->getTerminator());\n \n@@ -202,6 +201,7 @@ void unfold(DomTreeUpdater *DTU, LoopInfo *LI, SelectInstToUnfold SIToUnfold,\n   assert(SI->hasOneUse());\n \n   if (StartBlockTerm->isUnconditional()) {\n+    BasicBlock *EndBlock = StartBlock->getUniqueSuccessor();\n     // Arbitrarily choose the 'false' side for a new input value to the PHI.\n     BasicBlock *NewBlock = BasicBlock::Create(\n         SI->getContext(), Twine(SI->getName(), \".si.unfold.false\"),\n@@ -223,32 +223,44 @@ void unfold(DomTreeUpdater *DTU, LoopInfo *LI, SelectInstToUnfold SIToUnfold,\n                                       NewBlock->getFirstInsertionPt());\n     NewPhi->addIncoming(SIOp2, StartBlock);\n \n-    if (auto *OpSi = dyn_cast<SelectInst>(SIOp1))\n-      NewSIsToUnfold->push_back(SelectInstToUnfold(OpSi, SIUse));\n-    if (auto *OpSi = dyn_cast<SelectInst>(SIOp2))\n-      NewSIsToUnfold->push_back(SelectInstToUnfold(OpSi, NewPhi));\n-\n-    // Update the phi node of SI.\n-    for (unsigned Idx = 0; Idx < SIUse->getNumIncomingValues(); ++Idx) {\n-      if (SIUse->getIncomingBlock(Idx) == StartBlock)\n-        SIUse->setIncomingValue(Idx, SIOp1);\n+    // Update any other PHI nodes in EndBlock.\n+    for (PHINode &Phi : EndBlock->phis()) {\n+      if (SIUse == &Phi)\n+        continue;\n+      Phi.addIncoming(Phi.getIncomingValueForBlock(StartBlock), NewBlock);\n     }\n-    SIUse->addIncoming(NewPhi, NewBlock);\n \n-    // Update any other PHI nodes in EndBlock.\n-    for (auto II = EndBlock->begin(); PHINode *Phi = dyn_cast<PHINode>(II);\n-         ++II) {\n-      if (Phi != SIUse)\n-        Phi->addIncoming(Phi->getIncomingValueForBlock(StartBlock), NewBlock);\n+    // Update the phi node of SI, which is its only use.\n+    if (EndBlock == SIUse->getParent()) {\n+      SIUse->addIncoming(NewPhi, NewBlock);\n+      SIUse->replaceUsesOfWith(SI, SIOp1);\n+    } else {\n+      PHINode *EndPhi = PHINode::Create(SIUse->getType(), pred_size(EndBlock),\n+                                        Twine(SI->getName(), \".si.unfold.phi\"),\n+                                        EndBlock->getFirstInsertionPt());\n+      for (BasicBlock *Pred : predecessors(EndBlock)) {\n+        if (Pred != StartBlock && Pred != NewBlock)\n+          EndPhi->addIncoming(EndPhi, Pred);\n+      }\n+\n+      EndPhi->addIncoming(SIOp1, StartBlock);\n+      EndPhi->addIncoming(NewPhi, NewBlock);\n+      SIUse->replaceUsesOfWith(SI, EndPhi);\n+      SIUse = EndPhi;\n     }\n \n-    StartBlockTerm->eraseFromParent();\n+    if (auto *OpSi = dyn_cast<SelectInst>(SIOp1))\n+      NewSIsToUnfold->push_back(SelectInstToUnfold(OpSi, SIUse));\n+    if (auto *OpSi = dyn_cast<SelectInst>(SIOp2))\n+      NewSIsToUnfold->push_back(SelectInstToUnfold(OpSi, NewPhi));\n \n     // Insert the real conditional branch based on the original condition.\n+    StartBlockTerm->eraseFromParent();\n     BranchInst::Create(EndBlock, NewBlock, SI->getCondition(), StartBlock);\n     DTU->applyUpdates({{DominatorTree::Insert, StartBlock, EndBlock},\n                        {DominatorTree::Insert, StartBlock, NewBlock}});\n   } else {\n+    BasicBlock *EndBlock = SIUse->getParent();\n     BasicBlock *NewBlockT = BasicBlock::Create(\n         SI->getContext(), Twine(SI->getName(), \".si.unfold.true\"),\n         EndBlock->getParent(), EndBlock);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/DFAJumpThreading/dfa-jump-threading-transform.ll",
      "commands": [
        "opt -S -passes=dfa-jump-threading %s"
      ],
      "tests": [
        {
          "test_name": "test2",
          "test_body": "define i32 @test2(i32 %init) {\nentry:\n  %cmp = icmp eq i32 %init, 0\n  %sel = select i1 %cmp, i32 0, i32 2\n  br label %loop.1\n\nloop.1:                                           ; preds = %loop.1.backedge, %entry\n  %state.1 = phi i32 [ %sel, %entry ], [ %state.1.be2, %loop.1.backedge ]\n  br label %loop.2\n\nloop.2:                                           ; preds = %loop.2.backedge, %loop.1\n  %state.2 = phi i32 [ %state.1, %loop.1 ], [ %state.2.be, %loop.2.backedge ]\n  br label %loop.3\n\nloop.3:                                           ; preds = %case2, %loop.2\n  %state = phi i32 [ %state.2, %loop.2 ], [ 3, %case2 ]\n  switch i32 %state, label %infloop.i [\n    i32 2, label %case2\n    i32 3, label %case3\n    i32 4, label %case4\n    i32 0, label %case0\n    i32 1, label %case1\n  ]\n\ncase2:                                            ; preds = %loop.3\n  br i1 %cmp, label %loop.3, label %loop.1.backedge\n\ncase3:                                            ; preds = %loop.3\n  br i1 %cmp, label %loop.2.backedge, label %case4\n\ncase4:                                            ; preds = %case3, %loop.3\n  br i1 %cmp, label %loop.2.backedge, label %loop.1.backedge\n\nloop.1.backedge:                                  ; preds = %case4, %case2\n  %state.1.be = phi i32 [ 2, %case4 ], [ 4, %case2 ]\n  %state.1.be2 = select i1 %cmp, i32 1, i32 %state.1.be\n  br label %loop.1\n\nloop.2.backedge:                                  ; preds = %case4, %case3\n  %state.2.be = phi i32 [ 3, %case4 ], [ 0, %case3 ]\n  br label %loop.2\n\ncase0:                                            ; preds = %loop.3\n  br label %exit\n\ncase1:                                            ; preds = %loop.3\n  br label %exit\n\ninfloop.i:                                        ; preds = %infloop.i, %loop.3\n  br label %infloop.i\n\nexit:                                             ; preds = %case1, %case0\n  ret i32 0\n}\n"
        },
        {
          "test_name": "pr106083_select_dead_uses",
          "test_body": "define void @pr106083_select_dead_uses(i1 %cmp1, i1 %not, ptr %p) {\nbb:\n  %spec.select = select i1 %cmp1, i32 0, i32 1\n  br label %.loopexit6\n\n.loopexit6:                                       ; preds = %select.unfold, %bb\n  br i1 %not, label %select.unfold, label %bb1\n\nbb1:                                              ; preds = %.loopexit6\n  %i = load i32, ptr %p, align 4\n  %not2 = icmp eq i32 0, 0\n  %spec.select7 = select i1 %not2, i32 %spec.select, i32 0\n  br label %select.unfold\n\nselect.unfold:                                    ; preds = %bb1, %.loopexit6\n  %_2 = phi i32 [ 0, %.loopexit6 ], [ %spec.select7, %bb1 ]\n  switch i32 %_2, label %bb2 [\n    i32 0, label %.preheader.preheader\n    i32 1, label %.loopexit6\n  ]\n\n.preheader.preheader:                             ; preds = %select.unfold\n  ret void\n\nbb2:                                              ; preds = %select.unfold\n  unreachable\n}\n"
        },
        {
          "test_name": "test1",
          "test_body": "define i32 @test1(i32 %num) {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %for.inc, %entry\n  %count = phi i32 [ 0, %entry ], [ %inc, %for.inc ]\n  %state = phi i32 [ 1, %entry ], [ %state.next, %for.inc ]\n  switch i32 %state, label %for.inc [\n    i32 1, label %case1\n    i32 2, label %case2\n  ]\n\ncase1:                                            ; preds = %for.body\n  br label %for.inc\n\ncase2:                                            ; preds = %for.body\n  %cmp = icmp eq i32 %count, 50\n  %sel = select i1 %cmp, i32 1, i32 2\n  br label %for.inc\n\nfor.inc:                                          ; preds = %case2, %case1, %for.body\n  %state.next = phi i32 [ %sel, %case2 ], [ 1, %for.body ], [ 2, %case1 ]\n  %inc = add nsw i32 %count, 1\n  %cmp.exit = icmp slt i32 %inc, %num\n  br i1 %cmp.exit, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.inc\n  ret i32 0\n}\n"
        },
        {
          "test_name": "pr106083_invalidBBarg_fold",
          "test_body": "define void @pr106083_invalidBBarg_fold(i1 %cmp1, i1 %cmp2, i1 %not, ptr %d) {\nbb:\n  %sel = select i1 %cmp1, i32 0, i32 1\n  br label %BB1\n\nBB1:                                              ; preds = %BB1.backedge, %BB7, %bb\n  %i = phi i16 [ 0, %BB1.backedge ], [ 0, %bb ], [ 1, %BB7 ]\n  br i1 %not, label %BB7, label %BB2\n\nBB2:                                              ; preds = %BB1\n  store i16 0, ptr %d, align 2\n  %spec.select = select i1 %cmp2, i32 %sel, i32 0\n  br label %BB7\n\nBB7:                                              ; preds = %BB2, %BB1\n  %d.promoted4 = phi i16 [ 0, %BB1 ], [ 1, %BB2 ]\n  %_3 = phi i32 [ 0, %BB1 ], [ %spec.select, %BB2 ]\n  switch i32 %_3, label %BB1.backedge [\n    i32 0, label %BB1\n    i32 1, label %BB8\n  ]\n\nBB1.backedge:                                     ; preds = %BB7\n  br label %BB1\n\nBB8:                                              ; preds = %BB7\n  ret void\n}\n"
        },
        {
          "test_name": "pr78059_bitwidth",
          "test_body": "define void @pr78059_bitwidth() {\n.split.preheader:\n  br label %.split\n\n.split:                                           ; preds = %.split, %.split.preheader\n  %0 = phi i128 [ 0, %.split.preheader ], [ -1, %.split ]\n  switch i128 %0, label %end [\n    i128 -1, label %end\n    i128 0, label %.split\n  ]\n\nend:                                              ; preds = %.split, %.split\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[DFAJumpThreading] crash since b167ada",
    "body": "Seeing many assertions that go away if I revert b167ada \"[DFAJumpThreading] Rewrite the way paths are enumerated (#96127)\".\r\n\r\n```\r\nclang-20 -cc1 -triple s390x-unknown-linux-gnu -target-cpu z15 -O3 -w -mllvm -enable-dfa-jump-thread -o /dev/null -emit-llvm -x ir  tc_dfa-jt_invalidbbarg.ll\r\n...\r\n10 0x000002aa0a73e544 (anonymous namespace)::DFAJumpThreading::run\r\n...\r\n```\r\n\r\n```\r\nclang-20 -cc1 -triple s390x-unknown-linux-gnu   -target-cpu z16 -O3 -w -mllvm -enable-dfa-jump-thread -o /dev/null -emit-llvm -x ir  tc_select_mustbedeadnow.ll\r\n...\r\n#10 0x000002aa1b0c0968 llvm::DFAJumpThreadingPass::run\r\n...\r\n\r\n```\r\n[tcs_dfa-jt.tar.gz](https://github.com/user-attachments/files/16750050/tcs_dfa-jt.tar.gz)\r\n",
    "author": "JonPsson1",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "mikaelholmen",
        "body": "Perhaps the same assertion I reported here:\r\n https://github.com/llvm/llvm-project/pull/96127#issuecomment-2303862037\r\n?"
      },
      {
        "author": "JonPsson1",
        "body": "> Perhaps the same assertion I reported here: [#96127 (comment)](https://github.com/llvm/llvm-project/pull/96127#issuecomment-2303862037) ?\r\n\r\nYes, same assertion, and in addition my second test case above triggered another assertion."
      }
    ]
  }
}
