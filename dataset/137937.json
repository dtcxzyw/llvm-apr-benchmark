{
  "bug_id": "137937",
  "issue_url": "https://github.com/llvm/llvm-project/issues/137937",
  "bug_type": "miscompilation",
  "base_commit": "eac7466448f920e733f12beca28ff848cfa4810d",
  "knowledge_cutoff": "2025-04-30T08:55:06Z",
  "lit_test_dir": [
    "llvm/test/Transforms/ConstraintElimination"
  ],
  "hints": {
    "fix_commit": "aa054c681059257d371857945c08840f69f68379",
    "components": [
      "ConstraintElimination"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/ConstraintElimination.cpp": [
        [
          1563,
          1570
        ],
        [
          1611,
          1625
        ],
        [
          1852,
          1860
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/ConstraintElimination.cpp": [
        "checkOrAndOpImpliedByOther",
        "eliminateConstraints"
      ]
    }
  },
  "patch": "commit aa054c681059257d371857945c08840f69f68379\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed May 14 23:37:41 2025 +0800\n\n    [ConstraintElim] Simplify and/or instead of replacing its operand (#139874)\n    \n    In `checkOrAndOpImpliedByOther`, replacing an operand of a disjoint or\n    is unsafe: https://alive2.llvm.org/ce/z/4R4hxN\n    This patch performs the simplification directly, to avoid miscompilation\n    and unnecessary canonicalization.\n    \n    Closes https://github.com/llvm/llvm-project/issues/137937.\n\ndiff --git a/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp b/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\nindex f2d6e268743e..da5be383df15 100644\n--- a/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\n+++ b/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\n@@ -1563,8 +1563,12 @@ removeEntryFromStack(const StackEntry &E, ConstraintInfo &Info,\n static bool checkOrAndOpImpliedByOther(\n     FactOrCheck &CB, ConstraintInfo &Info, Module *ReproducerModule,\n     SmallVectorImpl<ReproducerEntry> &ReproducerCondStack,\n-    SmallVectorImpl<StackEntry> &DFSInStack) {\n+    SmallVectorImpl<StackEntry> &DFSInStack,\n+    SmallVectorImpl<Instruction *> &ToRemove) {\n   Instruction *JoinOp = CB.getContextInst();\n+  if (JoinOp->use_empty())\n+    return false;\n+\n   CmpInst *CmpToCheck = cast<CmpInst>(CB.getInstructionToSimplify());\n   unsigned OtherOpIdx = JoinOp->getOperand(0) == CmpToCheck ? 1 : 0;\n \n@@ -1611,15 +1615,12 @@ static bool checkOrAndOpImpliedByOther(\n   if (auto ImpliedCondition =\n           checkCondition(CmpToCheck->getPredicate(), CmpToCheck->getOperand(0),\n                          CmpToCheck->getOperand(1), CmpToCheck, Info)) {\n-    if (IsOr && isa<SelectInst>(JoinOp)) {\n-      JoinOp->setOperand(\n-          OtherOpIdx == 0 ? 2 : 0,\n+    if (IsOr == *ImpliedCondition)\n+      JoinOp->replaceAllUsesWith(\n           ConstantInt::getBool(JoinOp->getType(), *ImpliedCondition));\n-    } else\n-      JoinOp->setOperand(\n-          1 - OtherOpIdx,\n-          ConstantInt::getBool(JoinOp->getType(), *ImpliedCondition));\n-\n+    else\n+      JoinOp->replaceAllUsesWith(JoinOp->getOperand(OtherOpIdx));\n+    ToRemove.push_back(JoinOp);\n     return true;\n   }\n \n@@ -1852,9 +1853,9 @@ static bool eliminateConstraints(Function &F, DominatorTree &DT, LoopInfo &LI,\n             ReproducerModule.get(), ReproducerCondStack, S.DT, ToRemove);\n         if (!Simplified &&\n             match(CB.getContextInst(), m_LogicalOp(m_Value(), m_Value()))) {\n-          Simplified =\n-              checkOrAndOpImpliedByOther(CB, Info, ReproducerModule.get(),\n-                                         ReproducerCondStack, DFSInStack);\n+          Simplified = checkOrAndOpImpliedByOther(\n+              CB, Info, ReproducerModule.get(), ReproducerCondStack, DFSInStack,\n+              ToRemove);\n         }\n         Changed |= Simplified;\n       } else if (auto *MinMax = dyn_cast<MinMaxIntrinsic>(Inst)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/ConstraintElimination/and-implied-by-operands.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "and_tree_second_implies_first_perm1",
          "test_body": "define void @and_tree_second_implies_first_perm1(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {\nentry:\n  %cmp0 = icmp sge i32 %v0, %v1\n  %cmp1 = icmp sge i32 %v1, %v2\n  %cmp2 = icmp slt i32 %v0, %v2\n  %and1 = and i1 %cmp2, %cmp1\n  %and2 = and i1 %cmp0, %and1\n  br i1 %and2, label %if.then, label %return\n\nif.then:                                          ; preds = %entry\n  call void @side_effect()\n  br label %return\n\nreturn:                                           ; preds = %if.then, %entry\n  ret void\n}\n\ndeclare void @side_effect()\n"
        },
        {
          "test_name": "test_second_and_condition_implied_by_first",
          "test_body": "define i1 @test_second_and_condition_implied_by_first(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %and = and i1 %c.1, %t.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_or_used_in_false_branch2",
          "test_body": "define i1 @test_or_used_in_false_branch2(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %and = or i1 %c.1, %t.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 %t.1\n\nelse:                                             ; preds = %entry\n  ret i1 %t.1\n}\n"
        },
        {
          "test_name": "test_and_used_in_false_branch",
          "test_body": "define i1 @test_and_used_in_false_branch(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %and = and i1 %c.1, %t.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 %t.1\n\nelse:                                             ; preds = %entry\n  ret i1 %t.1\n}\n"
        },
        {
          "test_name": "and_tree_second_implies_first_perm2",
          "test_body": "define void @and_tree_second_implies_first_perm2(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {\nentry:\n  %cmp0 = icmp sge i32 %v0, %v1\n  %cmp1 = icmp sge i32 %v1, %v2\n  %cmp2 = icmp slt i32 %v0, %v2\n  %and1 = and i1 %cmp0, %cmp2\n  %and2 = and i1 %cmp1, %and1\n  br i1 %and2, label %if.then, label %return\n\nif.then:                                          ; preds = %entry\n  call void @side_effect()\n  br label %return\n\nreturn:                                           ; preds = %if.then, %entry\n  ret void\n}\n\ndeclare void @side_effect()\n"
        },
        {
          "test_name": "or_tree_second_implies_first_with_unknown_cond",
          "test_body": "define void @or_tree_second_implies_first_with_unknown_cond(i64 %x, i1 %cond) {\nentry:\n  %cmp1 = icmp ugt i64 %x, 1\n  %or1 = select i1 %cmp1, i1 %cond, i1 false\n  %cmp2 = icmp ult i64 %x, 2\n  %or2 = select i1 %or1, i1 %cmp2, i1 false\n  br i1 %or2, label %if.then, label %if.end\n\nif.then:                                          ; preds = %entry\n  call void @side_effect()\n  br label %if.end\n\nif.end:                                           ; preds = %if.then, %entry\n  ret void\n}\n\ndeclare void @side_effect()\n"
        },
        {
          "test_name": "test_or_used_in_false_branch",
          "test_body": "define i1 @test_or_used_in_false_branch(i8 %x) {\nentry:\n  %c.1 = icmp ule i8 %x, 10\n  %t.1 = icmp ule i8 %x, 5\n  %and = or i1 %c.1, %t.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 %t.1\n\nelse:                                             ; preds = %entry\n  ret i1 %t.1\n}\n"
        },
        {
          "test_name": "or_tree_second_implies_first",
          "test_body": "define void @or_tree_second_implies_first(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {\nentry:\n  %cmp0 = icmp sge i32 %v0, %v1\n  %cmp1 = icmp sge i32 %v1, %v2\n  %and1 = or i1 %cmp0, %cmp1\n  %cmp2 = icmp slt i32 %v0, %v2\n  %and2 = or i1 %cmp2, %and1\n  br i1 %and2, label %if.then, label %return\n\nif.then:                                          ; preds = %entry\n  call void @side_effect()\n  br label %return\n\nreturn:                                           ; preds = %if.then, %entry\n  ret void\n}\n\ndeclare void @side_effect()\n"
        },
        {
          "test_name": "and_tree_second_implies_first",
          "test_body": "define void @and_tree_second_implies_first(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {\nentry:\n  %cmp0 = icmp sge i32 %v0, %v1\n  %cmp1 = icmp sge i32 %v1, %v2\n  %and1 = and i1 %cmp0, %cmp1\n  %cmp2 = icmp slt i32 %v0, %v2\n  %and2 = and i1 %cmp2, %and1\n  br i1 %and2, label %if.then, label %return\n\nif.then:                                          ; preds = %entry\n  call void @side_effect()\n  br label %return\n\nreturn:                                           ; preds = %if.then, %entry\n  ret void\n}\n\ndeclare void @side_effect()\n"
        },
        {
          "test_name": "and_select_first_implies_second_may_be_poison",
          "test_body": "define i1 @and_select_first_implies_second_may_be_poison(ptr noundef %A, ptr noundef %B) {\nentry:\n  %c.1 = icmp ne ptr %A, %B\n  %gep = getelementptr inbounds ptr, ptr %B, i64 -1\n  %c.2 = icmp ugt ptr %gep, %A\n  %and = select i1 %c.2, i1 %c.1, i1 false\n  ret i1 %and\n}\n"
        },
        {
          "test_name": "test_second_and_condition_not_implied_by_first",
          "test_body": "define i1 @test_second_and_condition_not_implied_by_first(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %c.2 = icmp ugt i8 %x, 5\n  %and = and i1 %c.2, %c.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_same_cond_for_and",
          "test_body": "define i1 @test_same_cond_for_and(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %and = and i1 %c.1, %c.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_second_and_condition_implied_by_first_select_form",
          "test_body": "define i1 @test_second_and_condition_implied_by_first_select_form(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %and = select i1 %c.1, i1 %t.1, i1 false\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_first_and_condition_implied_by_second_ops",
          "test_body": "define i1 @test_first_and_condition_implied_by_second_ops(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %and = and i1 %t.1, %c.1\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/eq.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "test_eq_for_signed_cmp_with_decompsition",
          "test_body": "define i1 @test_eq_for_signed_cmp_with_decompsition(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2, i32 noundef %addend0, i32 noundef %addend1) {\nentry:\n  %v0add = add nsw i32 %v0, %addend0\n  %v1add = add nsw i32 %v1, %addend1\n  %cmp = icmp eq i32 %v2, %v0add\n  %cmp1 = icmp sge i32 %v0add, %v1add\n  %cmp2 = icmp sge i32 %addend0, 0\n  %cmp3 = icmp slt i32 %addend0, %addend1\n  %and0 = and i1 %cmp1, %cmp\n  %and1 = and i1 %and0, %cmp2\n  %and2 = and i1 %and1, %cmp3\n  %cmp4 = icmp sgt i32 %v1, %v2\n  %and3 = and i1 %cmp4, %and2\n  ret i1 %and3\n}\n"
        },
        {
          "test_name": "test_eq_for_signed_cmp",
          "test_body": "define i1 @test_eq_for_signed_cmp(i32 noundef %v0, i32 noundef %v1, i32 noundef %v2) {\nentry:\n  %cmp = icmp eq i32 %v2, %v0\n  %cmp1 = icmp sge i32 %v0, %v1\n  %and0 = and i1 %cmp1, %cmp\n  %cmp4 = icmp sgt i32 %v1, %v2\n  %and1 = and i1 %cmp4, %and0\n  ret i1 %and1\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/gep-arithmetic-signed-predicates.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "ptr_N_signed_positive_assume",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #0\n\ndefine i4 @ptr_N_signed_positive_assume(ptr %src, ptr %lower, ptr %upper, i16 %N, i16 %step) {\nentry:\n  %src.end = getelementptr inbounds i8, ptr %src, i16 %N\n  %cmp.src.start = icmp slt ptr %src, %lower\n  %cmp.src.end = icmp sge ptr %src.end, %upper\n  %N.neg = icmp slt i16 %N, 0\n  call void @llvm.assume(i1 %N.neg)\n  %or.precond.0 = or i1 %cmp.src.start, %cmp.src.end\n  br i1 %or.precond.0, label %trap.bb, label %step.check\n\ntrap.bb:                                          ; preds = %ptr.check, %entry\n  ret i4 2\n\nstep.check:                                       ; preds = %entry\n  %step.pos = icmp sge i16 %step, 0\n  %step.slt.N = icmp slt i16 %step, %N\n  %and.step = and i1 %step.pos, %step.slt.N\n  br i1 %and.step, label %ptr.check, label %exit\n\nptr.check:                                        ; preds = %step.check\n  %src.step = getelementptr inbounds i8, ptr %src, i16 %step\n  %cmp.step.start = icmp slt ptr %src.step, %lower\n  %cmp.step.end = icmp sge ptr %src.step, %upper\n  %or.check = or i1 %cmp.step.start, %cmp.step.end\n  br i1 %or.check, label %trap.bb, label %exit\n\nexit:                                             ; preds = %ptr.check, %step.check\n  ret i4 3\n}\n\nattributes #0 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/geps-precondition-overflow-check.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "overflow_check_4_and",
          "test_body": "define i1 @overflow_check_4_and(ptr %dst) {\nentry:\n  %dst.5 = getelementptr i32, ptr %dst, i64 5\n  %dst.5.uge = icmp uge ptr %dst.5, %dst\n  %and = and i1 %dst.5.uge, %dst.5.uge\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  %dst.4 = getelementptr i32, ptr %dst, i64 4\n  %true.dst.4.uge = icmp uge ptr %dst.4, %dst\n  %dst.5.2 = getelementptr i32, ptr %dst, i64 5\n  %true.dst.5.uge = icmp uge ptr %dst.5.2, %dst\n  %res.0 = xor i1 %true.dst.4.uge, %true.dst.5.uge\n  %dst.6 = getelementptr i32, ptr %dst, i64 6\n  %c.dst.6.uge = icmp uge ptr %dst.6, %dst\n  %res.1 = xor i1 %res.0, %c.dst.6.uge\n  ret i1 %res.1\n\nelse:                                             ; preds = %entry\n  %else.dst.4 = getelementptr i32, ptr %dst, i64 4\n  %else.dst.4.uge = icmp uge ptr %else.dst.4, %dst\n  %else.dst.6 = getelementptr i32, ptr %dst, i64 6\n  %else.dst.6.uge = icmp uge ptr %else.dst.6, %dst\n  %else.res.0 = xor i1 %else.dst.4.uge, %else.dst.6.uge\n  ret i1 %else.res.0\n}\n"
        },
        {
          "test_name": "overflow_check_3_or",
          "test_body": "define i1 @overflow_check_3_or(ptr %dst) {\nentry:\n  %dst.5 = getelementptr i32, ptr %dst, i64 5\n  %dst.5.uge = icmp uge ptr %dst.5, %dst\n  %or = or i1 %dst.5.uge, %dst.5.uge\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  %dst.4 = getelementptr i32, ptr %dst, i64 4\n  %true.dst.4.uge = icmp uge ptr %dst.4, %dst\n  ret i1 %true.dst.4.uge\n\nelse:                                             ; preds = %entry\n  ret i1 false\n}\n"
        },
        {
          "test_name": "overflow_check_3_and",
          "test_body": "define i1 @overflow_check_3_and(ptr %dst) {\nentry:\n  %dst.5 = getelementptr i32, ptr %dst, i64 5\n  %dst.5.uge = icmp uge ptr %dst.5, %dst\n  %and = and i1 %dst.5.uge, %dst.5.uge\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  %dst.4 = getelementptr i32, ptr %dst, i64 4\n  %dst.4.uge = icmp uge ptr %dst.4, %dst\n  ret i1 %dst.4.uge\n\nelse:                                             ; preds = %entry\n  %else.dst.4 = getelementptr i32, ptr %dst, i64 4\n  %else.dst.4.uge = icmp uge ptr %else.dst.4, %dst\n  ret i1 %else.dst.4.uge\n}\n"
        },
        {
          "test_name": "overflow_check_2_and",
          "test_body": "define i1 @overflow_check_2_and(ptr %dst) {\nentry:\n  %dst.5 = getelementptr i32, ptr %dst, i64 5\n  %dst.5.uge = icmp uge ptr %dst.5, %dst\n  %and = and i1 %dst.5.uge, %dst.5.uge\n  br i1 %and, label %then, label %else\n\nthen:                                             ; preds = %entry\n  %dst.4 = getelementptr i32, ptr %dst, i64 4\n  %true.dst.4.uge = icmp uge ptr %dst.4, %dst\n  ret i1 %true.dst.4.uge\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/loops-bottom-tested-pointer-cmps.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "checks_in_loops_removable",
          "test_body": "define void @checks_in_loops_removable(ptr %ptr, ptr %lower, ptr %upper, i8 %n) {\nentry:\n  %cmp.ptr.lower = icmp ult ptr %ptr, %lower\n  br i1 %cmp.ptr.lower, label %trap, label %pre.1\n\npre.1:                                            ; preds = %entry\n  %idx.ext = zext i8 %n to i16\n  %ptr.n = getelementptr inbounds i8, ptr %ptr, i16 %idx.ext\n  %cmp.ptr.n.upper = icmp ult ptr %ptr.n, %upper\n  br i1 %cmp.ptr.n.upper, label %pre.2, label %trap\n\npre.2:                                            ; preds = %pre.1\n  %cmp.n.not.zero = icmp eq i8 %n, 0\n  br i1 %cmp.n.not.zero, label %exit, label %loop.header\n\ntrap:                                             ; preds = %loop.header, %pre.1, %entry\n  ret void\n\nloop.header:                                      ; preds = %loop.latch, %pre.2\n  %iv = phi i16 [ 0, %pre.2 ], [ %iv.next, %loop.latch ]\n  %ptr.iv = getelementptr inbounds i8, ptr %ptr, i16 %iv\n  %cmp.ptr.iv.lower = icmp ugt ptr %lower, %ptr.iv\n  %cmp.ptr.iv.upper = icmp ule ptr %upper, %ptr.iv\n  %or = or i1 %cmp.ptr.iv.lower, %cmp.ptr.iv.upper\n  br i1 %or, label %trap, label %loop.latch\n\nloop.latch:                                       ; preds = %loop.header\n  store i8 0, ptr %ptr.iv, align 4\n  %iv.next = add nuw nsw i16 %iv, 1\n  %exitcond = icmp ne i16 %iv.next, %idx.ext\n  br i1 %exitcond, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch, %pre.2\n  ret void\n}\n"
        },
        {
          "test_name": "some_checks_in_loops_removable",
          "test_body": "define void @some_checks_in_loops_removable(ptr %ptr, ptr %lower, ptr %upper, i8 %n) {\nentry:\n  %cmp.ptr.lower = icmp ult ptr %ptr, %lower\n  br i1 %cmp.ptr.lower, label %trap, label %pre.1\n\npre.1:                                            ; preds = %entry\n  %idx.ext = zext i8 %n to i16\n  %ptr.n = getelementptr inbounds i8, ptr %ptr, i16 %idx.ext\n  %cmp.ptr.n.upper = icmp ult ptr %ptr.n, %upper\n  br i1 %cmp.ptr.n.upper, label %pre.2, label %trap\n\npre.2:                                            ; preds = %pre.1\n  %cmp.n.not.zero = icmp eq i8 %n, 0\n  br i1 %cmp.n.not.zero, label %exit, label %loop.header\n\ntrap:                                             ; preds = %loop.body, %loop.header, %pre.1, %entry\n  ret void\n\nloop.header:                                      ; preds = %loop.latch, %pre.2\n  %iv = phi i16 [ 0, %pre.2 ], [ %iv.next, %loop.latch ]\n  %ptr.iv = getelementptr inbounds i8, ptr %ptr, i16 %iv\n  %cmp.ptr.iv.lower = icmp ugt ptr %lower, %ptr.iv\n  %cmp.ptr.iv.upper = icmp ule ptr %upper, %ptr.iv\n  %or = or i1 %cmp.ptr.iv.lower, %cmp.ptr.iv.upper\n  br i1 %or, label %trap, label %loop.body\n\nloop.body:                                        ; preds = %loop.header\n  %iv.1 = add nuw nsw i16 %iv, 1\n  %ptr.iv.1 = getelementptr inbounds i8, ptr %ptr, i16 %iv.1\n  %cmp.ptr.iv.1.lower = icmp ugt ptr %lower, %ptr.iv.1\n  %cmp.ptr.iv.1.upper = icmp ule ptr %upper, %ptr.iv.1\n  %or.1 = or i1 %cmp.ptr.iv.1.lower, %cmp.ptr.iv.1.upper\n  br i1 %or, label %trap, label %loop.latch\n\nloop.latch:                                       ; preds = %loop.body\n  store i8 0, ptr %ptr.iv, align 4\n  %iv.next = add nuw nsw i16 %iv, 1\n  %exitcond = icmp ne i16 %iv.next, %idx.ext\n  br i1 %exitcond, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch, %pre.2\n  ret void\n}\n"
        },
        {
          "test_name": "no_checks_in_loops_removable",
          "test_body": "define void @no_checks_in_loops_removable(ptr %ptr, ptr %lower, ptr %upper, i8 %n) {\nentry:\n  %cmp.ptr.lower = icmp ult ptr %ptr, %lower\n  br i1 %cmp.ptr.lower, label %trap, label %pre.1\n\npre.1:                                            ; preds = %entry\n  %idx.ext = zext i8 %n to i16\n  %ptr.n = getelementptr inbounds i8, ptr %ptr, i16 %idx.ext\n  %cmp.ptr.n.upper = icmp ult ptr %ptr.n, %upper\n  br i1 %cmp.ptr.n.upper, label %loop.header, label %trap\n\ntrap:                                             ; preds = %loop.body, %loop.header, %pre.1, %entry\n  ret void\n\nloop.header:                                      ; preds = %loop.latch, %pre.1\n  %iv = phi i16 [ 0, %pre.1 ], [ %iv.next, %loop.latch ]\n  %ptr.iv = getelementptr inbounds i8, ptr %ptr, i16 %iv\n  %cmp.ptr.iv.lower = icmp ugt ptr %lower, %ptr.iv\n  %cmp.ptr.iv.upper = icmp ule ptr %upper, %ptr.iv\n  %or = or i1 %cmp.ptr.iv.lower, %cmp.ptr.iv.upper\n  br i1 %or, label %trap, label %loop.body\n\nloop.body:                                        ; preds = %loop.header\n  %iv.1 = add nuw nsw i16 %iv, 1\n  %ptr.iv.1 = getelementptr inbounds i8, ptr %ptr, i16 %iv.1\n  %cmp.ptr.iv.1.lower = icmp ugt ptr %lower, %ptr.iv.1\n  %cmp.ptr.iv.1.upper = icmp ule ptr %upper, %ptr.iv.1\n  %or.1 = or i1 %cmp.ptr.iv.1.lower, %cmp.ptr.iv.1.upper\n  br i1 %or, label %trap, label %loop.latch\n\nloop.latch:                                       ; preds = %loop.body\n  store i8 0, ptr %ptr.iv, align 4\n  %iv.next = add nuw nsw i16 %iv, 1\n  %exitcond = icmp ne i16 %iv.next, %idx.ext\n  br i1 %exitcond, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/loops-header-tested-pointer-cmps.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "test3",
          "test_body": "define void @test3(ptr %src, ptr %lower, ptr %upper, i8 %N) {\nentry:\n  %src.end = getelementptr inbounds i8, ptr %src, i8 %N\n  %cmp.src.start = icmp ult ptr %src, %lower\n  %cmp.src.end = icmp uge ptr %src.end, %upper\n  %cmp.overflow = icmp ugt ptr %src, %src.end\n  %or.0 = or i1 %cmp.src.start, %cmp.src.end\n  %or.11 = or i1 %or.0, %cmp.overflow\n  br i1 %or.11, label %trap.bb, label %loop.header\n\ntrap.bb:                                          ; preds = %loop.body.2, %loop.body.1, %loop.body, %entry\n  ret void\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i8 [ %iv.next, %loop.latch ], [ 1, %entry ]\n  %next = or i8 %iv, 1\n  %ec = icmp ult i8 %next, %N\n  br i1 %ec, label %loop.body, label %exit\n\nloop.body:                                        ; preds = %loop.header\n  %src.iv = getelementptr inbounds i8, ptr %src, i8 %iv\n  %cmp.iv.start = icmp ult ptr %src.iv, %lower\n  %cmp.iv.end = icmp uge ptr %src.iv, %upper\n  %or.1 = or i1 %cmp.iv.start, %cmp.iv.end\n  br i1 %or.1, label %trap.bb, label %loop.body.1\n\nloop.body.1:                                      ; preds = %loop.body\n  %src.iv.1 = getelementptr inbounds i8, ptr %src, i8 %next\n  %cmp.iv.1.start = icmp ult ptr %src.iv.1, %lower\n  %cmp.iv.1.end = icmp uge ptr %src.iv.1, %upper\n  %or.2 = or i1 %cmp.iv.1.start, %cmp.iv.1.end\n  br i1 %or.2, label %trap.bb, label %loop.body.2\n\nloop.body.2:                                      ; preds = %loop.body.1\n  %add.2 = add nuw nsw i8 %iv, 2\n  %src.iv.2 = getelementptr inbounds i8, ptr %src, i8 %add.2\n  %cmp.iv.2.start = icmp ult ptr %src.iv.2, %lower\n  %cmp.iv.2.end = icmp uge ptr %src.iv.2, %upper\n  %or.3 = or i1 %cmp.iv.2.start, %cmp.iv.2.end\n  br i1 %or.3, label %trap.bb, label %loop.latch\n\nloop.latch:                                       ; preds = %loop.body.2\n  %ptr = bitcast ptr %src.iv to ptr\n  store i32 0, ptr %ptr, align 4\n  %iv.next = add nuw nsw i8 %iv, 1\n  br label %loop.header\n\nexit:                                             ; preds = %loop.header\n  ret void\n}\n"
        },
        {
          "test_name": "test2_with_ne",
          "test_body": "define void @test2_with_ne(ptr %src, ptr %lower, ptr %upper, i8 %N) {\nentry:\n  %src.end = getelementptr inbounds i8, ptr %src, i8 %N\n  %cmp.src.start = icmp ult ptr %src, %lower\n  %cmp.src.end = icmp uge ptr %src.end, %upper\n  %cmp.overflow = icmp ugt ptr %src, %src.end\n  %or.0 = or i1 %cmp.src.start, %cmp.src.end\n  %or.11 = or i1 %or.0, %cmp.overflow\n  br i1 %or.11, label %trap.bb, label %loop.header\n\ntrap.bb:                                          ; preds = %loop.body.2, %loop.body.1, %loop.body, %entry\n  ret void\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i8 [ %iv.next, %loop.latch ], [ 1, %entry ]\n  %next = add nuw nsw i8 %iv, 1\n  %ec = icmp eq i8 %next, %N\n  br i1 %ec, label %exit, label %loop.body\n\nloop.body:                                        ; preds = %loop.header\n  %src.iv = getelementptr inbounds i8, ptr %src, i8 %iv\n  %cmp.iv.start = icmp ult ptr %src.iv, %lower\n  %cmp.iv.end = icmp uge ptr %src.iv, %upper\n  %or.1 = or i1 %cmp.iv.start, %cmp.iv.end\n  br i1 %or.1, label %trap.bb, label %loop.body.1\n\nloop.body.1:                                      ; preds = %loop.body\n  %add.1 = add nuw nsw i8 %iv, 1\n  %src.iv.1 = getelementptr inbounds i8, ptr %src, i8 %add.1\n  %cmp.iv.1.start = icmp ult ptr %src.iv.1, %lower\n  %cmp.iv.1.end = icmp uge ptr %src.iv.1, %upper\n  %or.2 = or i1 %cmp.iv.1.start, %cmp.iv.1.end\n  br i1 %or.2, label %trap.bb, label %loop.body.2\n\nloop.body.2:                                      ; preds = %loop.body.1\n  %add.2 = add nuw nsw i8 %iv, 2\n  %src.iv.2 = getelementptr inbounds i8, ptr %src, i8 %add.2\n  %cmp.iv.2.start = icmp ult ptr %src.iv.2, %lower\n  %cmp.iv.2.end = icmp uge ptr %src.iv.2, %upper\n  %or.3 = or i1 %cmp.iv.2.start, %cmp.iv.2.end\n  br i1 %or.3, label %trap.bb, label %loop.latch\n\nloop.latch:                                       ; preds = %loop.body.2\n  %ptr = bitcast ptr %src.iv to ptr\n  store i32 0, ptr %ptr, align 4\n  %iv.next = add nuw nsw i8 %iv, 1\n  br label %loop.header\n\nexit:                                             ; preds = %loop.header\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/or-implied-by-operands.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "test_or_used_in_false_branch2",
          "test_body": "define i1 @test_or_used_in_false_branch2(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %or = or i1 %c.1, %t.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 %t.1\n\nelse:                                             ; preds = %entry\n  ret i1 %t.1\n}\n"
        },
        {
          "test_name": "test_same_cond_for_or",
          "test_body": "define i1 @test_same_cond_for_or(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %or = or i1 %c.1, %c.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_or_disjoint_set_operand",
          "test_body": "define i1 @test_or_disjoint_set_operand(i8 %x) {\nentry:\n  %cmp1 = icmp slt i8 %x, 1\n  %cmp2 = icmp ne i8 %x, 0\n  %or = or disjoint i1 %cmp2, %cmp1\n  ret i1 %or\n}\n"
        },
        {
          "test_name": "test_or_used_in_false_branch",
          "test_body": "define i1 @test_or_used_in_false_branch(i8 %x) {\nentry:\n  %c.1 = icmp ule i8 %x, 10\n  %t.1 = icmp ule i8 %x, 5\n  %or = or i1 %c.1, %t.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 %t.1\n\nelse:                                             ; preds = %entry\n  ret i1 %t.1\n}\n"
        },
        {
          "test_name": "test_first_or_condition_implied_by_second_ops",
          "test_body": "define i1 @test_first_or_condition_implied_by_second_ops(i8 %x) {\nentry:\n  %c.1 = icmp ule i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %or = or i1 %t.1, %c.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_second_or_condition_implied_by_first",
          "test_body": "define i1 @test_second_or_condition_implied_by_first(i8 %x) {\nentry:\n  %c.1 = icmp ule i8 %x, 10\n  %t.1 = icmp ugt i8 %x, 5\n  %or = or i1 %c.1, %t.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        },
        {
          "test_name": "test_second_or_condition_not_implied_by_first",
          "test_body": "define i1 @test_second_or_condition_not_implied_by_first(i8 %x) {\nentry:\n  %c.1 = icmp ugt i8 %x, 10\n  %c.2 = icmp ugt i8 %x, 5\n  %or = or i1 %c.2, %c.1\n  br i1 %or, label %then, label %else\n\nthen:                                             ; preds = %entry\n  ret i1 false\n\nelse:                                             ; preds = %entry\n  ret i1 true\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/ConstraintElimination/or.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "test_or_chain_ule_1",
          "test_body": "define i1 @test_or_chain_ule_1(i4 %x, i4 %y, i4 %z, i4 %a, i4 %b) {\nentry:\n  %c.1 = icmp ule i4 %x, %y\n  %c.2 = icmp ule i4 %y, %z\n  %c.3 = icmp ule i4 2, %x\n  %c.4 = icmp ule i4 2, %a\n  %or.1 = or i1 %c.1, %c.2\n  %or.2 = or i1 %or.1, %c.3\n  %or.3 = or i1 %c.4, %or.2\n  br i1 %or.3, label %bb1, label %exit\n\nbb1:                                              ; preds = %entry\n  %c.5 = icmp ule i4 %x, %z\n  %c.6 = icmp ule i4 %x, %a\n  %res.1 = xor i1 %c.5, %c.6\n  %c.7 = icmp ule i4 2, %x\n  %res.2 = xor i1 %res.1, %c.7\n  ret i1 %res.2\n\nexit:                                             ; preds = %entry\n  %f.1 = icmp ule i4 %x, %z\n  %f.2 = icmp ule i4 2, %x\n  %res.3 = xor i1 %f.1, %f.2\n  %t.1 = icmp ugt i4 %y, %z\n  %res.4 = xor i1 %res.3, %t.1\n  %t.2 = icmp ugt i4 %x, %y\n  %res.5 = xor i1 %res.4, %t.2\n  %t.3 = icmp ugt i4 %x, %z\n  %res.6 = xor i1 %res.5, %t.3\n  %t.4 = icmp ugt i4 2, %a\n  %res.7 = xor i1 %res.6, %t.4\n  %c.8 = icmp ule i4 %x, %a\n  %res.8 = xor i1 %res.7, %c.8\n  %c.9 = icmp ule i4 %x, %b\n  %res.9 = xor i1 %res.8, %c.9\n  ret i1 %res.9\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[ConstraintElim] `checkOrAndOpImpliedByOther` should drop `disjoint` flag",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/pUvC88\n```\n----------------------------------------\ndefine i1 @src(i8 %b) {\nentry:\n  %c.1 = icmp slt i8 %b, 1\n  %c.2 = icmp ne i8 %b, 0\n  %or = or disjoint i1 %c.2, %c.1\n  ret i1 %or\n}\n=>\ndefine i1 @src(i8 %b) {\nentry:\n  %c.2 = icmp ne i8 %b, 0\n  %or = or disjoint i1 %c.2, 1\n  ret i1 %or\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\ni8 %b = #x01 (1)\n\nSource:\ni1 %c.1 = #x0 (0)\ni1 %c.2 = #x1 (1)\ni1 %or = #x1 (1)\n\nTarget:\ni1 %c.2 = #x1 (1)\ni1 %or = poison\nSource value: #x1 (1)\nTarget value: poison\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```\nTriggered by pre-commit fuzzing for https://github.com/llvm/llvm-project/pull/135784.\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:transforms"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  }
}