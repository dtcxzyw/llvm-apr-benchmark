{
  "bug_id": "141968",
  "issue_url": "https://github.com/llvm/llvm-project/issues/141968",
  "bug_type": "crash",
  "base_commit": "389e9d3a422f17356d1f90913b891d23011ae5b3",
  "knowledge_cutoff": "2025-05-29T15:40:08Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "b8c4eea3d8b2a2df9442319de14ef38c2492428d",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          1015,
          1027
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "simplifyRecipe"
      ]
    }
  },
  "patch": "commit b8c4eea3d8b2a2df9442319de14ef38c2492428d\nAuthor: Ramkumar Ramachandra <ramkumar.ramachandra@codasip.com>\nDate:   Mon Jun 2 15:56:35 2025 +0200\n\n    [VPlan] Simplify PredPHI LiveIn -> LiveIn (#142271)\n    \n    5f39be5 ([VPlan] Use InstSimplifyFolder instead of TargetFolder) updated\n    simplifyRecipe to fold live-ins to Values that are not necessarily\n    Constant, but forgot to update the corresponding PredPHI folder, which\n    still folds PredPHI constant -> constant. Update it to fold PredPHI\n    LiveIn -> LiveIn.\n    \n    Fixes #141968.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex 5b42a9056b69..348100124ba3 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -1015,13 +1015,11 @@ static void simplifyRecipe(VPRecipeBase &R, VPTypeAnalysis &TypeInfo) {\n           .Default([](auto *) { return false; }))\n     return;\n \n-  // Fold PredPHI constant -> constant.\n+  // Fold PredPHI LiveIn -> LiveIn.\n   if (auto *PredPHI = dyn_cast<VPPredInstPHIRecipe>(&R)) {\n     VPValue *Op = PredPHI->getOperand(0);\n-    if (!Op->isLiveIn() || !Op->getLiveInIRValue())\n-      return;\n-    if (auto *C = dyn_cast<Constant>(Op->getLiveInIRValue()))\n-      PredPHI->replaceAllUsesWith(Plan->getOrAddLiveIn(C));\n+    if (Op->isLiveIn())\n+      PredPHI->replaceAllUsesWith(Op);\n   }\n \n   VPValue *A;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/pr141968-instsimplifyfolder.ll",
      "commands": [
        "opt -passes=loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ntarget triple = \"x86_64\"\n\ndefine i8 @pr141968(i1 %cond, i8 %v) {\n;\nentry:\n  %zext.true = zext i1 true to i16\n  %sext = sext i8 %v to i16\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i8 [ %iv.next, %loop.latch ], [ 0, %entry ]\n  br i1 %cond, label %loop.latch, label %cond.false\n\ncond.false:                                       ; preds = %loop.header\n  %sdiv = sdiv i16 %sext, %zext.true\n  %sdiv.trunc = trunc i16 %sdiv to i8\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %cond.false, %loop.header\n  %ret = phi i8 [ %sdiv.trunc, %cond.false ], [ 0, %loop.header ]\n  %iv.next = add i8 %iv, 1\n  %exitcond = icmp eq i8 %iv.next, 0\n  br i1 %exitcond, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret i8 %ret\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Assertion `PredicatingBB && \"Predicated block has no single predecessor.\"' failed.",
    "body": "Crash reproducer:\n```\n; bin/opt -passes=loop-vectorize test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main(i1 %cmp.i679.i.i.i, ptr %p) {\nentry:\n  br label %for.cond1.preheader.i\n\nfor.cond1.preheader.i:                            ; preds = %for.cond1.preheader.i, %entry\n  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.cond1.preheader.i ]\n  %arrayidx.i = getelementptr [256 x i32], ptr %p, i64 0, i64 %indvars.iv.i\n  store i32 0, ptr %arrayidx.i, align 4\n  %indvars.iv.next.i = add i64 %indvars.iv.i, 1\n  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1\n  br i1 %exitcond.not.i, label %crc32_gentab.exit, label %for.cond1.preheader.i\n\ncrc32_gentab.exit:                                ; preds = %for.cond1.preheader.i\n  %div.rhs.trunc.i.i.i.i = sext i8 1 to i16\n  %0 = trunc i32 0 to i16\n  br label %for.body222.i.i.i\n\nfor.body222.i.i.i:                                ; preds = %safe_mod_func_int32_t_s_s.exit.i.i.i, %crc32_gentab.exit\n  %p_188.addr.2816.i.i.i = phi i16 [ 0, %crc32_gentab.exit ], [ %inc272.i.i.i, %safe_mod_func_int32_t_s_s.exit.i.i.i ]\n  br i1 %cmp.i679.i.i.i, label %safe_mod_func_int32_t_s_s.exit.i.i.i, label %cond.false.i683.i.i.i\n\ncond.false.i683.i.i.i:                            ; preds = %for.body222.i.i.i\n  %div16.i.i.i.i = sdiv i16 %0, %div.rhs.trunc.i.i.i.i\n  %1 = zext i16 %div16.i.i.i.i to i32\n  br label %safe_mod_func_int32_t_s_s.exit.i.i.i\n\nsafe_mod_func_int32_t_s_s.exit.i.i.i:             ; preds = %cond.false.i683.i.i.i, %for.body222.i.i.i\n  %cond.i684.i.i.i = phi i32 [ %1, %cond.false.i683.i.i.i ], [ 0, %for.body222.i.i.i ]\n  %inc272.i.i.i = add i16 %p_188.addr.2816.i.i.i, 1\n  %exitcond.not.i.i.i = icmp eq i16 %inc272.i.i.i, 0\n  br i1 %exitcond.not.i.i.i, label %if.else417.i.i.i, label %for.body222.i.i.i\n\nif.else417.i.i.i:                                 ; preds = %safe_mod_func_int32_t_s_s.exit.i.i.i\n  ret i32 %cond.i684.i.i.i\n}\n```\n```\nopt: /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:2885: virtual void llvm::VPPredInstPHIRecipe::execute(llvm::VPTransformState&): Assertion `PredicatingBB && \"Predicated block has no single predecessor.\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: bin/opt -passes=loop-vectorize reduced.ll -S\n1.      Running pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"reduced.ll\"\n2.      Running pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"main\"\n #0 0x00007088da627ab2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x227ab2)\n #1 0x00007088da62498f llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x22498f)\n #2 0x00007088da624ad4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007088da045330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x00007088da09eb2c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007088da09eb2c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007088da09eb2c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007088da04527e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007088da0288ff abort ./stdlib/abort.c:81:7\n #9 0x00007088da02881b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007088da03b517 (/lib/x86_64-linux-gnu/libc.so.6+0x3b517)\n#11 0x00007088d38e230e llvm::VPPredInstPHIRecipe::execute(llvm::VPTransformState&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x2e230e)\n#12 0x00007088d3889738 llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x289738)\n#13 0x00007088d389abd5 llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x29abd5)\n#14 0x00007088d388c05d llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x28c05d)\n#15 0x00007088d389cff5 llvm::VPlan::execute(llvm::VPTransformState*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x29cff5)\n#16 0x00007088d36f1382 llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0xf1382)\n#17 0x00007088d3709d6f llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x109d6f)\n#18 0x00007088d370bf11 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x10bf11)\n#19 0x00007088d370c586 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x10c586)\n#20 0x00007088d42ec9c5 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMPasses.so.21.0git+0xec9c5)\n#21 0x00007088d1127444 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x327444)\n#22 0x00007088d90db9b5 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdb9b5)\n#23 0x00007088d1127960 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x327960)\n#24 0x00007088d90dc375 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdc375)\n#25 0x00007088d1128ae5 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x328ae5)\n#26 0x00007088da7912e9 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x2c2e9)\n#27 0x00007088da79c306 optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x37306)\n#28 0x00007088da02a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#29 0x00007088da02a28b call_init ./csu/../csu/libc-start.c:128:20\n#30 0x00007088da02a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#31 0x000064bed9823095 _start (bin/opt+0x1095)\nAborted (core dumped)\n```\nllvm version: 94bcd9ceedc7e194b6296e4a293c60b8e38d1b67",
    "author": "dtcxzyw",
    "labels": [
      "vectorizers",
      "crash-on-valid",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "gregbedwell",
        "body": "We've hit this as well in our testing.\nhttps://godbolt.org/z/hjGqcsWso\n\n```\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-unknown\"\n\ndefine i8 @g(i1 %cmp3) {\nentry:\n  %0 = zext i1 true to i16\n  %div.lhs.trunc = sext i8 0 to i16\n  br label %for.body\n\nfor.body:                                         ; preds = %cond.end, %entry\n  %b.014 = phi i8 [ %inc, %cond.end ], [ 0, %entry ]\n  br i1 %cmp3, label %cond.end, label %cond.false\n\ncond.false:                                       ; preds = %for.body\n  %div13 = sdiv i16 %div.lhs.trunc, %0\n  %1 = trunc i16 %div13 to i8\n  br label %cond.end\n\ncond.end:                                         ; preds = %cond.false, %for.body\n  %cond = phi i8 [ %1, %cond.false ], [ 0, %for.body ]\n  %inc = add i8 %b.014, 1\n  %exitcond.not = icmp eq i8 %inc, 0\n  br i1 %exitcond.not, label %for.end, label %for.body\n\nfor.end:                                          ; preds = %cond.end\n  ret i8 %cond\n}\n```\n\n```\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:2885: virtual void llvm::VPPredInstPHIRecipe::execute(llvm::VPTransformState&): Assertion `PredicatingBB && \"Predicated block has no single predecessor.\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S --passes=loop-vectorize <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"g\"\n #0 0x0000000005603c18 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5603c18)\n #1 0x00000000056015a4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x000071a65b642520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x000071a65b6969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x000071a65b642476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x000071a65b6287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x000071a65b62871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x000071a65b639e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000035fc5b7 llvm::VPPredInstPHIRecipe::execute(llvm::VPTransformState&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35fc5b7)\n #9 0x00000000035a9a8a llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35a9a8a)\n#10 0x00000000035bc70d llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35bc70d)\n#11 0x00000000035afb81 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35afb81)\n#12 0x00000000035bf201 llvm::VPlan::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35bf201)\n#13 0x0000000003459b9b llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3459b9b)\n#14 0x0000000003470889 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3470889)\n#15 0x0000000003472670 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3472670)\n#16 0x0000000003472cc3 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3472cc3)\n#17 0x0000000002d824be llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2d824be)\n#18 0x00000000053fa1f0 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53fa1f0)\n#19 0x0000000000e91dde llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe91dde)\n#20 0x00000000053fa703 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53fa703)\n#21 0x0000000000e90c2e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe90c2e)\n#22 0x00000000053f8320 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53f8320)\n#23 0x00000000009519ea llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9519ea)\n#24 0x00000000009451bc optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9451bc)\n#25 0x000071a65b629d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#26 0x000071a65b629e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#27 0x000000000093cdf5 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93cdf5)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\n\nBisected to 5f39be591714eba1be413e2b3ed6fc152a15bb8e"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "5f39be591714eba1be413e2b3ed6fc152a15bb8e"
}