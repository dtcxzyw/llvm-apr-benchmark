{
  "bug_id": "113520",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113520",
  "bug_type": "miscompilation",
  "base_commit": "907c13638819b36ecc5154775217068b1a1f4cfc",
  "knowledge_cutoff": "2024-10-24T04:03:39Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e914421d7fbf22059ea2180233add0c914ec80f0",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          12068,
          12075
        ],
        [
          15784,
          15791
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "add",
        "BoUpSLP::vectorizeTree",
        "getWidenedType",
        "BoUpSLP::getTreeCost"
      ]
    }
  },
  "patch": "commit e914421d7fbf22059ea2180233add0c914ec80f0\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Oct 24 08:57:07 2024 -0700\n\n    [SLP]Do correct signedness analysis for externally used scalars\n    \n    If the scalars is used externally is in the root node, it may have\n    incorrect signedness info because of the conflict with the demanded bits\n    analysis. Need to perform exact signedness analysis and compute it\n    rather than rely on the precomputed value, which might be incorrect for\n    alternate zext/sext nodes.\n    \n    Fixes #113520\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 012d85353f08..2afd02dae3a8 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -12068,8 +12068,9 @@ InstructionCost BoUpSLP::getTreeCost(ArrayRef<Value *> VectorizedVals) {\n     auto It = MinBWs.find(Entry);\n     if (It != MinBWs.end()) {\n       auto *MinTy = IntegerType::get(F->getContext(), It->second.first);\n-      unsigned Extend =\n-          It->second.second ? Instruction::SExt : Instruction::ZExt;\n+      unsigned Extend = isKnownNonNegative(EU.Scalar, SimplifyQuery(*DL))\n+                            ? Instruction::ZExt\n+                            : Instruction::SExt;\n       VecTy = getWidenedType(MinTy, BundleWidth);\n       ExtraCost = TTI->getExtractWithExtendCost(Extend, EU.Scalar->getType(),\n                                                 VecTy, EU.Lane);\n@@ -15784,8 +15785,9 @@ BoUpSLP::vectorizeTree(const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n           // to the larger type.\n           ExV = Ex;\n           if (Scalar->getType() != Ex->getType())\n-            ExV = Builder.CreateIntCast(Ex, Scalar->getType(),\n-                                        MinBWs.find(E)->second.second);\n+            ExV = Builder.CreateIntCast(\n+                Ex, Scalar->getType(),\n+                !isKnownNonNegative(Scalar, SimplifyQuery(*DL)));\n           auto *I = dyn_cast<Instruction>(Ex);\n           ScalarToEEs[Scalar].try_emplace(I ? I->getParent()\n                                             : &F->getEntryBlock(),\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/SystemZ/ext-alt-node-must-ext.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=systemz-unknown -mcpu=z15 < %s -slp-threshold=-10"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(ptr %0, ptr %1) {\n  %3 = load i64, ptr inttoptr (i64 32 to ptr), align 32\n  %4 = load ptr, ptr %1, align 8\n  %5 = getelementptr inbounds i8, ptr %4, i64 32\n  %6 = load i64, ptr %5, align 8\n  %7 = icmp ne i64 %3, 0\n  %8 = zext i1 %7 to i32\n  %9 = icmp ne i64 %6, 0\n  %.neg = sext i1 %9 to i32\n  %10 = add nsw i32 %.neg, %8\n  ret i32 %10\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/resized-alt-shuffle-after-minbw.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-vectorize-hor=false < %s"
      ],
      "tests": [
        {
          "test_name": "func",
          "test_body": "define void @func(i32 %0) {\n  %2 = shl i32 %0, 0\n  %3 = sext i32 %2 to i64\n  %4 = shl i32 0, 0\n  %5 = sext i32 %4 to i64\n  %6 = or i32 0, 0\n  %7 = or i32 0, 0\n  %8 = zext i32 %6 to i64\n  %9 = zext i32 %7 to i64\n  %10 = zext i32 0 to i64\n  %11 = zext i32 0 to i64\n  %12 = zext i32 0 to i64\n  %13 = zext i32 0 to i64\n  %14 = zext i32 0 to i64\n  %15 = zext i32 0 to i64\n  %16 = zext i32 0 to i64\n  %17 = zext i32 0 to i64\n  %18 = zext i32 0 to i64\n  %19 = zext i32 0 to i64\n  %20 = zext i32 0 to i64\n  %21 = zext i32 0 to i64\n  %22 = zext i32 0 to i64\n  %23 = zext i32 0 to i64\n  %24 = zext i32 0 to i64\n  %25 = zext i32 0 to i64\n  %26 = zext i32 0 to i64\n  %27 = or i64 %3, 0\n  %28 = or i64 %3, %8\n  %29 = or i64 %3, %9\n  %30 = or i64 %3, %10\n  %31 = or i64 %3, %11\n  %32 = or i64 %3, %12\n  %33 = or i64 %3, %13\n  %34 = or i64 %3, %14\n  %35 = or i64 %3, %15\n  %36 = or i64 %3, %16\n  %37 = or i64 %3, %17\n  %38 = or i64 %3, %18\n  %39 = or i64 %3, %19\n  %40 = or i64 %3, %20\n  %41 = or i64 %3, %21\n  %42 = or i64 %3, %22\n  %43 = or i64 %3, %23\n  %44 = or i64 %3, %24\n  %45 = or i64 %3, %25\n  %46 = or i64 %3, 0\n  %47 = or i64 %3, 0\n  %48 = or i64 %3, 0\n  %49 = or i64 %3, 0\n  %50 = or i64 %3, 0\n  %51 = or i64 %3, 0\n  %52 = or i64 %3, 0\n  %53 = or i64 %3, 0\n  %54 = or i64 %3, 0\n  %55 = or i64 %3, 0\n  %56 = or i64 %3, 0\n  %57 = or i64 %3, 0\n  %58 = or i64 %3, 0\n  %59 = icmp slt i64 %28, 0\n  %60 = icmp slt i64 %29, 0\n  %61 = icmp slt i64 %30, 0\n  %62 = icmp slt i64 %31, 0\n  %63 = icmp slt i64 %32, 0\n  %64 = icmp slt i64 %33, 0\n  %65 = icmp slt i64 %34, 0\n  %66 = icmp slt i64 %35, 0\n  %67 = icmp slt i64 %36, 0\n  %68 = icmp slt i64 %37, 0\n  %69 = icmp slt i64 %38, 0\n  %70 = icmp slt i64 %39, 0\n  %71 = icmp slt i64 %40, 0\n  %72 = icmp slt i64 %41, 0\n  %73 = icmp slt i64 %42, 0\n  %74 = icmp slt i64 %43, 0\n  %75 = icmp slt i64 %44, 0\n  %76 = icmp slt i64 %45, 0\n  %77 = icmp slt i64 %46, 0\n  %78 = icmp slt i64 %47, 0\n  %79 = icmp slt i64 %48, 0\n  %80 = icmp slt i64 %49, 0\n  %81 = icmp slt i64 %50, 0\n  %82 = icmp slt i64 %51, 0\n  %83 = icmp slt i64 %52, 0\n  %84 = icmp slt i64 %53, 0\n  %85 = icmp slt i64 %54, 0\n  %86 = icmp slt i64 %55, 0\n  %87 = icmp slt i64 %56, 0\n  %88 = icmp slt i64 %57, 0\n  %89 = icmp slt i64 %58, 0\n  %90 = and i1 false, %59\n  %91 = and i1 false, %60\n  %92 = and i1 false, %61\n  %93 = and i1 false, %62\n  %94 = and i1 false, %63\n  %95 = and i1 false, %64\n  %96 = and i1 false, %65\n  %97 = and i1 false, %66\n  %98 = and i1 false, %67\n  %99 = and i1 false, %68\n  %100 = and i1 false, %69\n  %101 = and i1 false, %70\n  %102 = and i1 false, %71\n  %103 = and i1 false, %72\n  %104 = and i1 false, %73\n  %105 = and i1 false, %74\n  %106 = and i1 false, %75\n  %107 = and i1 false, %76\n  %108 = icmp eq i32 %2, 0\n  %109 = and i1 false, %77\n  %110 = and i1 false, %78\n  %111 = and i1 false, %79\n  %112 = and i1 false, %80\n  %113 = and i1 false, %81\n  %114 = and i1 false, %82\n  %115 = and i1 false, %83\n  %116 = and i1 false, %84\n  %117 = and i1 false, %85\n  %118 = and i1 false, %86\n  %119 = or i64 %5, %26\n  %120 = getelementptr float, ptr addrspace(1) null, i64 %119\n  %121 = icmp slt i64 %119, 0\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "`slp-vectorizer` miscompilation",
    "body": "Alive2 report: https://alive2.llvm.org/ce/z/FmxNvP\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine <3 x i32> @add3_i96.2(<3 x i32> %#0, <3 x i32> %#1) {\r\n#2:\r\n  %#3 = extractelement <3 x i32> %#0, i64 0\r\n  %#4 = sext i32 %#3 to i64\r\n  %#5 = extractelement <3 x i32> %#1, i64 0\r\n  %#6 = zext i32 %#5 to i64\r\n  %#7 = add nsw nuw i64 %#6, %#4\r\n  %#21 = trunc i64 %#7 to i32\r\n  %#22 = insertelement <3 x i32> %#1, i32 %#21, i32 0\r\n  ret <3 x i32> %#22\r\n}\r\n=>\r\ndefine <3 x i32> @add3_i96.2(<3 x i32> %#0, <3 x i32> %#1) {\r\n#2:\r\n  %#3 = shufflevector <3 x i32> %#1, <3 x i32> %#0, 0, 3\r\n  %#4 = extractelement <2 x i32> %#3, i32 0\r\n  %#5 = sext i32 %#4 to i64\r\n  %#6 = extractelement <2 x i32> %#3, i32 1\r\n  %#7 = sext i32 %#6 to i64\r\n  %#8 = add nsw nuw i64 %#5, %#7\r\n  %#22 = trunc i64 %#8 to i32\r\n  %#23 = insertelement <3 x i32> %#1, i32 %#22, i32 0\r\n  ret <3 x i32> %#23\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\n<3 x i32> %#0 = < #x00000008 (8), #x00000000 (0), #x00000000 (0) >\r\n<3 x i32> %#1 = < #xfffffff9 (4294967289, -7), #x00000000 (0), #x00000000 (0) >\r\n\r\nSource:\r\ni32 %#3 = #x00000008 (8)\r\ni64 %#4 = #x0000000000000008 (8)\r\ni32 %#5 = #xfffffff9 (4294967289, -7)\r\ni64 %#6 = #x00000000fffffff9 (4294967289)\r\ni64 %#7 = #x0000000100000001 (4294967297)\r\ni32 %#21 = #x00000001 (1)\r\n<3 x i32> %#22 = < #x00000001 (1), #x00000000 (0), #x00000000 (0) >\r\n\r\nTarget:\r\n<2 x i32> %#3 = < #xfffffff9 (4294967289, -7), #x00000008 (8) >\r\ni32 %#4 = #xfffffff9 (4294967289, -7)\r\ni64 %#5 = #xfffffffffffffff9 (18446744073709551609, -7)\r\ni32 %#6 = #x00000008 (8)\r\ni64 %#7 = #x0000000000000008 (8)\r\ni64 %#8 = poison\r\ni32 %#22 = poison\r\n<3 x i32> %#23 = < poison, #x00000000 (0), #x00000000 (0) >\r\nSource value: < #x00000001 (1), #x00000000 (0), #x00000000 (0) >\r\nTarget value: < poison, #x00000000 (0), #x00000000 (0) >\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": []
  }
}
