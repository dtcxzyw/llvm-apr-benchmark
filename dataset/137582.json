{
  "bug_id": "137582",
  "issue_url": "https://github.com/llvm/llvm-project/issues/137582",
  "bug_type": "miscompilation",
  "base_commit": "4075a3698a3fdda3a77ce2456e3bfefbc0f0c56e",
  "knowledge_cutoff": "2025-04-28T05:48:58Z",
  "lit_test_dir": [
    "llvm/test/Transforms/CorrelatedValuePropagation"
  ],
  "hints": {
    "fix_commit": "830cf36bd4c491ef28d9bba74737e324639bb4cd",
    "components": [
      "IR",
      "LazyValueInfo",
      "ValueTracking"
    ],
    "bug_location_lineno": {
      "llvm/include/llvm/Analysis/ValueTracking.h": [
        [
          546,
          569
        ],
        [
          586,
          592
        ]
      ],
      "llvm/include/llvm/IR/Instruction.h": [
        [
          585,
          590
        ]
      ],
      "llvm/lib/Analysis/LazyValueInfo.cpp": [
        [
          1701,
          1707
        ]
      ],
      "llvm/lib/Analysis/ValueTracking.cpp": [
        [
          7201,
          7220
        ],
        [
          7287,
          7293
        ]
      ],
      "llvm/lib/IR/Instruction.cpp": [
        [
          532,
          539
        ],
        [
          554,
          559
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/include/llvm/Analysis/ValueTracking.h": [
        "isSafeToSpeculativelyExecuteWithVariableReplaced"
      ],
      "llvm/lib/Analysis/LazyValueInfo.cpp": [
        "LazyValueInfoImpl::getValueAtUse"
      ],
      "llvm/lib/Analysis/ValueTracking.cpp": [
        "llvm::isNotCrossLaneOperation",
        "llvm::isSafeToSpeculativelyExecuteWithOpcode"
      ],
      "llvm/lib/IR/Instruction.cpp": [
        "Instruction::dropUBImplyingAttrsAndMetadata",
        "Instruction::dropUBImplyingAttrsAndUnknownMetadata",
        "Instruction::isExact"
      ]
    }
  },
  "patch": "commit 830cf36bd4c491ef28d9bba74737e324639bb4cd\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Apr 30 11:53:38 2025 +0800\n\n    [LVI][ValueTracking] Take UB-implying attributes into account in `isSafeToSpeculativelyExecute` (#137604)\n    \n    Closes https://github.com/llvm/llvm-project/issues/137582.\n    \n    In the original case, LVI uses the edge information in `%entry ->\n    %if.end` to get a more precise result. However, since the call to `smin`\n    has an `noundef` return attribute, an immediate UB will be triggered\n    after optimization.\n    \n    Currently, `isSafeToSpeculativelyExecuteWithOpcode(%min)` returns true\n    because\n    https://github.com/llvm/llvm-project/commit/6a288c1e32351d4be3b7630841af078fa1c3bb8b\n    only checks whether the function is speculatable. However, it is not\n    enough in this case.\n    \n    This patch takes UB-implying attributes into account if\n    `IgnoreUBImplyingAttrs` is set to false. If it is set to true, the\n    caller is responsible for correctly propagating UB-implying attributes.\n\ndiff --git a/llvm/include/llvm/Analysis/ValueTracking.h b/llvm/include/llvm/Analysis/ValueTracking.h\nindex f927838c843a..61dbb07e7128 100644\n--- a/llvm/include/llvm/Analysis/ValueTracking.h\n+++ b/llvm/include/llvm/Analysis/ValueTracking.h\n@@ -539,6 +539,12 @@ bool isNotCrossLaneOperation(const Instruction *I);\n /// move the instruction as long as the correct dominance relationships for\n /// the operands and users hold.\n ///\n+/// If \\p UseVariableInfo is true, the information from non-constant operands\n+/// will be taken into account.\n+///\n+/// If \\p IgnoreUBImplyingAttrs is true, UB-implying attributes will be ignored.\n+/// The caller is responsible for correctly propagating them after hoisting.\n+///\n /// This method can return true for instructions that read memory;\n /// for such instructions, moving them may change the resulting value.\n bool isSafeToSpeculativelyExecute(const Instruction *I,\n@@ -546,24 +552,28 @@ bool isSafeToSpeculativelyExecute(const Instruction *I,\n                                   AssumptionCache *AC = nullptr,\n                                   const DominatorTree *DT = nullptr,\n                                   const TargetLibraryInfo *TLI = nullptr,\n-                                  bool UseVariableInfo = true);\n+                                  bool UseVariableInfo = true,\n+                                  bool IgnoreUBImplyingAttrs = true);\n \n inline bool isSafeToSpeculativelyExecute(const Instruction *I,\n                                          BasicBlock::iterator CtxI,\n                                          AssumptionCache *AC = nullptr,\n                                          const DominatorTree *DT = nullptr,\n                                          const TargetLibraryInfo *TLI = nullptr,\n-                                         bool UseVariableInfo = true) {\n+                                         bool UseVariableInfo = true,\n+                                         bool IgnoreUBImplyingAttrs = true) {\n   // Take an iterator, and unwrap it into an Instruction *.\n-  return isSafeToSpeculativelyExecute(I, &*CtxI, AC, DT, TLI, UseVariableInfo);\n+  return isSafeToSpeculativelyExecute(I, &*CtxI, AC, DT, TLI, UseVariableInfo,\n+                                      IgnoreUBImplyingAttrs);\n }\n \n /// Don't use information from its non-constant operands. This helper is used\n /// when its operands are going to be replaced.\n-inline bool\n-isSafeToSpeculativelyExecuteWithVariableReplaced(const Instruction *I) {\n+inline bool isSafeToSpeculativelyExecuteWithVariableReplaced(\n+    const Instruction *I, bool IgnoreUBImplyingAttrs = true) {\n   return isSafeToSpeculativelyExecute(I, nullptr, nullptr, nullptr, nullptr,\n-                                      /*UseVariableInfo=*/false);\n+                                      /*UseVariableInfo=*/false,\n+                                      IgnoreUBImplyingAttrs);\n }\n \n /// This returns the same result as isSafeToSpeculativelyExecute if Opcode is\n@@ -586,7 +596,8 @@ isSafeToSpeculativelyExecuteWithVariableReplaced(const Instruction *I) {\n bool isSafeToSpeculativelyExecuteWithOpcode(\n     unsigned Opcode, const Instruction *Inst, const Instruction *CtxI = nullptr,\n     AssumptionCache *AC = nullptr, const DominatorTree *DT = nullptr,\n-    const TargetLibraryInfo *TLI = nullptr, bool UseVariableInfo = true);\n+    const TargetLibraryInfo *TLI = nullptr, bool UseVariableInfo = true,\n+    bool IgnoreUBImplyingAttrs = true);\n \n /// Returns true if the result or effects of the given instructions \\p I\n /// depend values not reachable through the def use graph.\ndiff --git a/llvm/include/llvm/IR/Instruction.h b/llvm/include/llvm/IR/Instruction.h\nindex 900384432d75..d8069b2fb02a 100644\n--- a/llvm/include/llvm/IR/Instruction.h\n+++ b/llvm/include/llvm/IR/Instruction.h\n@@ -585,6 +585,10 @@ public:\n   /// This should be used when speculating instructions.\n   void dropUBImplyingAttrsAndMetadata();\n \n+  /// Return true if this instruction has UB-implying attributes\n+  /// that can cause immediate undefined behavior.\n+  bool hasUBImplyingAttrs() const LLVM_READONLY;\n+\n   /// Determine whether the exact flag is set.\n   bool isExact() const LLVM_READONLY;\n \ndiff --git a/llvm/lib/Analysis/LazyValueInfo.cpp b/llvm/lib/Analysis/LazyValueInfo.cpp\nindex e49e004a48a5..2a562484fc37 100644\n--- a/llvm/lib/Analysis/LazyValueInfo.cpp\n+++ b/llvm/lib/Analysis/LazyValueInfo.cpp\n@@ -1701,7 +1701,8 @@ ValueLatticeElement LazyValueInfoImpl::getValueAtUse(const Use &U) {\n     // of a cycle, we might end up reasoning about values from different cycle\n     // iterations (PR60629).\n     if (!CurrI->hasOneUse() ||\n-        !isSafeToSpeculativelyExecuteWithVariableReplaced(CurrI))\n+        !isSafeToSpeculativelyExecuteWithVariableReplaced(\n+            CurrI, /*IgnoreUBImplyingAttrs=*/false))\n       break;\n     CurrU = &*CurrI->use_begin();\n   }\ndiff --git a/llvm/lib/Analysis/ValueTracking.cpp b/llvm/lib/Analysis/ValueTracking.cpp\nindex 1d3f8b7207a6..256e77b40a97 100644\n--- a/llvm/lib/Analysis/ValueTracking.cpp\n+++ b/llvm/lib/Analysis/ValueTracking.cpp\n@@ -7201,20 +7201,19 @@ bool llvm::isNotCrossLaneOperation(const Instruction *I) {\n          !isa<CallBase, BitCastInst, ExtractElementInst>(I);\n }\n \n-bool llvm::isSafeToSpeculativelyExecute(const Instruction *Inst,\n-                                        const Instruction *CtxI,\n-                                        AssumptionCache *AC,\n-                                        const DominatorTree *DT,\n-                                        const TargetLibraryInfo *TLI,\n-                                        bool UseVariableInfo) {\n+bool llvm::isSafeToSpeculativelyExecute(\n+    const Instruction *Inst, const Instruction *CtxI, AssumptionCache *AC,\n+    const DominatorTree *DT, const TargetLibraryInfo *TLI, bool UseVariableInfo,\n+    bool IgnoreUBImplyingAttrs) {\n   return isSafeToSpeculativelyExecuteWithOpcode(Inst->getOpcode(), Inst, CtxI,\n-                                                AC, DT, TLI, UseVariableInfo);\n+                                                AC, DT, TLI, UseVariableInfo,\n+                                                IgnoreUBImplyingAttrs);\n }\n \n bool llvm::isSafeToSpeculativelyExecuteWithOpcode(\n     unsigned Opcode, const Instruction *Inst, const Instruction *CtxI,\n     AssumptionCache *AC, const DominatorTree *DT, const TargetLibraryInfo *TLI,\n-    bool UseVariableInfo) {\n+    bool UseVariableInfo, bool IgnoreUBImplyingAttrs) {\n #ifndef NDEBUG\n   if (Inst->getOpcode() != Opcode) {\n     // Check that the operands are actually compatible with the Opcode override.\n@@ -7287,7 +7286,11 @@ bool llvm::isSafeToSpeculativelyExecuteWithOpcode(\n \n     // The called function could have undefined behavior or side-effects, even\n     // if marked readnone nounwind.\n-    return Callee && Callee->isSpeculatable();\n+    if (!Callee || !Callee->isSpeculatable())\n+      return false;\n+    // Since the operands may be changed after hoisting, undefined behavior may\n+    // be triggered by some UB-implying attributes.\n+    return IgnoreUBImplyingAttrs || !CI->hasUBImplyingAttrs();\n   }\n   case Instruction::VAArg:\n   case Instruction::Alloca:\ndiff --git a/llvm/lib/IR/Instruction.cpp b/llvm/lib/IR/Instruction.cpp\nindex e55a4b41e4d0..6f858110fb8c 100644\n--- a/llvm/lib/IR/Instruction.cpp\n+++ b/llvm/lib/IR/Instruction.cpp\n@@ -532,8 +532,8 @@ void Instruction::dropUBImplyingAttrsAndUnknownMetadata(\n   if (!CB)\n     return;\n   // For call instructions, we also need to drop parameter and return attributes\n-  // that are can cause UB if the call is moved to a location where the\n-  // attribute is not valid.\n+  // that can cause UB if the call is moved to a location where the attribute is\n+  // not valid.\n   AttributeList AL = CB->getAttributes();\n   if (AL.isEmpty())\n     return;\n@@ -554,6 +554,20 @@ void Instruction::dropUBImplyingAttrsAndMetadata() {\n   dropUBImplyingAttrsAndUnknownMetadata(KnownIDs);\n }\n \n+bool Instruction::hasUBImplyingAttrs() const {\n+  auto *CB = dyn_cast<CallBase>(this);\n+  if (!CB)\n+    return false;\n+  // For call instructions, we also need to check parameter and return\n+  // attributes that can cause UB.\n+  for (unsigned ArgNo = 0; ArgNo < CB->arg_size(); ArgNo++)\n+    if (CB->isPassingUndefUB(ArgNo))\n+      return true;\n+  return CB->hasRetAttr(Attribute::NoUndef) ||\n+         CB->hasRetAttr(Attribute::Dereferenceable) ||\n+         CB->hasRetAttr(Attribute::DereferenceableOrNull);\n+}\n+\n bool Instruction::isExact() const {\n   return cast<PossiblyExactOperator>(this)->isExact();\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/CorrelatedValuePropagation/pr137582.ll",
      "commands": [
        "opt < %s -passes=correlated-propagation -S"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i8 @test(i16 %x) {\nentry:\n  %or = or i16 %x, 1\n  %conv = trunc i16 %or to i8\n  %min = call noundef i8 @llvm.smin.i8(i8 %conv, i8 0)\n  %cond = icmp eq i16 %x, 0\n  br i1 %cond, label %if.end, label %if.then\n\nif.then:                                          ; preds = %entry\n  br label %if.end\n\nif.end:                                           ; preds = %if.then, %entry\n  %res = phi i8 [ %min, %entry ], [ 0, %if.then ]\n  ret i8 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.smin.i8(i8, i8) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[CVP] Miscompilation at -O3",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/x4KrLX\n```\n\n----------------------------------------\ndefine i8 @func_124(i16 %.promoted) {\nentry:\n  %inc20.i = or i16 %.promoted, 1\n  %conv.i.i = trunc i16 %inc20.i to i8\n  %narrow.i.i.i = smin i8 %conv.i.i, 0\n  assume_welldefined i8 %narrow.i.i.i\n  %tobool.not.i46 = icmp eq i16 %.promoted, 0\n  br i1 %tobool.not.i46, label %func_127.exit, label %land.rhs.i47\n\nland.rhs.i47:\n  br label %func_127.exit\n\nfunc_127.exit:\n  %conv5.i.i.pn.in = phi i8 [ %narrow.i.i.i, %entry ], [ 0, %land.rhs.i47 ]\n  ret i8 %conv5.i.i.pn.in\n}\n=>\ndefine i8 @func_124(i16 %.promoted) {\nentry:\n  %inc20.i = or i16 %.promoted, 1\n  %conv.i.i = trunc nsw nuw i16 %inc20.i to i8\n  %narrow.i.i.i = smin i8 %conv.i.i, 0\n  assume_welldefined i8 %narrow.i.i.i\n  %tobool.not.i46 = icmp eq i16 %.promoted, 0\n  br i1 %tobool.not.i46, label %func_127.exit, label %land.rhs.i47\n\nland.rhs.i47:\n  br label %func_127.exit\n\nfunc_127.exit:\n  %conv5.i.i.pn.in = phi i8 [ %narrow.i.i.i, %entry ], [ 0, %land.rhs.i47 ]\n  %#range_0_%conv5.i.i.pn.in = !range i8 %conv5.i.i.pn.in, i8 128, i8 1\n  ret i8 %#range_0_%conv5.i.i.pn.in\n}\nTransformation doesn't verify!\n\nERROR: Source is more defined than target\n\nExample:\ni16 %.promoted = #x0080 (128)\n\nSource:\ni16 %inc20.i = #x0081 (129)\ni8 %conv.i.i = #x81 (129, -127)\ni8 %narrow.i.i.i = #x81 (129, -127)\ni1 %tobool.not.i46 = #x0 (0)\n  >> Jump to %land.rhs.i47\n  >> Jump to %func_127.exit\ni8 %conv5.i.i.pn.in = #x00 (0)\n\nTarget:\ni16 %inc20.i = #x0081 (129)\ni8 %conv.i.i = poison\ni8 %narrow.i.i.i = poison\nvoid = UB triggered!\n\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:analysis",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Related code: https://github.com/llvm/llvm-project/blob/60b3a5b7e7db40ec74d3c4839a3fae8b73d98851/llvm/lib/Analysis/LazyValueInfo.cpp#L1694-L1705"
      }
    ]
  },
  "verified": true
}