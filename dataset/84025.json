{
  "bug_id": "84025",
  "issue_url": "https://github.com/llvm/llvm-project/issues/84025",
  "bug_type": "miscompilation",
  "base_commit": "f51ade25b9205efee09a4915031848cebe772805",
  "knowledge_cutoff": "2024-03-05T15:07:55Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "e96c0c1d5e0a9916098b1a31acb006ea6c1108fb",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp": [
        [
          2167,
          2180
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp": [
        "collectInsertionElements"
      ]
    }
  },
  "patch": "commit e96c0c1d5e0a9916098b1a31acb006ea6c1108fb\nAuthor: Quentin Dian <dianqk@dianqk.net>\nDate:   Wed Mar 6 06:16:28 2024 +0800\n\n     [InstCombine] Fix shift calculation in InstCombineCasts (#84027)\n    \n    Fixes #84025.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\nindex 33ed1d557537..45afa6363ae0 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp\n@@ -2167,14 +2167,14 @@ static bool collectInsertionElements(Value *V, unsigned Shift,\n     Type *ElementIntTy = IntegerType::get(C->getContext(), ElementSize);\n \n     for (unsigned i = 0; i != NumElts; ++i) {\n-      unsigned ShiftI = Shift + i * ElementSize;\n+      unsigned ShiftI = i * ElementSize;\n       Constant *Piece = ConstantFoldBinaryInstruction(\n           Instruction::LShr, C, ConstantInt::get(C->getType(), ShiftI));\n       if (!Piece)\n         return false;\n \n       Piece = ConstantExpr::getTrunc(Piece, ElementIntTy);\n-      if (!collectInsertionElements(Piece, ShiftI, Elements, VecEltTy,\n+      if (!collectInsertionElements(Piece, ShiftI + Shift, Elements, VecEltTy,\n                                     isBigEndian))\n         return false;\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/bitcast.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "bitcast_from_single_element_pointer_vector_to_pointer",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\ntarget triple = \"x86_64-apple-darwin10.0.0\"\n\ndefine ptr @bitcast_from_single_element_pointer_vector_to_pointer(<1 x ptr> %ptrvec) {\n  %ptr = bitcast <1 x ptr> %ptrvec to ptr\n  ret ptr %ptr\n}\n"
        },
        {
          "test_name": "bitcast_shl",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\ntarget triple = \"x86_64-apple-darwin10.0.0\"\n\ndefine <4 x i32> @bitcast_shl(i32 %arg) {\n  %i = zext i32 %arg to i64\n  %i1 = shl i64 %i, 32\n  %i2 = or i64 %i1, 65\n  %i3 = zext i64 %i2 to i128\n  %i4 = shl i128 %i3, 64\n  %i5 = bitcast i128 %i4 to <4 x i32>\n  ret <4 x i32> %i5\n}\n"
        },
        {
          "test_name": "select_bitcast_unsized_pointer",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\ntarget triple = \"x86_64-apple-darwin10.0.0\"\n\ndeclare void @f1()\n\ndeclare void @f2()\n\ndefine ptr @select_bitcast_unsized_pointer(i1 %c) {\n  %s = select i1 %c, ptr @f1, ptr @f2\n  ret ptr %s\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "InstCombine calculated a wrong `insertelement` instruction",
    "body": "I tried this IR:\r\n\r\n```llvm\r\ndefine <4 x i32> @src(i32 %arg) {\r\n  %i = zext i32 %arg to i64\r\n  %i1 = shl i64 %i, 32\r\n  %i2 = or i64 %i1, 65\r\n  %i3 = zext i64 %i2 to i128\r\n  %i4 = shl i128 %i3, 64\r\n  %i5 = bitcast i128 %i4 to <4 x i32>\r\n  ret <4 x i32> %i5\r\n}\r\n\r\ndefine <4 x i32> @tgt(i32 %arg) {\r\n  %i5 = insertelement <4 x i32> <i32 0, i32 0, i32 0, i32 poison>, i32 %arg, i64 3\r\n  ret <4 x i32> %i5\r\n}\r\n```\r\n\r\nI expect `src` to be:\r\n\r\n```llvm\r\ndefine <4 x i32> @src(i32 %arg) {\r\n  %i5 = insertelement <4 x i32> <i32 0, i32 0, i32 65, i32 poison>, i32 %arg, i64 3\r\n  ret <4 x i32> %i5\r\n}\r\n```\r\n\r\nBut I'm getting the same instructions as `tgt`.\r\n\r\nGodbolt: https://llvm.godbolt.org/z/KnMEY4rTq\r\nAlive2: https://alive2.llvm.org/ce/z/7FIJNi\r\nFrom: https://github.com/rust-lang/rust/issues/121996",
    "author": "DianQK",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "cbeuw",
        "body": "Looks like this bug is almost 11 years old: https://github.com/llvm/llvm-project/commit/feb34713d531d1f48c37116e8cab84814202d057! Thanks for fixing"
      },
      {
        "author": "DianQK",
        "body": "> Looks like this bug is almost 11 years old: [feb3471](https://github.com/llvm/llvm-project/commit/feb34713d531d1f48c37116e8cab84814202d057)! Thanks for fixing\r\n\r\nBased on my experience, we likely have many more latent bugs. :)"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}