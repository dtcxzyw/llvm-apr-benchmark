{
  "bug_id": "91177",
  "issue_url": "https://github.com/llvm/llvm-project/issues/91177",
  "bug_type": "miscompilation",
  "base_commit": "de8cf69abf4f8b16d5c5ecb77a6dfb1f5c09e45a",
  "knowledge_cutoff": "2024-05-06T09:27:25Z",
  "lit_test_dir": [
    "llvm/test/Transforms/FunctionAttrs"
  ],
  "hints": {
    "fix_commit": "f34d30cdae0f59698f660d5cc8fb993fb3441064",
    "components": [
      "FunctionAttrs"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/IPO/FunctionAttrs.cpp": [
        [
          1186,
          1195
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/FunctionAttrs.cpp": [
        "isReturnNonNull"
      ]
    }
  },
  "patch": "commit f34d30cdae0f59698f660d5cc8fb993fb3441064\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Tue May 7 09:47:28 2024 +0900\n\n    [FunctionAttrs] Fix incorrect nonnull inference for non-inbounds GEP (#91180)\n    \n    For inbounds GEPs, if the source pointer is non-null, the result must\n    also be non-null. However, this does not hold for non-inbounds GEPs.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/91177.\n\ndiff --git a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\nindex 8e11cbf1cee4..26a4508aa151 100644\n--- a/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\n+++ b/llvm/lib/Transforms/IPO/FunctionAttrs.cpp\n@@ -1186,10 +1186,15 @@ static bool isReturnNonNull(Function *F, const SCCNodeSet &SCCNodes,\n     switch (RVI->getOpcode()) {\n     // Extend the analysis by looking upwards.\n     case Instruction::BitCast:\n-    case Instruction::GetElementPtr:\n     case Instruction::AddrSpaceCast:\n       FlowsToReturn.insert(RVI->getOperand(0));\n       continue;\n+    case Instruction::GetElementPtr:\n+      if (cast<GEPOperator>(RVI)->isInBounds()) {\n+        FlowsToReturn.insert(RVI->getOperand(0));\n+        continue;\n+      }\n+      return false;\n     case Instruction::Select: {\n       SelectInst *SI = cast<SelectInst>(RVI);\n       FlowsToReturn.insert(SI->getTrueValue());\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/FunctionAttrs/nocapture.ll",
      "commands": [
        "opt -passes=function-attrs -S < %s",
        "opt -passes=attributor-light -S < %s"
      ],
      "tests": [
        {
          "test_name": "lookup_bit",
          "test_body": "@lookup_table = external global [2 x i1]\n\n; Function Attrs: nounwind memory(none)\ndefine ptr @lookup_bit(ptr %q, i32 %bitno) #0 {\n  %tmp = ptrtoint ptr %q to i32\n  %tmp2 = lshr i32 %tmp, %bitno\n  %bit = and i32 %tmp2, 1\n  %lookup = getelementptr [2 x i1], ptr @lookup_table, i32 0, i32 %bit\n  ret ptr %lookup\n}\n\nattributes #0 = { nounwind memory(none) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/FunctionAttrs/nonnull.ll",
      "commands": [
        "opt -S -passes=function-attrs -enable-nonnull-arg-prop %s",
        "opt -S -passes=attributor-light %s"
      ],
      "tests": [
        {
          "test_name": "pr91177_non_inbounds_gep",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndefine ptr @pr91177_non_inbounds_gep(ptr nonnull %arg) {\n  %res = getelementptr i8, ptr %arg, i64 -8\n  ret ptr %res\n}\n"
        },
        {
          "test_name": "PR43833_simple",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndeclare void @sink(ptr)\n\ndefine void @PR43833_simple(ptr %0, i32 %1) {\n  %3 = icmp ne i32 %1, 0\n  br i1 %3, label %4, label %7\n\n4:                                                ; preds = %2\n  %5 = zext i32 %1 to i64\n  %6 = getelementptr inbounds i32, ptr %0, i64 %5\n  br label %8\n\n7:                                                ; preds = %8, %2\n  ret void\n\n8:                                                ; preds = %8, %4\n  %9 = phi i32 [ 1, %4 ], [ %10, %8 ]\n  tail call void @sink(ptr %6)\n  %10 = add nuw nsw i32 %9, 1\n  %11 = icmp eq i32 %10, %1\n  br i1 %11, label %7, label %8\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[FunctionAttrs] Incorrect nonnull inference for non-inbounds GEP",
    "body": "FunctionAttrs incorrectly infers that the following function returns nonnull (https://llvm.godbolt.org/z/49Kbq15xn):\r\n```llvm\r\ndefine ptr @test(ptr nonnull %arg) {\r\n  %res = getelementptr i8, ptr %arg, i64 -8\r\n  ret ptr %res\r\n}\r\n```\r\nThis is because the code assumes that the result of a GEP is non-null if the source is non-null here: https://github.com/llvm/llvm-project/blob/d98a78590f4f9e43fdfb69fde7d154a985e4560f/llvm/lib/Transforms/IPO/FunctionAttrs.cpp#L1189 This is not correct for non-inbounds GEPs.",
    "author": "nikic",
    "labels": [
      "miscompilation",
      "ipo"
    ],
    "comments": []
  },
  "verified": true
}