{
  "bug_id": "102994",
  "issue_url": "https://github.com/llvm/llvm-project/issues/102994",
  "bug_type": "hang",
  "base_commit": "15e915a44f0d0bf092214586d3ec86e2bb7636d7",
  "knowledge_cutoff": "2024-08-13T02:57:21Z",
  "lit_test_dir": [
    "llvm/test/Transforms/MemCpyOpt"
  ],
  "hints": {
    "fix_commit": "378daa6c6fd10d3704be449f2fe9c55df522a6e9",
    "components": [
      "MemCpyOptimizer"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp": [
        [
          1193,
          1198
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp": [
        "MemCpyOptPass::processMemCpyMemCpyDependence"
      ]
    }
  },
  "patch": "commit 378daa6c6fd10d3704be449f2fe9c55df522a6e9\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu Aug 22 17:20:47 2024 +0800\n\n    [MemCpyOpt] Avoid infinite loops in `MemCpyOptPass::processMemCpyMemCpyDependence` (#103218)\n    \n    Closes https://github.com/llvm/llvm-project/issues/102994.\n\ndiff --git a/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp b/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\nindex 1d779128e454..3f15fa2163d2 100644\n--- a/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\n+++ b/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp\n@@ -1193,6 +1193,10 @@ bool MemCpyOptPass::processMemCpyMemCpyDependence(MemCpyInst *M,\n       CopySourceAlign = commonAlignment(*CopySourceAlign, MForwardOffset);\n   }\n \n+  // Avoid infinite loops\n+  if (BAA.isMustAlias(M->getSource(), CopySource))\n+    return false;\n+\n   // Verify that the copied-from memory doesn't change in between the two\n   // transfers.  For example, in:\n   //    memcpy(a <- b)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/MemCpyOpt/pr102994.ll",
      "commands": [
        "opt -S -passes=memcpyopt < %s"
      ],
      "tests": [
        {
          "test_name": "func2",
          "test_body": "@g3 = external global i8, align 1\n\ndefine void @func2(ptr %p) {\nentry:\n  %gep1 = getelementptr i8, ptr %p, i64 32\n  %gep2 = getelementptr i8, ptr %p, i64 34\n  %gep3 = getelementptr i8, ptr %p, i64 32\n  call void @llvm.memcpy.p0.p0.i64(ptr %gep1, ptr %gep3, i64 32, i1 false)\n  call void @llvm.memcpy.p0.p0.i64(ptr @g3, ptr %gep2, i64 1, i1 false)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\n"
        },
        {
          "test_name": "func",
          "test_body": "@g1 = external global i8\n@g2 = external global [64 x i8]\n\ndefine void @func() {\nentry:\n  call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g2, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g2, i64 16), i64 20, i1 false)\n  call void @llvm.memcpy.p0.p0.i64(ptr @g1, ptr getelementptr inbounds (i8, ptr @g2, i64 24), i64 1, i1 false)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[MemcpyOpt] Infinite loops when forwarding memcpy on globals",
    "body": "Reproducer: https://godbolt.org/z/GKzGEKE18\r\n```\r\n; bin/opt -passes=memcpyopt reduced.ll -S\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n%struct.S1 = type { i64, i16, i32, %struct.S0, i8, i32, i8, i32, i8 }\r\n%struct.S0 = type { i32, i32, i32, i32, i16 }\r\n\r\n@g = external global i8\r\n@g_265 = external global %struct.S1\r\n\r\ndefine void @func() {\r\nentry:\r\n  call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  call void @llvm.memcpy.p0.p0.i64(ptr @g, ptr getelementptr inbounds (i8, ptr @g_265, i64 24), i64 1, i1 false)\r\n  ret void\r\n}\r\n```\r\n```\r\nFound roots: %entry \r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 0 = MemoryDef(liveOnEntry)\r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 1 = MemoryDef(liveOnEntry)\r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 1 = MemoryDef(liveOnEntry)\r\nMemCpyOptPass: Forwarding memcpy->memcpy src:\r\n  call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  call void @llvm.memcpy.p0.p0.i64(ptr @g, ptr getelementptr inbounds (i8, ptr @g_265, i64 24), i64 1, i1 false)\r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 0 = MemoryDef(liveOnEntry)\r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 1 = MemoryDef(liveOnEntry)\r\nClobber starting at access 1 = MemoryDef(liveOnEntry)\r\n  for instruction   call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  is 1 = MemoryDef(liveOnEntry)\r\nMemCpyOptPass: Forwarding memcpy->memcpy src:\r\n  call void @llvm.memcpy.p0.p0.i64(ptr getelementptr inbounds (i8, ptr @g_265, i64 16), ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 20, i1 false)\r\n  call void @llvm.memcpy.p0.p0.i64(ptr @g, ptr getelementptr inbounds (i8, ptr getelementptr inbounds nuw (i8, ptr @g_265, i64 16), i64 8), i64 1, i1 false)\r\n...\r\n```",
    "author": "dtcxzyw",
    "labels": [
      "llvm:hang",
      "llvm:transforms"
    ],
    "comments": []
  }
}
