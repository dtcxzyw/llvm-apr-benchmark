{
  "bug_id": "121432",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121432",
  "bug_type": "miscompilation",
  "base_commit": "b51a082e1afd707f8cf1473e4c49374e7e951d2d",
  "knowledge_cutoff": "2025-01-01T11:07:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "c05599966cd594c15834378f57669719d221c4d4",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        [
          2673,
          2680
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        "InstCombinerImpl::visitCallInst"
      ]
    }
  },
  "patch": "commit c05599966cd594c15834378f57669719d221c4d4\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Jan 6 16:23:46 2025 +0800\n\n    [InstCombine] Fix FMF propagation in `copysign Mag, (copysign ?, X) -> copysign Mag, X` (#121574)\n    \n    Closes https://github.com/llvm/llvm-project/issues/121432.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\nindex cdb2c11ef046..5494c70b34b1 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n@@ -2673,8 +2673,12 @@ Instruction *InstCombinerImpl::visitCallInst(CallInst &CI) {\n     // Propagate sign argument through nested calls:\n     // copysign Mag, (copysign ?, X) --> copysign Mag, X\n     Value *X;\n-    if (match(Sign, m_Intrinsic<Intrinsic::copysign>(m_Value(), m_Value(X))))\n-      return replaceOperand(*II, 1, X);\n+    if (match(Sign, m_Intrinsic<Intrinsic::copysign>(m_Value(), m_Value(X)))) {\n+      Value *CopySign = Builder.CreateCopySign(\n+          Mag, X,\n+          II->getFastMathFlags() & cast<Instruction>(Sign)->getFastMathFlags());\n+      return replaceInstUsesWith(*II, CopySign);\n+    }\n \n     // Clear sign-bit of constant magnitude:\n     // copysign -MagC, X --> copysign MagC, X\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/copysign.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "copysign_sign_arg_mixed",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine float @copysign_sign_arg_mixed(float %x, float %y, float %z) {\n  %s = call ninf nsz float @llvm.copysign.f32(float %y, float %z)\n  %r = call nnan nsz float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "copysign_sign_arg",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine float @copysign_sign_arg(float %x, float %y, float %z) {\n  %s = call float @llvm.copysign.f32(float %y, float %z)\n  %r = call ninf float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "fneg_mag",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine float @fneg_mag(float %x, float %y) {\n  %n = fneg float %x\n  %r = call float @llvm.copysign.f32(float %n, float %y)\n  ret float %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "copysign_sign_arg_nnan",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine float @copysign_sign_arg_nnan(float %x, float %y, float %z) {\n  %s = call nnan float @llvm.copysign.f32(float %y, float %z)\n  %r = call nnan float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "not_known_positive_sign_arg",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.maxnum.f32(float, float) #0\n\ndefine float @not_known_positive_sign_arg(float %x, float %y) {\n  %max = call float @llvm.maxnum.f32(float %x, float 0.000000e+00)\n  %r = call ninf float @llvm.copysign.f32(float %y, float %max)\n  ret float %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] FMF flags should not be propagated",
    "body": "Alive2: https://alive2.llvm.org/ce/z/ajCxTh\n```\ndefine float @src1(float noundef %x, float noundef %y, float noundef %z) {\n  %s = call float @llvm.copysign.f32(float %y, float %z)\n  %r = call nnan float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\ndefine float @tgt1(float noundef %x, float noundef %y, float noundef %z) {\n  %r = call nnan float @llvm.copysign.f32(float %x, float %z)\n  ret float %r\n}\n\ndefine float @src2(float noundef %x, float noundef %y, float noundef %z) {\n  %s = call float @llvm.copysign.f32(float %y, float %z)\n  %r = call ninf float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\ndefine float @tgt2(float noundef %x, float noundef %y, float noundef %z) {\n  %r = call ninf float @llvm.copysign.f32(float %x, float %z)\n  ret float %r\n}\n\ndefine float @src3(float noundef %x, float noundef %y, float noundef %z) {\n  %s = call float @llvm.copysign.f32(float %y, float %z)\n  %r = call nsz float @llvm.copysign.f32(float %x, float %s)\n  ret float %r\n}\n\ndefine float @tgt3(float noundef %x, float noundef %y, float noundef %z) {\n  %r = call nsz float @llvm.copysign.f32(float %x, float %z)\n  ret float %r\n}\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": []
  },
  "verified": true
}