{
  "bug_id": "89516",
  "issue_url": "https://github.com/llvm/llvm-project/issues/89516",
  "bug_type": "miscompilation",
  "base_commit": "18bb175428f520aaa4a5e388bd3b680a1a7c60c0",
  "knowledge_cutoff": "2024-04-20T22:58:16Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "6309440c218778db027306826993e484eab2be17",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          2720,
          2726
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "foldSelectWithSRem"
      ]
    }
  },
  "patch": "commit 6309440c218778db027306826993e484eab2be17\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Apr 21 22:41:32 2024 +0800\n\n     [InstCombine] Fix unexpected overwriting in `foldSelectWithSRem` (#89539)\n    \n    Fixes #89516\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 0262af28068b..73600206a55c 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -2720,7 +2720,7 @@ static Instruction *foldSelectWithSRem(SelectInst &SI, InstCombinerImpl &IC,\n   // %cnd = icmp slt i32 %rem, 0\n   // %add = add i32 %rem, %n\n   // %sel = select i1 %cnd, i32 %add, i32 %rem\n-  if (match(TrueVal, m_Add(m_Value(RemRes), m_Value(Remainder))) &&\n+  if (match(TrueVal, m_Add(m_Specific(RemRes), m_Value(Remainder))) &&\n       match(RemRes, m_SRem(m_Value(Op), m_Specific(Remainder))) &&\n       IC.isKnownToBeAPowerOfTwo(Remainder, /*OrZero*/ true) &&\n       FalseVal == RemRes)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select-divrem.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "rem_euclid_pow2_false_arm_folded",
          "test_body": "define i32 @rem_euclid_pow2_false_arm_folded(i32 %n) {\n  %rem = srem i32 %n, 2\n  %nonneg = icmp sge i32 %rem, 0\n  %res = select i1 %nonneg, i32 %rem, i32 1\n  ret i32 %res\n}\n"
        },
        {
          "test_name": "pr89516",
          "test_body": "define i8 @pr89516(i8 %n, i8 %x) {\n  %cond = icmp slt i8 %x, 0\n  %pow2 = shl nuw i8 1, %n\n  %srem = srem i8 1, %pow2\n  %add = add nuw i8 %srem, %pow2\n  %res = select i1 %cond, i8 %add, i8 %srem\n  ret i8 %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "miscompile of vanilla integer code by InstCombine",
    "body": "https://alive2.llvm.org/ce/z/jRfVLr\r\n\r\nthis function:\r\n```llvm\r\ndefine i8 @f(i8 %0, i8 %1) {\r\n  %3 = icmp slt i8 %1, 0\r\n  %4 = shl i8 1, %0\r\n  %5 = srem i8 1, %4\r\n  %6 = add i8 %5, %4\r\n  %7 = select i1 %3, i8 %6, i8 %5\r\n  ret i8 %7\r\n}\r\n```\r\nis getting mis-optimized to:\r\n```llvm\r\ndefine i8 @f(i8 %0, i8 %1) {\r\n  %3 = icmp ne i8 %0, 0\r\n  %4 = zext i1 %3 to i8\r\n  ret i8 %4\r\n}\r\n```\r\nhere I'll just give Alive's work:\r\n```\r\nExample:\r\ni8 %#0 = #x00 (0)\r\ni8 %#1 = #xff (255, -1)\r\n\r\nSource:\r\ni1 %#3 = #x1 (1)\r\ni8 %#4 = #x01 (1)\r\ni8 %#5 = #x00 (0)\r\ni8 %#6 = #x01 (1)\r\ni8 %#7 = #x01 (1)\r\n\r\nTarget:\r\ni1 %#3 = #x0 (0)\r\ni8 %#4 = #x00 (0)\r\nSource value: #x01 (1)\r\nTarget value: #x00 (0)\r\n```\r\n\r\ncc @nunoplopes @hatsunespica",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}