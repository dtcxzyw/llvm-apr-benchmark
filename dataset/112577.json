{
  "bug_id": "112577",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112577",
  "bug_type": "miscompilation",
  "base_commit": "76196998e25b98d81abc437708622261810782ca",
  "knowledge_cutoff": "2024-10-16T16:30:23Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "709abacdc350d63c61888607edb28ce272daa0a0",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          17224,
          17232
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::collectValuesToDemote"
      ]
    }
  },
  "patch": "commit 709abacdc350d63c61888607edb28ce272daa0a0\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Oct 18 13:54:30 2024 -0700\n\n    [SLP]Check that operand of abs does not overflow before making it part of minbitwidth transformation\n    \n    Need to check that the operand of the abs intrinsic can be safely\n    truncated before making it part of the minbitwidth transformation.\n    \n    Fixes #112577\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex e7b52fbdcc3b..e1aa6127ac03 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -17224,9 +17224,25 @@ bool BoUpSLP::collectValuesToDemote(\n                 MaskedValueIsZero(I->getOperand(1), Mask, SimplifyQuery(*DL)));\n       });\n     };\n+    auto AbsChecker = [&](unsigned BitWidth, unsigned OrigBitWidth) {\n+      assert(BitWidth <= OrigBitWidth && \"Unexpected bitwidths!\");\n+      return all_of(E.Scalars, [&](Value *V) {\n+        auto *I = cast<Instruction>(V);\n+        unsigned SignBits = OrigBitWidth - BitWidth;\n+        APInt Mask = APInt::getBitsSetFrom(OrigBitWidth, BitWidth - 1);\n+        unsigned Op0SignBits =\n+            ComputeNumSignBits(I->getOperand(0), *DL, 0, AC, nullptr, DT);\n+        return SignBits <= Op0SignBits &&\n+               ((SignBits != Op0SignBits &&\n+                 !isKnownNonNegative(I->getOperand(0), SimplifyQuery(*DL))) ||\n+                MaskedValueIsZero(I->getOperand(0), Mask, SimplifyQuery(*DL)));\n+      });\n+    };\n     if (ID != Intrinsic::abs) {\n       Operands.push_back(getOperandEntry(&E, 1));\n       CallChecker = CompChecker;\n+    } else {\n+      CallChecker = AbsChecker;\n     }\n     InstructionCost BestCost =\n         std::numeric_limits<InstructionCost::CostType>::max();\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/abs-overflow-incorrect-minbws.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(i32 %n) {\nentry:\n  %n1 = add i32 %n, 1\n  %zn1 = zext nneg i32 %n1 to i64\n  %m1 = mul nuw nsw i64 %zn1, 273837369\n  %a1 = call i64 @llvm.abs.i64(i64 %m1, i1 true)\n  %t1 = trunc i64 %a1 to i32\n  %n2 = add i32 %n, 2\n  %zn2 = zext nneg i32 %n2 to i64\n  %m2 = mul nuw nsw i64 %zn2, 273837369\n  %a2 = call i64 @llvm.abs.i64(i64 %m2, i1 true)\n  %t2 = trunc i64 %a2 to i32\n  %res1 = add i32 %t1, %t2\n  ret i32 %res1\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i64 @llvm.abs.i64(i64, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] SLP Vectorizer miscompile from reducing abs bitwidth",
    "body": "Bisected miscompile to this change https://github.com/llvm/llvm-project/commit/4a1c53f9fabbc18d436dcd4d5b572b82656fbbf9\r\n\r\nReduced internal test to this example:\r\nhttps://godbolt.org/z/njWYP9exd\r\n```llvm\r\ndefine dso_local noundef i32 @test(i32 %n) local_unnamed_addr #0 {\r\nentry:\r\n  %n1 = add i32 %n, 1\r\n  %zn1 = zext nneg i32 %n1 to i64\r\n  %m1 = mul nuw nsw i64 %zn1, 273837369\r\n  %a1 = call noundef i64 @llvm.abs.i64(i64 %m1, i1 true)\r\n  %t1 = trunc i64 %a1 to i32\r\n  %n2 = add i32 %n, 2\r\n  %zn2 = zext nneg i32 %n2 to i64\r\n  %m2 = mul nuw nsw i64 %zn2, 273837369\r\n  %a2 = call noundef i64 @llvm.abs.i64(i64 %m2, i1 true)\r\n  %t2 = trunc i64 %a2 to i32\r\n\r\n  %res1 = add i32 %t1, %t2\r\n  ret i32 %res1\r\n}\r\n```\r\nRunning slp vectorizer on it gives\r\n```llvm\r\ndefine dso_local noundef i32 @test(i32 %n) local_unnamed_addr {\r\n  %0 = insertelement <2 x i32> poison, i32 %n, i32 0\r\n  %1 = shufflevector <2 x i32> %0, <2 x i32> poison, <2 x i32> zeroinitializer\r\n  %2 = add <2 x i32> %1, <i32 1, i32 2>\r\n  %3 = mul <2 x i32> %2, <i32 273837369, i32 273837369>\r\n  %4 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %3, i1 false)\r\n  %5 = extractelement <2 x i32> %4, i32 0\r\n  %6 = extractelement <2 x i32> %4, i32 1\r\n  %res1 = add i32 %5, %6\r\n  ret i32 %res1\r\n}\r\n```\r\nwhich is incorrect. Counterexample by alive2:\r\nhttps://alive2.llvm.org/ce/z/cEcY-u",
    "author": "danilaml",
    "labels": [
      "miscompilation",
      "release:backport",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "AZero13",
        "body": "Do we plan on backporting this to 19.x @alexey-bataev "
      }
    ]
  }
}