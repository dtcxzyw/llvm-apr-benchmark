{
  "bug_id": "115574",
  "issue_url": "https://github.com/llvm/llvm-project/issues/115574",
  "bug_type": "miscompilation",
  "base_commit": "00bdce1c373a1c5b756f4cf694a952ef702d0294",
  "knowledge_cutoff": "2024-11-09T01:49:48Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstSimplify"
  ],
  "hints": {
    "fix_commit": "1af627b592dd15bbe58136f902ced46251fc344d",
    "components": [
      "InstructionSimplify"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        [
          27,
          32
        ],
        [
          4731,
          4742
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        "simplifySelectWithICmpCond"
      ]
    }
  },
  "patch": "commit 1af627b592dd15bbe58136f902ced46251fc344d\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Feb 2 19:04:23 2025 +0800\n\n    [InstSimplify] Add additional checks when substituting pointers (#125385)\n    \n    Compile-time impact:\n    https://llvm-compile-time-tracker.com/compare.php?from=d09b521624f263b5f1296f8d4771836b97e600cb&to=e437ba2cb83bb965e13ef00727671896f03ff84f&stat=instructions:u\n    IR diff looks acceptable.\n    Closes https://github.com/llvm/llvm-project/issues/115574\n\ndiff --git a/llvm/lib/Analysis/InstructionSimplify.cpp b/llvm/lib/Analysis/InstructionSimplify.cpp\nindex 21c937530cd8..3cbc4107433e 100644\n--- a/llvm/lib/Analysis/InstructionSimplify.cpp\n+++ b/llvm/lib/Analysis/InstructionSimplify.cpp\n@@ -27,6 +27,7 @@\n #include \"llvm/Analysis/CmpInstAnalysis.h\"\n #include \"llvm/Analysis/ConstantFolding.h\"\n #include \"llvm/Analysis/InstSimplifyFolder.h\"\n+#include \"llvm/Analysis/Loads.h\"\n #include \"llvm/Analysis/LoopAnalysisManager.h\"\n #include \"llvm/Analysis/MemoryBuiltins.h\"\n #include \"llvm/Analysis/OverflowInstAnalysis.h\"\n@@ -4731,12 +4732,16 @@ static Value *simplifySelectWithICmpCond(Value *CondVal, Value *TrueVal,\n   // the arms of the select. See if substituting this value into the arm and\n   // simplifying the result yields the same value as the other arm.\n   if (Pred == ICmpInst::ICMP_EQ) {\n-    if (Value *V = simplifySelectWithEquivalence({{CmpLHS, CmpRHS}}, TrueVal,\n-                                                 FalseVal, Q, MaxRecurse))\n-      return V;\n-    if (Value *V = simplifySelectWithEquivalence({{CmpRHS, CmpLHS}}, TrueVal,\n-                                                 FalseVal, Q, MaxRecurse))\n-      return V;\n+    if (CmpLHS->getType()->isIntOrIntVectorTy() ||\n+        canReplacePointersIfEqual(CmpLHS, CmpRHS, Q.DL))\n+      if (Value *V = simplifySelectWithEquivalence({{CmpLHS, CmpRHS}}, TrueVal,\n+                                                   FalseVal, Q, MaxRecurse))\n+        return V;\n+    if (CmpLHS->getType()->isIntOrIntVectorTy() ||\n+        canReplacePointersIfEqual(CmpRHS, CmpLHS, Q.DL))\n+      if (Value *V = simplifySelectWithEquivalence({{CmpRHS, CmpLHS}}, TrueVal,\n+                                                   FalseVal, Q, MaxRecurse))\n+        return V;\n \n     Value *X;\n     Value *Y;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstSimplify/select-icmp.ll",
      "commands": [
        "opt < %s -passes=instsimplify -S"
      ],
      "tests": [
        {
          "test_name": "icmp_ptr_eq_replace_null",
          "test_body": "target datalayout = \"p:8:8:8\"\n\ndefine ptr @icmp_ptr_eq_replace_null(ptr %a) {\n  %cmp = icmp eq ptr %a, null\n  %sel = select i1 %cmp, ptr null, ptr %a\n  ret ptr %sel\n}\n"
        },
        {
          "test_name": "ptr_eq_replace_same_underlying_object",
          "test_body": "target datalayout = \"p:8:8:8\"\n\ndefine ptr @ptr_eq_replace_same_underlying_object(ptr %st, i64 %i, i64 %j) {\n  %a = getelementptr inbounds i8, ptr %st, i64 %i\n  %b = getelementptr inbounds i8, ptr %st, i64 %j\n  %cmp = icmp eq ptr %a, %b\n  %sel = select i1 %cmp, ptr %a, ptr %b\n  ret ptr %sel\n}\n"
        },
        {
          "test_name": "icmp_ptr_eq_replace",
          "test_body": "target datalayout = \"p:8:8:8\"\n\ndefine ptr @icmp_ptr_eq_replace(ptr %a, ptr %b) {\n  %cmp = icmp eq ptr %a, %b\n  %sel = select i1 %cmp, ptr %a, ptr %b\n  ret ptr %sel\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstSimplify] wrong folding of pointer comparison `select (icmp eq ptr ...)`",
    "body": "https://github.com/llvm/llvm-project/blob/c93e001ca695e905cb965b36d63f7a348d1dd809/llvm/lib/Analysis/InstructionSimplify.cpp#L148-L167\r\n\r\nAlive2 report: https://alive2.llvm.org/ce/z/aux2zY\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine ptr @smin_test8.2(ptr %a, ptr %b, ptr %c) {\r\n#0:\r\n  %cmp1 = icmp eq ptr %a, %b\r\n  %umin1 = select i1 %cmp1, ptr %a, ptr %b\r\n  %cmp2 = icmp slt ptr %b, %c\r\n  %umin2 = select i1 %cmp2, ptr %b, ptr %c\r\n  %cmp3 = icmp ult ptr %umin2, %a\r\n  %umin3 = select i1 %cmp3, ptr %umin2, ptr %a\r\n  %cmp4 = icmp slt ptr %c, %umin3\r\n  %res = select i1 %cmp4, ptr %umin1, ptr %umin3\r\n  ret ptr %res\r\n}\r\n=>\r\ndefine ptr @smin_test8.2(ptr %a, ptr %b, ptr %c) {\r\n#0:\r\n  %cmp2 = icmp slt ptr %b, %c\r\n  %umin2 = select i1 %cmp2, ptr %b, ptr %c\r\n  %cmp3 = icmp ult ptr %umin2, %a\r\n  %umin3 = select i1 %cmp3, ptr %umin2, ptr %a\r\n  %cmp4 = icmp slt ptr %c, %umin3\r\n  %res = select i1 %cmp4, ptr %b, ptr %umin3\r\n  ret ptr %res\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Value mismatch\r\n\r\nExample:\r\nptr %a = pointer(non-local, block_id=0, offset=1) / Address=#x1\r\nptr %b = pointer(non-local, block_id=1, offset=0) / Address=#x1\r\nptr %c = pointer(non-local, block_id=0, offset=-8) / Address=#x8\r\n\r\nSource:\r\ni1 %cmp1 = #x1 (1)\r\nptr %umin1 = pointer(non-local, block_id=0, offset=1) / Address=#x1\r\ni1 %cmp2 = #x0 (0)\r\nptr %umin2 = pointer(non-local, block_id=0, offset=-8) / Address=#x8\r\ni1 %cmp3 = #x0 (0)\r\nptr %umin3 = pointer(non-local, block_id=0, offset=1) / Address=#x1\r\ni1 %cmp4 = #x1 (1)\r\nptr %res = pointer(non-local, block_id=0, offset=1) / Address=#x1\r\n\r\nSOURCE MEMORY STATE\r\n===================\r\nNON-LOCAL BLOCKS:\r\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: 0\r\nBlock 1 >\tsize: 1\talign: 1\talloc type: 0\talive: true\taddress: 1\r\nBlock 2 >\tsize: 1\talign: 1\talloc type: 0\talive: true\taddress: 2\r\nBlock 3 >\tsize: 3\talign: 1\talloc type: 0\talive: true\taddress: 8\r\n\r\nTarget:\r\ni1 %cmp2 = #x0 (0)\r\nptr %umin2 = pointer(non-local, block_id=0, offset=-8) / Address=#x8\r\ni1 %cmp3 = #x0 (0)\r\nptr %umin3 = pointer(non-local, block_id=0, offset=1) / Address=#x1\r\ni1 %cmp4 = #x1 (1)\r\nptr %res = pointer(non-local, block_id=1, offset=0) / Address=#x1\r\nSource value: pointer(non-local, block_id=0, offset=1) / Address=#x1\r\nTarget value: pointer(non-local, block_id=1, offset=0) / Address=#x1\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:analysis"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}