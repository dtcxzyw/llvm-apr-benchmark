{
  "bug_id": "105988",
  "issue_url": "https://github.com/llvm/llvm-project/issues/105988",
  "bug_type": "miscompilation",
  "base_commit": "4b0c0ec6b8065e611640f44adce94e2da12b3a3a",
  "knowledge_cutoff": "2024-08-25T14:54:29Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e1d22512906e69846c8f6a2d29b30832b7c12b46",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15975,
          15980
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::computeMinimumValueSizes"
      ]
    }
  },
  "patch": "commit e1d22512906e69846c8f6a2d29b30832b7c12b46\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Aug 26 11:30:13 2024 -0700\n\n    [SLP]Fix minbitwidth analysis for gather nodes with icmp users.\n    \n    If the node is not in MinBWs container and the user node is icmp node,\n    the compiler should not check the type size of the user instruction, it\n    is always 1 and is not good for actual bitwidth analysis.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/105988\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex def73e8d0c0d..ed47ed661ab9 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15975,6 +15975,10 @@ void BoUpSLP::computeMinimumValueSizes() {\n                     auto It = MinBWs.find(TE);\n                     if (It != MinBWs.end() && It->second.first > UserTESz)\n                       return true;\n+                    // The size of icmp is always 1 and should not be\n+                    // considered.\n+                    if (TE->getOpcode() == Instruction::ICmp)\n+                      return true;\n                     return DL->getTypeSizeInBits(U->getType()) > UserTESz;\n                   }));\n         })) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/gather-with-cmp-user.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i1 @test(i32 %g, i16 %d) {\nentry:\n  %0 = and i16 %d, 1\n  %xor.i.i = xor i32 %g, 1\n  %conv1.i.i = trunc i32 %xor.i.i to i8\n  %notsub.i = add i8 %conv1.i.i, -1\n  %cmp.i.i = icmp sgt i8 %notsub.i, -3\n  %conv3.i.i = zext i1 %cmp.i.i to i32\n  %cmp4.i.i = icmp sgt i32 %xor.i.i, %conv3.i.i\n  %conv1.1.i.i = trunc i32 %g to i8\n  %notsub25.i = add i8 %conv1.1.i.i, -1\n  %cmp.1.i.i = icmp sgt i8 %notsub25.i, -3\n  %conv3.1.i.i = zext i1 %cmp.1.i.i to i32\n  %cmp4.1.i.i = icmp sgt i32 %g, %conv3.1.i.i\n  %notsub26.i = add i8 %conv1.1.i.i, -9\n  %cmp.i17.i = icmp sgt i8 %notsub26.i, -3\n  %conv3.i18.i = zext i1 %cmp.i17.i to i32\n  %cmp4.i19.i = icmp sgt i32 %g, %conv3.i18.i\n  %notsub27.i = add i8 %conv1.i.i, -9\n  %cmp.1.i22.i = icmp sgt i8 %notsub27.i, -3\n  %conv3.1.i23.i = zext i1 %cmp.1.i22.i to i32\n  %cmp4.1.i24.i = icmp sgt i32 %xor.i.i, %conv3.1.i23.i\n  %1 = and i1 %cmp4.i19.i, %cmp4.1.i24.i\n  %2 = and i1 %cmp4.i.i, %1\n  %3 = and i1 %cmp4.1.i.i, %2\n  ret i1 %3\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Miscompile at O3",
    "body": "Reproducer: https://gist.github.com/dtcxzyw/117dc735db97658ea852d30fd896242a\r\n```console\r\n> bin/clang -O0 test.c -w -I/usr/include/csmith && ./a.out\r\nchecksum = BDCB7A78\r\n> bin/clang -O3 test.c -w -mllvm -inline-threshold=100000 -I/usr/include/csmith && ./a.out\r\nchecksum = 9198FC41\r\n```\r\n\r\nllvm version: 1193f7d6487d2d94009f8d8d27da3907136482b9\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/GCXoe9\r\n```\r\n; bin/opt -passes=slp-vectorizer test.ll -S\r\n\r\ntarget datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine i1 @main(i32 %g.promoted.i.i, i16 %d.promoted.i.i) {\r\nentry:\r\n  %0 = and i16 %d.promoted.i.i, 1\r\n  %xor.i.i = xor i32 %g.promoted.i.i, 1\r\n  %conv1.i.i = trunc i32 %xor.i.i to i8\r\n  %notsub.i = add i8 %conv1.i.i, -1\r\n  %cmp.i.i = icmp sgt i8 %notsub.i, -3\r\n  %conv3.i.i = zext i1 %cmp.i.i to i32\r\n  %cmp4.i.i = icmp sgt i32 %xor.i.i, %conv3.i.i\r\n  %conv1.1.i.i = trunc i32 %g.promoted.i.i to i8\r\n  %notsub25.i = add i8 %conv1.1.i.i, -1\r\n  %cmp.1.i.i = icmp sgt i8 %notsub25.i, -3\r\n  %conv3.1.i.i = zext i1 %cmp.1.i.i to i32\r\n  %cmp4.1.i.i = icmp sgt i32 %g.promoted.i.i, %conv3.1.i.i\r\n  %notsub26.i = add i8 %conv1.1.i.i, -9\r\n  %cmp.i17.i = icmp sgt i8 %notsub26.i, -3\r\n  %conv3.i18.i = zext i1 %cmp.i17.i to i32\r\n  %cmp4.i19.i = icmp sgt i32 %g.promoted.i.i, %conv3.i18.i\r\n  %notsub27.i = add i8 %conv1.i.i, -9\r\n  %cmp.1.i22.i = icmp sgt i8 %notsub27.i, -3\r\n  %conv3.1.i23.i = zext i1 %cmp.1.i22.i to i32\r\n  %cmp4.1.i24.i = icmp sgt i32 %xor.i.i, %conv3.1.i23.i\r\n  %1 = and i1 %cmp4.i19.i, %cmp4.1.i24.i\r\n  %2 = and i1 %cmp4.i.i, %1\r\n  %3 = and i1 %cmp4.1.i.i, %2\r\n  ret i1 %3\r\n}\r\n```\r\nOutput:\r\n```\r\ndefine i1 @main(i32 %g.promoted.i.i, i16 %d.promoted.i.i) {\r\nentry:\r\n  %0 = and i16 %d.promoted.i.i, 1\r\n  %xor.i.i = xor i32 %g.promoted.i.i, 1\r\n  %1 = trunc i32 %g.promoted.i.i to i8\r\n  %2 = insertelement <2 x i8> poison, i8 %1, i32 0\r\n  %3 = trunc i32 %xor.i.i to i8\r\n  %4 = insertelement <2 x i8> %2, i8 %3, i32 1\r\n  %5 = shufflevector <2 x i8> %4, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>\r\n  %6 = add <4 x i8> %5, <i8 -9, i8 -9, i8 -1, i8 -1>\r\n  %7 = icmp sgt <4 x i8> %6, <i8 -3, i8 -3, i8 -3, i8 -3>\r\n  %8 = zext <4 x i1> %7 to <4 x i8>\r\n  %9 = sext <2 x i8> %4 to <2 x i32>\r\n  %10 = shufflevector <2 x i32> %9, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>\r\n  %11 = zext <4 x i8> %8 to <4 x i32>\r\n  %12 = icmp sgt <4 x i32> %10, %11\r\n  %13 = call i1 @llvm.vector.reduce.and.v4i1(<4 x i1> %12)\r\n  ret i1 %13\r\n}\r\n```\r\n\r\ncc @alexey-bataev "
      }
    ]
  }
}