{
  "bug_id": "111040",
  "issue_url": "https://github.com/llvm/llvm-project/issues/111040",
  "bug_type": "crash",
  "base_commit": "b3e0bd3d284dec705386b1efcae40dd51b763010",
  "knowledge_cutoff": "2024-10-03T18:42:52Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "45b526afa26e76e0c351e947ac8f0e4b55aa760b",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          6196,
          6206
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::setVectorizedCallDecision"
      ]
    }
  },
  "patch": "commit 45b526afa26e76e0c351e947ac8f0e4b55aa760b\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun Oct 6 10:34:37 2024 +0100\n\n    [LV] Honor uniform-after-vectorization in setVectorizedCallDecision.\n    \n    The legacy cost model always computes the cost for uniforms as cost of\n    VF = 1, but VPWidenCallRecipes would be created, as\n    setVectorizedCallDecisions would not consider uniform calls.\n    \n    Fix setVectorizedCallDecision to set to Scalarize, if the call is\n    uniform-after-vectorization.\n    \n    This fixes a bug in VPlan construction uncovered by the VPlan-based\n    cost model.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/111040.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 6e082b1c134d..35c042b3ab7f 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -6196,11 +6196,12 @@ void LoopVectorizationCostModel::setVectorizedCallDecision(ElementCount VF) {\n           getScalarizationOverhead(CI, VF, CostKind);\n \n       ScalarCost = ScalarCallCost * VF.getKnownMinValue() + ScalarizationCost;\n-      // Honor ForcedScalars decision.\n+      // Honor ForcedScalars and UniformAfterVectorization decisions.\n       // TODO: For calls, it might still be more profitable to widen. Use\n       // VPlan-based cost model to compare different options.\n-      if (VF.isVector() && ForcedScalar != ForcedScalars.end() &&\n-          ForcedScalar->second.contains(CI)) {\n+      if (VF.isVector() && ((ForcedScalar != ForcedScalars.end() &&\n+                             ForcedScalar->second.contains(CI)) ||\n+                            isUniformAfterVectorization(CI, VF))) {\n         setCallWideningDecision(CI, VF, CM_Scalarize, nullptr,\n                                 Intrinsic::not_intrinsic, std::nullopt,\n                                 ScalarCost);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/replicate-uniform-call.ll",
      "commands": [
        "opt -p loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "smax_call_uniform",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @smax_call_uniform(ptr %dst, i64 %x) {\nentry:\n  %c = icmp ult i8 -68, -69\n  %mul = mul nuw nsw i64 %x, 0\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c, label %loop.latch, label %else\n\nelse:                                             ; preds = %loop.header\n  %rem = urem i64 %mul, %x\n  %smax = tail call i64 @llvm.smax.i64(i64 %rem, i64 0)\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %else, %loop.header\n  %p = phi i64 [ 1, %loop.header ], [ %smax, %else ]\n  %add = add i64 %p, 1\n  %gep = getelementptr i64, ptr %dst, i64 %add\n  store i64 0, ptr %gep, align 8\n  %iv.next = add i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, 0\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i64 @llvm.smax.i64(i64, i64) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Assertion failed in LoopVectorize.cpp:7401",
    "body": "When I compiled the code with -O2 flag, it crashed:\r\n\r\n```c\r\n#include <stdint.h>\r\nstatic uint8_t b = 188;\r\nvoid c();\r\nlong d(int e, int p2, short j) {\r\n  long f = 0, a = 1;\r\n  unsigned long g;\r\n  int h;\r\n  if (e < 0 || j < 0)\r\n    return 1;\r\n  h = 0;\r\n  for (; h < p2; h++) {\r\n    a *= j + 1;\r\n    g = e * a;\r\n    f += g % (j + 1);\r\n  }\r\n  if (f < 0)\r\n    return 0;\r\n  return f;\r\n}\r\nvoid i();\r\nint64_t k() {\r\n  uint32_t l[][8][10] = {0, 4, 7, 1, 4, 3446557846};\r\n  int64_t m[10];\r\n  int h;\r\n  for (h = 0; c + h < 10; h++)\r\n    m[(int)d(5, l[0][0][5] - 3446557842, b - 187) + h] = 1;\r\n  i(m);\r\n  uint8_t *n = &b;\r\n  uint8_t **o;\r\n  o[0] = &n;\r\n}\r\n```\r\n\r\nThe crash is:\r\n```\r\nclang: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:7401: llvm::VectorizationFactor llvm::LoopVectorizationPlanner::computeBestVF(): Assertion `(BestFactor.Width == LegacyVF.Width || planContainsAdditionalSimplifications(getPlanFor(BestFactor.Width), CostCtx, OrigLoop)) && \" VPlan cost model and legacy cost model disagreed\"' failed.\r\n```\r\n\r\nDetails can be found here: https://godbolt.org/z/hqP8vMG7b\r\n",
    "author": "cardigan1008",
    "labels": [
      "regression",
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "shafik",
        "body": "This is a regression in trunk: https://godbolt.org/z/a53x7oxhq"
      }
    ]
  },
  "verified": true
}