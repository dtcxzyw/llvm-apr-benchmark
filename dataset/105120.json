{
  "bug_id": "105120",
  "issue_url": "https://github.com/llvm/llvm-project/issues/105120",
  "bug_type": "crash",
  "base_commit": "6ec3130a38e6982a61e7fa74bd5223c95c0bb918",
  "knowledge_cutoff": "2024-08-20T17:04:34Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e31252bf54dedadfe78b36d07ea6084156faa38a",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          7227,
          7232
        ],
        [
          7238,
          7247
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::buildTree_rec"
      ]
    }
  },
  "patch": "commit e31252bf54dedadfe78b36d07ea6084156faa38a\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Aug 21 11:47:00 2024 -0700\n\n    [SLP]Fix PR105120: fix the order of phi nodes vectorization.\n    \n    The operands of the phi nodes should be vectorized in the same order, in\n    which they were created, otherwise the compiler may crash when trying\n    to correctly build dependency for nodes with non-schedulable\n    instructions for gather/buildvector nodes.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/105120\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex dee6d688b1b9..848e0de20e7b 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -7227,6 +7227,22 @@ void BoUpSLP::buildTree_rec(ArrayRef<Value *> VL, unsigned Depth,\n \n   unsigned ShuffleOrOp = S.isAltShuffle() ?\n                 (unsigned) Instruction::ShuffleVector : S.getOpcode();\n+  auto CreateOperandNodes = [&](TreeEntry *TE, const auto &Operands) {\n+    // Postpone PHI nodes creation\n+    SmallVector<unsigned> PHIOps;\n+    for (unsigned I : seq<unsigned>(Operands.size())) {\n+      ArrayRef<Value *> Op = Operands[I];\n+      if (Op.empty())\n+        continue;\n+      InstructionsState S = getSameOpcode(Op, *TLI);\n+      if (S.getOpcode() != Instruction::PHI || S.isAltShuffle())\n+        buildTree_rec(Op, Depth + 1, {TE, I});\n+      else\n+        PHIOps.push_back(I);\n+    }\n+    for (unsigned I : PHIOps)\n+      buildTree_rec(Operands[I], Depth + 1, {TE, I});\n+  };\n   switch (ShuffleOrOp) {\n     case Instruction::PHI: {\n       auto *PH = cast<PHINode>(VL0);\n@@ -7238,10 +7254,12 @@ void BoUpSLP::buildTree_rec(ArrayRef<Value *> VL, unsigned Depth,\n       // Keeps the reordered operands to avoid code duplication.\n       PHIHandler Handler(*DT, PH, VL);\n       Handler.buildOperands();\n-      for (unsigned I : seq<unsigned>(0, PH->getNumOperands()))\n+      for (unsigned I : seq<unsigned>(PH->getNumOperands()))\n         TE->setOperand(I, Handler.getOperands(I));\n-      for (unsigned I : seq<unsigned>(0, PH->getNumOperands()))\n-        buildTree_rec(Handler.getOperands(I), Depth + 1, {TE, I});\n+      SmallVector<ArrayRef<Value *>> Operands(PH->getNumOperands());\n+      for (unsigned I : seq<unsigned>(PH->getNumOperands()))\n+        Operands[I] = Handler.getOperands(I);\n+      CreateOperandNodes(TE, Operands);\n       return;\n     }\n     case Instruction::ExtractValue:\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/phi-nodes-as-operand-reorder.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb3, %bb\n  %phi = phi i32 [ 0, %bb ], [ %add5, %bb3 ]\n  %phi2 = phi i32 [ 0, %bb ], [ %add, %bb3 ]\n  br i1 false, label %bb6, label %bb3\n\nbb3:                                              ; preds = %bb1\n  %add = add i32 0, 0\n  %add4 = add i32 0, 0\n  %add5 = add i32 %phi, 0\n  br i1 false, label %bb6, label %bb1\n\nbb6:                                              ; preds = %bb3, %bb1\n  %phi7 = phi i32 [ %phi2, %bb1 ], [ %add4, %bb3 ]\n  %phi8 = phi i32 [ %phi, %bb1 ], [ %add5, %bb3 ]\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Instruction does not dominate all uses! LLVM ERROR: Broken module found, compilation aborted!",
    "body": "To reproduce run the test below with -passes slp-vectorizer -slp-threshold=-99999\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @wombat() #0 gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb3, %bb\r\n  %phi = phi i32 [ 0, %bb ], [ %add5, %bb3 ]\r\n  %phi2 = phi i32 [ 0, %bb ], [ %add, %bb3 ]\r\n  br i1 false, label %bb6, label %bb3\r\n\r\nbb3:                                              ; preds = %bb1\r\n  %add = add i32 0, 0\r\n  %add4 = add i32 0, 0\r\n  %add5 = add i32 %phi, 0\r\n  br i1 false, label %bb6, label %bb1\r\n\r\nbb6:                                              ; preds = %bb3, %bb1\r\n  %phi7 = phi i32 [ %phi2, %bb1 ], [ %add4, %bb3 ]\r\n  %phi8 = phi i32 [ %phi, %bb1 ], [ %add5, %bb3 ]\r\n  ret void\r\n}\r\n```\r\nReproducer: https://godbolt.org/z/W96s5a1cb\r\n\r\n```\r\nInstruction does not dominate all uses!\r\n  %2 = shufflevector <2 x i32> %0, <2 x i32> <i32 0, i32 poison>, <2 x i32> <i32 2, i32 1>\r\n  %1 = add <2 x i32> zeroinitializer, %2\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes slp-vectorizer -slp-threshold=-99999 <source>\r\n1.\tRunning pass \"verify\" on module \"<source>\"\r\n #0 0x0000000004f84b88 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f84b88)\r\n #1 0x0000000004f822fc SignalHandler(int) Signals.cpp:0:0\r\n #2 0x000074dcb3642520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x000074dcb36969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x000074dcb3642476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x000074dcb36287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00000000007b7cc5 llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\r\n #7 0x0000000004ebea18 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4ebea18)\r\n #8 0x0000000004dbae20 llvm::VerifierPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4dbae20)\r\n #9 0x00000000008dbbde llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8dbbde)\r\n#10 0x0000000004d7ebb0 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d7ebb0)\r\n#11 0x00000000008e6912 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8e6912)\r\n#12 0x00000000008d97ec optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d97ec)\r\n#13 0x000074dcb3629d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#14 0x000074dcb3629e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#15 0x00000000008d127e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d127e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "llvm:crash"
    ],
    "comments": [
      {
        "author": "alexey-bataev",
        "body": "Yes"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "66775f8ccdcc8264ef349518e1c59d96d4227823"
}