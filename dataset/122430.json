{
  "bug_id": "122430",
  "issue_url": "https://github.com/llvm/llvm-project/issues/122430",
  "bug_type": "miscompilation",
  "base_commit": "7ebf0df409c8e2045b7725da5a912854c58e0f6a",
  "knowledge_cutoff": "2025-01-10T08:23:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "547ba9730bf05df3383150f730a689f2c8336206",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13443,
          13456
        ],
        [
          13475,
          13481
        ],
        [
          13498,
          13509
        ],
        [
          13523,
          13534
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::isGatherShuffledSingleRegisterEntry"
      ]
    }
  },
  "patch": "commit 547ba9730bf05df3383150f730a689f2c8336206\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Jan 10 08:13:46 2025 -0800\n\n    [SLP]Fix mask generation after cost estimation\n    \n    When estimating the cost of entries shuffles for buildvectors, need to\n    rebuild original mask, not a generated submask, used for subregisters\n    analysis.\n    \n    Fixes #122430\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex cdfec332af37..e0d1f0e1d43a 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13443,14 +13443,15 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n       for_each(SubMask, [&](int &Idx) {\n         if (Idx == PoisonMaskElem)\n           return;\n-        Idx = (Idx % VF) - (MinElement % VF) +\n+        Idx = (Idx % VF) - ((MinElement / NewVF) * NewVF) +\n               (Idx >= static_cast<int>(VF) ? NewVF : 0);\n       });\n-      VF = NewVF;\n+    } else {\n+      NewVF = VF;\n     }\n \n     constexpr TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput;\n-    auto *VecTy = getWidenedType(VL.front()->getType(), VF);\n+    auto *VecTy = getWidenedType(VL.front()->getType(), NewVF);\n     auto *MaskVecTy = getWidenedType(VL.front()->getType(), SubMask.size());\n     auto GetShuffleCost = [&,\n                            &TTI = *TTI](ArrayRef<int> Mask,\n@@ -13475,7 +13476,7 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n       APInt DemandedElts = APInt::getAllOnes(SubMask.size());\n       bool IsIdentity = true;\n       for (auto [I, Idx] : enumerate(FirstMask)) {\n-        if (Idx >= static_cast<int>(VF)) {\n+        if (Idx >= static_cast<int>(NewVF)) {\n           Idx = PoisonMaskElem;\n         } else {\n           DemandedElts.clearBit(I);\n@@ -13498,12 +13499,12 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n       APInt DemandedElts = APInt::getAllOnes(SubMask.size());\n       bool IsIdentity = true;\n       for (auto [I, Idx] : enumerate(SecondMask)) {\n-        if (Idx < static_cast<int>(VF) && Idx >= 0) {\n+        if (Idx < static_cast<int>(NewVF) && Idx >= 0) {\n           Idx = PoisonMaskElem;\n         } else {\n           DemandedElts.clearBit(I);\n           if (Idx != PoisonMaskElem) {\n-            Idx -= VF;\n+            Idx -= NewVF;\n             IsIdentity &= static_cast<int>(I) == Idx;\n           }\n         }\n@@ -13523,12 +13524,24 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n                                       /*Extract=*/false, CostKind);\n     const TreeEntry *BestEntry = nullptr;\n     if (FirstShuffleCost < ShuffleCost) {\n-      copy(FirstMask, std::next(Mask.begin(), Part * VL.size()));\n+      std::for_each(std::next(Mask.begin(), Part * VL.size()),\n+                    std::next(Mask.begin(), (Part + 1) * VL.size()),\n+                    [&](int &Idx) {\n+                      if (Idx >= static_cast<int>(VF))\n+                        Idx = PoisonMaskElem;\n+                    });\n       BestEntry = Entries.front();\n       ShuffleCost = FirstShuffleCost;\n     }\n     if (SecondShuffleCost < ShuffleCost) {\n-      copy(SecondMask, std::next(Mask.begin(), Part * VL.size()));\n+      std::for_each(std::next(Mask.begin(), Part * VL.size()),\n+                    std::next(Mask.begin(), (Part + 1) * VL.size()),\n+                    [&](int &Idx) {\n+                      if (Idx < static_cast<int>(VF))\n+                        Idx = PoisonMaskElem;\n+                      else\n+                        Idx -= VF;\n+                    });\n       BestEntry = Entries[1];\n       ShuffleCost = SecondShuffleCost;\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/bv-shuffle-mask.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i16 @test(i16 %v1, i16 %v2) {\nentry:\n  %0 = and i16 %v2, %v1\n  %1 = and i16 %0, 0\n  %2 = and i16 %1, 0\n  %3 = icmp ne i16 %2, 0\n  %.not5.not = or i1 %3, false\n  %inc.1.1.i82.i.i = or i16 %v2, 0\n  %inc.143.1.i98.i.i = or i16 0, 0\n  %4 = or i16 %inc.1.1.i82.i.i, 0\n  %5 = or i16 %4, 0\n  %6 = or i16 %5, 0\n  %7 = icmp ne i16 %6, 0\n  %.not7.not = or i1 false, %7\n  %8 = or i1 %.not5.not, %.not7.not\n  %9 = and i16 0, %inc.143.1.i98.i.i\n  %10 = and i16 %9, 0\n  %11 = icmp ne i16 %10, 0\n  %.not5.not.1 = or i1 %11, false\n  %inc.143.i76.i.i.1 = or i16 %v1, 0\n  %inc.143.1.i98.i.i.1 = or i16 0, 0\n  %12 = or i16 0, %inc.143.i76.i.i.1\n  %13 = or i16 %12, 0\n  %14 = or i16 %13, 0\n  %15 = icmp ne i16 %14, 0\n  %.not7.not.1 = or i1 false, %15\n  %16 = or i1 %.not5.not.1, %.not7.not.1\n  %17 = or i1 %8, %16\n  %18 = and i16 0, %inc.143.1.i98.i.i.1\n  %19 = and i16 %18, 0\n  %20 = icmp ne i16 %19, 0\n  %.not5.not.2 = or i1 %20, false\n  %inc.143.i76.i.i.2 = or i16 %v1, 0\n  %inc.143.1.i98.i.i.2 = or i16 0, 0\n  %21 = or i16 0, %inc.143.i76.i.i.2\n  %22 = or i16 %21, 0\n  %23 = or i16 %22, 0\n  %24 = icmp ne i16 %23, 0\n  %.not7.not.2 = or i1 false, %24\n  %25 = or i1 %.not5.not.2, %.not7.not.2\n  %26 = or i1 false, %25\n  %27 = and i16 0, %inc.143.1.i98.i.i.2\n  %28 = and i16 %27, 0\n  %29 = icmp ne i16 %28, 0\n  %.not5.not.3 = or i1 %29, false\n  %inc.143.i76.i.i.3 = or i16 %v1, 0\n  %30 = or i16 0, %inc.143.i76.i.i.3\n  %31 = or i16 %30, 0\n  %32 = or i16 %31, 0\n  %33 = icmp ne i16 %32, 0\n  %.not7.not.3 = or i1 false, %33\n  %34 = or i1 %.not5.not.3, %.not7.not.3\n  %35 = select i1 %34, i1 true, i1 %25\n  %36 = select i1 %35, i1 true, i1 %16\n  %37 = select i1 %36, i1 true, i1 %8\n  %spec.select31 = select i1 %37, i32 0, i32 0\n  %38 = or i1 false, %34\n  store i32 %spec.select31, ptr null, align 4\n  ret i16 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Miscompilation",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/BopDTn\n```\n; bin/opt -passes=slp-vectorizer test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i16 @test(ptr %p1, i16 %inc.143.i76136.lcssa158200.i.i, i16 %inc.1.1.i82139.lcssa160199.i.i, i16 %inc.143.1.i98142.lcssa162198.i.i) {\nentry:\n  %0 = and i16 %inc.1.1.i82139.lcssa160199.i.i, %inc.143.i76136.lcssa158200.i.i\n  %1 = and i16 %0, 0\n  %2 = and i16 %1, 0\n  %3 = icmp ne i16 %2, 0\n  %.not5.not = or i1 %3, false\n  %inc.1.1.i82.i.i = or i16 %inc.1.1.i82139.lcssa160199.i.i, 0\n  %inc.143.1.i98.i.i = or i16 %inc.143.1.i98142.lcssa162198.i.i, 0\n  %4 = or i16 %inc.1.1.i82.i.i, 0\n  %5 = or i16 %4, 0\n  %6 = or i16 %5, 0\n  %7 = icmp ne i16 %6, 0\n  %.not7.not = or i1 false, %7\n  %8 = or i1 %.not5.not, %.not7.not\n  %9 = and i16 %inc.1.1.i82.i.i, 0\n  %10 = and i16 0, %inc.143.1.i98.i.i\n  %11 = and i16 %10, 0\n  %12 = icmp ne i16 %11, 0\n  %.not5.not.1 = or i1 %12, false\n  %inc.143.i76.i.i.1 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %inc.143.1.i98.i.i.1 = or i16 %inc.143.1.i98142.lcssa162198.i.i, 0\n  %13 = or i16 0, %inc.143.i76.i.i.1\n  %14 = or i16 %13, 0\n  %15 = or i16 %14, 0\n  %16 = icmp ne i16 %15, 0\n  %.not7.not.1 = or i1 false, %16\n  %17 = or i1 %.not5.not.1, %.not7.not.1\n  %18 = or i1 %8, %17\n  %19 = and i16 0, %inc.143.i76.i.i.1\n  %20 = and i16 0, %inc.143.1.i98.i.i.1\n  %21 = and i16 %20, 0\n  %22 = icmp ne i16 %21, 0\n  %.not5.not.2 = or i1 %22, false\n  %inc.143.i76.i.i.2 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %inc.143.1.i98.i.i.2 = or i16 %inc.143.1.i98142.lcssa162198.i.i, 1\n  %23 = or i16 0, %inc.143.i76.i.i.2\n  %24 = or i16 %23, 0\n  %25 = or i16 %24, 0\n  %26 = icmp ne i16 %25, 0\n  %.not7.not.2 = or i1 false, %26\n  %27 = or i1 %.not5.not.2, %.not7.not.2\n  %28 = or i1 false, %27\n  %29 = and i16 0, %inc.143.i76.i.i.2\n  %30 = and i16 0, %inc.143.1.i98.i.i.2\n  %31 = and i16 %30, 0\n  %32 = icmp ne i16 %31, 0\n  %.not5.not.3 = or i1 %32, false\n  %inc.143.i76.i.i.3 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %33 = or i16 0, %inc.143.i76.i.i.3\n  %34 = or i16 %33, 0\n  %35 = or i16 %34, 0\n  %36 = icmp ne i16 %35, 0\n  %.not7.not.3 = or i1 false, %36\n  %37 = or i1 %.not5.not.3, %.not7.not.3\n  %38 = select i1 %37, i1 true, i1 %27\n  %39 = select i1 %38, i1 true, i1 %17\n  %40 = select i1 %39, i1 true, i1 %8\n  %spec.select31 = select i1 %40, i32 0, i32 0\n  %41 = or i1 false, %37\n  store i32 %spec.select31, ptr %p1, align 4\n  ret i16 %inc.143.i76.i.i.3\n}\n```\n```\n\n----------------------------------------\ndefine i16 @test(ptr %p1, i16 %inc.143.i76136.lcssa158200.i.i, i16 %inc.1.1.i82139.lcssa160199.i.i, i16 %inc.143.1.i98142.lcssa162198.i.i) {\nentry:\n  %#0 = and i16 %inc.1.1.i82139.lcssa160199.i.i, %inc.143.i76136.lcssa158200.i.i\n  %#1 = and i16 %#0, 0\n  %#2 = and i16 %#1, 0\n  %#3 = icmp ne i16 %#2, 0\n  %.not5.not = or i1 %#3, 0\n  %inc.1.1.i82.i.i = or i16 %inc.1.1.i82139.lcssa160199.i.i, 0\n  %inc.143.1.i98.i.i = or i16 %inc.143.1.i98142.lcssa162198.i.i, 0\n  %#4 = or i16 %inc.1.1.i82.i.i, 0\n  %#5 = or i16 %#4, 0\n  %#6 = or i16 %#5, 0\n  %#7 = icmp ne i16 %#6, 0\n  %.not7.not = or i1 0, %#7\n  %#8 = or i1 %.not5.not, %.not7.not\n  %#10 = and i16 0, %inc.143.1.i98.i.i\n  %#11 = and i16 %#10, 0\n  %#12 = icmp ne i16 %#11, 0\n  %.not5.not.1 = or i1 %#12, 0\n  %inc.143.i76.i.i.1 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %inc.143.1.i98.i.i.1 = or i16 %inc.143.1.i98142.lcssa162198.i.i, 0\n  %#13 = or i16 0, %inc.143.i76.i.i.1\n  %#14 = or i16 %#13, 0\n  %#15 = or i16 %#14, 0\n  %#16 = icmp ne i16 %#15, 0\n  %.not7.not.1 = or i1 0, %#16\n  %#17 = or i1 %.not5.not.1, %.not7.not.1\n  %#20 = and i16 0, %inc.143.1.i98.i.i.1\n  %#21 = and i16 %#20, 0\n  %#22 = icmp ne i16 %#21, 0\n  %.not5.not.2 = or i1 %#22, 0\n  %inc.143.i76.i.i.2 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %inc.143.1.i98.i.i.2 = or i16 %inc.143.1.i98142.lcssa162198.i.i, 1\n  %#23 = or i16 0, %inc.143.i76.i.i.2\n  %#24 = or i16 %#23, 0\n  %#25 = or i16 %#24, 0\n  %#26 = icmp ne i16 %#25, 0\n  %.not7.not.2 = or i1 0, %#26\n  %#27 = or i1 %.not5.not.2, %.not7.not.2\n  %#30 = and i16 0, %inc.143.1.i98.i.i.2\n  %#31 = and i16 %#30, 0\n  %#32 = icmp ne i16 %#31, 0\n  %.not5.not.3 = or i1 %#32, 0\n  %inc.143.i76.i.i.3 = or i16 %inc.143.i76136.lcssa158200.i.i, 0\n  %#33 = or i16 0, %inc.143.i76.i.i.3\n  %#34 = or i16 %#33, 0\n  %#35 = or i16 %#34, 0\n  %#36 = icmp ne i16 %#35, 0\n  %.not7.not.3 = or i1 0, %#36\n  %#37 = or i1 %.not5.not.3, %.not7.not.3\n  %#38 = select i1 %#37, i1 1, i1 %#27\n  %#39 = select i1 %#38, i1 1, i1 %#17\n  %#40 = select i1 %#39, i1 1, i1 %#8\n  %spec.select31 = select i1 %#40, i32 0, i32 0\n  store i32 %spec.select31, ptr %p1, align 4\n  ret i16 %inc.143.i76.i.i.3\n}\n=>\ndefine i16 @test(ptr %p1, i16 %inc.143.i76136.lcssa158200.i.i, i16 %inc.1.1.i82139.lcssa160199.i.i, i16 %inc.143.1.i98142.lcssa162198.i.i) {\nentry:\n  %#0 = insertelement <4 x i16> poison, i16 %inc.143.1.i98142.lcssa162198.i.i, i32 0\n  %#1 = insertelement <4 x i16> %#0, i16 %inc.1.1.i82139.lcssa160199.i.i, i32 1\n  %#2 = shufflevector <4 x i16> %#1, <4 x i16> poison, 0, 0, 0, 1\n  %#3 = insertelement <4 x i16> { 1, 0, 0, poison }, i16 %inc.143.i76136.lcssa158200.i.i, i32 3\n  %#4 = or <4 x i16> %#2, %#3\n  %#5 = and <4 x i16> %#2, %#3\n  %#6 = shufflevector <4 x i16> %#4, <4 x i16> %#5, 0, 1, 2, 7\n  %#7 = shufflevector <4 x i16> %#3, <4 x i16> poison, 0, 4294967295\n  %#8 = insertelement <2 x i16> %#7, i16 %inc.1.1.i82139.lcssa160199.i.i, i32 1\n  %#9 = shufflevector <2 x i16> %#8, <2 x i16> poison, 0, 0, 0, 1\n  %#10 = or <4 x i16> %#9, { 0, 0, 0, 0 }\n  %#17 = and <4 x i16> %#6, { 0, 0, 0, 0 }\n  %#18 = and <4 x i16> %#17, { 0, 0, 0, 0 }\n  %#19 = icmp ne <4 x i16> %#18, { 0, 0, 0, 0 }\n  %#20 = or <4 x i1> %#19, { 0, 0, 0, 0 }\n  %#21 = or <4 x i16> %#10, { 0, 0, 0, 0 }\n  %#22 = or <4 x i16> %#21, { 0, 0, 0, 0 }\n  %#23 = or <4 x i16> %#22, { 0, 0, 0, 0 }\n  %#24 = icmp ne <4 x i16> %#23, { 0, 0, 0, 0 }\n  %#25 = or <4 x i1> { 0, 0, 0, 0 }, %#24\n  %#26 = or <4 x i1> %#20, %#25\n  %#32 = freeze <4 x i1> %#26\n  %#33 = reduce_or <4 x i1> %#32\n  %spec.select31 = select i1 %#33, i32 0, i32 0\n  store i32 %spec.select31, ptr %p1, align 4\n  %#36 = extractelement <4 x i16> %#10, i32 0\n  ret i16 %#36\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\nptr %p1 = pointer(non-local, block_id=1, offset=0) / Address=#x04\ni16 %inc.143.i76136.lcssa158200.i.i = #x0000 (0)\ni16 %inc.1.1.i82139.lcssa160199.i.i = poison\ni16 %inc.143.1.i98142.lcssa162198.i.i = poison\n\nSource:\ni16 %#0 = poison\ni16 %#1 = poison\ni16 %#2 = poison\ni1 %#3 = poison\ni1 %.not5.not = poison\ni16 %inc.1.1.i82.i.i = poison\ni16 %inc.143.1.i98.i.i = poison\ni16 %#4 = poison\ni16 %#5 = poison\ni16 %#6 = poison\ni1 %#7 = poison\ni1 %.not7.not = poison\ni1 %#8 = poison\ni16 %#10 = poison\ni16 %#11 = poison\ni1 %#12 = poison\ni1 %.not5.not.1 = poison\ni16 %inc.143.i76.i.i.1 = #x0000 (0)\ni16 %inc.143.1.i98.i.i.1 = poison\ni16 %#13 = #x0000 (0)\ni16 %#14 = #x0000 (0)\ni16 %#15 = #x0000 (0)\ni1 %#16 = #x0 (0)\ni1 %.not7.not.1 = #x0 (0)\ni1 %#17 = poison\ni16 %#20 = poison\ni16 %#21 = poison\ni1 %#22 = poison\ni1 %.not5.not.2 = poison\ni16 %inc.143.i76.i.i.2 = #x0000 (0)\ni16 %inc.143.1.i98.i.i.2 = poison\ni16 %#23 = #x0000 (0)\ni16 %#24 = #x0000 (0)\ni16 %#25 = #x0000 (0)\ni1 %#26 = #x0 (0)\ni1 %.not7.not.2 = #x0 (0)\ni1 %#27 = poison\ni16 %#30 = poison\ni16 %#31 = poison\ni1 %#32 = poison\ni1 %.not5.not.3 = poison\ni16 %inc.143.i76.i.i.3 = #x0000 (0)\ni16 %#33 = #x0000 (0)\ni16 %#34 = #x0000 (0)\ni16 %#35 = #x0000 (0)\ni1 %#36 = #x0 (0)\ni1 %.not7.not.3 = #x0 (0)\ni1 %#37 = poison\ni1 %#38 = poison\ni1 %#39 = poison\ni1 %#40 = poison\ni32 %spec.select31 = poison\n\nSOURCE MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 4\talloc type: 0\talive: false\taddress: 0\nBlock 1 >\tsize: 4\talign: 1\talloc type: 0\talive: true\taddress: 4\n\nTarget:\n<4 x i16> %#0 = < poison, poison, poison, poison >\n<4 x i16> %#1 = < poison, poison, poison, poison >\n<4 x i16> %#2 = < poison, poison, poison, poison >\n<4 x i16> %#3 = < #x0001 (1), #x0000 (0), #x0000 (0), #x0000 (0) >\n<4 x i16> %#4 = < poison, poison, poison, poison >\n<4 x i16> %#5 = < poison, poison, poison, poison >\n<4 x i16> %#6 = < poison, poison, poison, poison >\n<2 x i16> %#7 = < #x0001 (1), poison >\n<2 x i16> %#8 = < #x0001 (1), poison >\n<4 x i16> %#9 = < #x0001 (1), #x0001 (1), #x0001 (1), poison >\n<4 x i16> %#10 = < #x0001 (1), #x0001 (1), #x0001 (1), poison >\n<4 x i16> %#17 = < poison, poison, poison, poison >\n<4 x i16> %#18 = < poison, poison, poison, poison >\n<4 x i1> %#19 = < poison, poison, poison, poison >\n<4 x i1> %#20 = < poison, poison, poison, poison >\n<4 x i16> %#21 = < #x0001 (1), #x0001 (1), #x0001 (1), poison >\n<4 x i16> %#22 = < #x0001 (1), #x0001 (1), #x0001 (1), poison >\n<4 x i16> %#23 = < #x0001 (1), #x0001 (1), #x0001 (1), poison >\n<4 x i1> %#24 = < #x1 (1), #x1 (1), #x1 (1), poison >\n<4 x i1> %#25 = < #x1 (1), #x1 (1), #x1 (1), poison >\n<4 x i1> %#26 = < poison, poison, poison, poison >\n<4 x i1> %#32 = < #x1 (1), #x1 (1), #x1 (1), #x1 (1) >\ni1 %#33 = #x1 (1)\ni32 %spec.select31 = #x00000000 (0)\ni16 %#36 = #x0001 (1)\nSource value: #x0000 (0)\nTarget value: #x0001 (1)\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```\n\nllvm version: 76fac9c01736b1254e42427f8e0910c0f1d01fba\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer",
      "generated by fuzzer"
    ],
    "comments": []
  }
}