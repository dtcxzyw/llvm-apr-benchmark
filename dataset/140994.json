{
  "bug_id": "140994",
  "issue_url": "https://github.com/llvm/llvm-project/issues/140994",
  "bug_type": "miscompilation",
  "base_commit": "7c080e267722ba14439e2f35789c5c293672ab84",
  "knowledge_cutoff": "2025-05-22T02:48:33Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "3ec0c5c7fef03985b43432c6b914c289d8a5435e",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          25,
          30
        ],
        [
          3879,
          3889
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::visitSelectInst"
      ]
    }
  },
  "patch": "commit 3ec0c5c7fef03985b43432c6b914c289d8a5435e\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sat May 31 16:25:10 2025 +0800\n\n    [InstCombine] Propagate FMF from select instead of fcmp (#141010)\n    \n    Previously,\n    https://github.com/llvm/llvm-project/commit/3d6b53980ce4ee855484fc8ae6ac3f99c85e48c3\n    propagates FMF from fcmp to avoid performance regressions. With the help\n    of https://github.com/llvm/llvm-project/pull/139861,\n    https://github.com/llvm/llvm-project/pull/141015, and\n    https://github.com/llvm/llvm-project/pull/141914, we can still convert\n    SPF into fabs/minnum/maxnum intrinsics even if some flags are missing.\n    This patch propagates FMF from select to address the long-standing\n    issue.\n    \n    Closes https://github.com/llvm/llvm-project/issues/140994.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex a791fc5db669..cca5705f6b58 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -25,6 +25,7 @@\n #include \"llvm/IR/ConstantRange.h\"\n #include \"llvm/IR/Constants.h\"\n #include \"llvm/IR/DerivedTypes.h\"\n+#include \"llvm/IR/FMF.h\"\n #include \"llvm/IR/IRBuilder.h\"\n #include \"llvm/IR/InstrTypes.h\"\n #include \"llvm/IR/Instruction.h\"\n@@ -3879,11 +3880,16 @@ Instruction *InstCombinerImpl::visitSelectInst(SelectInst &SI) {\n       // (X ugt Y) ? X : Y -> (X ole Y) ? Y : X\n       if (FCmp->hasOneUse() && FCmpInst::isUnordered(Pred)) {\n         FCmpInst::Predicate InvPred = FCmp->getInversePredicate();\n-        // FIXME: The FMF should propagate from the select, not the fcmp.\n         Value *NewCond = Builder.CreateFCmpFMF(InvPred, Cmp0, Cmp1, FCmp,\n                                                FCmp->getName() + \".inv\");\n+        // Propagate ninf/nnan from fcmp to select.\n+        FastMathFlags FMF = SI.getFastMathFlags();\n+        if (FCmp->hasNoNaNs())\n+          FMF.setNoNaNs(true);\n+        if (FCmp->hasNoInfs())\n+          FMF.setNoInfs(true);\n         Value *NewSel =\n-            Builder.CreateSelectFMF(NewCond, FalseVal, TrueVal, FCmp);\n+            Builder.CreateSelectFMF(NewCond, FalseVal, TrueVal, FMF);\n         return replaceInstUsesWith(SI, NewSel);\n       }\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/clamp-to-minmax.ll",
      "commands": [
        "opt < %s -passes=instcombine -S",
        "opt < %s -passes=instcombine -use-constant-fp-for-fixed-length-splat -use-constant-int-for-fixed-length-splat -S"
      ],
      "tests": [
        {
          "test_name": "clamp_negative_same_op",
          "test_body": "define half @clamp_negative_same_op(half %x) {\n  %inner_cmp = fcmp nnan ninf nsz ult half %x, 2.550000e+02\n  %inner_sel = select i1 %inner_cmp, half %x, half 2.550000e+02\n  %outer_cmp = fcmp nnan ninf nsz ult half %x, 1.000000e+00\n  %r = select i1 %outer_cmp, half %inner_sel, half 1.000000e+00\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_unordered_nonstrict_maxmin",
          "test_body": "define half @clamp_float_fast_unordered_nonstrict_maxmin(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ult half %x, 2.550000e+02\n  %min = select i1 %cmp2, half %x, half 2.550000e+02\n  %cmp1 = fcmp nnan ninf nsz ule half %x, 1.000000e+00\n  %r = select i1 %cmp1, half 1.000000e+00, half %min\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_ordered_nonstrict_minmax",
          "test_body": "define half @clamp_float_fast_ordered_nonstrict_minmax(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ogt half %x, 1.000000e+00\n  %max = select i1 %cmp2, half %x, half 1.000000e+00\n  %cmp1 = fcmp nnan ninf nsz oge half %x, 2.550000e+02\n  %r = select i1 %cmp1, half 2.550000e+02, half %max\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_ordered_strict_maxmin",
          "test_body": "define half @clamp_float_fast_ordered_strict_maxmin(half %x) {\n  %cmp2 = fcmp nnan ninf nsz olt half %x, 2.550000e+02\n  %min = select i1 %cmp2, half %x, half 2.550000e+02\n  %cmp1 = fcmp nnan ninf nsz olt half %x, 1.000000e+00\n  %r = select i1 %cmp1, half 1.000000e+00, half %min\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_ordered_strict_minmax",
          "test_body": "define half @clamp_float_fast_ordered_strict_minmax(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ogt half %x, 1.000000e+00\n  %max = select i1 %cmp2, half %x, half 1.000000e+00\n  %cmp1 = fcmp nnan ninf nsz ogt half %x, 2.550000e+02\n  %r = select i1 %cmp1, half 2.550000e+02, half %max\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_ordered_nonstrict_maxmin",
          "test_body": "define half @clamp_float_fast_ordered_nonstrict_maxmin(half %x) {\n  %cmp2 = fcmp nnan ninf nsz olt half %x, 2.550000e+02\n  %min = select i1 %cmp2, half %x, half 2.550000e+02\n  %cmp1 = fcmp nnan ninf nsz ole half %x, 1.000000e+00\n  %r = select i1 %cmp1, half 1.000000e+00, half %min\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_unordered_nonstrict_minmax",
          "test_body": "define half @clamp_float_fast_unordered_nonstrict_minmax(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ugt half %x, 1.000000e+00\n  %max = select i1 %cmp2, half %x, half 1.000000e+00\n  %cmp1 = fcmp nnan ninf nsz uge half %x, 2.550000e+02\n  %r = select i1 %cmp1, half 2.550000e+02, half %max\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_test_1",
          "test_body": "define half @clamp_test_1(half %x) {\n  %inner_cmp = fcmp nnan ninf nsz ult half %x, 2.550000e+02\n  %inner_sel = select i1 %inner_cmp, half %x, half 2.550000e+02\n  %outer_cmp = fcmp nnan ninf nsz ugt half %x, 1.000000e+00\n  %r = select i1 %outer_cmp, half %inner_sel, half 1.000000e+00\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_unordered_strict_maxmin",
          "test_body": "define half @clamp_float_fast_unordered_strict_maxmin(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ult half %x, 2.550000e+02\n  %min = select i1 %cmp2, half %x, half 2.550000e+02\n  %cmp1 = fcmp nnan ninf nsz ult half %x, 1.000000e+00\n  %r = select i1 %cmp1, half 1.000000e+00, half %min\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_negative_wrong_const",
          "test_body": "define half @clamp_negative_wrong_const(half %x) {\n  %inner_cmp = fcmp nnan ninf nsz ult half %x, 2.550000e+02\n  %inner_sel = select i1 %inner_cmp, half %x, half 2.550000e+02\n  %outer_cmp = fcmp nnan ninf nsz ugt half %x, 5.120000e+02\n  %r = select i1 %outer_cmp, half %inner_sel, half 5.120000e+02\n  ret half %r\n}\n"
        },
        {
          "test_name": "clamp_float_fast_unordered_strict_minmax",
          "test_body": "define half @clamp_float_fast_unordered_strict_minmax(half %x) {\n  %cmp2 = fcmp nnan ninf nsz ugt half %x, 1.000000e+00\n  %max = select i1 %cmp2, half %x, half 1.000000e+00\n  %cmp1 = fcmp nnan ninf nsz ugt half %x, 2.550000e+02\n  %r = select i1 %cmp1, half 2.550000e+02, half %max\n  ret half %r\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/fcmp-fadd-select.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_fcmp_ugt_fadd_select_fastmath_preserve",
          "test_body": "define half @test_fcmp_ugt_fadd_select_fastmath_preserve(half %in) {\n  %cmp1 = fcmp ugt half %in, 0.000000e+00\n  %add = fadd nnan half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_uge_fadd_select_fastmath_preserve",
          "test_body": "define half @test_fcmp_uge_fadd_select_fastmath_preserve(half %in) {\n  %cmp1 = fcmp uge half %in, 0.000000e+00\n  %add = fadd nnan half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ugt_fadd_select_neg_constant",
          "test_body": "define half @test_fcmp_ugt_fadd_select_neg_constant(half %in) {\n  %cmp1 = fcmp ugt half %in, -0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ugt_fadd_select_constant_swapped",
          "test_body": "define half @test_fcmp_ugt_fadd_select_constant_swapped(half %in) {\n  %cmp1 = fcmp ugt half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half 1.000000e+00, half %add\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_uge_fadd_select_constant_swapped",
          "test_body": "define half @test_fcmp_uge_fadd_select_constant_swapped(half %in) {\n  %cmp1 = fcmp uge half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half 1.000000e+00, half %add\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ult_fadd_select_fastmath_preserve",
          "test_body": "define half @test_fcmp_ult_fadd_select_fastmath_preserve(half %in) {\n  %cmp1 = fcmp ult half %in, 0.000000e+00\n  %add = fadd nnan half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ule_fadd_select_constant_swapped",
          "test_body": "define half @test_fcmp_ule_fadd_select_constant_swapped(half %in) {\n  %cmp1 = fcmp ule half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half 1.000000e+00, half %add\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_uge_fadd_select_neg_constant",
          "test_body": "define half @test_fcmp_uge_fadd_select_neg_constant(half %in) {\n  %cmp1 = fcmp uge half %in, -0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ule_fadd_select_neg_constant",
          "test_body": "define half @test_fcmp_ule_fadd_select_neg_constant(half %in) {\n  %cmp1 = fcmp ule half %in, -0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ult_fadd_select_constant_swapped",
          "test_body": "define half @test_fcmp_ult_fadd_select_constant_swapped(half %in) {\n  %cmp1 = fcmp ult half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half 1.000000e+00, half %add\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_uge_fadd_select_constant",
          "test_body": "define half @test_fcmp_uge_fadd_select_constant(half %in) {\n  %cmp1 = fcmp uge half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ult_fadd_select_neg_constant",
          "test_body": "define half @test_fcmp_ult_fadd_select_neg_constant(half %in) {\n  %cmp1 = fcmp ult half %in, -0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ugt_fadd_select_constant",
          "test_body": "define half @test_fcmp_ugt_fadd_select_constant(half %in) {\n  %cmp1 = fcmp ugt half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ule_fadd_select_constant",
          "test_body": "define half @test_fcmp_ule_fadd_select_constant(half %in) {\n  %cmp1 = fcmp ule half %in, 0.000000e+00\n  %add = fadd half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        },
        {
          "test_name": "test_fcmp_ule_fadd_select_fastmath_preserve",
          "test_body": "define half @test_fcmp_ule_fadd_select_fastmath_preserve(half %in) {\n  %cmp1 = fcmp ule half %in, 0.000000e+00\n  %add = fadd nnan half %in, 1.000000e+00\n  %sel = select nnan nsz i1 %cmp1, half %add, half 1.000000e+00\n  ret half %sel\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/minmax-fold.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "common_factor_umax_extra_use_both",
          "test_body": "declare void @extra_use(i32)\n\ndefine i32 @common_factor_umax_extra_use_both(i32 %a, i32 %b, i32 %c) {\n  %cmp_bc = icmp ugt i32 %b, %c\n  %max_bc = select i1 %cmp_bc, i32 %b, i32 %c\n  %cmp_ba = icmp ugt i32 %b, %a\n  %max_ba = select i1 %cmp_ba, i32 %b, i32 %a\n  %cmp_bc_ba = icmp ugt i32 %max_bc, %max_ba\n  %max_abc = select i1 %cmp_bc_ba, i32 %max_bc, i32 %max_ba\n  call void @extra_use(i32 %max_bc)\n  call void @extra_use(i32 %max_ba)\n  ret i32 %max_abc\n}\n"
        },
        {
          "test_name": "not_min_of_min",
          "test_body": "define half @not_min_of_min(i8 %i, half %x) {\n  %cmp1 = fcmp nnan ninf nsz ult half %x, 1.000000e+00\n  %min1 = select i1 %cmp1, half %x, half 1.000000e+00\n  %cmp2 = fcmp nnan ninf nsz ult half %x, 2.000000e+00\n  %min2 = select i1 %cmp2, half %x, half 2.000000e+00\n  %cmp3 = icmp ult i8 %i, 16\n  %r = select i1 %cmp3, half %min1, half %min2\n  ret half %r\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/minmax-fp.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "t15",
          "test_body": "define i8 @t15(half %a) {\n  %1 = fcmp nsz ule half %a, 0.000000e+00\n  %2 = fptosi half %a to i8\n  %3 = select i1 %1, i8 %2, i8 0\n  ret i8 %3\n}\n"
        },
        {
          "test_name": "fneg_fmax",
          "test_body": "define half @fneg_fmax(half %x, half %y) {\n  %n1 = fneg half %x\n  %n2 = fneg half %y\n  %cond = fcmp nnan ogt half %n1, %n2\n  %max = select i1 %cond, half %n1, half %n2\n  ret half %max\n}\n"
        },
        {
          "test_name": "t11",
          "test_body": "define i8 @t11(half %a, half %b) {\n  %1 = fcmp nnan ninf nsz ult half %b, %a\n  %2 = fptosi half %a to i8\n  %3 = fptosi half %b to i8\n  %4 = select i1 %1, i8 %3, i8 %2\n  ret i8 %4\n}\n"
        },
        {
          "test_name": "fneg_fmin",
          "test_body": "define double @fneg_fmin(double %x, double %y) {\n  %n1 = fneg double %x\n  %n2 = fneg double %y\n  %cond = fcmp nnan nsz ule double %n1, %n2\n  %max = select i1 %cond, double %n1, double %n2\n  ret double %max\n}\n"
        },
        {
          "test_name": "t14_commute",
          "test_body": "define i8 @t14_commute(half %a) {\n  %1 = fcmp ule half %a, 0.000000e+00\n  %2 = fptosi half %a to i8\n  %3 = select i1 %1, i8 0, i8 %2\n  ret i8 %3\n}\n"
        },
        {
          "test_name": "t9",
          "test_body": "define i8 @t9(half %a) {\n  %1 = fcmp ult half %a, 0.000000e+00\n  %2 = fptosi half %a to i8\n  %3 = select i1 %1, i8 %2, i8 0\n  ret i8 %3\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/unordered-fcmp-select.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "select_min_ugt",
          "test_body": "define half @select_min_ugt(half %a, half %b) {\n  %cmp = fcmp nnan ninf nsz ugt half %a, %b\n  %sel = select i1 %cmp, half %b, half %a\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_fcmp_une",
          "test_body": "define half @select_fcmp_une(half %a, half %b) {\n  %cmp = fcmp une half %a, %b\n  %sel = select nnan i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_min_uge",
          "test_body": "define half @select_min_uge(half %a, half %b) {\n  %cmp = fcmp nsz uge half %a, %b\n  %sel = select nnan ninf nsz i1 %cmp, half %b, half %a\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_max_uge",
          "test_body": "define half @select_max_uge(half %a, half %b) {\n  %cmp = fcmp nnan uge half %a, %b\n  %sel = select ninf i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_fcmp_ueq",
          "test_body": "define half @select_fcmp_ueq(half %a, half %b) {\n  %cmp = fcmp ueq half %a, %b\n  %sel = select nnan i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_min_ule",
          "test_body": "define half @select_min_ule(half %a, half %b) {\n  %cmp = fcmp ule half %a, %b\n  %sel = select ninf i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_max_ugt",
          "test_body": "define half @select_max_ugt(half %a, half %b) {\n  %cmp = fcmp ugt half %a, %b\n  %sel = select i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_max_ule",
          "test_body": "define half @select_max_ule(half %a, half %b) {\n  %cmp = fcmp nnan ninf nsz ule half %a, %b\n  %sel = select nsz i1 %cmp, half %b, half %a\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_min_ult",
          "test_body": "define half @select_min_ult(half %a, half %b) {\n  %cmp = fcmp nsz ult half %a, %b\n  %sel = select nnan ninf nsz i1 %cmp, half %a, half %b\n  ret half %sel\n}\n"
        },
        {
          "test_name": "select_max_ult",
          "test_body": "define half @select_max_ult(half %a, half %b) {\n  %cmp = fcmp ult half %a, %b\n  %sel = select nnan ninf i1 %cmp, half %b, half %a\n  ret half %sel\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `(fcmp une T, F) ? T : F --> T` should not rely on the nsz flag on fcmp",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/_FgncC\n```\ndefine double @src(double %x, double %y) {\n  %cmp = fcmp nsz une double %x, %y\n  %cond = select i1 %cmp, double %x, double %y\n  ret double %cond\n}\n\ndefine double @tgt(double returned %x, double %y) {\n  ret double %x\n}\n```\n```\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\ndouble %x = #x8000000000000000 (-0.0)\ndouble %y = #x0000000000000000 (+0.0)\n\nSource:\ni1 %cmp = #x0 (0)\ndouble %cond = #x0000000000000000 (+0.0)\n\nTarget:\nSource value: #x0000000000000000 (+0.0)\nTarget value: #x8000000000000000 (-0.0)\n```\n`nsz` flag should not be propagated from fcmp into select.\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}