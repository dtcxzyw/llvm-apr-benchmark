{
  "bug_id": "134696",
  "issue_url": "https://github.com/llvm/llvm-project/issues/134696",
  "bug_type": "crash",
  "base_commit": "b71123f1272ee081b18b8ced1925d6e9300e7310",
  "knowledge_cutoff": "2025-04-07T17:26:23Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "995fd47944f471e985e34d7da8c0667059decbac",
    "components": [
      "LoopAccessAnalysis"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/LoopAccessAnalysis.cpp": [
        [
          1781,
          1787
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/LoopAccessAnalysis.cpp": [
        "MemoryDepChecker::couldPreventStoreLoadForward"
      ]
    }
  },
  "patch": "commit 995fd47944f471e985e34d7da8c0667059decbac\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sat Apr 12 20:05:37 2025 +0100\n\n    [LAA] Make sure MaxVF for Store-Load forward safe dep distances is pow2.\n    \n    MaxVF computed in couldPreventStoreLoadFowrard may not be a power of 2,\n    as CommonStride may not be a power-of-2.\n    \n    This can cause crashes after 78777a20. Use bit_floor to make sure it is\n    a suitable power-of-2.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/134696.\n\ndiff --git a/llvm/lib/Analysis/LoopAccessAnalysis.cpp b/llvm/lib/Analysis/LoopAccessAnalysis.cpp\nindex a37ed5c706bd..0cb1332eb337 100644\n--- a/llvm/lib/Analysis/LoopAccessAnalysis.cpp\n+++ b/llvm/lib/Analysis/LoopAccessAnalysis.cpp\n@@ -1781,7 +1781,8 @@ bool MemoryDepChecker::couldPreventStoreLoadForward(uint64_t Distance,\n           MaxStoreLoadForwardSafeDistanceInBits &&\n       MaxVFWithoutSLForwardIssuesPowerOf2 !=\n           VectorizerParams::MaxVectorWidth * TypeByteSize) {\n-    uint64_t MaxVF = MaxVFWithoutSLForwardIssuesPowerOf2 / CommonStride;\n+    uint64_t MaxVF =\n+        bit_floor(MaxVFWithoutSLForwardIssuesPowerOf2 / CommonStride);\n     uint64_t MaxVFInBits = MaxVF * TypeByteSize * 8;\n     MaxStoreLoadForwardSafeDistanceInBits =\n         std::min(MaxStoreLoadForwardSafeDistanceInBits, MaxVFInBits);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/RISCV/safe-dep-distance.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -scalable-vectorization=on -riscv-v-vector-bits-min=-1 -mtriple riscv64-linux-gnu -mattr=+v,+f -S"
      ],
      "tests": [
        {
          "test_name": "safe_load_store_distance_not_pow_of_2",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\"\ntarget triple = \"riscv64\"\n\n@a = external global [10 x [12 x i16]]\n\ndefine void @safe_load_store_distance_not_pow_of_2(i64 %N) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %gep = getelementptr [10 x [12 x i16]], ptr @a, i64 0, i64 0, i64 %iv\n  %0 = load i16, ptr %gep, align 2\n  %gep.off = getelementptr [10 x [12 x i16]], ptr @a, i64 0, i64 8, i64 %iv\n  store i16 0, ptr %gep.off, align 2\n  %iv.next = add nsw i64 %iv, 3\n  %cmp = icmp ult i64 %iv, %N\n  br i1 %cmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Assertion `isPowerOf2_32(End.getKnownMinValue()) && \"Expected End to be a power of 2\"' failed.",
    "body": "Testcase:\n```llvm ir\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"riscv64-unknown-linux-gnu\"\n\n@a = external global [0 x [12 x i16]]\n\ndefine void @b(i64 %0) #0 {\nentry:\n  br label %for.cond3.preheader\n\nfor.cond3.preheader:                              ; preds = %for.cond3.preheader, %entry\n  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.cond3.preheader ]\n  %arrayidx9 = getelementptr [0 x [12 x i16]], ptr @a, i64 0, i64 0, i64 %indvars.iv\n  %1 = load i16, ptr %arrayidx9, align 2\n  %arrayidx9.2 = getelementptr [0 x [12 x i16]], ptr @a, i64 0, i64 8, i64 %indvars.iv\n  store i16 0, ptr %arrayidx9.2, align 2\n  %indvars.iv.next = add nsw i64 %indvars.iv, 3\n  %cmp = icmp ult i64 %indvars.iv, %0\n  br i1 %cmp, label %for.cond3.preheader, label %for.cond.cleanup.loopexit\n\nfor.cond.cleanup.loopexit:                        ; preds = %for.cond3.preheader\n  ret void\n}\n\nattributes #0 = { \"target-features\"=\"+v\" }\n```\n\nCommands/backtrace\n```\n$ /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt reduced.ll --passes=loop-vectorize\nWARNING: You're attempting to print out a bitcode file.\nThis is inadvisable as it may cause display problems. If\nyou REALLY want to taste LLVM bitcode first-hand, you\ncan force output with the `-f' option.\n\nopt: /scratch/ewlu/daily-upstream-build/llvm/llvm/lib/Transforms/Vectorize/VPlanHelpers.h:87: llvm::VFRange::VFRange(const llvm::ElementCount&, const llvm::ElementCount&): Assertion `isPowerOf2_32(End.getKnownMinValue()) && \"Expected End to be a power of 2\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt reduced.ll --passes=loop-vectorize\n1.      Running pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"reduced.ll\"\n2.      Running pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"b\"\n #0 0x00005c0c5d95b1a2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x349c1a2)\n #1 0x00005c0c5d95820f llvm::sys::RunSignalHandlers() (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x349920f)\n #2 0x00005c0c5d958354 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x0000774312045330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x000077431209eb2c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x000077431209eb2c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x000077431209eb2c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x000077431204527e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007743120288ff abort ./stdlib/abort.c:81:7\n #9 0x000077431202881b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x000077431203b517 (/lib/x86_64-linux-gnu/libc.so.6+0x3b517)\n#11 0x00005c0c5c7b1baf llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22f2baf)\n#12 0x00005c0c5c7b210d llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22f310d)\n#13 0x00005c0c5c7b4105 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22f5105)\n#14 0x00005c0c5c7b7511 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22f8511)\n#15 0x00005c0c5c7b7ad7 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22f8ad7)\n#16 0x00005c0c5b484b75 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfc5b75)\n#17 0x00005c0c5d74633a llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x328733a)\n#18 0x00005c0c5b4872b5 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfc82b5)\n#19 0x00005c0c5d744c14 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x3285c14)\n#20 0x00005c0c5b483265 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfc4265)\n#21 0x00005c0c5d74522d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x328622d)\n#22 0x00005c0c5ac19391 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x75a391)\n#23 0x00005c0c5ac0aeac optMain (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x74beac)\n#24 0x000077431202a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#25 0x000077431202a28b call_init ./csu/../csu/libc-start.c:128:20\n#26 0x000077431202a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#27 0x00005c0c5ac014f5 _start (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x7424f5)\nAborted (core dumped)\n```\n\ngodbolt: https://godbolt.org/z/rKd5sx7xW\n\nFound via fuzzer (C program before reduction)",
    "author": "ewlu",
    "labels": [
      "vectorizers",
      "crash",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "8a691cc6157b2c3bc91af767eb1154d7a715562a"
}