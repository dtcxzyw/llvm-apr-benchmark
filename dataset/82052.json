{
  "bug_id": "82052",
  "issue_url": "https://github.com/llvm/llvm-project/issues/82052",
  "bug_type": "miscompilation",
  "base_commit": "a45df47375e50914900dcc07abd2fa67bfa0dd3b",
  "knowledge_cutoff": "2024-02-16T22:14:29Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "d2a26a7bd5fc7cc5752337b7f4f999642feb37dc",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        [
          1870,
          1883
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        "InstCombinerImpl::SimplifyDemandedVectorElts"
      ]
    }
  },
  "patch": "commit d2a26a7bd5fc7cc5752337b7f4f999642feb37dc\nAuthor: Antonio Frighetto <me@antoniofrighetto.com>\nDate:   Sun Feb 18 18:10:41 2024 +0100\n\n    [InstCombine] Do not perform binop-of-shuffle when mask is poison\n    \n    A miscompilation issue has been addressed with refined checking.\n    Shuffle masks operand may be turned into `poison` if this does\n    not lead to observable changes. This however may not guarantee\n    binop to binop-of-shuffle replacement to be sound anymore.\n    \n    Fixes: https://github.com/llvm/llvm-project/issues/82052.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\nindex 5f13454089e5..97ae980a7cba 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n@@ -1870,14 +1870,16 @@ Value *InstCombinerImpl::SimplifyDemandedVectorElts(Value *V,\n         Value *ShufOp = MatchShufAsOp0 ? X : Y;\n         Value *OtherOp = MatchShufAsOp0 ? Y : X;\n         for (User *U : OtherOp->users()) {\n-          auto Shuf = m_Shuffle(m_Specific(ShufOp), m_Value(), m_ZeroMask());\n+          ArrayRef<int> Mask;\n+          auto Shuf = m_Shuffle(m_Specific(ShufOp), m_Value(), m_Mask(Mask));\n           if (BO->isCommutative()\n                   ? match(U, m_c_BinOp(Opcode, Shuf, m_Specific(OtherOp)))\n                   : MatchShufAsOp0\n                         ? match(U, m_BinOp(Opcode, Shuf, m_Specific(OtherOp)))\n                         : match(U, m_BinOp(Opcode, m_Specific(OtherOp), Shuf)))\n-            if (DT.dominates(U, I))\n-              return U;\n+            if (match(Mask, m_ZeroMask()) && Mask[0] != PoisonMaskElem)\n+              if (DT.dominates(U, I))\n+                return U;\n         }\n         return nullptr;\n       };\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/vec_demanded_elts.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "common_binop_demand_via_extelt_op0_mismatch_elt1",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndeclare void @use(<2 x i4>)\n\ndefine i4 @common_binop_demand_via_extelt_op0_mismatch_elt1(<2 x i4> %x, <2 x i4> %y) {\n  %xshuf = shufflevector <2 x i4> %x, <2 x i4> poison, <2 x i32> zeroinitializer\n  %b_xshuf_y = sub <2 x i4> %xshuf, %y\n  %b_xy = sub nsw <2 x i4> %x, %y\n  %b_xy0 = extractelement <2 x i4> %b_xy, i32 1\n  call void @use(<2 x i4> %b_xshuf_y)\n  ret i4 %b_xy0\n}\n"
        },
        {
          "test_name": "common_binop_demand_via_splat_mask_poison",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndefine <2 x i8> @common_binop_demand_via_splat_mask_poison(<2 x i8> %x, <2 x i8> %y) {\n  %ysplat = shufflevector <2 x i8> %y, <2 x i8> poison, <2 x i32> <i32 0, i32 poison>\n  %vv = add <2 x i8> %x, %ysplat\n  %m = add <2 x i8> %x, %y\n  %msplat = shufflevector <2 x i8> %m, <2 x i8> poison, <2 x i32> zeroinitializer\n  %res = add <2 x i8> %vv, %msplat\n  ret <2 x i8> %res\n}\n"
        },
        {
          "test_name": "common_binop_demand_via_splat_mask_poison_2",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndefine <2 x i8> @common_binop_demand_via_splat_mask_poison_2(<2 x i8> %x, <2 x i8> %y) {\n  %ysplat = shufflevector <2 x i8> %y, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\n  %vv = add <2 x i8> %x, %ysplat\n  %m = add <2 x i8> %x, %y\n  %msplat = shufflevector <2 x i8> %m, <2 x i8> %y, <2 x i32> <i32 0, i32 2>\n  %res = add <2 x i8> %vv, %msplat\n  ret <2 x i8> %res\n}\n"
        },
        {
          "test_name": "common_binop_demand_via_splat_mask_poison_3",
          "test_body": "target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n\ndefine <2 x i8> @common_binop_demand_via_splat_mask_poison_3(<2 x i8> %x, <2 x i8> %y) {\n  %ysplat = shufflevector <2 x i8> %y, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\n  %vv = add <2 x i8> %x, %ysplat\n  %m = add <2 x i8> %x, %y\n  %msplat = shufflevector <2 x i8> %m, <2 x i8> poison, <2 x i32> zeroinitializer\n  %res = add <2 x i8> %vv, %msplat\n  ret <2 x i8> %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Replacement of binop with binop-of-shuffle incorrectly adds extra poison value",
    "body": "The following IR is a minimal repro when run with `opt -passes=instcombine`:\r\n```llvm\r\ndefine i8 @src(<2 x i8> %x, <2 x i8> %y) {\r\n  %xsplat = shufflevector <2 x i8> %x, <2 x i8> poison, <2 x i32> <i32 1, i32 0>\r\n  %vv = mul <2 x i8> %xsplat, %y\r\n  %m = mul <2 x i8> %x, %y   ;  <<<< Note that %m is later replaced with %vv in the output\r\n  %msplat = shufflevector <2 x i8> %m, <2 x i8> poison, <2 x i32> <i32 0, i32 0>\r\n  %res = add <2 x i8> %vv, %msplat\r\n  %vget_lane = extractelement <2 x i8> %res, i64 1\r\n  ret i8 %vget_lane\r\n}\r\n```\r\nWhich on 17.x or trunk will give:\r\n```llvm\r\ndefine i8 @src(<2 x i8> %x, <2 x i8> %y) {\r\n  %xsplat = shufflevector <2 x i8> %x, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\r\n  %vv = mul <2 x i8> %xsplat, %y\r\n  %msplat = shufflevector <2 x i8> %vv, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\r\n  %res = add <2 x i8> %vv, %msplat\r\n  %vget_lane = extractelement <2 x i8> %res, i64 1\r\n  ret i8 %vget_lane\r\n}\r\n```\r\nHowever, this is not correct, because the added poisoned values end up observed in the final output. First, in InstCombine, the first element in each mask for the shuffles are first replaced with `poison` due to not being observed in the final `extractelement`. After that we run into this code  in `InstCombineSimplifyDemanded.cpp`:\r\nhttps://github.com/llvm/llvm-project/blob/d8278b682386f51dfba204849c624672a3df40c7/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp#L1866-L1880\r\n\r\nThis is what replaces the `mul <2 x i8> %x, %y` with `mul <2 x i8> %xsplat, %y` (`m_ZeroMask` also matches poison). However in doing so, it introduces the extra poison from `%xsplat`, meaning that `%msplat` has both its elements poisoned, which ends up propagating to `%vget_lane`.\r\n\r\nHere is a Godbolt link showing the test case on 16.x, 17.x, and trunk:\r\nhttps://godbolt.org/z/5eeT7x4s3\r\n\r\nAnd also an Alive2 example showing the bad transformation with a counter-example:\r\nhttps://alive2.llvm.org/ce/z/RpBJEN\r\n\r\nThe code was first introduced in 3b090ff2bdb2828b53d6fec9c06b9d52fed09f42, which a bisect shows is when this first started repro'ing\r\n\r\nI have verified that this still repros on latest trunk, 2de269a641e4ffbb7a44e559c4c0a91bb66df823\r\n\r\nFor priority/triage: this bug was found by a fuzzer meant to test SIMD codegen. It was not from manually written code",
    "author": "Benjins",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "Benjins",
        "body": "A slightly smaller test case:\r\nhttps://alive2.llvm.org/ce/z/6AMPWC\r\n```llvm\r\ndefine <2 x i8> @src(<2 x i8> %x, <2 x i8> %y) {\r\n  %xsplat = shufflevector <2 x i8> %x, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\r\n  %vv = mul <2 x i8> %xsplat, %y\r\n  %m = mul <2 x i8> %x, %y\r\n  %msplat = shufflevector <2 x i8> %m, <2 x i8> poison, <2 x i32> <i32 poison, i32 0>\r\n  %res = add <2 x i8> %vv, %msplat\r\n  ret <2 x i8> %res\r\n}\r\n```\r\nThis doesn't extract the vector, and instead manually specifies the poisonous elements in the shuffles. As Alive notes, the output for `src(<0, 0>, <0, 0>)` goes from `<poison, 0>` to `<poison, poison>`"
      }
    ]
  }
}