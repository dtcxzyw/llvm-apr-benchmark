{
  "bug_id": "155738",
  "issue_url": "https://github.com/llvm/llvm-project/issues/155738",
  "bug_type": "crash",
  "base_commit": "78b45b489559cd44437af4eac6c10188eb0cec3c",
  "knowledge_cutoff": "2025-08-28T03:01:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/FunctionSpecialization"
  ],
  "hints": {
    "fix_commit": "0ace96cca79c03c668b260dd01996e3d693e3f4f",
    "components": [
      "SCCP"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/IPO/SCCP.cpp": [
        [
          330,
          341
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/SCCP.cpp": [
        "runIPSCCP"
      ]
    }
  },
  "patch": "commit 0ace96cca79c03c668b260dd01996e3d693e3f4f\nAuthor: XChy <xxs_chy@outlook.com>\nDate:   Thu Aug 28 19:13:27 2025 +0800\n\n    [SCCP][FuncSpec] Poison unreachable constant global variable user (#155753)\n    \n    Fixes #155738.\n    The original assumption \"we already replaced its users with a constant\"\n    for the global variable becomes incorrect after #154668. The users in\n    the dead function are not simplified, in fact.\n    This patch poisons all the unsimplified constant global variable users.\n\ndiff --git a/llvm/lib/Transforms/IPO/SCCP.cpp b/llvm/lib/Transforms/IPO/SCCP.cpp\nindex e98a70f228ad..f4961faf7ad1 100644\n--- a/llvm/lib/Transforms/IPO/SCCP.cpp\n+++ b/llvm/lib/Transforms/IPO/SCCP.cpp\n@@ -330,12 +330,15 @@ static bool runIPSCCP(\n     LLVM_DEBUG(dbgs() << \"Found that GV '\" << GV->getName()\n                       << \"' is constant!\\n\");\n     for (User *U : make_early_inc_range(GV->users())) {\n-      // We can remove LoadInst here, because we already replaced its users\n-      // with a constant.\n+      // We can remove LoadInst here. The LoadInsts in dead functions marked by\n+      // FuncSpec are not simplified to constants, thus poison them.\n       assert((isa<StoreInst>(U) || isa<LoadInst>(U)) &&\n              \"Only Store|Load Instruction can be user of GlobalVariable at \"\n              \"reaching here.\");\n-      cast<Instruction>(U)->eraseFromParent();\n+      Instruction *I = cast<Instruction>(U);\n+      if (isa<LoadInst>(I))\n+        I->replaceAllUsesWith(PoisonValue::get(I->getType()));\n+      I->eraseFromParent();\n     }\n \n     // Try to create a debug constant expression for the global variable\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/FunctionSpecialization/dead-gv-load.ll",
      "commands": [
        "opt -passes=ipsccp  --funcspec-min-function-size=1 -S < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n@gv = internal global ptr null\n\ndefine i8 @caller() {\n;\nentry:\n  %call1 = call i8 @callee(i32 1)\n  %call2 = call i8 @callee(i32 0)\n  ret i8 %call2\n}\n\ndefine internal i8 @callee(i32 %arg) {\nentry:\n  %useless = icmp ne i32 %arg, 0\n  br label %loop\n\nloop:                                       ; preds = %loop, %entry\n  br label %loop\n\ndead_bb:                                       ; No predecessors!\n  %l1 = load ptr, ptr @gv, align 8\n  %l2 = load ptr, ptr %l1, align 8\n  ret i8 0\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[IPSCCP] Use still stuck around after Def is destroyed",
    "body": "Reproducer:\n```\n; bin/opt -passes=ipsccp --funcspec-min-function-size=1 reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@g_315 = internal global ptr null\n\ndefine i8 @func_123() {\nentry:\n  %call2 = call i8 @func_152(i32 1)\n  %call2991 = call i8 @func_152(i32 0)\n  ret i8 %call2991\n}\n\ndefine internal i8 @func_152(i32 %p_153) {\nentry:\n  %tobool268 = icmp ne i32 %p_153, 0\n  br label %cleanup424\n\ncleanup424:                                       ; preds = %cleanup424, %entry\n  br label %cleanup424\n\nfor.end453:                                       ; No predecessors!\n  %0 = load ptr, ptr @g_315, align 8\n  %1 = load ptr, ptr %0, align 8\n  ret i8 0\n}\n```\n```\nWhile deleting: ptr %\nUse still stuck around after Def is destroyed:  %0 = load ptr, ptr <badref>, align 8\nUses remain when a value is destroyed!\nUNREACHABLE executed at /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/lib/IR/Value.cpp:102!\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: bin/opt -passes=ipsccp --funcspec-min-function-size=1 reduced.ll -S\n1.      Running pass \"ipsccp\" on module \"reduced.ll\"\n #0 0x000078deeee306f2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.22.0git+0x2306f2)\n #1 0x000078deeee2ccbf llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.22.0git+0x22ccbf)\n #2 0x000078deeee2ce0c SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x000078deee845330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x000078deee89eb2c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x000078deee89eb2c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x000078deee89eb2c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x000078deee84527e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x000078deee8288ff abort ./stdlib/abort.c:81:7\n #9 0x000078deeed2a33e (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.22.0git+0x12a33e)\n#10 0x000078dee6761699 llvm::Value::~Value() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.22.0git+0x361699)\n#11 0x000078dee6761882 llvm::Value::deleteValue() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.22.0git+0x361882)\n#12 0x000078dee667ffce llvm::Instruction::eraseFromParent() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.22.0git+0x27ffce)\n#13 0x000078dee97c0d45 runIPSCCP(llvm::Module&, llvm::DataLayout const&, llvm::AnalysisManager<llvm::Function>*, std::function<llvm::TargetLibraryInfo const& (llvm::Function&)>, std::function<llvm::TargetTransformInfo& (llvm::Function&)>, std::function<llvm::AssumptionCache& (llvm::Function&)>, std::function<llvm::DominatorTree& (llvm::Function&)>, std::function<llvm::BlockFrequencyInfo& (llvm::Function&)>, bool) SCCP.cpp:0:0\n#14 0x000078dee97c122b llvm::IPSCCPPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMipo.so.22.0git+0x3c122b)\n#15 0x000078dee9aec7f5 llvm::detail::PassModel<llvm::Module, llvm::IPSCCPPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMPasses.so.22.0git+0xec7f5)\n#16 0x000078dee6724ddd llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.22.0git+0x324ddd)\n#17 0x000078deef124185 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.22.0git+0x2d185)\n#18 0x000078deef12f5ea optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.22.0git+0x385ea)\n#19 0x000078deee82a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#20 0x000078deee82a28b call_init ./csu/../csu/libc-start.c:128:20\n#21 0x000078deee82a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#22 0x0000641d94919095 _start (bin/opt+0x1095)\nAborted (core dumped)\n```\nllvm version: 3c94613ae98fd9e9846fa77268b59d884b35cf60\n\nReverting 6bd844812385dd5cb65e08fe9561be9f91ace876 solves the issue. cc @XChy \n",
    "author": "dtcxzyw",
    "labels": [
      "ipo",
      "crash-on-valid",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "XChy",
        "body": "The assumption is incorrect after https://github.com/llvm/llvm-project/commit/6bd844812385dd5cb65e08fe9561be9f91ace876:\nhttps://github.com/llvm/llvm-project/blob/5a9f1039c7732920dd1f4374074fdf09b58184ea/llvm/lib/Transforms/IPO/SCCP.cpp#L332-L339\nThe users in the dead functions are not replaced."
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "6bd844812385dd5cb65e08fe9561be9f91ace876"
}