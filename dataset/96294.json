{
  "bug_id": "96294",
  "issue_url": "https://github.com/llvm/llvm-project/issues/96294",
  "bug_type": "crash",
  "base_commit": "5262865aac683b72f3e66de7a122e0c455ab6b9b",
  "knowledge_cutoff": "2024-06-21T10:15:21Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "fdb9f96fa2a926425bdf8315048db7623d63547d",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          6723,
          6736
        ],
        [
          6771,
          6776
        ],
        [
          6781,
          6788
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::collectValuesToIgnore"
      ]
    }
  },
  "patch": "commit fdb9f96fa2a926425bdf8315048db7623d63547d\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun Aug 4 20:54:25 2024 +0100\n\n    [LV] Consider earlier stores to invariant reduction address as dead.\n    \n    For invariant stores to an address of a reduction, only the latest store\n    will be generated outside the loop. Consider earlier stores as dead.\n    \n    This fixes a difference between the legacy and VPlan-based cost model.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/96294.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 40d10395de17..1eca9b10fad5 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -6723,14 +6723,18 @@ void LoopVectorizationCostModel::collectValuesToIgnore() {\n     return RequiresScalarEpilogue &&\n            !TheLoop->contains(cast<Instruction>(U)->getParent());\n   };\n+  MapVector<Value *, SmallVector<Value *>> DeadInvariantStoreOps;\n   for (BasicBlock *BB : TheLoop->blocks())\n     for (Instruction &I : *BB) {\n       // Find all stores to invariant variables. Since they are going to sink\n       // outside the loop we do not need calculate cost for them.\n       StoreInst *SI;\n       if ((SI = dyn_cast<StoreInst>(&I)) &&\n-          Legal->isInvariantAddressOfReduction(SI->getPointerOperand()))\n+          Legal->isInvariantAddressOfReduction(SI->getPointerOperand())) {\n         ValuesToIgnore.insert(&I);\n+        auto I = DeadInvariantStoreOps.insert({SI->getPointerOperand(), {}});\n+        I.first->second.push_back(SI->getValueOperand());\n+      }\n \n       if (VecValuesToIgnore.contains(&I) || ValuesToIgnore.contains(&I))\n         continue;\n@@ -6771,6 +6775,10 @@ void LoopVectorizationCostModel::collectValuesToIgnore() {\n     DeadInterleavePointerOps.append(Op->op_begin(), Op->op_end());\n   }\n \n+  for (const auto &[_, Ops] : DeadInvariantStoreOps) {\n+    for (Value *Op : ArrayRef(Ops).drop_back())\n+      DeadOps.push_back(Op);\n+  }\n   // Mark ops that would be trivially dead and are only used by ignored\n   // instructions as free.\n   BasicBlock *Header = TheLoop->getHeader();\n@@ -6781,8 +6789,8 @@ void LoopVectorizationCostModel::collectValuesToIgnore() {\n         (isa<PHINode>(Op) && Op->getParent() == Header) ||\n         !wouldInstructionBeTriviallyDead(Op, TLI) ||\n         any_of(Op->users(), [this, IsLiveOutDead](User *U) {\n-          return !VecValuesToIgnore.contains(U) && ValuesToIgnore.contains(U) &&\n-                 !IsLiveOutDead(U);\n+          return !VecValuesToIgnore.contains(U) &&\n+                 !ValuesToIgnore.contains(U) && !IsLiveOutDead(U);\n         }))\n       continue;\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/cost-model.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -mtriple=x86_64-apple-macosx10.8.0 -mcpu=corei7-avx -S"
      ],
      "tests": [
        {
          "test_name": "reduction_store",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx10.8.0\"\n\ndefine void @reduction_store(ptr noalias %src, ptr %dst, i1 %x) #0 {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %red = phi i32 [ 0, %entry ], [ %red.next, %loop ]\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]\n  %gep.src = getelementptr inbounds i32, ptr %src, i32 %iv\n  %l = load i32, ptr %gep.src, align 4\n  %l.and = and i32 %l, 3\n  store i32 %l.and, ptr %dst, align 4\n  %x.ext = zext i1 %x to i64\n  %lshr = lshr i64 %x.ext, 12\n  %t = trunc i64 %lshr to i32\n  %red.next = and i32 %red, %t\n  store i32 %red.next, ptr %dst, align 4\n  %iv.next = add i32 %iv, 1\n  %ec = icmp eq i32 %iv, 29\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n\nattributes #0 = { \"target-cpu\"=\"znver3\" }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10353: bool llvm::LoopVectorizePass::processLoop(llvm::Loop*): Assertion `VF.Width == Width && \"VPlan cost model and legacy cost model disagreed\"' failed.",
    "body": "[calcc-0ebd65.c.gz](https://github.com/user-attachments/files/15926158/calcc-0ebd65.c.gz)\r\n[calcc-0ebd65.sh.gz](https://github.com/user-attachments/files/15926159/calcc-0ebd65.sh.gz)\r\n\r\nStack backtrace is \r\n\r\n#11 0x0000000003adfddd llvm::LoopVectorizePass::processLoop(llvm::Loop*) /home/dcb40b/llvm/trunk/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10353:9\r\n#12 0x0000000003ae347f llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) /home/dcb40b/llvm/trunk/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10446:27\r\n#13 0x0000000003ae4382 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/dcb40b/llvm/trunk/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10486:5\r\n#14 0x00000000034fbd6d llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/dcb40b/llvm/trunk/llvm/include/llvm/IR/PassManagerInternal.h:91:3\r\n#15 0x0000000001ae5b21 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/dcb40b/llvm/trunk/llvm/include/llvm/IR/PassManagerImpl.h:53:18\r\n",
    "author": "dcb314",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "dcb314",
        "body": "The crash first seems to occur sometime between git hash fd88089151e66a4cb1d90aaa224e4cb4e7a748f4 from yesterday 20240620\r\nand 225d8fc8eb24fb797154c1ef6dcbe5ba033142da from today,\r\nwhich is 134 commits.\r\n"
      },
      {
        "author": "fhahn",
        "body": "Thanks for the report, caused by https://github.com/llvm/llvm-project/pull/92555 which has been reverted for now. I'll add a reduced test based on the reproducer."
      },
      {
        "author": "fhahn",
        "body": "https://github.com/llvm/llvm-project/pull/92555 has been recommitted with a fix. Please let me know if you see any other issues!"
      },
      {
        "author": "dcb314",
        "body": "It has come back:\r\n\r\nclang: /home/dcb40b/llvm/trunk/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10377: bool llvm::LoopVectorizePass::processLoop(llvm::Loop*): Assertion `VF.Width == Width && \"VPlan cost model and legacy cost model disagreed\"' failed.\r\n\r\n[in-4e39b8.sh.gz](https://github.com/user-attachments/files/16445872/in-4e39b8.sh.gz)\r\n[Uploading in-4e39b8.c.gz\u2026]()\r\n"
      },
      {
        "author": "dcb314",
        "body": "Seems to have come back sometime between d99efd53f5103df4db517f499fcdd26cd3b080a3\r\n(dated 20240710) and 4710e0f498cb661ca17c99cb174616102fcad923, dated 20240711.\r\n\r\n"
      },
      {
        "author": "fhahn",
        "body": "@dcb314 it looks like there has been an issue with uploading the `.c` file. Could you re-upload it again?"
      },
      {
        "author": "dcb314",
        "body": "My apologies for the failed upload.\r\nHere is another try:\r\n\r\n[in-4e39b8.c.gz](https://github.com/user-attachments/files/16455342/in-4e39b8.c.gz)\r\n"
      }
    ]
  },
  "verified": true
}