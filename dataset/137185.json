{
  "bug_id": "137185",
  "issue_url": "https://github.com/llvm/llvm-project/issues/137185",
  "bug_type": "crash",
  "base_commit": "6479e9bad371f19a36ed15c236defc301efc180f",
  "knowledge_cutoff": "2025-04-24T14:36:28Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "a750893fea29f32e9bab2cd5176eec34e63b0898",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          2127,
          2133
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPScalarIVStepsRecipe::execute"
      ]
    }
  },
  "patch": "commit a750893fea29f32e9bab2cd5176eec34e63b0898\nAuthor: Maryam Moghadas <maryammo@ca.ibm.com>\nDate:   Tue May 6 12:48:21 2025 -0400\n\n    [VPlan][LV] Fix invalid truncation in VPScalarIVStepsRecipe (#137832)\n    \n    Replace CreateTrunc with CreateSExtOrTrunc in VPScalarIVStepsRecipe to\n    safely handle type conversion. This prevents assertion failures from\n    invalid truncation when StartIdx0 has a smaller integer type than\n    IntStepTy. The assertion was introduced by commit 783a846.\n    Fixes https://github.com/llvm/llvm-project/issues/137185\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 6027572f1e84..c45c62e13d76 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -2127,7 +2127,7 @@ void VPScalarIVStepsRecipe::execute(VPTransformState &State) {\n           Builder.CreateMul(StartIdx0, ConstantInt::get(StartIdx0->getType(),\n                                                         getUnrollPart(*this)));\n     }\n-    StartIdx0 = Builder.CreateTrunc(StartIdx0, IntStepTy);\n+    StartIdx0 = Builder.CreateSExtOrTrunc(StartIdx0, IntStepTy);\n   }\n \n   if (!FirstLaneOnly && State.VF.isScalable()) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/PowerPC/vplan-scalarivsext-crash.ll",
      "commands": [
        "opt -passes=loop-vectorize -S %s 2>&1"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ntarget datalayout = \"E-m:a-p:32:32-Fi32-i64:64-n32\"\ntarget triple = \"powerpc-ibm-aix7.2.0.0\"\n\ndefine void @test_iv_trunc_crash(ptr %a, ptr %b, i32 %n) {\n;\nentry:\n  %sum.0 = fadd reassoc double 0.0, 0.0\n  %x = load double, ptr %a, align 8\n  br label %loop_header\n\nloop_header:                                      ; preds = %loop_body, %entry\n  %sum.1 = phi double [ %sum.0, %entry ], [ %sum.next, %loop_body ]\n  %i = phi i32 [ 0, %entry ], [ %i.next, %loop_body ]\n  %cond = icmp sgt i32 %i, %n\n  br i1 %cond, label %exit, label %loop_body\n\nloop_body:                                        ; preds = %loop_header\n  store double %sum.1, ptr %b, align 8\n  %sum.next = fadd reassoc double %sum.1, %x\n  %i.next = add i32 %i, 1\n  br label %loop_header\n\nexit:\n  ret void\n}\n;.\n;."
        }
      ]
    }
  ],
  "issue": {
    "title": "[Loop Vectorize] Crash: Assertion `CastInst::castIsValid(opc, C, Ty) && \"Invalid constantexpr cast!\"'",
    "body": "Here is the godbolt link to the reproducer: https://godbolt.org/z/354qYx43T\nFor the record here is the IR:\n```\nsource_filename = \"reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @widget() {\nbb:\n  %sitofp = sitofp i32 0 to double\n  br label %bb1\n\nbb1:                                              ; preds = %bb1, %bb\n  %phi = phi i32 [ %add, %bb1 ], [ 0, %bb ]\n  %phi2 = phi double [ %fsub, %bb1 ], [ 0.000000e+00, %bb ]\n  %fsub = fsub double %phi2, %sitofp\n  %add = add i32 %phi, 1\n  %icmp = icmp ult i32 %phi, 252\n  br i1 %icmp, label %bb1, label %bb3\n\nbb3:                                              ; preds = %bb1\n  %phi4 = phi double [ %phi2, %bb1 ]\n  %phi5 = phi double [ %fsub, %bb1 ]\n  ret void\n}\n```\nwhich fails when running: `opt -passes=loop-vectorize -slp-threshold=-99999 -force-vector-width=4` with the backtrace:\n```\nopt: /root/llvm-project/llvm/lib/IR/Constants.cpp:2231: static llvm::Constant* llvm::ConstantExpr::getCast(unsigned int, llvm::Constant*, llvm::Type*, bool): Assertion `CastInst::castIsValid(opc, C, Ty) && \"Invalid constantexpr cast!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize -slp-threshold=-99999 -force-vector-width=4 <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"widget\"\n #0 0x00000000054eff68 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54eff68)\n #1 0x00000000054ed8f4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007ccdb7442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007ccdb74969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007ccdb7442476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007ccdb74287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007ccdb742871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007ccdb7439e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x0000000005166c4b llvm::ConstantExpr::getCast(unsigned int, llvm::Constant*, llvm::Type*, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5166c4b)\n #9 0x0000000000d41160 llvm::IRBuilderBase::CreateTrunc(llvm::Value*, llvm::Type*, llvm::Twine const&, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xd41160)\n#10 0x00000000045b9885 llvm::VPScalarIVStepsRecipe::execute(llvm::VPTransformState&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x45b9885)\n#11 0x0000000004576263 llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4576263)\n#12 0x000000000457e734 llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x457e734)\n#13 0x000000000457f740 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x457f740)\n#14 0x000000000458abda llvm::VPlan::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x458abda)\n#15 0x000000000442b57c llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x442b57c)\n#16 0x0000000004443b38 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4443b38)\n#17 0x0000000004445ce0 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4445ce0)\n#18 0x0000000004446333 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4446333)\n#19 0x00000000031c103e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x31c103e)\n#20 0x00000000052e90a0 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x52e90a0)\n#21 0x0000000000e7bace llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe7bace)\n#22 0x00000000052e7973 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x52e7973)\n#23 0x0000000000e7a98e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe7a98e)\n#24 0x00000000052e7380 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x52e7380)\n#25 0x000000000094707a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x94707a)\n#26 0x000000000093a84c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93a84c)\n#27 0x00007ccdb7429d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#28 0x00007ccdb7429e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#29 0x0000000000932485 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x932485)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "Nirhar",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "Nirhar",
        "body": "As far as I can see, we are trying to truncate an i32 value to i64 type, which is illegal, here:\nhttps://github.com/llvm/llvm-project/blob/72cc868c65b0641f23d1fb0518a8503c73ecdb5a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp#L2137\n\nMight be related to @fhahn 's commit here: 783a846507683c7b515473b833c9cf02cd2b1993"
      },
      {
        "author": "maryammo",
        "body": "I have also noticed the assertion as a result of commit 783a846507683c7b515473b833c9cf02cd2b1993 for invalid truncation. \n\n@fhahn , Does the following fix make sense? \n\n```\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -2124,7 +2124,7 @@ void VPScalarIVStepsRecipe::execute(VPTransformState &State) {\n           Builder.CreateMul(StartIdx0, ConstantInt::get(StartIdx0->getType(),\n                                                         getUnrollPart(*this)));\n     }\n-    StartIdx0 = Builder.CreateTrunc(StartIdx0, IntStepTy);\n+    StartIdx0 = Builder.CreateSExtOrTrunc(StartIdx0, IntStepTy);\n   }\n \n   if (!FirstLaneOnly && State.VF.isScalable()) {\ndiff --git a/llvm/test/Transforms/LoopVectorize/PowerPC/regression-scalarivsext-crash.ll b/llvm/test/Transforms/LoopVectorize/PowerPC/regression-scalarivsext-crash.ll\nnew file mode 100644\nindex 000000000000..66b54a29b913\n--- /dev/null\n+++ b/llvm/test/Transforms/LoopVectorize/PowerPC/regression-scalarivsext-crash.ll\n@@ -0,0 +1,31 @@\n+; RUN: opt -passes=loop-vectorize -S < %s > /dev/null\n+; REQUIRES: asserts\n+\n+target datalayout = \"E-m:a-p:32:32-Fi32-i64:64-n32\"\n+target triple = \"powerpc-ibm-aix7.2.0.0\"\n+\n+define void @__power_mod_NMOD_power_init(ptr %a, ptr %b, i32 %n) {\n+entry:\n+  br label %loop_entry\n+\n+loop_exit:                                        ; preds = %loop_header\n+  br label %loop_entry\n+\n+loop_entry:                                       ; preds = %loop_exit, %entry\n+  %sum.0 = phi double [ 0.000000e+00, %entry ], [ %sum.1, %loop_exit ]\n+  %x = load double, ptr %a, align 8\n+  br label %loop_header\n+\n+loop_header:                                      ; preds = %loop_body, %loop_entry\n+  %sum.1 = phi double [ %sum.0, %loop_entry ], [ %sum.next, %loop_body ]\n+  %i = phi i32 [ 0, %loop_entry ], [ %i.next, %loop_body ]\n+  %cond = icmp sgt i32 %i, %n\n+  br i1 %cond, label %loop_exit, label %loop_body\n+\n+loop_body:                                        ; preds = %loop_header\n+  store double %sum.1, ptr %b, align 8\n+  %sum.next = fadd reassoc double %sum.1, %x\n+  %i.next = add i32 %i, 1\n+  br label %loop_header\n+}\n+\n```"
      },
      {
        "author": "fhahn",
        "body": "@maryammo thanks, could you create a PR? For the test case, does it require a target-triple or can the one provided by @Nirhar be used without a target triple?\n"
      },
      {
        "author": "maryammo",
        "body": "@fhahn , Sure I do. Both tests need target triple to fail. "
      },
      {
        "author": "maryammo",
        "body": "https://github.com/llvm/llvm-project/pull/137832"
      }
    ]
  },
  "verified": true
}