{
  "bug_id": "83931",
  "issue_url": "https://github.com/llvm/llvm-project/issues/83931",
  "bug_type": "crash",
  "base_commit": "d95a0d7c0ff324c1e84606d26591416e6bf02984",
  "knowledge_cutoff": "2024-03-05T00:39:01Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "d51fcd4ed86ac6075c8a25b053c2b66051feaf62",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          6544,
          6549
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombiner::getFlippedStrictnessPredicateAndConstant"
      ]
    }
  },
  "patch": "commit d51fcd4ed86ac6075c8a25b053c2b66051feaf62\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Tue Mar 5 21:08:15 2024 +0800\n\n    [InstCombine] Handle scalable splat in `getFlippedStrictnessPredicateAndConstant` (#83980)\n    \n    This patch adds support for canonicalization of icmp with a scalable\n    splat. Some optimizations assume that `icmp pred X, APInt C` is in\n    canonical form.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/83931.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex 55207a8343d0..1cebab8203ea 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -6544,6 +6544,13 @@ InstCombiner::getFlippedStrictnessPredicateAndConstant(CmpInst::Predicate Pred,\n       if (!SafeReplacementConstant)\n         SafeReplacementConstant = CI;\n     }\n+  } else if (isa<VectorType>(C->getType())) {\n+    // Handle scalable splat\n+    Value *SplatC = C->getSplatValue();\n+    auto *CI = dyn_cast_or_null<ConstantInt>(SplatC);\n+    // Bail out if the constant can't be safely incremented/decremented.\n+    if (!CI || !ConstantIsOk(CI))\n+      return std::nullopt;\n   } else {\n     // ConstantExpr?\n     return std::nullopt;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/pr83931.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "dont_crash",
          "test_body": "define <vscale x 2 x i1> @dont_crash(<vscale x 2 x i64> %x) {\nentry:\n  %div = sdiv <vscale x 2 x i64> %x, splat (i64 309383)\n  %ret = icmp sge <vscale x 2 x i64> %div, zeroinitializer\n  ret <vscale x 2 x i1> %ret\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/select.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "scalable_sign_bits",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine <vscale x 2 x i32> @scalable_sign_bits(<vscale x 2 x i8> %x) {\n  %a = sext <vscale x 2 x i8> %x to <vscale x 2 x i32>\n  %b = shl <vscale x 2 x i32> %a, splat (i32 16)\n  ret <vscale x 2 x i32> %b\n}\n"
        },
        {
          "test_name": "scalable_non_zero",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine <vscale x 2 x i1> @scalable_non_zero(<vscale x 2 x i32> %x) {\n  %a = or <vscale x 2 x i32> %x, splat (i32 1)\n  %b = add <vscale x 2 x i32> %a, splat (i32 -1)\n  %cmp = icmp ult <vscale x 2 x i32> %b, splat (i32 56)\n  ret <vscale x 2 x i1> %cmp\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/vscale_cmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "sge",
          "test_body": "define <vscale x 2 x i1> @sge(<vscale x 2 x i8> %x) {\n  %cmp = icmp sge <vscale x 2 x i8> %x, zeroinitializer\n  ret <vscale x 2 x i1> %cmp\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine][RISC-V] UNREACHABLE executed at InstCombineCompares.cpp:2788",
    "body": "Testcase:\r\n```c\r\nchar a;\r\nint b;\r\nlong *c[5][5];\r\nint main() {\r\n  for (int d = -2041027590; d; d++)\r\n    a |= b <= c[3][d][8] / 309383;\r\n}\r\n```\r\n\r\nReduced LLVM IR:\r\n```llvm ir\r\n; ModuleID = 'reduced.ll'\r\nsource_filename = \"red.c\"\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\n; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, argmem: read, inaccessiblemem: none) uwtable vscale_range(2,1024)\r\ndefine noundef signext i32 @main() #0 {\r\nentry:\r\n  %0 = getelementptr inbounds i8, <vscale x 2 x ptr> zeroinitializer, i64 64\r\n  %wide.masked.gather = call <vscale x 2 x i64> @llvm.masked.gather.nxv2i64.nxv2p0(<vscale x 2 x ptr> %0, i32 8, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i64> poison)\r\n  %1 = sdiv <vscale x 2 x i64> %wide.masked.gather, shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 309383, i64 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)\r\n  %2 = icmp sge <vscale x 2 x i64> %1, zeroinitializer\r\n  %3 = zext <vscale x 2 x i1> %2 to <vscale x 2 x i8>\r\n  %4 = call i8 @llvm.vector.reduce.or.nxv2i8(<vscale x 2 x i8> %3)\r\n  store i8 %4, ptr null, align 1\r\n  ret i32 0\r\n}\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)\r\ndeclare <vscale x 2 x i64> @llvm.masked.gather.nxv2i64.nxv2p0(<vscale x 2 x ptr>, i32 immarg, <vscale x 2 x i1>, <vscale x 2 x i64>) #1\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare i8 @llvm.vector.reduce.or.nxv2i8(<vscale x 2 x i8>) #2\r\n\r\n; uselistorder directives\r\nuselistorder <vscale x 2 x i64> poison, { 1, 2, 0 }\r\n\r\nattributes #0 = { nofree norecurse nosync nounwind memory(readwrite, argmem: read, inaccessiblemem: none) uwtable vscale_range(2,1024) \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"generic-rv64\" \"target-features\"=\"+64bit,+a,+c,+d,+f,+m,+relax,+v\" }\r\nattributes #1 = { nocallback nofree nosync nounwind willreturn memory(read) }\r\nattributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\n```\r\n\r\nBacktrace:\r\n```\r\n> /scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt -passes=\"instcombine\" reduced.ll --disable-output\r\nUnhandled icmp predicate!\r\nUNREACHABLE executed at /scratch/tc-testing/tc-feb-22-llvm/llvm/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:2788!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt -passes=instcombine reduced.ll --disable-output\r\n #0 0x00005565be2171a0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2ce31a0)\r\n #1 0x00005565be2145af llvm::sys::RunSignalHandlers() (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2ce05af)\r\n #2 0x00005565be214705 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007f8b9f842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007f8b9f8969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007f8b9f8969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007f8b9f8969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007f8b9f842476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007f8b9f8287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00005565be14ca5e (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2c18a5e)\r\n#10 0x00005565bd1c1139 llvm::InstCombinerImpl::foldICmpDivConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1c8d139)\r\n#11 0x00005565bd1d710e llvm::InstCombinerImpl::foldICmpBinOpWithConstant(llvm::ICmpInst&, llvm::BinaryOperator*, llvm::APInt const&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1ca310e)\r\n#12 0x00005565bd1d7393 llvm::InstCombinerImpl::foldICmpInstWithConstant(llvm::ICmpInst&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1ca3393)\r\n#13 0x00005565bd1e46eb llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1cb06eb)\r\n#14 0x00005565bd1457a5 llvm::InstCombinerImpl::run() (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1c117a5)\r\n#15 0x00005565bd146e85 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, llvm::LoopInfo*, llvm::InstCombineOptions const&) InstructionCombining.cpp:0:0\r\n#16 0x00005565bd147ef5 llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x1c13ef5)\r\n#17 0x00005565bc1e5c96 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0xcb1c96)\r\n#18 0x00005565be044751 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2b10751)\r\n#19 0x00005565bc1dd5b6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0xca95b6)\r\n#20 0x00005565be04344b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2b0f44b)\r\n#21 0x00005565bc1e5746 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0xcb1746)\r\n#22 0x00005565be0412c1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x2b0d2c1)\r\n#23 0x00005565bba77e55 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x543e55)\r\n#24 0x00005565bba6a296 optMain (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x536296)\r\n#25 0x00007f8b9f829d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#26 0x00007f8b9f829e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#27 0x00007f8b9f829e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#28 0x00005565bba5f5a5 _start (/scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt+0x52b5a5)\r\nzsh: IOT instruction (core dumped)  /scratch/tc-testing/tc-feb-22-llvm/build/build-llvm-linux/bin/opt  reduced.ll\r\n```\r\n\r\nGodbolt: https://godbolt.org/z/9qdYfPTrE\r\n\r\nAssert being tripped: https://github.com/llvm/llvm-project/blob/main/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp#L2788\r\n\r\nFound via fuzzer.",
    "author": "patrick-rivos",
    "labels": [
      "crash",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced test case: https://godbolt.org/z/5qocbWsW3\r\n```\r\ndefine <vscale x 2 x i1> @test(<vscale x 2 x i64> %p) {\r\nentry:\r\n  %1 = sdiv <vscale x 2 x i64> %p, splat (i64 309383)\r\n  %2 = icmp sge <vscale x 2 x i64> %1, zeroinitializer\r\n  ret <vscale x 2 x i1> %2\r\n}\r\n\r\n```"
      }
    ]
  }
}