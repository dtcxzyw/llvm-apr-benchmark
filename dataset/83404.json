{
  "bug_id": "83404",
  "issue_url": "https://github.com/llvm/llvm-project/issues/83404",
  "bug_type": "crash",
  "base_commit": "a41bcb3930534ef1525b4fc30e53e818b39e2b60",
  "knowledge_cutoff": "2024-02-29T10:33:37Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopStrengthReduce"
  ],
  "hints": {
    "fix_commit": "6409c21857373bbb5563b37c3bacc066ad633658",
    "components": [],
    "bug_location_lineno": {
      "llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h": [
        [
          85,
          91
        ]
      ]
    },
    "bug_location_funcname": {}
  },
  "patch": "commit 6409c21857373bbb5563b37c3bacc066ad633658\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Tue Mar 5 16:38:09 2024 +0100\n\n    [SCEVExpander] Use PoisoningVH for OrigFlags\n    \n    It's common to delete some instructions after using SCEVExpander,\n    while it is still live (but will not be used afterwards). In that\n    case, the AssertingVH may trigger. Replace it with a PoisoningVH\n    so that we only detect the case where the SCEVExpander actually is\n    used in a problematic fashion after the instruction removal.\n    \n    The alternative would be to add clear() calls to more code paths.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/83404.\n\ndiff --git a/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h b/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h\nindex 9de0996fb1e3..62c1e15a9a60 100644\n--- a/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h\n+++ b/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h\n@@ -85,7 +85,7 @@ class SCEVExpander : public SCEVVisitor<SCEVExpander, Value *> {\n \n   /// Original flags of instructions for which they were modified. Used\n   /// by SCEVExpanderCleaner to undo changes.\n-  DenseMap<AssertingVH<Instruction>, PoisonFlags> OrigFlags;\n+  DenseMap<PoisoningVH<Instruction>, PoisonFlags> OrigFlags;\n \n   // The induction variables generated.\n   SmallVector<WeakVH, 2> InsertedIVs;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopStrengthReduce/X86/pr83404.ll",
      "commands": [
        "opt -S -passes=loop-reduce -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Make sure this does not assert.\ndefine void @test() {\n;\nentry:\n  br label %for.body\n\nfor.body:\n  %0 = phi i64 [ %dec, %for.body ], [ 0, %entry ]\n  %h.18 = phi i32 [ 1, %for.body ], [ 0, %entry ]\n  %dec = add i64 %0, 1\n  %rem = urem i64 %0, 5\n  %1 = trunc i64 %rem to i32\n  %tobool3.not = icmp eq i32 %h.18, %1\n  br label %for.body\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "llc crash: An asserting value handle still pointed to this value!",
    "body": "llc crashed on the test case.\r\n\r\nBisected to https://github.com/llvm/llvm-project/commit/07292b7203e31fb90d9180bfccde0d4e84be2245, which was committed by @nikic \r\n\r\nCompiler explorer: https://godbolt.org/z/noEEWf5MM\r\n\r\n```llvm\r\n% cat reduced.ll\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @f() {\r\nentry:\r\n  br label %for.body\r\n\r\nfor.body:                                         ; preds = %for.body, %entry\r\n  %0 = phi i64 [ %dec, %for.body ], [ 0, %entry ]\r\n  %h.18 = phi i32 [ 1, %for.body ], [ 0, %entry ]\r\n  %dec = add i64 %0, 1\r\n  %rem = urem i64 %0, 5\r\n  %1 = trunc i64 %rem to i32\r\n  %tobool3.not = icmp eq i32 %h.18, %1\r\n  br label %for.body\r\n}\r\n%\r\n% llc reduced.ll\r\nWhile deleting: i64 %dec\r\nAn asserting value handle still pointed to this value!\r\nUNREACHABLE executed at /tmp/tmpi78wpw36/tmp3ncswa62/llvm/lib/IR/Value.cpp:1246!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/llc reduced.ll\r\n1.\tRunning pass 'Function Pass Manager' on module 'reduced.ll'.\r\n2.\tRunning pass 'Loop Pass Manager' on function '@f'\r\n3.\tRunning pass 'Loop Strength Reduction' on basic block '%for.body'\r\n #0 0x00007fdb13f166cf llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x9516cf)\r\n #1 0x00007fdb13f13bf4 SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007fdb131da090 (/lib/x86_64-linux-gnu/libc.so.6+0x43090)\r\n #3 0x00007fdb131da00b raise /build/glibc-wuryBv/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\r\n #4 0x00007fdb131b9859 abort /build/glibc-wuryBv/glibc-2.31/stdlib/abort.c:81:7\r\n #5 0x00007fdb13e26cde (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x861cde)\r\n #6 0x00007fdb1416ae87 llvm::ValueHandleBase::ValueIsDeleted(llvm::Value*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xba5e87)\r\n #7 0x00007fdb1416b82d llvm::Value::~Value() (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xba682d)\r\n #8 0x00007fdb1416b9a2 llvm::Value::deleteValue() (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xba69a2)\r\n #9 0x00007fdb14096174 llvm::Instruction::eraseFromParent() (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xad1174)\r\n#10 0x00007fdb150ce4e3 llvm::RecursivelyDeleteTriviallyDeadInstructions(llvm::SmallVectorImpl<llvm::WeakTrackingVH>&, llvm::TargetLibraryInfo const*, llvm::MemorySSAUpdater*, std::function<void (llvm::Value*)>) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x1b094e3)\r\n#11 0x00007fdb150ce929 llvm::RecursivelyDeleteTriviallyDeadInstructions(llvm::Value*, llvm::TargetLibraryInfo const*, llvm::MemorySSAUpdater*, std::function<void (llvm::Value*)>) (.part.0) Local.cpp:0:0\r\n#12 0x00007fdb150cece1 llvm::RecursivelyDeleteDeadPHINode(llvm::PHINode*, llvm::TargetLibraryInfo const*, llvm::MemorySSAUpdater*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x1b09ce1)\r\n#13 0x00007fdb15001692 llvm::DeleteDeadPHIs(llvm::BasicBlock*, llvm::TargetLibraryInfo const*, llvm::MemorySSAUpdater*) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x1a3c692)\r\n#14 0x00007fdb15627243 ReduceLoopStrength(llvm::Loop*, llvm::IVUsers&, llvm::ScalarEvolution&, llvm::DominatorTree&, llvm::LoopInfo&, llvm::TargetTransformInfo const&, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::MemorySSA*) LoopStrengthReduce.cpp:0:0\r\n#15 0x00007fdb15628b92 (anonymous namespace)::LoopStrengthReduce::runOnLoop(llvm::Loop*, llvm::LPPassManager&) LoopStrengthReduce.cpp:0:0\r\n#16 0x00007fdb15e40dbb llvm::LPPassManager::runOnFunction(llvm::Function&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0x287bdbb)\r\n#17 0x00007fdb140e9921 llvm::FPPassManager::runOnFunction(llvm::Function&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xb24921)\r\n#18 0x00007fdb140e9b69 llvm::FPPassManager::runOnModule(llvm::Module&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xb24b69)\r\n#19 0x00007fdb140ea412 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/../lib/libLLVM.so.19.0git+0xb25412)\r\n#20 0x0000562c805e44c9 compileModule(char**, llvm::LLVMContext&) llc.cpp:0:0\r\n#21 0x0000562c805da126 main (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/llc+0x11126)\r\n#22 0x00007fdb131bb083 __libc_start_main /build/glibc-wuryBv/glibc-2.31/csu/../csu/libc-start.c:342:3\r\n#23 0x0000562c805dac6e _start (/zdata/shaoli/compilers/ccbuilder-compilers/clang-07292b7203e31fb90d9180bfccde0d4e84be2245/bin/llc+0x11c6e)\r\n[1]    2969443 abort       reduced.ll\r\n```\r\n\r\nThis test case is reduced from the following C code:\r\n```c\r\nint a;\r\nlong b, c;\r\nstatic long *d = &b, *e = &d;\r\nvoid f() {\r\n  long *g = &c;\r\n  int h = {};\r\n  int *i = &h;\r\n  for (;;)\r\n    for (; a;) {\r\n      *i ^= --*d % (unsigned long)5;\r\n      *i || (*g = 0);\r\n      *i = 1;\r\n      long *j = e;\r\n      e == &j;\r\n    }\r\n}\r\nint main() {}\r\n```",
    "author": "shao-hua-li",
    "labels": [
      "loopoptim",
      "crash-on-valid"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  },
  "bisect": "07292b7203e31fb90d9180bfccde0d4e84be2245"
}