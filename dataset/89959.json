{
  "bug_id": "89959",
  "issue_url": "https://github.com/llvm/llvm-project/issues/89959",
  "bug_type": "crash",
  "base_commit": "bc8a4ea11070d06374b403cd09b771a99cc6ba1a",
  "knowledge_cutoff": "2024-04-24T17:43:58Z",
  "lit_test_dir": [
    "llvm/test/Transforms/IRCE"
  ],
  "hints": {
    "fix_commit": "22da5a6e34ed6146752b24d9156a678b50fddaef",
    "components": [
      "InductiveRangeCheckElimination"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp": [
        [
          279,
          284
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp": [
        "InductiveRangeCheck::parseRangeCheckICmp",
        "InductiveRangeCheckElimination"
      ]
    }
  },
  "patch": "commit 22da5a6e34ed6146752b24d9156a678b50fddaef\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Apr 26 16:25:33 2024 +0800\n\n    [IRCE] Skip icmp ptr in `InductiveRangeCheck::parseRangeCheckICmp` (#89967)\n    \n    Fixes https://github.com/llvm/llvm-project/issues/89959.\n\ndiff --git a/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp b/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp\nindex 9df28747570c..104e8ceb7967 100644\n--- a/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp\n+++ b/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp\n@@ -279,6 +279,9 @@ bool InductiveRangeCheck::parseRangeCheckICmp(Loop *L, ICmpInst *ICI,\n   Value *LHS = ICI->getOperand(0);\n   Value *RHS = ICI->getOperand(1);\n \n+  if (!LHS->getType()->isIntegerTy())\n+    return false;\n+\n   // Canonicalize to the `Index Pred Invariant` comparison\n   if (IsLoopInvariant(LHS)) {\n     std::swap(LHS, RHS);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/IRCE/pr89959.ll",
      "commands": [
        "opt -passes=irce -S < %s 2>&1"
      ],
      "tests": [
        {
          "test_name": "pr89959",
          "test_body": "define void @pr89959() {\ntop:\n  br label %L3\n\nL3:                                               ; preds = %L13, %top\n  %value_phi = phi ptr [ null, %top ], [ %0, %L13 ]\n  %0 = getelementptr i8, ptr %value_phi, i64 8\n  %.not = icmp ule ptr %value_phi, null\n  br i1 %.not, label %L13, label %L15\n\nL13:                                              ; preds = %L3\n  br label %L3\n\nL15:                                              ; preds = %L3\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion in Scalar Evolution when running IRCE",
    "body": "The following IR crashes with \r\n```llvm\r\ndefine void @foo() {\r\ntop:\r\n  br label %L3\r\n\r\nL3:                                               ; preds = %L13, %top\r\n  %value_phi = phi ptr [ null, %top ], [ %0, %L13 ]\r\n  %0 = getelementptr i8, ptr %value_phi, i64 8\r\n  %.not = icmp ule ptr %value_phi, null\r\n  br i1 %.not, label %L13, label %L15\r\n\r\nL13:                                              ; preds = %L3\r\n  br label %L3\r\n\r\nL15:                                              ; preds = %L3\r\n  ret void\r\n}\r\n```\r\n\r\n`opt --passes=irce` \r\n\r\nhttps://godbolt.org/z/1sbvaT7r1 ",
    "author": "gbaraldi",
    "labels": [
      "llvm:SCEV",
      "crash-on-valid"
    ],
    "comments": []
  }
}