{
  "bug_id": "142405",
  "issue_url": "https://github.com/llvm/llvm-project/issues/142405",
  "bug_type": "hang",
  "base_commit": "20d70196c9a4da344d0944f3c78447c3bd7079c7",
  "knowledge_cutoff": "2025-06-02T14:38:42Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "5e2dcfe42cd4af14d6e6155314aa5d4167710b65",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1312,
          1318
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::foldSelectValueEquivalence"
      ]
    }
  },
  "patch": "commit 5e2dcfe42cd4af14d6e6155314aa5d4167710b65\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Jun 4 19:42:56 2025 +0800\n\n    [InstCombine] Avoid infinite loop in `foldSelectValueEquivalence` (#142754)\n    \n    Before this patch, InstCombine hung because it replaced a value with a\n    more complex one:\n    ```\n    %sel = select i1 %cmp, i32 %smax, i32 0 ->\n    %sel = select i1 %cmp, i32 %masked, i32 0 ->\n    %sel = select i1 %cmp, i32 %smax, i32 0 ->\n    ...\n    ```\n    This patch makes this replacement more conservative. It only performs\n    the replacement iff the new value is one of the operands of the original\n    value.\n    \n    Closes https://github.com/llvm/llvm-project/issues/142405.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex d7d0431a5b8d..257dc943bd5c 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1312,7 +1312,11 @@ Instruction *InstCombinerImpl::foldSelectValueEquivalence(SelectInst &Sel,\n \n       // If NewOp is a constant and OldOp is not replace iff NewOp doesn't\n       // contain and undef elements.\n-      if (match(NewOp, m_ImmConstant()) || NewOp == V) {\n+      // Make sure that V is always simpler than TrueVal, otherwise we might\n+      // end up in an infinite loop.\n+      if (match(NewOp, m_ImmConstant()) ||\n+          (isa<Instruction>(TrueVal) &&\n+           is_contained(cast<Instruction>(TrueVal)->operands(), V))) {\n         if (isGuaranteedNotToBeUndef(NewOp, SQ.AC, &Sel, &DT))\n           return replaceOperand(Sel, Swapped ? 2 : 1, V);\n         return nullptr;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select-cmp-eq-op-fold.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "replace_with_y_for_simple_binop_fail",
          "test_body": "define i8 @replace_with_y_for_simple_binop_fail(i8 %x, i8 noundef %y, i8 %z, i8 %q) {\n  %cmp = icmp eq i8 %x, %y\n  %mul = mul nsw i8 %x, %q\n  %sel = select i1 %cmp, i8 %mul, i8 %z\n  ret i8 %sel\n}\n"
        },
        {
          "test_name": "pr142405",
          "test_body": "define i32 @pr142405(i32 noundef %x) {\nentry:\n  %smax = call i32 @llvm.smax.i32(i32 %x, i32 0)\n  %masked = and i32 %smax, 65535\n  %cmp = icmp eq i32 %x, %masked\n  %sel = select i1 %cmp, i32 %smax, i32 0\n  %and = and i32 %sel, 1\n  ret i32 %and\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.smax.i32(i32, i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Infinite loop at -O3",
    "body": "Reproducer: https://godbolt.org/z/aYWhfr6Y9\n```\n; bin/opt -passes=instcombine test.ll -S\ndefine i32 @test(i32 noundef %0) {\nentry:\n  %cond.i = call i32 @llvm.smax.i32(i32 %0, i32 0)\n  %conv.i = trunc i32 %cond.i to i16\n  %conv21 = zext i16 %conv.i to i32\n  %cmp22 = icmp eq i32 %0, %conv21\n  %conv23 = zext i1 %cmp22 to i32\n  %narrow.i = mul i32 %cond.i, %conv23\n  %1 = and i32 %narrow.i, 1\n  ret i32 %1\n}\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "llvm:instcombine",
      "hang",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}