{
  "bug_id": "155184",
  "issue_url": "https://github.com/llvm/llvm-project/issues/155184",
  "bug_type": "crash",
  "base_commit": "d0246fe1e79c6ea06b6b72f66a71a96a3342aa42",
  "knowledge_cutoff": "2025-08-24T17:14:04Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LICM"
  ],
  "hints": {
    "fix_commit": "d1408667de830da8817c24cb9788da6caae551c7",
    "components": [
      "MemorySSAUpdater"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        [
          411,
          427
        ],
        [
          504,
          514
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        "MemorySSAUpdater::fixupDefs",
        "MemorySSAUpdater::insertDef"
      ]
    }
  },
  "patch": "commit d1408667de830da8817c24cb9788da6caae551c7\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Thu Sep 4 10:23:29 2025 +0200\n\n    [MemorySSA] Don't create phi nodes in fixupDefs() (#156021)\n    \n    The general flow when inserting MemoryDefs is:\n    \n     * Insert the def and set it's defining access (may insert phis)\n     * Insert IDF phis\n     * Update defining access for defs after the new one (fixupDefs)\n     * Rename uses if requested\n    \n    fixupDefs() uses getPreviousDef() which can create new MemoryPHIs, but\n    for which we're not going to insert IDF phis, so the required dominance\n    property may not hold.\n    \n    I believe this is a leftover from a time before the \"Insert IDF phis\"\n    step existed. Now that step should already ensure that all necessary\n    MemoryPhis have been inserted, and we only need to update them.\n    \n    The fixupDefs() implementation was also returning after updating a\n    single access, which is not right.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/47875.\n    Fixes https://github.com/llvm/llvm-project/issues/117157.\n    Fixes https://github.com/llvm/llvm-project/issues/152998.\n    Fixes https://github.com/llvm/llvm-project/issues/155161.\n    Fixes https://github.com/llvm/llvm-project/issues/155184.\n\ndiff --git a/llvm/lib/Analysis/MemorySSAUpdater.cpp b/llvm/lib/Analysis/MemorySSAUpdater.cpp\nindex ecfecb03c375..bb3e679219ae 100644\n--- a/llvm/lib/Analysis/MemorySSAUpdater.cpp\n+++ b/llvm/lib/Analysis/MemorySSAUpdater.cpp\n@@ -411,17 +411,11 @@ void MemorySSAUpdater::insertDef(MemoryDef *MD, bool RenameUses) {\n     FixupList.push_back(MD);\n   }\n \n-  // Remember the index where we stopped inserting new phis above, since the\n-  // fixupDefs call in the loop below may insert more, that are already minimal.\n+  // Update defining access of following defs.\n   unsigned NewPhiIndexEnd = InsertedPHIs.size();\n-\n-  while (!FixupList.empty()) {\n-    unsigned StartingPHISize = InsertedPHIs.size();\n-    fixupDefs(FixupList);\n-    FixupList.clear();\n-    // Put any new phis on the fixup list, and process them\n-    FixupList.append(InsertedPHIs.begin() + StartingPHISize, InsertedPHIs.end());\n-  }\n+  fixupDefs(FixupList);\n+  assert(NewPhiIndexEnd == InsertedPHIs.size() &&\n+         \"Should not insert new phis during fixupDefs()\");\n \n   // Optimize potentially non-minimal phis added in this method.\n   unsigned NewPhiSize = NewPhiIndexEnd - NewPhiIndex;\n@@ -504,11 +498,8 @@ void MemorySSAUpdater::fixupDefs(const SmallVectorImpl<WeakVH> &Vars) {\n         assert(MSSA->dominates(NewDef, FirstDef) &&\n                \"Should have dominated the new access\");\n \n-        // This may insert new phi nodes, because we are not guaranteed the\n-        // block we are processing has a single pred, and depending where the\n-        // store was inserted, it may require phi nodes below it.\n-        cast<MemoryDef>(FirstDef)->setDefiningAccess(getPreviousDef(FirstDef));\n-        return;\n+        cast<MemoryDef>(FirstDef)->setDefiningAccess(NewDef);\n+        continue;\n       }\n       // We didn't find a def, so we must continue.\n       for (const auto *S : successors(FixupBlock)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LICM/pr117157.ll",
      "commands": [
        "opt -S -passes=licm -verify-memoryssa < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(ptr %p) {\n;\nentry:\n  br label %loop0\n\nloop0:                                            ; preds = %loop0.latch, %entry\n  br label %loop1\n\nloop1:                                            ; preds = %loop1, %loop0\n  %dec10 = phi i64 [ 0, %loop0 ], [ 1, %loop1 ]\n  store i64 %dec10, ptr %p\n  br i1 false, label %loop1.exit, label %loop1\n\nloop1.exit:                                       ; preds = %loop1\n  switch i32 0, label %loop0.latch [\n  i32 0, label %loop0.latch\n  i32 2, label %loop3.preheader\n  i32 1, label %loop2\n  ]\n\nloop2:                                            ; preds = %loop2.latch, %loop1.exit\n  br i1 false, label %loop0.latch, label %loop3.preheader\n\nloop3.preheader:                                  ; preds = %loop1.exit, %loop2\n  br label %loop3\n\nloop3:                                            ; preds = %loop3.preheader, %loop3\n  switch i32 0, label %exit [\n  i32 0, label %loop3\n  i32 1, label %loop2.latch\n  ]\n\nloop2.latch:                                      ; preds = %loop3\n  br label %loop2\n\nloop0.latch:                                      ; preds = %loop2, %loop1.exit, %loop1.exit\n  store i64 0, ptr %p\n  br label %loop0\n\nexit:                                             ; preds = %loop3\n  store i64 1, ptr %p\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O3 with \"-mllvm -enable-gvn-sink\" on x86_64-linux-gnu: Assertion `MSSA->dominates(NewDef, FirstDef) && \"Should have dominated the new access\"' failed",
    "body": "Compiler Explorer: https://godbolt.org/z/fKdo8vGE8\n\nNote:\n- works: 20.1.0 and earlier\n- fails: trunk\n\n```\n[504] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 285fd29f941c031d44c6ecd63efdac795c67adc4)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nCandidate multilib: 32;@m32\nCandidate multilib: x32;@mx32\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[505] % \n[505] % clangtk -O3 small.c; ./a.out\n[506] % clangtk -O3 -mllvm -enable-gvn-sink small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:504: void llvm::MemorySSAUpdater::fixupDefs(const llvm::SmallVectorImpl<llvm::WeakVH>&): Assertion `MSSA->dominates(NewDef, FirstDef) && \"Should have dominated the new access\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O3 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/bug178 -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/bug178 -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -ferror-limit 19 -fmessage-length=130 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -mllvm -enable-gvn-sink -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-3fcc24.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"require<globals-aa>,function(invalidate<aa>),require<profile-summary>,cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,argpromotion,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,gvn-sink,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,speculative-execution<only-if-divergent-target>,jump-threading,correlated-propagation,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,reassociate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,loop(loop-idiom,indvars,extra-simple-loop-unswitch-passes,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyopt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split,coro-annotation-elide)),function(invalidate<should-not-run-function-passes>),cgscc(devirt<4>())\" on module \"small.c\"\n4.\tRunning pass \"cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,argpromotion,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,gvn-sink,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,speculative-execution<only-if-divergent-target>,jump-threading,correlated-propagation,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,reassociate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,loop(loop-idiom,indvars,extra-simple-loop-unswitch-passes,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyopt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split,coro-annotation-elide))\" on module \"small.c\"\n5.\tRunning pass \"loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>)\" on function \"main\"\n #0 0x0000564e70634000 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4291000)\n #1 0x0000564e70630caf llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x428dcaf)\n #2 0x0000564e70630e02 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007f82700fb520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f827014f9fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f827014f9fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f827014f9fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f82700fb476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f82700e17f3 abort ./stdlib/abort.c:81:7\n #9 0x00007f82700e171b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f82700f2e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x0000564e6f527574 llvm::MemorySSAUpdater::fixupDefs(llvm::SmallVectorImpl<llvm::WeakVH> const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3184574)\n#12 0x0000564e6f52774f llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef*, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x318474f)\n#13 0x0000564e704292cf (anonymous namespace)::LoopPromoter::doExtraRewritesBeforeFinalDeletion() LICM.cpp:0:0\n#14 0x0000564e707bf787 llvm::LoadAndStorePromoter::run(llvm::SmallVectorImpl<llvm::Instruction*> const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x441c787)\n#15 0x0000564e70425be8 llvm::promoteLoopAccessesToScalars(llvm::SmallSetVector<llvm::Value*, 8u> const&, llvm::SmallVectorImpl<llvm::BasicBlock*>&, llvm::SmallVectorImpl<llvm::ilist_iterator_w_bits<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true, llvm::BasicBlock>, false, false>>&, llvm::SmallVectorImpl<llvm::MemoryAccess*>&, llvm::PredIteratorCache&, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::TargetLibraryInfo const*, llvm::TargetTransformInfo*, llvm::Loop*, llvm::MemorySSAUpdater&, llvm::ICFLoopSafetyInfo*, llvm::OptimizationRemarkEmitter*, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4082be8)\n#16 0x0000564e70433943 (anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm::Loop*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::TargetLibraryInfo*, llvm::TargetTransformInfo*, llvm::ScalarEvolution*, llvm::MemorySSA*, llvm::OptimizationRemarkEmitter*, bool) (.part.0) LICM.cpp:0:0\n#17 0x0000564e70435773 llvm::LICMPass::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4092773)\n#18 0x0000564e6d6b0b46 llvm::detail::PassModel<llvm::Loop, llvm::LICMPass, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x130db46)\n#19 0x0000564e7043b4ef std::optional<llvm::PreservedAnalyses> llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runSinglePass<llvm::Loop, std::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>>(llvm::Loop&, std::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&, llvm::PassInstrumentation&) (.isra.0) LoopPassManager.cpp:0:0\n#20 0x0000564e7043cae0 llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runWithoutLoopNestPasses(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4099ae0)\n#21 0x0000564e7043cecc llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4099ecc)\n#22 0x0000564e7043dfa1 llvm::FunctionToLoopPassAdaptor::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x409afa1)\n#23 0x0000564e6d6b09f6 llvm::detail::PassModel<llvm::Function, llvm::FunctionToLoopPassAdaptor, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x130d9f6)\n#24 0x0000564e6ff6d2d2 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3bca2d2)\n#25 0x0000564e6d6b0c96 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x130dc96)\n#26 0x0000564e6f3b5584 llvm::CGSCCToFunctionPassAdaptor::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3012584)\n#27 0x0000564e6d6adf66 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::CGSCCToFunctionPassAdaptor, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x130af66)\n#28 0x0000564e6f3acb5c llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3009b5c)\n#29 0x0000564e716eaeb6 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5347eb6)\n#30 0x0000564e6f3b682d llvm::DevirtSCCRepeatedPass::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x301382d)\n#31 0x0000564e716eaf06 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::DevirtSCCRepeatedPass, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5347f06)\n#32 0x0000564e6f3b14a8 llvm::ModuleToPostOrderCGSCCPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x300e4a8)\n#33 0x0000564e6d6adf16 llvm::detail::PassModel<llvm::Module, llvm::ModuleToPostOrderCGSCCPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x130af16)\n#34 0x0000564e6ff6b575 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3bc8575)\n#35 0x0000564e71e16128 llvm::ModuleInlinerWrapperPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5a73128)\n#36 0x0000564e716ea556 llvm::detail::PassModel<llvm::Module, llvm::ModuleInlinerWrapperPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5347556)\n#37 0x0000564e6ff6b575 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3bc8575)\n#38 0x0000564e708dbe53 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#39 0x0000564e708dff83 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x453cf83)\n#40 0x0000564e70fa5e3f clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4c02e3f)\n#41 0x0000564e72a1a32c clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x667732c)\n#42 0x0000564e712c6869 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f23869)\n#43 0x0000564e71241dd5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4e9edd5)\n#44 0x0000564e713b8248 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5015248)\n#45 0x0000564e6d225bd8 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe82bd8)\n#46 0x0000564e6d21c1da ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#47 0x0000564e6d220c94 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe7dc94)\n#48 0x0000564e6d0ec14b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd4914b)\n#49 0x00007f82700e2d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#50 0x00007f82700e2e40 call_init ./csu/../csu/libc-start.c:128:20\n#51 0x00007f82700e2e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#52 0x0000564e6d21b905 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe78905)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 285fd29f941c031d44c6ecd63efdac795c67adc4)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-03afae.c\nclangtk: note: diagnostic msg: /tmp/small-03afae.sh\nclangtk: note: diagnostic msg: \n\n********************\n[507] % \n[507] % cat small.c\nint a, b, d, g, ab, ae, af, h, i, j, l, n = 1;\nint aa(int u[]) {\n  for (int c = 0; c < 3; c++) {\n    for (int e = 0; e < 11; e++)\n      if (u[c + e]) {\n        n = 0;\n        break;\n      }\n    if (n)\n      return a;\n  }\n  __builtin_abort();\n}\nvoid f(int u, int x, int y) {\n  int v, o = 0, p, q;\n  p = u;\n  if (j)\n    goto r;\n  do {\n    v = u = x = 0;\n    if (o)\n      break;\n  r:\n    o = x;\n  } while (j);\n  q = 0;\n  int t[] = {u, h, x, i, q, v, j, l, y, o, p};\n  aa(t);\n}\nint main() {\n  ab = 1;\n  for (; ab; ab = 0)\n    for (; ae; ae++)\n      while (1) {\n        int m = 0;\n        goto w;\n      ac:\n        m = 3;\n      ad:\n        if (1 % m)\n          goto ac;\n      w:\n        if (g)\n          goto ad;\n        if (d)\n          goto ac;\n        int k = b;\n        while (1)\n          if (k)\n            break;\n        f(af, 1, af - 1);\n        break;\n      }\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "loopoptim",
      "crash"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Likely all the same issue: https://github.com/llvm/llvm-project/issues/47875 https://github.com/llvm/llvm-project/issues/117157 https://github.com/llvm/llvm-project/issues/152998 https://github.com/llvm/llvm-project/issues/155161"
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "verified": true,
  "bisect": "Cannot find a good commit"
}