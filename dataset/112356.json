{
  "bug_id": "112356",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112356",
  "bug_type": "miscompilation",
  "base_commit": "a3a9ba80337ec1b276a7571049eda6ea03276ea3",
  "knowledge_cutoff": "2024-10-15T13:21:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "9b7491e8669126180253480821d5addde34874d0",
    "components": [
      "IR"
    ],
    "bug_location_lineno": {
      "llvm/lib/IR/Operator.cpp": [
        [
          50,
          55
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/IR/Operator.cpp": [
        "Operator::hasPoisonGeneratingFlags"
      ]
    }
  },
  "patch": "commit 9b7491e8669126180253480821d5addde34874d0\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Tue Oct 15 23:07:16 2024 +0800\n\n    [IR] Add support for `samesign` in `Operator::hasPoisonGeneratingFlags` (#112358)\n    \n    Fix https://github.com/llvm/llvm-project/issues/112356.\n\ndiff --git a/llvm/lib/IR/Operator.cpp b/llvm/lib/IR/Operator.cpp\nindex f93ff8f6fc8a..199eb4d90f55 100644\n--- a/llvm/lib/IR/Operator.cpp\n+++ b/llvm/lib/IR/Operator.cpp\n@@ -50,6 +50,8 @@ bool Operator::hasPoisonGeneratingFlags() const {\n     if (auto *NNI = dyn_cast<PossiblyNonNegInst>(this))\n       return NNI->hasNonNeg();\n     return false;\n+  case Instruction::ICmp:\n+    return cast<ICmpInst>(this)->hasSameSign();\n   default:\n     if (const auto *FP = dyn_cast<FPMathOperator>(this))\n       return FP->hasNoNaNs() || FP->hasNoInfs();\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "icmp_samesign_logical_or",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @icmp_samesign_logical_or(i32 %In) {\n  %c1 = icmp samesign slt i32 %In, 0\n  %c2 = icmp samesign ne i32 %In, 1\n  %V = select i1 %c1, i1 true, i1 %c2\n  ret i1 %V\n}\n"
        },
        {
          "test_name": "icmp_and_inv_pow2_or_zero_ne_0",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #0\n\ndefine i1 @icmp_and_inv_pow2_or_zero_ne_0(i32 %A, i32 %B) {\n  %popcnt = tail call i32 @llvm.ctpop.i32(i32 %A)\n  %cond = icmp ult i32 %popcnt, 2\n  call void @llvm.assume(i1 %cond)\n  %inv = xor i32 %B, -1\n  %and = and i32 %A, %inv\n  %cmp = icmp ne i32 %and, 0\n  ret i1 %cmp\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctpop.i32(i32) #1\n\nattributes #0 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\nattributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "icmp_samesign_logical_and",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @icmp_samesign_logical_and(i32 %In) {\n  %c1 = icmp samesign sgt i32 %In, -1\n  %c2 = icmp samesign eq i32 %In, 1\n  %V = select i1 %c1, i1 %c2, i1 false\n  ret i1 %V\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `samesign` flag should be dropped",
    "body": "Reproducer:\r\n```\r\ndefine i1 @src(i32 %In) {\r\n  %c1 = icmp samesign sgt i32 %In, -1\r\n  %c2 = icmp samesign eq i32 %In, 1\r\n  %V = select i1 %c1, i1 %c2, i1 false\r\n  ret i1 %V\r\n}\r\n\r\ndefine i1 @tgt(i32 %In) {\r\n  %c2 = icmp samesign eq i32 %In, 1\r\n  ret i1 %c2\r\n}\r\n```\r\n\r\nWe should check this flag in `Operator::hasPoisonGeneratingFlags`.\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:ir"
    ],
    "comments": []
  },
  "verified": true
}