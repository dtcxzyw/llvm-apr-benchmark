{
  "bug_id": "77320",
  "issue_url": "https://github.com/llvm/llvm-project/issues/77320",
  "bug_type": "miscompilation",
  "base_commit": "ade7ae4760a0b0e74cddd8f852830ca946295930",
  "knowledge_cutoff": "2024-01-08T14:43:50Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstSimplify"
  ],
  "hints": {
    "fix_commit": "97e3220d6312ae00bcbe08673f218bd0f705776b",
    "components": [
      "InstructionSimplify"
    ],
    "files": [
      "llvm/lib/Analysis/InstructionSimplify.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        [
          4313,
          4319
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/InstructionSimplify.cpp": [
        "simplifyWithOpReplaced"
      ]
    }
  },
  "patch": "commit 97e3220d6312ae00bcbe08673f218bd0f705776b\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Mon Jan 8 15:49:47 2024 +0100\n\n    [InstSimplify] Consider bitcast as potential cross-lane operation\n    \n    The bitcast might change the number of vector lanes, in which case\n    it will be a cross-lane operation.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/77320.\n\ndiff --git a/llvm/lib/Analysis/InstructionSimplify.cpp b/llvm/lib/Analysis/InstructionSimplify.cpp\nindex 241bdd81b75a..d0c27cae0dff 100644\n--- a/llvm/lib/Analysis/InstructionSimplify.cpp\n+++ b/llvm/lib/Analysis/InstructionSimplify.cpp\n@@ -4313,7 +4313,7 @@ static Value *simplifyWithOpReplaced(Value *V, Value *Op, Value *RepOp,\n     // For vector types, the simplification must hold per-lane, so forbid\n     // potentially cross-lane operations like shufflevector.\n     if (!I->getType()->isVectorTy() || isa<ShuffleVectorInst>(I) ||\n-        isa<CallBase>(I))\n+        isa<CallBase>(I) || isa<BitCastInst>(I))\n       return nullptr;\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstSimplify/select.ll",
      "commands": [
        "opt < %s -passes=instsimplify -S"
      ],
      "tests": [
        {
          "test_name": "select_or_disjoint_eq",
          "test_body": "define i8 @select_or_disjoint_eq(i8 %x, i8 %y) {\n  %cmp = icmp eq i8 %x, %y\n  %or = or disjoint i8 %x, %y\n  %sel = select i1 %cmp, i8 %x, i8 %or\n  ret i8 %sel\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstSimplify] Miscompile with select of vectors and bitcast",
    "body": "https://alive2.llvm.org/ce/z/xhCFyk\r\n\r\n```llvm\r\ndefine <4 x i32> @src(<2 x i64> %x, <4 x i32> %y) {\r\n  %x.bc = bitcast <2 x i64> %x to <4 x i32>\r\n  %y.bc = bitcast <4 x i32> %y to <2 x i64>\r\n  %sub = sub <2 x i64> %x, %y.bc\r\n  %sub.bc = bitcast <2 x i64> %sub to <4 x i32>\r\n  %cmp = icmp eq <4 x i32> %y, %x.bc\r\n  %sel = select <4 x i1> %cmp, <4 x i32> %sub.bc, <4 x i32> zeroinitializer\r\n  ret <4 x i32> %sel\r\n}\r\n\r\ndefine <4 x i32> @tgt(<2 x i64> %x, <4 x i32> %y) {\r\n  ret <4 x i32> zeroinitializer\r\n}\r\n```",
    "author": "nikic",
    "labels": [
      "test-suite",
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}