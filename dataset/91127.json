{
  "bug_id": "91127",
  "issue_url": "https://github.com/llvm/llvm-project/issues/91127",
  "bug_type": "miscompilation",
  "base_commit": "30367cb5982dfdab2655401f020711311e7d78b9",
  "knowledge_cutoff": "2024-05-05T15:35:24Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "d3dad7a74be50d90754bf5c072e1a2330e92712c",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          1510,
          1515
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombinerImpl::foldICmpTruncWithTruncOrExt"
      ]
    }
  },
  "patch": "commit d3dad7a74be50d90754bf5c072e1a2330e92712c\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon May 6 16:30:07 2024 +0800\n\n    [InstCombine] Fix miscompilation caused by #90436 (#91133)\n    \n    Proof: https://alive2.llvm.org/ce/z/iRnJ4i\n    \n    Fixes https://github.com/llvm/llvm-project/issues/91127.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex c60a290ce72e..7092fb5e509b 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -1510,6 +1510,7 @@ InstCombinerImpl::foldICmpTruncWithTruncOrExt(ICmpInst &Cmp,\n       std::swap(X, Y);\n       Pred = Cmp.getSwappedPredicate(Pred);\n     }\n+    YIsSExt = !(NoWrapFlags & TruncInst::NoUnsignedWrap);\n   }\n   // Try to match icmp (trunc nuw X), (zext Y)\n   else if (!Cmp.isSigned() &&\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp-of-trunc-ext.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "trunc_equality_both_sext",
          "test_body": "define i1 @trunc_equality_both_sext(i32 %x, i8 %y) {\n  %xt = trunc nuw nsw i32 %x to i16\n  %ye = sext i8 %y to i16\n  %c = icmp ne i16 %xt, %ye\n  ret i1 %c\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Miscompilation which converts `icmp eq (trunc nsw i64 X), (trunc nsw i32 Y)` into `icmp eq (zext i32 Y), X`",
    "body": "Reduced test case: https://alive2.llvm.org/ce/z/MLgA5x\r\n```\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine i32 @src() {\r\nentry:\r\n  br label %for.cond\r\n\r\nfor.cond:                                         ; preds = %if.end, %entry\r\n  %storemerge = phi i32 [ 3, %entry ], [ %dec, %if.end ]\r\n  %h = phi i32 [ 1, %entry ], [ %hres, %if.end ]\r\n  %e = phi i32 [ 0, %entry ], [ -1, %if.end ]\r\n  %tobool.not = icmp eq i32 %storemerge, 0\r\n  br i1 %tobool.not, label %for.end9, label %for.body\r\n\r\nfor.body:                                         ; preds = %for.cond\r\n  %cmp = icmp eq i32 %h, 5\r\n  %conv1 = zext i1 %cmp to i64\r\n  %conv2 = sext i32 %e to i64\r\n  %cond.i = call i64 @llvm.umax.i64(i64 %conv1, i64 %conv2)\r\n  %conv3 = trunc nsw i64 %cond.i to i16\r\n  %conv4 = trunc nsw i32 %e to i16\r\n  %sub.i = sub i16 %conv3, %conv4\r\n  %tobool6.not = icmp eq i16 %sub.i, 0\r\n  br i1 %tobool6.not, label %if.end, label %if.then\r\n\r\nif.then:                                          ; preds = %for.body\r\n  br label %if.end\r\n\r\nif.end:                                           ; preds = %if.then, %for.body\r\n  %hres = phi i32 [ 0, %if.then ], [ %h, %for.body ]\r\n  %dec = add nsw i32 %storemerge, -1\r\n  br label %for.cond\r\n\r\nfor.end9:                                         ; preds = %for.cond\r\n  ret i32 %h\r\n}\r\n\r\ndefine i32 @tgt() {\r\nentry:\r\n  br label %for.cond\r\n\r\nfor.cond:                                         ; preds = %if.end, %entry\r\n  %storemerge = phi i32 [ 3, %entry ], [ %dec, %if.end ]\r\n  %h = phi i32 [ 1, %entry ], [ %hres, %if.end ]\r\n  %e = phi i32 [ 0, %entry ], [ -1, %if.end ]\r\n  %tobool.not = icmp eq i32 %storemerge, 0\r\n  br i1 %tobool.not, label %for.end9, label %for.body\r\n\r\nfor.body:                                         ; preds = %for.cond\r\n  %cmp = icmp eq i32 %h, 5\r\n  %conv1 = zext i1 %cmp to i64\r\n  %conv2 = sext i32 %e to i64\r\n  %cond.i = call i64 @llvm.umax.i64(i64 %conv1, i64 %conv2)\r\n  %0 = zext i32 %e to i64\r\n  %tobool6.not = icmp eq i64 %cond.i, %0\r\n  br i1 %tobool6.not, label %if.end, label %if.then\r\n\r\nif.then:                                          ; preds = %for.body\r\n  br label %if.end\r\n\r\nif.end:                                           ; preds = %if.then, %for.body\r\n  %hres = phi i32 [ 0, %if.then ], [ %h, %for.body ]\r\n  %dec = add nsw i32 %storemerge, -1\r\n  br label %for.cond\r\n\r\nfor.end9:                                         ; preds = %for.cond\r\n  ret i32 %h\r\n}\r\n```\r\n\r\nllvm version: de9b386f84b58ad0ffc12e221bc6d9161ca5b62d",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced test case: https://alive2.llvm.org/ce/z/ndR8PQ\r\n```\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine i1 @src(i64 %x, i32 %y) {\r\n  %conv1 = trunc nsw i64 %x to i16\r\n  %conv2 = trunc nsw i32 %y to i16\r\n  %cond = icmp eq i16 %conv1, %conv2\r\n  ret i1 %cond\r\n}\r\n\r\ndefine i1 @tgt(i64 %x, i32 %y) {\r\n  %1 = zext i32 %y to i64\r\n  %cond = icmp eq i64 %1, %x\r\n  ret i1 %cond\r\n}\r\n```\r\n\r\nIt should be caused by https://github.com/llvm/llvm-project/pull/90436.\r\n\r\nI will post a fix later. cc @nikic\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "POC without DataLayout:\r\n```\r\ndefine i1 @test_eq(i32 %x, i16 %y) {\r\n  %conv1 = trunc nsw i32 %x to i8\r\n  %conv2 = trunc nsw i16 %y to i8\r\n  %cond = icmp eq i8 %conv1, %conv2\r\n  ret i1 %cond\r\n}\r\n\r\ndefine i1 @test_ult(i32 %x, i16 %y) {\r\n  %conv1 = trunc nsw i32 %x to i8\r\n  %conv2 = trunc nsw i16 %y to i8\r\n  %cond = icmp ult i8 %conv1, %conv2\r\n  ret i1 %cond\r\n}\r\n\r\ndefine i1 @test_slt(i32 %x, i16 %y) {\r\n  %conv1 = trunc nsw i32 %x to i8\r\n  %conv2 = trunc nsw i16 %y to i8\r\n  %cond = icmp slt i8 %conv1, %conv2\r\n  ret i1 %cond\r\n}\r\n```"
      }
    ]
  }
}
