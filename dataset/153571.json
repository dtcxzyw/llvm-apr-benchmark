{
  "bug_id": "153571",
  "issue_url": "https://github.com/llvm/llvm-project/issues/153571",
  "bug_type": "crash",
  "base_commit": "177f27d22092cb64e871e6cd2f8981d24e823186",
  "knowledge_cutoff": "2025-08-14T12:31:06Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d57ab276b659c960fda8c0bb349648c4d266796e",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          20796,
          20801
        ],
        [
          20891,
          20896
        ],
        [
          20930,
          20940
        ],
        [
          21304,
          21310
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::BlockScheduling::calculateDependencies",
        "BoUpSLP::BlockScheduling::tryScheduleBundle"
      ]
    }
  },
  "patch": "commit d57ab276b659c960fda8c0bb349648c4d266796e\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Aug 14 08:27:19 2025 -0700\n\n    [SLP] Recalculate cleared deps for potential control schedule data nodes\n    \n    Need to recalculate the dependencies for all potential control data\n    schedule nodes to prevent compiler crash.\n    \n    Fixes #153571\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex b9b33140e09f..c35a7552b405 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -20796,6 +20796,10 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n                         << BB->getName() << \"\\n\");\n       calculateDependencies(Bundle, /*InsertInReadyList=*/!ReSchedule, SLP,\n                             ControlDependentMembers);\n+    } else if (!ControlDependentMembers.empty()) {\n+      ScheduleBundle Invalid = ScheduleBundle::invalid();\n+      calculateDependencies(Invalid, /*InsertInReadyList=*/!ReSchedule, SLP,\n+                            ControlDependentMembers);\n     }\n \n     if (ReSchedule) {\n@@ -20891,6 +20895,7 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n       }\n     }\n     ScheduledBundlesList.pop_back();\n+    SmallVector<ScheduleData *> ControlDependentMembers;\n     for (Value *V : VL) {\n       if (S.isNonSchedulable(V))\n         continue;\n@@ -20930,11 +20935,20 @@ BoUpSLP::BlockScheduling::tryScheduleBundle(ArrayRef<Value *> VL, BoUpSLP *SLP,\n           ScheduleCopyableDataMapByUsers.erase(I);\n         ScheduleCopyableDataMap.erase(KV);\n         // Need to recalculate dependencies for the actual schedule data.\n-        if (ScheduleData *OpSD = getScheduleData(I))\n+        if (ScheduleData *OpSD = getScheduleData(I)) {\n           OpSD->clearDirectDependencies();\n+          if (RegionHasStackSave ||\n+              !isGuaranteedToTransferExecutionToSuccessor(OpSD->getInst()))\n+            ControlDependentMembers.push_back(OpSD);\n+        }\n         continue;\n       }\n       ScheduledBundles.find(I)->getSecond().pop_back();\n+      if (!ControlDependentMembers.empty()) {\n+        ScheduleBundle Invalid = ScheduleBundle::invalid();\n+        calculateDependencies(Invalid, /*InsertInReadyList=*/false, SLP,\n+                              ControlDependentMembers);\n+      }\n     }\n     return std::nullopt;\n   }\n@@ -21304,7 +21318,10 @@ void BoUpSLP::BlockScheduling::calculateDependencies(\n     }\n   };\n \n-  WorkList.push_back(Bundle.getBundle().front());\n+  assert((Bundle || !ControlDeps.empty()) &&\n+         \"expected at least one instruction to schedule\");\n+  if (Bundle)\n+    WorkList.push_back(Bundle.getBundle().front());\n   WorkList.append(ControlDeps.begin(), ControlDeps.end());\n   SmallPtrSet<ScheduleBundle *, 16> Visited;\n   while (!WorkList.empty()) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/control-deps-schedule-data-recalculate.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(i32 %mul) {\n;\nentry:\n  %h = alloca [4 x i32], align 16\n  %add = add i32 0, 0\n  %add4 = add i32 %add, 0\n  %call = tail call i32 @f1(i32 %add4)\n  %mul1 = shl i32 0, 1\n  %add5 = add i32 %call, %mul1\n  store i32 %add5, ptr %h, align 16\n  %arrayinit.element = getelementptr i8, ptr %h, i64 4\n  %add6 = add i32 0, 0\n  %add7 = add i32 %add6, %mul\n  %add9 = add i32 %add7, %add4\n  store i32 %add9, ptr %arrayinit.element, align 4\n  %arrayinit.element10 = getelementptr i8, ptr %h, i64 8\n  %add11 = or i32 %add, 0\n  %add12 = add i32 %add11, %add4\n  store i32 %add12, ptr %arrayinit.element10, align 8\n  %arrayinit.element13 = getelementptr i8, ptr %h, i64 12\n  store i32 0, ptr %arrayinit.element13, align 4\n  ret i32 0\n}\n\ndeclare i32 @f1(i32)\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O{s,2,3} on x86_64-linux-gnu: Assertion `hasValidDependencies() && \"increment of unscheduled deps would be meaningless\"' failed",
    "body": "Compiler Explorer: https://godbolt.org/z/cz7cYaTEK\n\nIt is related to the recently fixed https://github.com/llvm/llvm-project/issues/153289. \n\n```\n[507] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git f5b36eb3a4919137f5594c6be564819dd60f5acf)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[508] % \n[508] % clangtk -O3 pr153289.c \n[509] % clangtk -O3 small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4773: int llvm::slpvectorizer::BoUpSLP::ScheduleData::incrementUnscheduledDeps(int): Assertion `hasValidDependencies() && \"increment of unscheduled deps would be meaningless\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O3 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/bug143 -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/bug143 -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -ferror-limit 19 -fmessage-length=103 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-3917b2.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,chr,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O3>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x000056094ff08120 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4263120)\n #1 0x000056094ff04dcf llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x425fdcf)\n #2 0x000056094ff04f22 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007fb142ea9520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007fb142efd9fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007fb142efd9fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007fb142efd9fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007fb142ea9476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007fb142e8f7f3 abort ./stdlib/abort.c:81:7\n #9 0x00007fb142e8f71b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007fb142ea0e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x0000560951a929d4 auto void llvm::slpvectorizer::BoUpSLP::BlockScheduling::schedule<llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>>(llvm::slpvectorizer::BoUpSLP const&, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>&)::'lambda'(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>)::operator()(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>) const::'lambda'(llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>*, bool)::operator()<llvm::slpvectorizer::BoUpSLP::ScheduleData>(llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>*, bool) const SLPVectorizer.cpp:0:0\n#12 0x0000560951a93c92 void llvm::slpvectorizer::BoUpSLP::BlockScheduling::schedule<llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>>(llvm::slpvectorizer::BoUpSLP const&, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SetVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::SmallVector<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, 0u>, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, void>>, 0u>&)::'lambda'(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>)::operator()(llvm::slpvectorizer::BoUpSLP::ScheduleEntity*, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::ScheduleBundle*>) const SLPVectorizer.cpp:0:0\n#13 0x0000560951a957bf llvm::slpvectorizer::BoUpSLP::BlockScheduling::tryScheduleBundle(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP*, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&)::'lambda0'(bool, llvm::slpvectorizer::BoUpSLP::ScheduleBundle&)::operator()(bool, llvm::slpvectorizer::BoUpSLP::ScheduleBundle&) const SLPVectorizer.cpp:0:0\n#14 0x0000560951a97167 llvm::slpvectorizer::BoUpSLP::BlockScheduling::tryScheduleBundle(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP*, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) SLPVectorizer.cpp:0:0\n#15 0x0000560951a98c0e llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df3c0e)\n#16 0x0000560951a9ae29 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df5e29)\n#17 0x0000560951a9a187 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df5187)\n#18 0x0000560951a9d2b0 llvm::slpvectorizer::BoUpSLP::buildTree(llvm::ArrayRef<llvm::Value*>) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5df82b0)\n#19 0x0000560951ae112a llvm::SLPVectorizerPass::vectorizeStoreChain(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, unsigned int, unsigned int, unsigned int&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e3c12a)\n#20 0x0000560951ae2f84 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&)::'lambda'(std::map<long, unsigned int, std::less<long>, std::allocator<std::pair<long const, unsigned int>>> const&)::operator()(std::map<long, unsigned int, std::less<long>, std::allocator<std::pair<long const, unsigned int>>> const&) const SLPVectorizer.cpp:0:0\n#21 0x0000560951ae4e70 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e3fe70)\n#22 0x0000560951ae578b llvm::SLPVectorizerPass::vectorizeStoreChains(llvm::slpvectorizer::BoUpSLP&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e4078b)\n#23 0x0000560951ae6cc5 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#24 0x0000560951ae78b1 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e428b1)\n#25 0x0000560950fef866 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x534a866)\n#26 0x000056094f848127 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba3127)\n#27 0x000056094cf9e536 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f9536)\n#28 0x000056094f848649 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba3649)\n#29 0x000056094cf9ec26 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f9c26)\n#30 0x000056094f846464 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba1464)\n#31 0x00005609501ae683 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#32 0x00005609501b2c23 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x450dc23)\n#33 0x00005609508acaaf clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4c07aaf)\n#34 0x000056095231278c clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x666d78c)\n#35 0x0000560950bca6a9 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f256a9)\n#36 0x0000560950b45ff5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4ea0ff5)\n#37 0x0000560950cbb408 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5016408)\n#38 0x000056094cb1ed58 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe79d58)\n#39 0x000056094cb1535a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#40 0x000056094cb19e14 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe74e14)\n#41 0x000056094c9e5f8b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd40f8b)\n#42 0x00007fb142e90d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#43 0x00007fb142e90e40 call_init ./csu/../csu/libc-start.c:128:20\n#44 0x00007fb142e90e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#45 0x000056094cb14a85 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe6fa85)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git f5b36eb3a4919137f5594c6be564819dd60f5acf)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-2b9743.c\nclangtk: note: diagnostic msg: /tmp/small-2b9743.sh\nclangtk: note: diagnostic msg: \n\n********************\n[510] % cat small.c\nextern int f1(int);\nextern void f2(int []);\nint a, b;\nint main() {\n  int e, f;\n  if (a) {\n  g:\n    f = e = -e;\n  }\n  if (1 / f)\n    goto g;\n  e = e + a + 1;\n  b = f1(e);\n  int h[] = {b + 2 * f, 1 + f + e + 2 * f, 1 + e + e, 0};\n  f2(h);\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced:\n```\n; bin/opt -passes=slp-vectorizer reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main(i32 %mul) {\nentry:\n  %h = alloca [4 x i32], align 16\n  %add = add i32 0, 0\n  %add4 = add i32 %add, 0\n  %call = tail call i32 @f1(i32 %add4)\n  %mul1 = shl i32 0, 1\n  %add5 = add i32 %call, %mul1\n  store i32 %add5, ptr %h, align 16\n  %arrayinit.element = getelementptr i8, ptr %h, i64 4\n  %add6 = add i32 0, 0\n  %add7 = add i32 %add6, %mul\n  %add9 = add i32 %add7, %add4\n  store i32 %add9, ptr %arrayinit.element, align 4\n  %arrayinit.element10 = getelementptr i8, ptr %h, i64 8\n  %add11 = or i32 %add, 0\n  %add12 = add i32 %add11, %add4\n  store i32 %add12, ptr %arrayinit.element10, align 8\n  %arrayinit.element13 = getelementptr i8, ptr %h, i64 12\n  store i32 0, ptr %arrayinit.element13, align 4\n  ret i32 0\n}\n\ndeclare i32 @f1(i32)\n\n```"
      }
    ]
  },
  "verified": true
}