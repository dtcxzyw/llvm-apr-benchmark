{
  "bug_id": "104422",
  "issue_url": "https://github.com/llvm/llvm-project/issues/104422",
  "bug_type": "miscompilation",
  "base_commit": "13a6a7975256ebdbce85f1174ae2eec735fa0d7a",
  "knowledge_cutoff": "2024-08-15T09:29:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "56140a8258a3498cfcd9f0f05c182457d43cbfd2",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15663,
          15669
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "getTreeEntry",
        "BoUpSLP::collectValuesToDemote"
      ]
    }
  },
  "patch": "commit 56140a8258a3498cfcd9f0f05c182457d43cbfd2\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Aug 15 07:57:37 2024 -0700\n\n    [SLP]Fix PR104422: Wrong value truncation\n    \n    The minbitwidth restrictions can be skipped only for immediate reduced\n    values, for other nodes still need to check if external users allow\n    bitwidth reduction.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/104422\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 81841a8f6928..87b4ed599b5b 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15663,7 +15663,8 @@ bool BoUpSLP::collectValuesToDemote(\n   if (any_of(E.Scalars, [&](Value *V) {\n         return !all_of(V->users(), [=](User *U) {\n           return getTreeEntry(U) ||\n-                 (UserIgnoreList && UserIgnoreList->contains(U)) ||\n+                 (E.Idx == 0 && UserIgnoreList &&\n+                  UserIgnoreList->contains(U)) ||\n                  (!isa<CmpInst>(U) && U->getType()->isSized() &&\n                   !U->getType()->isScalableTy() &&\n                   DL->getTypeSizeInBits(U->getType()) <= BitWidth);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/operand-is-reduced-val.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux < %s -slp-threshold=-10"
      ],
      "tests": [
        {
          "test_name": "src",
          "test_body": "define i64 @src(i32 %a) {\nentry:\n  %0 = sext i32 %a to i64\n  %1 = add nsw i64 %0, 4294967297\n  %2 = sext i32 %a to i64\n  %3 = add nsw i64 %2, 4294967297\n  %4 = add i64 %3, %1\n  %5 = and i64 %3, 1\n  %6 = add i64 %4, %5\n  %7 = sext i32 %a to i64\n  %8 = add nsw i64 %7, 4294967297\n  %9 = add i64 %8, %6\n  %10 = and i64 %8, 1\n  %11 = add i64 %9, %10\n  %12 = sext i32 %a to i64\n  %13 = add nsw i64 %12, 4294967297\n  %14 = add i64 %13, %11\n  %15 = and i64 %13, 1\n  %16 = add i64 %14, %15\n  %17 = sext i32 %a to i64\n  %18 = add nsw i64 %17, 4294967297\n  %19 = add i64 %18, %16\n  %20 = and i64 %18, 1\n  %21 = add i64 %19, %20\n  ret i64 %21\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Wrong value truncation ",
    "body": "- There seems to be an issue with SLPVectorizer. In the following example, a 2-byte wide value is incorrectly truncated:\r\n\r\n```\r\ndefine i64 @test(ptr addrspace(1) %arr, i32 %a) {\r\nentry:\r\n  br label %loop\r\n\r\nloop:\r\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\r\n  %local_1_7 = phi i64 [ 0, %entry ], [ %4, %loop ]\r\n  %0 = sext i32 %a to i64\r\n  %1 = add nsw i64 %0, 4294967297\r\n  %2 = add i64 %1, %local_1_7\r\n  %3 = and i64 %1, 1\r\n  %4 = add i64 %2, %3\r\n  %iv.next = add nuw nsw i64 %iv, 1\r\n  %5 = icmp ugt i64 %iv, 355\r\n  br i1 %5, label %exit, label %loop\r\n\r\nexit:\r\n  ret i64 %4\r\n}\r\n```\r\n- In the loop we summarize the constant 4294967297 (`0x1'0000'0001`), but after running SLPVectorizer over the unrolled loop, the constant is truncated to `1`:\r\n```\r\nloop: \r\n  %iv = phi i64 [ 0, %entry ], [ %iv.next.16, %loop ]\r\n  %local_1_7 = phi i64 [ 0, %entry ], [ %op.rdx3, %loop ]\r\n  %2 = add <16 x i32> %1, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>\r\n  %3 = sext <16 x i32> %2 to <16 x i64>\r\n...\r\n```\r\n- Command to reproduce: `opt -passes=loop-unroll,slp-vectorizer -unroll-count=17`\r\n- https://godbolt.org/z/zcPefTPzW\r\n- Looks like the issue was caused by the  https://github.com/llvm/llvm-project/commit/7f2167868d8c1cedd3915883412b9c787a2f01db\r\n\r\n@alexey-bataev Could you please take a look?\r\n",
    "author": "aleks-tmb",
    "labels": [
      "miscompilation",
      "release:backport",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "This probably needs an LLVM 19 backport?\r\n\r\n/cherry-pick 65ac12d3c9877ecf5b97552364e7eead887d94eb 56140a8258a3498cfcd9f0f05c182457d43cbfd2"
      },
      {
        "author": "llvmbot",
        "body": "/pull-request llvm/llvm-project#104747"
      }
    ]
  }
}
