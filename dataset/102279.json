{
  "bug_id": "102279",
  "issue_url": "https://github.com/llvm/llvm-project/issues/102279",
  "bug_type": "crash",
  "base_commit": "f7e1efe8bcea14686d1c303e058f687b6ca1c79f",
  "knowledge_cutoff": "2024-08-07T07:28:15Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "441f94f4bdf6e2b9747ec12194c595098d9c3a5b",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          17336,
          17362
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "isFixedVectorShuffle",
        "getSameOpcode",
        "InstructionsState",
        "isOpcodeOrAlt",
        "isAltShuffle"
      ]
    }
  },
  "patch": "commit 441f94f4bdf6e2b9747ec12194c595098d9c3a5b\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Aug 7 04:09:55 2024 -0700\n\n    [SLP]Fix PR102279: check the tracked values for extractelements, not the original values\n    \n    If the reduced value was replaced by the extractelement instruction\n    during vectorization and we attempt to check if this is so, need to\n    check the tracked value, not the original (deleted) instruction.\n    Otherwise, the compiler may crash\n    \n    Fixes https://github.com/llvm/llvm-project/issues/102279\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex c9335b7a89e1..1fee06d145b9 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -17336,27 +17336,23 @@ public:\n       // Try to handle shuffled extractelements.\n       if (S.getOpcode() == Instruction::ExtractElement && !S.isAltShuffle() &&\n           I + 1 < E) {\n-        InstructionsState NextS = getSameOpcode(ReducedVals[I + 1], TLI);\n-        if (NextS.getOpcode() == Instruction::ExtractElement &&\n-            !NextS.isAltShuffle()) {\n-          SmallVector<Value *> CommonCandidates(Candidates);\n-          for (Value *RV : ReducedVals[I + 1]) {\n-            Value *RdxVal = TrackedVals.find(RV)->second;\n-            // Check if the reduction value was not overriden by the\n-            // extractelement instruction because of the vectorization and\n-            // exclude it, if it is not compatible with other values.\n-            if (auto *Inst = dyn_cast<Instruction>(RdxVal))\n-              if (!NextS.getOpcode() || !NextS.isOpcodeOrAlt(Inst))\n-                continue;\n-            CommonCandidates.push_back(RdxVal);\n-            TrackedToOrig.try_emplace(RdxVal, RV);\n-          }\n-          SmallVector<int> Mask;\n-          if (isFixedVectorShuffle(CommonCandidates, Mask)) {\n-            ++I;\n-            Candidates.swap(CommonCandidates);\n-            ShuffledExtracts = true;\n-          }\n+        SmallVector<Value *> CommonCandidates(Candidates);\n+        for (Value *RV : ReducedVals[I + 1]) {\n+          Value *RdxVal = TrackedVals.find(RV)->second;\n+          // Check if the reduction value was not overriden by the\n+          // extractelement instruction because of the vectorization and\n+          // exclude it, if it is not compatible with other values.\n+          auto *Inst = dyn_cast<ExtractElementInst>(RdxVal);\n+          if (!Inst)\n+            continue;\n+          CommonCandidates.push_back(RdxVal);\n+          TrackedToOrig.try_emplace(RdxVal, RV);\n+        }\n+        SmallVector<int> Mask;\n+        if (isFixedVectorShuffle(CommonCandidates, Mask)) {\n+          ++I;\n+          Candidates.swap(CommonCandidates);\n+          ShuffledExtracts = true;\n         }\n       }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/reduced-value-replace-extractelement.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-threshold=-99999 < %s -mtriple=x86_64-unknown-linux-gnu"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb1, %bb\n  %phi = phi i32 [ 0, %bb ], [ %mul9, %bb1 ]\n  %phi2 = phi i32 [ 0, %bb ], [ 0, %bb1 ]\n  %trunc = trunc i64 0 to i32\n  %mul = mul i32 0, %trunc\n  %mul3 = mul i32 %trunc, %phi\n  %mul4 = mul i32 %mul3, %mul\n  %mul5 = mul i32 %mul4, %mul\n  %trunc6 = trunc i64 0 to i32\n  %mul7 = mul i32 0, %trunc6\n  %mul8 = mul i32 %mul5, %mul7\n  %mul9 = mul i32 %mul8, %mul7\n  br label %bb1\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/reduction-gather-non-scheduled-extracts.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-sie-ps5 < %s"
      ],
      "tests": [
        {
          "test_name": "tes",
          "test_body": "define void @tes() {\nentry:\n  %0 = extractelement <2 x i1> zeroinitializer, i64 0\n  %1 = extractelement <2 x i1> zeroinitializer, i64 0\n  %2 = fcmp ole <2 x double> zeroinitializer, zeroinitializer\n  %3 = extractelement <2 x i1> %2, i64 0\n  %4 = extractelement <2 x i1> zeroinitializer, i64 0\n  br label %5\n\n5:                                                ; preds = %entry\n  %6 = select i1 false, i1 false, i1 false\n  %7 = select i1 %6, i1 %0, i1 false\n  %8 = select i1 %7, i1 %1, i1 false\n  %9 = select i1 %8, i1 false, i1 false\n  %10 = select i1 %9, i1 %3, i1 false\n  %11 = select i1 %10, i1 %4, i1 false\n  br i1 %11, label %12, label %13\n\n12:                                               ; preds = %5\n  ret void\n\n13:                                               ; preds = %5\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Crash in getSameOpcode(llvm::ArrayRef<llvm::Value*>, llvm::TargetLibraryInfo const&, unsigned int)",
    "body": " To reproduce run the test below with `-passes slp-vectorizer -slp-threshold=-99999`\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @wombat() #0 gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb1, %bb\r\n  %phi = phi i32 [ 0, %bb ], [ %mul9, %bb1 ]\r\n  %phi2 = phi i32 [ 0, %bb ], [ 0, %bb1 ]\r\n  %trunc = trunc i64 0 to i32\r\n  %mul = mul i32 0, %trunc\r\n  %mul3 = mul i32 %trunc, %phi\r\n  %mul4 = mul i32 %mul3, %mul\r\n  %mul5 = mul i32 %mul4, %mul\r\n  %trunc6 = trunc i64 0 to i32\r\n  %mul7 = mul i32 0, %trunc6\r\n  %mul8 = mul i32 %mul5, %mul7\r\n  %mul9 = mul i32 %mul8, %mul7\r\n  br label %bb1\r\n}\r\n\r\n```\r\nReproducer: https://godbolt.org/z/sqEov8n9h\r\n\r\nStack dump:\r\n```\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes slp-vectorizer -slp-threshold=-99999 <source>\r\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\r\n2.\tRunning pass \"slp-vectorizer\" on function \"wombat\"\r\n #0 0x0000000004f2ff18 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f2ff18)\r\n #1 0x0000000004f2d68c SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007a3cdfe42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x000000000403fb8a getSameOpcode(llvm::ArrayRef<llvm::Value*>, llvm::TargetLibraryInfo const&, unsigned int) (.constprop.1) SLPVectorizer.cpp:0:0\r\n #4 0x000000000406b0a4 (anonymous namespace)::HorizontalReduction::tryToReduce(llvm::slpvectorizer::BoUpSLP&, llvm::DataLayout const&, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo const&) SLPVectorizer.cpp:0:0\r\n #5 0x000000000406dab4 llvm::SLPVectorizerPass::vectorizeHorReduction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::TargetTransformInfo*, llvm::SmallVectorImpl<llvm::WeakTrackingVH>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x406dab4)\r\n #6 0x00000000040720f8 llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::TargetTransformInfo*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40720f8)\r\n #7 0x00000000040763be llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40763be)\r\n #8 0x000000000407c648 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n #9 0x000000000407d11b llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x407d11b)\r\n#10 0x0000000002e7f61e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e7f61e)\r\n#11 0x0000000004d2d348 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d2d348)\r\n#12 0x0000000000de6cce llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xde6cce)\r\n#13 0x0000000004d2bd3e llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d2bd3e)\r\n#14 0x0000000000de731e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xde731e)\r\n#15 0x0000000004d29ea0 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d29ea0)\r\n#16 0x00000000008e4312 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8e4312)\r\n#17 0x00000000008d723c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d723c)\r\n#18 0x00007a3cdfe29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#19 0x00007a3cdfe29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#20 0x00000000008ce6ae _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8ce6ae)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "RKSimon",
        "body": "CC @alexey-bataev "
      }
    ]
  }
}