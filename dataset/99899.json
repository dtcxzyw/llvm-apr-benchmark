{
  "bug_id": "99899",
  "issue_url": "https://github.com/llvm/llvm-project/issues/99899",
  "bug_type": "crash",
  "base_commit": "9a8b0407fc16af4ca6f79a2583297318a645d88a",
  "knowledge_cutoff": "2024-07-22T17:02:03Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "3cb82f49dc990dc20a765856c0e126193992fe44",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          9699,
          9705
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getEntryCost"
      ]
    }
  },
  "patch": "commit 3cb82f49dc990dc20a765856c0e126193992fe44\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Jul 22 12:45:28 2024 -0700\n\n    [SLP]Fix PR99899: Use canonical type instead of original vector of ptr.\n    \n    Use adjusted canonical integer type instead of the original ptr type to\n    fix the crash in the TTI.\n    Fixes https://github.com/llvm/llvm-project/issues/99899\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 667c4eb311c2..cca9eeebaa53 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -9699,7 +9699,8 @@ BoUpSLP::getEntryCost(const TreeEntry *E, ArrayRef<Value *> VectorizedVals,\n           CanonicalType = CanonicalType->getWithNewType(IntegerType::get(\n               CanonicalType->getContext(),\n               DL->getTypeSizeInBits(CanonicalType->getScalarType())));\n-        IntrinsicCostAttributes CostAttrs(MinMaxID, VecTy, {VecTy, VecTy});\n+        IntrinsicCostAttributes CostAttrs(MinMaxID, CanonicalType,\n+                                          {CanonicalType, CanonicalType});\n         InstructionCost IntrinsicCost =\n             TTI->getIntrinsicInstrCost(CostAttrs, CostKind);\n         // If the selects are the only uses of the compares, they will be\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/SystemZ/cmp-ptr-minmax.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=s390x-unknown-linux-gnu -mcpu=z16 -slp-threshold=-10 < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i1 @test(i64 %0, i64 %1, ptr %2) {\n;\nentry:\n  %gep44 = getelementptr i8, ptr null, i64 %0\n  %gep45 = getelementptr i8, ptr null, i64 %1\n  %4 = icmp ult ptr %gep44, %gep45\n  %umin = select i1 %4, ptr %gep44, ptr %gep45\n  %gep48 = getelementptr i8, ptr null, i64 %0\n  %gep49 = getelementptr i8, ptr null, i64 %1\n  %5 = icmp ult ptr %gep48, %gep49\n  %umin50 = select i1 %5, ptr %gep48, ptr %gep49\n  %b095 = icmp ult ptr %umin, %2\n  %b196 = icmp ult ptr %umin50, %2\n  %res = and i1 %b095, %b196\n  ret i1 %res\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] crash after 8ff233f",
    "body": "8ff233f \"[SLP]Correctly detect minnum/maxnum patterns for select/cmp operations on floats.\" seems to have introduced a problem when building SPEC on SystemZ.\r\n\r\nopt  -mtriple=s390x-linux-gnu -mcpu=z16 -O3 ./tc_slp.ll -o /dev/null\r\nopt: /home/ijonpan/llvm-project/llvm/include/llvm/IR/DerivedTypes.h:704: llvm::Type* llvm::Type::getWithNewBitWidth(unsigned int) const: Assertion `isIntOrIntVectorTy() && \"Original type expected to be a vector of integers or a scalar integer.\"' failed.\r\n...\r\n#15 0x000000000519c8f8 llvm::slpvectorizer::BoUpSLP::getEntryCost\r\n\r\n[tc_slp.ll.tar.gz](https://github.com/user-attachments/files/16337301/tc_slp.ll.tar.gz)\r\n",
    "author": "JonPsson1",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}