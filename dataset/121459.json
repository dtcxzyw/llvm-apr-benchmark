{
  "bug_id": "121459",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121459",
  "bug_type": "miscompilation",
  "base_commit": "68d265666e708bad1c63b419b6275aaba1a7dcd2",
  "knowledge_cutoff": "2025-01-02T09:03:32Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a4d92400a6db9566d84cb4b900149e36e117f452",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        [
          2782,
          2787
        ],
        [
          2838,
          2843
        ],
        [
          2847,
          2852
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        "foldGEPOfPhi"
      ]
    }
  },
  "patch": "commit a4d92400a6db9566d84cb4b900149e36e117f452\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Jan 3 23:19:57 2025 +0800\n\n    [InstCombine] Fix GEPNoWrapFlags propagation in `foldGEPOfPhi` (#121572)\n    \n    Closes https://github.com/llvm/llvm-project/issues/121459.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\nindex 934156f04f7f..f63de1f0d410 100644\n--- a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n@@ -2782,6 +2782,7 @@ static Instruction *foldGEPOfPhi(GetElementPtrInst &GEP, PHINode *PN,\n   // loop iteration).\n   if (Op1 == &GEP)\n     return nullptr;\n+  GEPNoWrapFlags NW = Op1->getNoWrapFlags();\n \n   int DI = -1;\n \n@@ -2838,6 +2839,8 @@ static Instruction *foldGEPOfPhi(GetElementPtrInst &GEP, PHINode *PN,\n         }\n       }\n     }\n+\n+    NW &= Op2->getNoWrapFlags();\n   }\n \n   // If not all GEPs are identical we'll have to create a new PHI node.\n@@ -2847,6 +2850,8 @@ static Instruction *foldGEPOfPhi(GetElementPtrInst &GEP, PHINode *PN,\n     return nullptr;\n \n   auto *NewGEP = cast<GetElementPtrInst>(Op1->clone());\n+  NewGEP->setNoWrapFlags(NW);\n+\n   if (DI == -1) {\n     // All the GEPs feeding the PHI are identical. Clone one down into our\n     // BB so that it can be merged with the current GEP.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/opaque-ptr.ll",
      "commands": [
        "opt -S -passes='instcombine<no-verify-fixpoint>' < %s"
      ],
      "tests": [
        {
          "test_name": "gep_of_phi_of_gep_different_type",
          "test_body": "define ptr @gep_of_phi_of_gep_different_type(i1 %c, ptr %p) {\n  br i1 %c, label %if, label %else\n\nif:                                               ; preds = %0\n  %gep1 = getelementptr i32, ptr %p, i64 1\n  br label %join\n\nelse:                                             ; preds = %0\n  %gep2 = getelementptr i64, ptr %p, i64 2\n  br label %join\n\njoin:                                             ; preds = %else, %if\n  %phi = phi ptr [ %gep1, %if ], [ %gep2, %else ]\n  %gep = getelementptr i32, ptr %phi, i64 1\n  ret ptr %gep\n}\n"
        },
        {
          "test_name": "gep_of_phi_of_gep_flags2",
          "test_body": "define ptr @gep_of_phi_of_gep_flags2(i1 %c, ptr %p) {\n  br i1 %c, label %if, label %else\n\nif:                                               ; preds = %0\n  %gep1 = getelementptr nuw i32, ptr %p, i64 1\n  br label %join\n\nelse:                                             ; preds = %0\n  %gep2 = getelementptr nuw i32, ptr %p, i64 2\n  br label %join\n\njoin:                                             ; preds = %else, %if\n  %phi = phi ptr [ %gep1, %if ], [ %gep2, %else ]\n  %gep = getelementptr i32, ptr %phi, i64 1\n  ret ptr %gep\n}\n"
        },
        {
          "test_name": "gep_of_phi_of_gep_flags1",
          "test_body": "define ptr @gep_of_phi_of_gep_flags1(i1 %c, ptr %p) {\n  br i1 %c, label %if, label %else\n\nif:                                               ; preds = %0\n  %gep1 = getelementptr inbounds i32, ptr %p, i64 1\n  br label %join\n\nelse:                                             ; preds = %0\n  %gep2 = getelementptr i32, ptr %p, i64 2\n  br label %join\n\njoin:                                             ; preds = %else, %if\n  %phi = phi ptr [ %gep1, %if ], [ %gep2, %else ]\n  %gep = getelementptr i32, ptr %phi, i64 1\n  ret ptr %gep\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] GEPNoWrapFlags is propagated incorrectly",
    "body": "Alive2: https://alive2.llvm.org/ce/z/3ME7S7\n```\ndefine ptr @src(i1 %c, ptr %p) {\n  br i1 %c, label %if, label %else\n\nif:\n  %gep1 = getelementptr inbounds i32, ptr %p, i64 1\n  br label %join\n\nelse:\n  %gep2 = getelementptr i64, ptr %p, i64 2\n  br label %join\n\njoin:\n  %phi = phi ptr [ %gep1, %if ], [ %gep2, %else ]\n  %gep = getelementptr i32, ptr %phi, i64 1\n  ret ptr %gep\n}\n```\n```\n\n----------------------------------------\ndefine ptr @src(i1 %c, ptr %p) {\n#0:\n  br i1 %c, label %if, label %else\n\nelse:\n  %gep2 = gep ptr %p, 8 x i64 2\n  br label %join\n\nif:\n  %gep1 = gep inbounds ptr %p, 4 x i64 1\n  br label %join\n\njoin:\n  %phi = phi ptr [ %gep1, %if ], [ %gep2, %else ]\n  %gep = gep ptr %phi, 4 x i64 1\n  ret ptr %gep\n}\n=>\ndefine ptr @src(i1 %c, ptr %p) {\n#0:\n  br i1 %c, label %if, label %else\n\nelse:\n  br label %join\n\nif:\n  br label %join\n\njoin:\n  %#1 = phi i64 [ 4, %if ], [ 16, %else ]\n  %#2 = gep inbounds nuw ptr %p, 1 x i64 %#1\n  %gep = gep ptr %#2, 1 x i64 4\n  ret ptr %gep\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\ni1 %c = #x0 (0)\nptr %p = null\n\nSource:\n  >> Jump to %else\nptr %gep2 = pointer(non-local, block_id=0, offset=16) / Address=#x0000000000000010\n  >> Jump to %join\nptr %phi = pointer(non-local, block_id=0, offset=16) / Address=#x0000000000000010\nptr %gep = pointer(non-local, block_id=0, offset=20) / Address=#x0000000000000014\n\nSOURCE MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: 0\nBlock 1 >\tsize: 0\talign: 1\talloc type: 0\talive: true\taddress: 1\n\nTarget:\n  >> Jump to %else\n  >> Jump to %join\ni64 %#1 = #x0000000000000010 (16)\nptr %#2 = poison\nptr %gep = poison\nSource value: pointer(non-local, block_id=0, offset=20) / Address=#x0000000000000014\nTarget value: poison\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}