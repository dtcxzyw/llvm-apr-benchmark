{
  "bug_id": "112350",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112350",
  "bug_type": "miscompilation",
  "base_commit": "35e937b4de1890186347a382f7727ba86441dbda",
  "knowledge_cutoff": "2024-10-15T12:03:18Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "aad3a1630e385a6834f92a5f1d6045451ba21e4e",
    "components": [
      "ValueTracking"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        [
          8522,
          8527
        ],
        [
          8530,
          8535
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        "llvm::isKnownInversion"
      ]
    }
  },
  "patch": "commit aad3a1630e385a6834f92a5f1d6045451ba21e4e\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu Oct 17 00:27:21 2024 +0800\n\n    [ValueTracking] Respect `samesign` flag in `isKnownInversion` (#112390)\n    \n    In https://github.com/llvm/llvm-project/pull/93591 we introduced\n    `isKnownInversion` and assumes `X` is poison implies `Y` is poison\n    because they share common operands. But after introducing `samesign`\n    this assumption no longer hold if `X` is an icmp has `samesign` flag.\n    \n    Alive2 link: https://alive2.llvm.org/ce/z/rj3EwQ (Please run it locally\n    with this patch and https://github.com/AliveToolkit/alive2/pull/1098).\n    \n    This approach is the most conservative way in my mind to address this\n    problem. If `X` has `samesign` flag, it will check if `Y` also has this\n    flag and make sure constant RHS operands have the same sign.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/112350.\n\ndiff --git a/llvm/lib/Analysis/ValueTracking.cpp b/llvm/lib/Analysis/ValueTracking.cpp\nindex eb8d17044a17..e9ed8b3c862b 100644\n--- a/llvm/lib/Analysis/ValueTracking.cpp\n+++ b/llvm/lib/Analysis/ValueTracking.cpp\n@@ -8522,6 +8522,10 @@ bool llvm::isKnownInversion(const Value *X, const Value *Y) {\n       !match(Y, m_c_ICmp(Pred2, m_Specific(A), m_Value(C))))\n     return false;\n \n+  // They must both have samesign flag or not.\n+  if (cast<ICmpInst>(X)->hasSameSign() != cast<ICmpInst>(Y)->hasSameSign())\n+    return false;\n+\n   if (B == C)\n     return Pred1 == ICmpInst::getInversePredicate(Pred2);\n \n@@ -8530,6 +8534,11 @@ bool llvm::isKnownInversion(const Value *X, const Value *Y) {\n   if (!match(B, m_APInt(RHSC1)) || !match(C, m_APInt(RHSC2)))\n     return false;\n \n+  // Sign bits of two RHSCs should match.\n+  if (cast<ICmpInst>(X)->hasSameSign() &&\n+      RHSC1->isNonNegative() != RHSC2->isNonNegative())\n+    return false;\n+\n   const auto CR1 = ConstantRange::makeExactICmpRegion(Pred1, *RHSC1);\n   const auto CR2 = ConstantRange::makeExactICmpRegion(Pred2, *RHSC2);\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select-cmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_select_inverse_nonconst4",
          "test_body": "define i1 @test_select_inverse_nonconst4(i64 %x, i64 %y, i64 %z, i1 %cond) {\n  %cmp1 = icmp ult i64 %x, %y\n  %cmp2 = icmp uge i64 %z, %y\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_both",
          "test_body": "define i1 @test_select_inverse_samesign_both(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp samesign ult i64 %x, %y\n  %cmp2 = icmp samesign uge i64 %x, %y\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_false_arm_rhsc_same_sign",
          "test_body": "define i1 @test_select_inverse_samesign_false_arm_rhsc_same_sign(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp ult i64 %x, 11\n  %cmp2 = icmp samesign ugt i64 %x, 10\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_true_arm",
          "test_body": "define i1 @test_select_inverse_samesign_true_arm(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp samesign ult i64 %x, %y\n  %cmp2 = icmp uge i64 %x, %y\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_true_arm_rhsc_same_sign",
          "test_body": "define i1 @test_select_inverse_samesign_true_arm_rhsc_same_sign(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp samesign ult i64 %x, 11\n  %cmp2 = icmp ugt i64 %x, 10\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_both_rhsc_diff_sign",
          "test_body": "define i1 @test_select_inverse_samesign_both_rhsc_diff_sign(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp samesign slt i64 %x, 0\n  %cmp2 = icmp samesign sgt i64 %x, -1\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_both_rhsc_same_sign",
          "test_body": "define i1 @test_select_inverse_samesign_both_rhsc_same_sign(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp samesign ult i64 %x, 11\n  %cmp2 = icmp samesign ugt i64 %x, 10\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "test_select_inverse_samesign_false_arm",
          "test_body": "define i1 @test_select_inverse_samesign_false_arm(i64 %x, i64 %y, i1 %cond) {\n  %cmp1 = icmp ult i64 %x, %y\n  %cmp2 = icmp samesign uge i64 %x, %y\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\n  ret i1 %sel\n}\n"
        },
        {
          "test_name": "sel_icmp_two_cmp",
          "test_body": "define i1 @sel_icmp_two_cmp(i1 %c, i32 %a1, i32 %a2, i32 %a3, i32 %a4) {\n  %v1 = call i8 @llvm.ucmp.i8.i32(i32 %a1, i32 %a2)\n  %v2 = call i8 @llvm.scmp.i8.i32(i32 %a3, i32 %a4)\n  %sel = select i1 %c, i8 %v1, i8 %v2\n  %cmp = icmp sle i8 %sel, 0\n  ret i1 %cmp\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.scmp.i8.i32(i32, i32) #0\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.ucmp.i8.i32(i32, i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `samesign` flag should be dropped",
    "body": "Reproducer:\r\n```\r\ndefine i1 @src(i64 %x, i64 %y, i1 %cond) {\r\n  %cmp1 = icmp ult i64 %x, %y\r\n  %cmp2 = icmp samesign uge i64 %x, %y\r\n  %sel = select i1 %cond, i1 %cmp1, i1 %cmp2\r\n  ret i1 %sel\r\n}\r\n\r\ndefine i1 @tgt(i64 %x, i64 %y, i1 %cond) {\r\n  %cmp2 = icmp samesign uge i64 %x, %y\r\n  %sel = xor i1 %cond, %cmp2\r\n  ret i1 %sel\r\n}\r\n```\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "antoniofrighetto",
        "body": "Don't we miss checking the flag in `hasPoisonGeneratingFlags`?"
      },
      {
        "author": "dtcxzyw",
        "body": "> Don't we miss checking the flag in `hasPoisonGeneratingFlags`?\r\n\r\nYeah. I am preparing a patch.\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "But adding support in `hasPoisonGeneratingFlags` doesn't address this issue :(\r\n"
      },
      {
        "author": "antoniofrighetto",
        "body": "> But adding support in `hasPoisonGeneratingFlags` doesn't address this issue :(\r\n\r\nI assume we may need to `dropPoisonGeneratingFlags` in InstCombineCompares, where needed?"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}