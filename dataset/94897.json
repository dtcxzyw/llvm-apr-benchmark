{
  "bug_id": "94897",
  "issue_url": "https://github.com/llvm/llvm-project/issues/94897",
  "bug_type": "miscompilation",
  "base_commit": "add89088fb8de84fdbeb97c0386a831e51d090a1",
  "knowledge_cutoff": "2024-06-09T10:15:35Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "e4b0655b297e4f4b0eb26548c8be48d527ebc178",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          2441,
          2449
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombinerImpl::foldICmpShlConstant"
      ]
    }
  },
  "patch": "commit e4b0655b297e4f4b0eb26548c8be48d527ebc178\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Jun 10 03:17:01 2024 +0800\n\n    [InstCombine] Fix missing argument typo in `InstCombinerImpl::foldICmpShlConstant` (#94899)\n    \n    Closes #94897.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex 4203147bc6a5..3fce4a3c20b3 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -2441,9 +2441,10 @@ Instruction *InstCombinerImpl::foldICmpShlConstant(ICmpInst &Cmp,\n       Type *TruncTy = ShType->getWithNewBitWidth(TypeBits - Amt);\n       Constant *NewC =\n           ConstantInt::get(TruncTy, RHSC.ashr(*ShiftAmt).trunc(TypeBits - Amt));\n-      return new ICmpInst(\n-          CmpPred, Builder.CreateTrunc(X, TruncTy, \"\", Shl->hasNoSignedWrap()),\n-          NewC);\n+      return new ICmpInst(CmpPred,\n+                          Builder.CreateTrunc(X, TruncTy, \"\", /*IsNUW=*/false,\n+                                              Shl->hasNoSignedWrap()),\n+                          NewC);\n     }\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_icmp_shl_sgt",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @test_icmp_shl_sgt(i64 %x) {\n  %shl = shl i64 %x, 32\n  %cmp = icmp sgt i64 %shl, 8589934591\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "test_icmp_shl_nuw_i31",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @test_icmp_shl_nuw_i31(i31 %x) {\n  %shl = shl nuw i31 %x, 23\n  %cmp = icmp ugt i31 %shl, -50331648\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "test_icmp_shl_vec",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine <2 x i1> @test_icmp_shl_vec(<2 x i64> %x) {\n  %shl = shl <2 x i64> %x, splat (i64 32)\n  %cmp = icmp ult <2 x i64> %shl, splat (i64 8589934593)\n  ret <2 x i1> %cmp\n}\n"
        },
        {
          "test_name": "test_icmp_shl_nsw_i31",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @test_icmp_shl_nsw_i31(i31 %x) {\n  %shl = shl nsw i31 %x, 23\n  %cmp = icmp ugt i31 %shl, -50331648\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "test_icmp_shl_nsw",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @test_icmp_shl_nsw(i64 %x) {\n  %shl = shl nsw i64 %x, 32\n  %cmp = icmp ult i64 %shl, 8589934593\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "pr94897",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @pr94897(i32 range(i32 -2147483648, 0) %x) {\n  %shl = shl nsw i32 %x, 24\n  %cmp = icmp ugt i32 %shl, -50331648\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "test_icmp_shl_nuw",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @test_icmp_shl_nuw(i64 %x) {\n  %shl = shl nuw i64 %x, 32\n  %cmp = icmp ult i64 %shl, 8589934593\n  ret i1 %cmp\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong code at -O1 and above on x86_64-linux-gnu",
    "body": "This appears to be a recent regression as it doesn't reproduce with 18.1.0 and earlier.\r\n\r\nCompiler Explorer: https://godbolt.org/z/T9b4a7z3v\r\n\r\n```console\r\n% clangtk -v\r\nclang version 19.0.0git (https://github.com/llvm/llvm-project.git 338cbfef03e0ab58d7b52f3301928c58b194a1b4)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /local/suz-local/software/local/clang-trunk/bin\r\nBuild config: +assertions\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/10\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9\r\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\r\nCandidate multilib: .;@m64\r\nSelected multilib: .;@m64\r\n% \r\n% clangtk -O0 small.c; ./a.out\r\n% clangtk -O1 small.c\r\n% ./a.out\r\nAborted\r\n% cat small.c\r\nint a;\r\nchar b(char c, char d) { return c - d; }\r\nint main() {\r\n  int e;\r\n  for (a = -10; a > -11; a--)\r\n    e = b(a, -1);\r\n  if (e > -2)\r\n    __builtin_abort();\r\n  return 0;\r\n}\r\n```",
    "author": "zhendongsu",
    "labels": [
      "miscompilation",
      "confirmed",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/_3cyuT\r\n```ll\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\n\r\ndefine i1 @src() {\r\nentry:\r\n  br label %for.body\r\n\r\nfor.body:\r\n  %storemerge4 = phi i32 [ -10, %entry ], [ %dec, %for.body ]\r\n  %dec = add nsw i32 %storemerge4, -1\r\n  %cmp = icmp ugt i32 %dec, -11\r\n  br i1 %cmp, label %for.body, label %for.end\r\n\r\nfor.end:\r\n  %sub.i.le = shl nsw i32 %storemerge4, 24\r\n  %cmp2 = icmp ugt i32 %sub.i.le, -50331648\r\n  ret i1 %cmp2\r\n}\r\n\r\ndefine i1 @tgt() {\r\nentry:\r\n  br label %for.body\r\n\r\nfor.body:\r\n  %storemerge4 = phi i32 [ -10, %entry ], [ %dec, %for.body ]\r\n  %dec = add nsw i32 %storemerge4, -1\r\n  %cmp = icmp ugt i32 %dec, -11\r\n  br i1 %cmp, label %for.body, label %for.end\r\n\r\nfor.end:\r\n  %0 = trunc nuw i32 %storemerge4 to i8\r\n  %cmp2 = icmp ugt i8 %0, -3\r\n  ret i1 %cmp2\r\n}\r\n```\r\n\r\n`nuw` flag is incorrectly added."
      },
      {
        "author": "dtcxzyw",
        "body": "Caused by https://github.com/llvm/llvm-project/commit/5c7c1f6aba467b1c5a51d58fc591314ecd7147ce."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}