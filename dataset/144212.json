{
  "bug_id": "144212",
  "issue_url": "https://github.com/llvm/llvm-project/issues/144212",
  "bug_type": "crash",
  "base_commit": "a383b1a95b63cf120b3dea554c2d66ccfaee066b",
  "knowledge_cutoff": "2025-06-14T07:41:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "30b16ec3415e7ddb597d096f818d011b1b4e6a63",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          1141,
          1146
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "simplifyRecipe"
      ]
    }
  },
  "patch": "commit 30b16ec3415e7ddb597d096f818d011b1b4e6a63\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Mon Jun 16 22:54:25 2025 +0100\n\n    [VPlan] Simplify trivial VPFirstOrderRecurrencePHI recipes.\n    \n    VPFirstOrderRecurrencePHIRecipes where the incoming values are the same\n    can be simplified and removed.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/144212.\n    \n    The new test is added together with other related tests from\n    first-order-recurrence.ll\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex 44a72755b9cf..05a0e15f9a19 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -1141,6 +1141,12 @@ static void simplifyRecipe(VPRecipeBase &R, VPTypeAnalysis &TypeInfo) {\n     return;\n   }\n \n+  if (auto *Phi = dyn_cast<VPFirstOrderRecurrencePHIRecipe>(Def)) {\n+    if (Phi->getOperand(0) == Phi->getOperand(1))\n+      Def->replaceAllUsesWith(Phi->getOperand(0));\n+    return;\n+  }\n+\n   // Some simplifications can only be applied after unrolling. Perform them\n   // below.\n   if (!Plan->isUnrolled())\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence-dead-instructions.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Test case for https://github.com/llvm/llvm-project/issues/144212.\ndefine i8 @recurrence_phi_with_same_incoming_values_after_simplifications(i8 %for.start, ptr %dst) {\n;\nentry:\n  br label %loop\n\nloop:\n  %iv = phi i32 [ 1, %entry ], [ %iv.next, %loop ]\n  %for = phi i8 [ %for.start, %entry ], [ %for.next, %loop ]\n  %for.next = and i8 %for.start, -1\n  %iv.next = add i32 %iv, 1\n  %gep.dst = getelementptr inbounds i8, ptr %dst, i32 %iv\n  store i8 %for, ptr %gep.dst\n  %ec = icmp eq i32 %iv.next, 0\n  br i1 %ec, label %exit, label %loop\n\nexit:\n  ret i8 %for.next\n}\n\n; %vec.dead will be marked as dead instruction in the vector loop and no recipe\n; will be created for it. Make sure a valid sink target is used.\ndefine i32 @sink_after_dead_inst(ptr %A.ptr) {\n;\nentry:\n  br label %loop\n\nloop:\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop ]\n  %for = phi i32 [ 0, %entry ], [ %for.prev, %loop ]\n  %cmp = icmp eq i32 %for, 15\n  %C = icmp eq i1 %cmp, true\n  %vec.dead = and i1 %C, 1\n  %iv.next = add i16 %iv, 1\n  %B1 = or i16 %iv.next, %iv.next\n  %B3 = and i1 %cmp, %C\n  %for.prev = zext i16 %B1 to i32\n\n  %ext = zext i1 %B3 to i32\n  %A.gep = getelementptr i32, ptr %A.ptr, i16 %iv\n  store i32 0, ptr %A.gep\n  br i1 %vec.dead, label %for.end, label %loop\n\nfor.end:\n  ret i32 %for\n}\n\n; Dead instructions, like the exit condition are not part of the actual VPlan\n; and do not need to be sunk. PR44634.\ndefine void @sink_dead_inst(ptr %a) {\n;\nentry:\n  br label %for.cond\n\nfor.cond:\n  %iv = phi i16 [ -27, %entry ], [ %iv.next, %for.cond ]\n  %rec.1 = phi i16 [ 0, %entry ], [ %rec.1.prev, %for.cond ]\n  %rec.2 = phi i32 [ -27, %entry ], [ %rec.2.prev, %for.cond ]\n  %use.rec.1 = sub i16 %rec.1, 10\n  %cmp = icmp eq i32 %rec.2, 15\n  %iv.next = add i16 %iv, 1\n  %rec.2.prev = zext i16 %iv.next to i32\n  %rec.1.prev = add i16 %iv.next, 5\n  %gep = getelementptr i16, ptr %a, i16 %iv\n  store i16 %use.rec.1, ptr %gep\n  br i1 %cmp, label %for.end, label %for.cond\n\nfor.end:\n  ret void\n}\n\n; %rec.1 only has %use.rec.1 as use, which can be removed. This enables %rec.1\n; to be removed also.\ndefine void @unused_recurrence(ptr %a) {\n;\nentry:\n  br label %for.cond\n\nfor.cond:\n  %iv = phi i16 [ -27, %entry ], [ %iv.next, %for.cond ]\n  %rec.1 = phi i16 [ 0, %entry ], [ %rec.1.prev, %for.cond ]\n  %use.rec.1 = sub i16 %rec.1, 10\n  %iv.next= add i16 %iv, 1\n  %rec.1.prev = add i16 %iv.next, 5\n  %cmp = icmp eq i16 %iv, 1000\n  br i1 %cmp, label %for.end, label %for.cond\n\nfor.end:\n  ret void\n}"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -force-widen-divrem-via-safe-divisor=0 -S",
        "opt < %s -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=2 -force-widen-divrem-via-safe-divisor=0 -S",
        "opt < %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -force-widen-divrem-via-safe-divisor=0 -S"
      ],
      "tests": [
        {
          "test_name": "recurence_uniform_load",
          "test_body": "target datalayout = \"e-m:e-i64:64-i128:128-n32:64-S128\"\n\ndefine i32 @recurence_uniform_load(ptr %src, ptr noalias %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %phi = phi i64 [ 0, %entry ], [ %add, %loop ]\n  %recur = phi i32 [ 0, %entry ], [ %load, %loop ]\n  %add = add i64 %phi, 1\n  %load = load i32, ptr %src, align 4\n  %icmp = icmp ult i64 %phi, 1\n  br i1 %icmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret i32 0\n}\n"
        },
        {
          "test_name": "sink_into_replication_region",
          "test_body": "target datalayout = \"e-m:e-i64:64-i128:128-n32:64-S128\"\n\ndefine i32 @sink_into_replication_region(i32 %y, ptr %dst) {\nbb:\n  br label %bb2\n\nbb1:                                              ; preds = %bb2\n  %var = phi i32 [ %var6, %bb2 ]\n  ret i32 %var\n\nbb2:                                              ; preds = %bb2, %bb\n  %var3 = phi i32 [ %var8, %bb2 ], [ %y, %bb ]\n  %var4 = phi i32 [ %var7, %bb2 ], [ 0, %bb ]\n  %var5 = phi i32 [ %var6, %bb2 ], [ 0, %bb ]\n  %var6 = add i32 %var5, %var4\n  %var7 = udiv i32 219220132, %var3\n  %var8 = add nsw i32 %var3, -1\n  store i32 %var4, ptr %dst, align 4\n  %var9 = icmp slt i32 %var3, 2\n  br i1 %var9, label %bb1, label %bb2, !prof !0\n}\n\n!0 = !{!\"branch_weights\", i32 1, i32 1}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Assertion failure: Instruction does not dominate all uses!",
    "body": "Reproducer: https://godbolt.org/z/WqTM1vavE\n```\n; bin/opt -passes=loop-vectorize test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i8 @test(ptr %p) {\nentry:\n  %.promoted835.i = load i8, ptr %p, align 1\n  br label %for.inc346.i\n\nfor.inc346.i:                                     ; preds = %for.inc346.i, %entry\n  %storemerge827.i = phi i32 [ 1, %entry ], [ %inc347.i, %for.inc346.i ]\n  %conv267822825.i = phi i8 [ %.promoted835.i, %entry ], [ %conv267.i, %for.inc346.i ]\n  %conv267.i = and i8 %.promoted835.i, -1\n  %inc347.i = add i32 %storemerge827.i, 1\n  %exitcond.not.i217 = icmp eq i32 %inc347.i, 0\n  br i1 %exitcond.not.i217, label %cleanup636.thread812.i, label %for.inc346.i\n\ncleanup636.thread812.i:                           ; preds = %for.inc346.i\n  ret i8 %conv267.i\n}\n```\n```\nInstruction does not dominate all uses!\n  %broadcast.splat2 = shufflevector <16 x i8> %broadcast.splatinsert1, <16 x i8> poison, <16 x i32> zeroinitializer\n  %vector.recur = phi <16 x i8> [ %vector.recur.init, %vector.ph ], [ %broadcast.splat2, %vector.body ]\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10329: bool llvm::LoopVectorizePass::processLoop(llvm::Loop*): Assertion `!verifyFunction(*L->getHeader()->getParent(), &dbgs())' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"test\"\n #0 0x000000000563b448 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x563b448)\n #1 0x0000000005638dd4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x000072139da42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x000072139da969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x000072139da42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x000072139da287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x000072139da2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x000072139da39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x000000000348514a llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x348514a)\n #9 0x0000000003486e90 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3486e90)\n#10 0x00000000034874e3 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x34874e3)\n#11 0x0000000002da157e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2da157e)\n#12 0x000000000542c281 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x542c281)\n#13 0x0000000000ea33fe llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xea33fe)\n#14 0x000000000542c763 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x542c763)\n#15 0x0000000000ea224e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xea224e)\n#16 0x000000000542a331 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x542a331)\n#17 0x000000000095988a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x95988a)\n#18 0x000000000094d05c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x94d05c)\n#19 0x000072139da29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#20 0x000072139da29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#21 0x0000000000944c95 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x944c95)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\ncc @fhahn ",
    "author": "dtcxzyw",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Taking a look. I assume this is coming from a larger reproducer? Looks like there are missed scalar folding opportunities."
      },
      {
        "author": "lukel97",
        "body": "Bisected back to 5f39be591714eba1be413e2b3ed6fc152a15bb8e"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}