{
  "bug_id": "124275",
  "issue_url": "https://github.com/llvm/llvm-project/issues/124275",
  "bug_type": "miscompilation",
  "base_commit": "35df525fd00c2037ef144189ee818b7d612241ff",
  "knowledge_cutoff": "2025-01-24T14:33:26Z",
  "lit_test_dir": [
    "llvm/test/Analysis/ValueTracking"
  ],
  "hints": {
    "fix_commit": "c2fba023475fddb893eac29dc9f34dfbdb221cd5",
    "components": [
      "ValueTracking"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        [
          593,
          603
        ],
        [
          610,
          620
        ],
        [
          1673,
          1680
        ],
        [
          1705,
          1713
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ValueTracking.cpp": [
        "breakSelfRecursivePHI",
        "computeKnownBitsFromOperator"
      ]
    }
  },
  "patch": "commit c2fba023475fddb893eac29dc9f34dfbdb221cd5\nAuthor: goldsteinn <35538541+goldsteinn@users.noreply.github.com>\nDate:   Tue Jan 28 15:54:00 2025 -0600\n\n    [ValueTracking] Fix bug of using wrong condition for deducing KnownBits (#124481)\n    \n    - **[ValueTracking] Add test for issue 124275**\n    - **[ValueTracking] Fix bug of using wrong condition for deducing\n    KnownBits**\n    \n    Fixes https://github.com/llvm/llvm-project/issues/124275\n    \n    Bug was introduced by https://github.com/llvm/llvm-project/pull/114689\n    \n    Now that computeKnownBits supports breaking out of recursive Phi\n    nodes, `IncValue` can be an operand of a different Phi than `P`. This\n    breaks the previous assumptions we had when using the possibly\n    condition at `CxtI` to constrain `IncValue`.\n\ndiff --git a/llvm/lib/Analysis/ValueTracking.cpp b/llvm/lib/Analysis/ValueTracking.cpp\nindex eba728c7c8c3..b63a0a07f7de 100644\n--- a/llvm/lib/Analysis/ValueTracking.cpp\n+++ b/llvm/lib/Analysis/ValueTracking.cpp\n@@ -593,11 +593,14 @@ static bool cmpExcludesZero(CmpInst::Predicate Pred, const Value *RHS) {\n }\n \n static void breakSelfRecursivePHI(const Use *U, const PHINode *PHI,\n-                                  Value *&ValOut, Instruction *&CtxIOut) {\n+                                  Value *&ValOut, Instruction *&CtxIOut,\n+                                  const PHINode **PhiOut = nullptr) {\n   ValOut = U->get();\n   if (ValOut == PHI)\n     return;\n   CtxIOut = PHI->getIncomingBlock(*U)->getTerminator();\n+  if (PhiOut)\n+    *PhiOut = PHI;\n   Value *V;\n   // If the Use is a select of this phi, compute analysis on other arm to break\n   // recursion.\n@@ -610,11 +613,13 @@ static void breakSelfRecursivePHI(const Use *U, const PHINode *PHI,\n   // incoming value to break recursion.\n   // TODO: We could handle any number of incoming edges as long as we only have\n   // two unique values.\n-  else if (auto *IncPhi = dyn_cast<PHINode>(ValOut);\n-           IncPhi && IncPhi->getNumIncomingValues() == 2) {\n+  if (auto *IncPhi = dyn_cast<PHINode>(ValOut);\n+      IncPhi && IncPhi->getNumIncomingValues() == 2) {\n     for (int Idx = 0; Idx < 2; ++Idx) {\n       if (IncPhi->getIncomingValue(Idx) == PHI) {\n         ValOut = IncPhi->getIncomingValue(1 - Idx);\n+        if (PhiOut)\n+          *PhiOut = IncPhi;\n         CtxIOut = IncPhi->getIncomingBlock(1 - Idx)->getTerminator();\n         break;\n       }\n@@ -1673,8 +1678,9 @@ static void computeKnownBitsFromOperator(const Operator *I,\n       Known.One.setAllBits();\n       for (const Use &U : P->operands()) {\n         Value *IncValue;\n+        const PHINode *CxtPhi;\n         Instruction *CxtI;\n-        breakSelfRecursivePHI(&U, P, IncValue, CxtI);\n+        breakSelfRecursivePHI(&U, P, IncValue, CxtI, &CxtPhi);\n         // Skip direct self references.\n         if (IncValue == P)\n           continue;\n@@ -1705,9 +1711,10 @@ static void computeKnownBitsFromOperator(const Operator *I,\n                     m_Br(m_c_ICmp(Pred, m_Specific(IncValue), m_APInt(RHSC)),\n                          m_BasicBlock(TrueSucc), m_BasicBlock(FalseSucc)))) {\n             // Check for cases of duplicate successors.\n-            if ((TrueSucc == P->getParent()) != (FalseSucc == P->getParent())) {\n+            if ((TrueSucc == CxtPhi->getParent()) !=\n+                (FalseSucc == CxtPhi->getParent())) {\n               // If we're using the false successor, invert the predicate.\n-              if (FalseSucc == P->getParent())\n+              if (FalseSucc == CxtPhi->getParent())\n                 Pred = CmpInst::getInversePredicate(Pred);\n               // Get the knownbits implied by the incoming phi condition.\n               auto CR = ConstantRange::makeExactICmpRegion(Pred, *RHSC);\n",
  "tests": [
    {
      "file": "llvm/test/Analysis/ValueTracking/phi-known-bits.ll",
      "commands": [
        "opt -O1 < %s -S"
      ],
      "tests": [
        {
          "test_name": "issue_124275_wrong_br_direction",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@c = dso_local global i32 1, align 4\n@a = dso_local global i32 0, align 4\n@b = dso_local global i32 0, align 4\n\ndefine dso_local i32 @main() #0 {\nentry:\n  %retval = alloca i32, align 4\n  %d = alloca i32, align 4\n  store i32 0, ptr %retval, align 4\n  store i32 -1, ptr @a, align 4\n  %0 = load i32, ptr @a, align 4\n  %cmp = icmp ult i32 %0, 1\n  br i1 %cmp, label %if.then, label %if.end\n\nif.then:\n  br label %e\n\nif.end:\n  %1 = load i32, ptr @c, align 4\n  store i32 %1, ptr %d, align 4\n  %2 = load i32, ptr %d, align 4\n  %tobool = icmp ne i32 %2, 0\n  br i1 %tobool, label %if.then1, label %if.end2\n\nif.then1:\n  br label %e\n\ne:\n  br label %if.end2\n\nif.end2:\n  %3 = load i32, ptr %d, align 4\n  %tobool3 = icmp ne i32 %3, 0\n  br i1 %tobool3, label %if.end5, label %if.then4\n\nif.then4:\n  unreachable\n\nif.end5:\n  %4 = load i32, ptr @b, align 4\n  %tobool6 = icmp ne i32 %4, 0\n  br i1 %tobool6, label %if.then7, label %if.end8\n\nif.then7:\n  br label %e\n\nif.end8:\n  ret i32 0\n}\n\nattributes #0 = { noinline nounwind uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4, !5}\n!llvm.ident = !{!6}\n\n!0 = !{i32 7, !\"Dwarf Version\", i32 4}\n!1 = !{i32 1, !\"wchar_size\", i32 4}\n!2 = !{i32 8, !\"PIC Level\", i32 2}\n!3 = !{i32 7, !\"PIE Level\", i32 2}\n!4 = !{i32 7, !\"uwtable\", i32 2}\n!5 = !{i32 7, !\"frame-pointer\", i32 2}\n!6 = !{!\"clang version 21.0.0git (https://github.com/llvm/llvm-project.git 5c3c0a8cec9205efba78583bd0b8a646270968a1)\"}\n",
          "additional_args": "-src-unroll=4 -tgt-unroll=4"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong code at -O1 and above on x86_64-linux-gnu",
    "body": "It appears to be a recent regression from 19.1.0. \n\nCompiler Explorer: https://godbolt.org/z/haMfGoo6h\n\n```\n[548] % clangtk -v\nclang version 20.0.0git (https://github.com/llvm/llvm-project.git ddd2f57b29661f21308eec0400fa92a6d075b0c6)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[549] % \n[549] % clangtk -O1 small.c\n[550] % ./a.out\nAborted\n[551] % \n[551] % cat small.c\nint printf(const char *, ...);\nunsigned a;\nint b, c = 1;\nint main() {\n  int d;\n  a = -1;\n  if (a < 1)\n    goto e;\n  d = c;\n  if (d) {\n  e:;\n  }\n  if (!d)\n    __builtin_abort();\n  if (b)\n    goto e;\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "miscompilation",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "zhendongsu",
        "body": "Another likely related test:\n```\n[552] % clangtk -v\nclang version 20.0.0git (https://github.com/llvm/llvm-project.git ddd2f57b29661f21308eec0400fa92a6d075b0c6)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[553] % \n[553] % clangtk -O0 small.c\n[554] % ./a.out\n[555] % \n[555] % clangtk -O1 small.c\n[556] % timeout -s 9 5 ./a.out\nKilled\n[557] % cat small.c\nint a, b;\nint main() {\n  {\n    int c;\n    if (a && 0)\n      goto d;\n  }\n  int e = -~b;\n  if (e) {\n  d:;\n  }\n  while (!e)\n    goto d;\n  return 0;\n}\n```"
      },
      {
        "author": "antoniofrighetto",
        "body": "Reduced to:\n\n```llvm\n; opt -p instcombine small.ll\ndefine i32 @small(i32 noundef %0) {\n  %2 = xor i32 %0, 1\n  %3 = sub i32 0, %2\n  %4 = icmp ne i32 %3, 0\n  br i1 %4, label %5, label %6\n\n5:                                                ; preds = %6, %1\n  %.0 = phi i32 [ %.1, %6 ], [ %3, %1 ]\n  br label %6\n\n6:                                                ; preds = %5, %1\n  %.1 = phi i32 [ %.0, %5 ], [ 0, %1 ]\n  %7 = icmp ne i32 %.1, 0\n  %8 = xor i1 %7, true\n  br i1 %8, label %5, label %9\n\n9:                                                ; preds = %6\n  ret i32 0\n}\n```"
      },
      {
        "author": "goldsteinn",
        "body": "Fix at: https://github.com/llvm/llvm-project/pull/124481"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "bisect": "a56ba1fab07b2c9b1d0287bdf56cdad4d54a5f33"
}