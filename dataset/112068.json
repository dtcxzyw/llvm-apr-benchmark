{
  "bug_id": "112068",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112068",
  "bug_type": "miscompilation",
  "base_commit": "b24acc06e1d465b3e3e4e28515dd437f6a7454f2",
  "knowledge_cutoff": "2024-10-12T02:41:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a59976bea8ad76f18119a11391dc8ba3e6ba07d5",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        [
          505,
          512
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        "foldCttzCtlz"
      ]
    }
  },
  "patch": "commit a59976bea8ad76f18119a11391dc8ba3e6ba07d5\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Tue Nov 19 20:06:34 2024 +0800\n\n    [InstCombine] Drop noundef attributes in `foldCttzCtlz` (#116718)\n    \n    Closes https://github.com/llvm/llvm-project/issues/112068.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\nindex 6cff3c7af91e..42c0acd1e45e 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n@@ -505,8 +505,10 @@ static Instruction *foldCttzCtlz(IntrinsicInst &II, InstCombinerImpl &IC) {\n \n   // If ctlz/cttz is only used as a shift amount, set is_zero_poison to true.\n   if (II.hasOneUse() && match(Op1, m_Zero()) &&\n-      match(II.user_back(), m_Shift(m_Value(), m_Specific(&II))))\n+      match(II.user_back(), m_Shift(m_Value(), m_Specific(&II)))) {\n+    II.dropUBImplyingAttrsAndMetadata();\n     return IC.replaceOperand(II, 1, IC.Builder.getTrue());\n+  }\n \n   Constant *C;\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/shift-cttz-ctlz.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "shl_cttz_false_multiuse",
          "test_body": "define i32 @shl_cttz_false_multiuse(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.cttz.i32(i32 %y, i1 false)\n  call void @use(i32 %cttz)\n  %res = shl i32 %x, %cttz\n  ret i32 %res\n}\n\ndeclare void @use(i32)\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "shl_cttz_false_noundef",
          "test_body": "define i32 @shl_cttz_false_noundef(i32 %x, i32 %y) {\nentry:\n  %cttz = call noundef i32 @llvm.cttz.i32(i32 %y, i1 false)\n  %res = shl i32 %x, %cttz\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ashr_cttz_false",
          "test_body": "define i32 @ashr_cttz_false(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.cttz.i32(i32 %y, i1 false)\n  %res = ashr i32 %x, %cttz\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "shl_cttz_false",
          "test_body": "define i32 @shl_cttz_false(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.cttz.i32(i32 %y, i1 false)\n  %res = shl i32 %x, %cttz\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "shl_cttz_as_lhs",
          "test_body": "define i32 @shl_cttz_as_lhs(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.cttz.i32(i32 %y, i1 false)\n  %res = shl i32 %cttz, %x\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "shl_ctlz_false",
          "test_body": "define i32 @shl_ctlz_false(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.ctlz.i32(i32 %y, i1 false)\n  %res = shl i32 %x, %cttz\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctlz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "lshr_cttz_false",
          "test_body": "define i32 @lshr_cttz_false(i32 %x, i32 %y) {\nentry:\n  %cttz = call i32 @llvm.cttz.i32(i32 %y, i1 false)\n  %res = lshr i32 %x, %cttz\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `noundef` attribute should be dropped after setting `is_zero_poison` to true",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/7-TgAf\r\n```\r\ndefine i32 @src(i32 %x, i32 %y) {\r\nentry:\r\n  %cttz = call noundef i32 @llvm.cttz.i32(i32 %y, i1 false)\r\n  %res = lshr i32 %x, %cttz\r\n  ret i32 %res\r\n}\r\n\r\ndefine i32 @tgt(i32 %x, i32 %y) {\r\nentry:\r\n  %cttz = call noundef i32 @llvm.cttz.i32(i32 %y, i1 true)\r\n  %res = lshr i32 %x, %cttz\r\n  ret i32 %res\r\n}\r\n\r\ndefine i32 @src2(i32 %x) {\r\n  %ct = call noundef i32 @llvm.ctlz.i32(i32 %x, i1 false)\r\n  %cmp = icmp ne i32 %x, 0\r\n  %res = select i1 %cmp, i32 %ct, i32 123\r\n  ret i32 %res\r\n}\r\n\r\ndefine i32 @tgt2(i32 %x) {\r\n  %ct = call noundef i32 @llvm.ctlz.i32(i32 %x, i1 true)\r\n  %cmp = icmp ne i32 %x, 0\r\n  %res = select i1 %cmp, i32 %ct, i32 123\r\n  ret i32 %res\r\n}\r\n```\r\n`noundef` attribute should be dropped. Otherwise we will convert a poison value to immediate UB.\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true
}