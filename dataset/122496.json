{
  "bug_id": "122496",
  "issue_url": "https://github.com/llvm/llvm-project/issues/122496",
  "bug_type": "miscompilation",
  "base_commit": "b4ce29ab31b29ca926704c160e3909298ddf2b2b",
  "knowledge_cutoff": "2025-01-10T16:59:46Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "8df64ed77727ab9b7540819f2fe64379e88a50be",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          3806,
          3812
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          621,
          648
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::collectLoopUniforms"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "legalizeAndOptimizeInductions"
      ]
    }
  },
  "patch": "commit 8df64ed77727ab9b7540819f2fe64379e88a50be\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun Jan 12 22:03:21 2025 +0000\n\n    [LV] Don't consider IV increments uniform if exit value is used outside.\n    \n    In some cases, there might be a chain of uniform instructions producing\n    the exit value. To generate correct code in all cases, consider the IV\n    increment not uniform, if there are users outside the loop.\n    \n    Instead, let VPlan narrow the IV, if possible using the logic from\n    3ff1d01985752.\n    \n    Test case from #122602 verified with Alive2:\n        https://alive2.llvm.org/ce/z/bA4EGj\n    \n    Fixes https://github.com/llvm/llvm-project/issues/122496.\n    Fixes https://github.com/llvm/llvm-project/issues/122602.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex b017b61a45a0..d32a463a996c 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -3806,7 +3806,7 @@ void LoopVectorizationCostModel::collectLoopUniforms(ElementCount VF) {\n     // uniform after vectorization.\n     bool UniformIndUpdate = all_of(IndUpdate->users(), [&](User *U) -> bool {\n       auto *I = cast<Instruction>(U);\n-      return I == Ind || !TheLoop->contains(I) || Worklist.count(I) ||\n+      return I == Ind || Worklist.count(I) ||\n              IsVectorizedMemAccessUse(I, IndUpdate);\n     });\n     if (!UniformIndUpdate)\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex f440bf2eb022..545d277d7aa0 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -621,28 +621,6 @@ static void legalizeAndOptimizeInductions(VPlan &Plan) {\n       Def->replaceAllUsesWith(Clone);\n     }\n \n-    // Check if any uniform VPReplicateRecipes using the phi recipe are used by\n-    // ExtractFromEnd. Those must be replaced by a regular VPReplicateRecipe to\n-    // ensure the final value is available.\n-    // TODO: Remove once uniformity analysis is done on VPlan.\n-    for (VPUser *U : Users) {\n-      auto *ExitIRI = dyn_cast<VPIRInstruction>(U);\n-      VPValue *Op;\n-      if (!ExitIRI || !match(ExitIRI->getOperand(0),\n-                             m_VPInstruction<VPInstruction::ExtractFromEnd>(\n-                                 m_VPValue(Op), m_VPValue())))\n-        continue;\n-      auto *RepR = dyn_cast<VPReplicateRecipe>(Op);\n-      if (!RepR || !RepR->isUniform())\n-        continue;\n-      assert(!RepR->isPredicated() && \"RepR must not be predicated\");\n-      Instruction *I = RepR->getUnderlyingInstr();\n-      auto *Clone =\n-          new VPReplicateRecipe(I, RepR->operands(), /*IsUniform*/ false);\n-      Clone->insertAfter(RepR);\n-      RepR->replaceAllUsesWith(Clone);\n-    }\n-\n     // Replace wide pointer inductions which have only their scalars used by\n     // PtrAdd(IndStart, ScalarIVSteps (0, Step)).\n     if (auto *PtrIV = dyn_cast<VPWidenPointerInductionRecipe>(&Phi)) {\n",
  "tests": [
    {
      "file": "<issue>",
      "commands": [
        "opt -passes=loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "; bin/opt -passes=loop-vectorize test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@f = global [8 x [1 x i32]] zeroinitializer\n\ndefine i32 @main() {\nentry:\n  br label %for.body6.i\n\nfor.body6.i:                                      ; preds = %for.body6.i, %entry\n  %conv34.i = phi i32 [ %conv.i, %for.body6.i ], [ 0, %entry ]\n  %storemerge3133.i = phi i16 [ %inc.i, %for.body6.i ], [ 0, %entry ]\n  %idxprom.i = zext i32 %conv34.i to i64\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1\n  %conv.i = zext i16 %inc.i to i32\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i\n\nfor.cond11thread-pre-split.i:                     ; preds = %for.body6.i\n  %0 = add i32 %conv.i, -9\n  %cmp24.i = icmp ult i32 %0, -6\n  br i1 %cmp24.i, label %for.cond23.i, label %for.end27.i\n\nfor.cond23.i:                                     ; preds = %for.cond23.i, %for.cond11thread-pre-split.i\n  br label %for.cond23.i\n\nfor.end27.i:                                      ; preds = %for.cond11thread-pre-split.i\n  ret i32 0\n}",
          "lli_expected_out": ""
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Miscompilation at -O2/3",
    "body": "This code prints 0 at `-O0/1` and triggers SIGKILL at `-O2/3`:\n\n```c\nint printf(const char *, ...);\nint a;\nshort b, c;\nlong e;\nint f[8][1];\nunsigned g;\nint h(int i) {\n  long d = 0;\n  for (; (a -= i) >= 0; d += 6)\n    ;\n  return d;\n}\nvoid j() {\n  g = 0;\n  for (; h(90) + g <= 0; g++) {\n    int k = -1;\n    b = 0;\n    for (; k + g - -1 + b <= 3; b++)\n      f[b + 3][0] = c;\n    for (; b + g - 3 + e <= 8; e++)\n      ;\n    for (; e <= 3;)\n      ;\n  }\n}\nint main() {\n  j();\n  printf(\"%d\\n\", f[0][0]);\n}\n```\n\nCompiler Explorer: https://godbolt.org/z/3x8Yc3fnW\n\nIt seems to be a recent regression. ",
    "author": "cardigan1008",
    "labels": [
      "regression",
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Bisecting now"
      },
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://godbolt.org/z/6bzT9rs3K\n```\n; bin/opt -passes=loop-vectorize test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@f = global [8 x [1 x i32]] zeroinitializer\n\ndefine i32 @main() {\nentry:\n  br label %for.body6.i\n\nfor.body6.i:                                      ; preds = %for.body6.i, %entry\n  %conv34.i = phi i32 [ %conv.i, %for.body6.i ], [ 0, %entry ]\n  %storemerge3133.i = phi i16 [ %inc.i, %for.body6.i ], [ 0, %entry ]\n  %idxprom.i = zext i32 %conv34.i to i64\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1\n  %conv.i = zext i16 %inc.i to i32\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i\n\nfor.cond11thread-pre-split.i:                     ; preds = %for.body6.i\n  %0 = add i32 %conv.i, -9\n  %cmp24.i = icmp ult i32 %0, -6\n  br i1 %cmp24.i, label %for.cond23.i, label %for.end27.i\n\nfor.cond23.i:                                     ; preds = %for.cond23.i, %for.cond11thread-pre-split.i\n  br label %for.cond23.i\n\nfor.end27.i:                                      ; preds = %for.cond11thread-pre-split.i\n  ret i32 0\n}\n```\n[llubi](https://github.com/dtcxzyw/llvm-ub-aware-interpreter) output:\n\nBefore:\n```\nEntering function main\n  br label %for.body6.i jump to %for.body6.i\n    phi i32 %conv34.i -> i32 0\n    phi i16 %storemerge3133.i -> i16 0\n  %idxprom.i = zext i32 %conv34.i to i64 -> i64 0\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i -> Ptr 16[@f]\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1 -> i16 1\n  %conv.i = zext i16 %inc.i to i32 -> i32 1\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3 -> T\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i jump to %for.body6.i\n    phi i32 %conv34.i -> i32 1\n    phi i16 %storemerge3133.i -> i16 1\n  %idxprom.i = zext i32 %conv34.i to i64 -> i64 1\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i -> Ptr 20[@f + 4]\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1 -> i16 2\n  %conv.i = zext i16 %inc.i to i32 -> i32 2\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3 -> T\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i jump to %for.body6.i\n    phi i32 %conv34.i -> i32 2\n    phi i16 %storemerge3133.i -> i16 2\n  %idxprom.i = zext i32 %conv34.i to i64 -> i64 2\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i -> Ptr 24[@f + 8]\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1 -> i16 3\n  %conv.i = zext i16 %inc.i to i32 -> i32 3\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3 -> T\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i jump to %for.body6.i\n    phi i32 %conv34.i -> i32 3\n    phi i16 %storemerge3133.i -> i16 3\n  %idxprom.i = zext i32 %conv34.i to i64 -> i64 3\n  %arrayidx.i = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %idxprom.i -> Ptr 28[@f + 12]\n  store i32 0, ptr %arrayidx.i, align 4\n  %inc.i = add i16 %storemerge3133.i, 1 -> i16 4\n  %conv.i = zext i16 %inc.i to i32 -> i32 4\n  %cmp4.i = icmp ult i16 %storemerge3133.i, 3 -> F\n  br i1 %cmp4.i, label %for.body6.i, label %for.cond11thread-pre-split.i jump to %for.cond11thread-pre-split.i\n  %0 = add i32 %conv.i, -9 -> i32 -5\n  %cmp24.i = icmp ult i32 %0, -6 -> F\n  br i1 %cmp24.i, label %for.cond23.i, label %for.end27.i jump to %for.end27.i\n  ret i32 0\nExiting function main\n```\nAfter:\n```\nEntering function main\n  br i1 false, label %scalar.ph, label %vector.ph jump to %vector.ph\n  br label %vector.body jump to %vector.body\n  %0 = zext i32 0 to i64 -> i64 0\n  %1 = getelementptr [8 x [1 x i32]], ptr @f, i64 0, i64 %0 -> Ptr 16[@f]\n  %2 = getelementptr i32, ptr %1, i32 0 -> Ptr 16[@f]\n  store <4 x i32> zeroinitializer, ptr %2, align 4\n  %3 = add i16 0, 1 -> i16 1\n  %4 = zext i16 %3 to i32 -> i32 1\n  %5 = zext i16 %3 to i32 -> i32 1\n  %6 = zext i16 %3 to i32 -> i32 1\n  %7 = zext i16 %3 to i32 -> i32 1\n  br label %middle.block jump to %middle.block\n  br i1 true, label %for.cond11thread-pre-split.i, label %scalar.ph jump to %for.cond11thread-pre-split.i\n    phi i32 %conv.i.lcssa -> i32 1\n  %8 = add i32 %conv.i.lcssa, -9 -> i32 -8\n  %cmp24.i = icmp ult i32 %8, -6 -> T\n  br i1 %cmp24.i, label %for.cond23.i.preheader, label %for.end27.i jump to %for.cond23.i.preheader\n  br label %for.cond23.i jump to %for.cond23.i\n  br label %for.cond23.i jump to %for.cond23.i\n  br label %for.cond23.i jump to %for.cond23.i\n  ...\n```\n"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  }
}