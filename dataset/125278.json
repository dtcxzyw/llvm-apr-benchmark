{
  "bug_id": "125278",
  "issue_url": "https://github.com/llvm/llvm-project/issues/125278",
  "bug_type": "crash",
  "base_commit": "1484f82cbc62eab9c4c8f393b84c2f521bf882f6",
  "knowledge_cutoff": "2025-01-31T20:00:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "c4f723a7c3bb12ce4e247bcaed755c8d927f73a4",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          1632,
          1642
        ],
        [
          1659,
          1696
        ],
        [
          1749,
          1767
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "VPlanTransforms::truncateToMinimalBitwidths"
      ]
    }
  },
  "patch": "commit c4f723a7c3bb12ce4e247bcaed755c8d927f73a4\nAuthor: Ramkumar Ramachandra <ramkumar.ramachandra@codasip.com>\nDate:   Thu May 8 11:49:54 2025 +0100\n\n    [LV] Strip unmaintainable MinBWs assert (#136858)\n    \n    tryToWiden attempts to replace an Instruction with a Constant from SCEV,\n    but forgets to erase the Instruction from the MinBWs map, leading to an\n    assert in VPlanTransforms::truncateToMinimalBitwidths. Going forward,\n    the assertion in truncateToMinimalBitwidths is unmaintainable, as LV\n    could simplify the expression at any point: fix the bug by stripping the\n    unmaintable assertion.\n    \n    Fixes #125278.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex 7943f58f0739..79ddb8bf0b09 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -1632,11 +1632,6 @@ static void licm(VPlan &Plan) {\n \n void VPlanTransforms::truncateToMinimalBitwidths(\n     VPlan &Plan, const MapVector<Instruction *, uint64_t> &MinBWs) {\n-#ifndef NDEBUG\n-  // Count the processed recipes and cross check the count later with MinBWs\n-  // size, to make sure all entries in MinBWs have been handled.\n-  unsigned NumProcessedRecipes = 0;\n-#endif\n   // Keep track of created truncates, so they can be re-used. Note that we\n   // cannot use RAUW after creating a new truncate, as this would could make\n   // other uses have different types for their operands, making them invalidly\n@@ -1659,38 +1654,12 @@ void VPlanTransforms::truncateToMinimalBitwidths(\n       if (!NewResSizeInBits)\n         continue;\n \n-#ifndef NDEBUG\n-      NumProcessedRecipes++;\n-#endif\n       // If the value wasn't vectorized, we must maintain the original scalar\n       // type. Skip those here, after incrementing NumProcessedRecipes. Also\n       // skip casts which do not need to be handled explicitly here, as\n       // redundant casts will be removed during recipe simplification.\n-      if (isa<VPReplicateRecipe, VPWidenCastRecipe>(&R)) {\n-#ifndef NDEBUG\n-        // If any of the operands is a live-in and not used by VPWidenRecipe or\n-        // VPWidenSelectRecipe, but in MinBWs, make sure it is counted as\n-        // processed as well. When MinBWs is currently constructed, there is no\n-        // information about whether recipes are widened or replicated and in\n-        // case they are reciplicated the operands are not truncated. Counting\n-        // them them here ensures we do not miss any recipes in MinBWs.\n-        // TODO: Remove once the analysis is done on VPlan.\n-        for (VPValue *Op : R.operands()) {\n-          if (!Op->isLiveIn())\n-            continue;\n-          auto *UV = dyn_cast_or_null<Instruction>(Op->getUnderlyingValue());\n-          if (UV && MinBWs.contains(UV) && !ProcessedTruncs.contains(Op) &&\n-              none_of(Op->users(),\n-                      IsaPred<VPWidenRecipe, VPWidenSelectRecipe>)) {\n-            // Add an entry to ProcessedTruncs to avoid counting the same\n-            // operand multiple times.\n-            ProcessedTruncs[Op] = nullptr;\n-            NumProcessedRecipes += 1;\n-          }\n-        }\n-#endif\n+      if (isa<VPReplicateRecipe, VPWidenCastRecipe>(&R))\n         continue;\n-      }\n \n       Type *OldResTy = TypeInfo.inferScalarType(ResultVPV);\n       unsigned OldResSizeInBits = OldResTy->getScalarSizeInBits();\n@@ -1749,19 +1718,11 @@ void VPlanTransforms::truncateToMinimalBitwidths(\n           NewOp->insertBefore(&R);\n         } else {\n           PH->appendRecipe(NewOp);\n-#ifndef NDEBUG\n-          auto *OpInst = dyn_cast<Instruction>(Op->getLiveInIRValue());\n-          bool IsContained = MinBWs.contains(OpInst);\n-          NumProcessedRecipes += IsContained;\n-#endif\n         }\n       }\n \n     }\n   }\n-\n-  assert(MinBWs.size() == NumProcessedRecipes &&\n-         \"some entries in MinBWs haven't been processed\");\n }\n \n /// Remove BranchOnCond recipes with true conditions together with removing\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/pr125278.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @pr125278(ptr %dst, i64 %n) {\n;\nentry:\n  %true.ext = zext i1 true to i32\n  br label %cond\n\ncond:\n  br label %loop\n\nloop:\n  %iv = phi i64 [ 0, %cond ], [ %iv.next, %loop ]\n  %false.ext = zext i1 false to i32\n  %xor = xor i32 %false.ext, %true.ext\n  %xor.trunc = trunc i32 %xor to i8\n  store i8 %xor.trunc, ptr %dst, align 1\n  %iv.next = add i64 %iv, 1\n  %cmp = icmp ult i64 %iv.next, %n\n  br i1 %cmp, label %loop, label %cond\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Assertion `MinBWs.size() == NumProcessedRecipes && \"some entries in MinBWs haven't been processed\"' failed.",
    "body": "Testcase:\n```llvm ir\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"riscv64-unknown-linux-gnu\"\n\ndefine void @c() #0 {\nentry:\n  %conv12 = zext i1 false to i32\n  br label %for.cond1\n\nfor.cond1:                                        ; preds = %for.body, %entry\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %for.cond1\n  %indvars.iv1 = phi i64 [ 0, %for.cond1 ], [ %indvars.iv.next, %for.body ]\n  %land.ext = zext i1 false to i32\n  %xor = xor i32 0, %conv12\n  %conv20 = trunc i32 %xor to i8\n  store i8 %conv20, ptr null, align 1\n  %indvars.iv.next = add i64 %indvars.iv1, 1\n  %cmp = icmp ult i64 %indvars.iv1, 1\n  br i1 %cmp, label %for.body, label %for.cond1\n}\n\nattributes #0 = { \"target-features\"=\"+64bit,+a,+c,+d,+f,+m,+relax,+v,+zaamo,+zalrsc,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-b,-e,-experimental-sdext,-experimental-sdtrig,-experimental-smctr,-experimental-ssctr,-experimental-svukte,-experimental-xqcia,-experimental-xqciac,-experimental-xqcicli,-experimental-xqcicm,-experimental-xqcics,-experimental-xqcicsr,-experimental-xqciint,-experimental-xqcilo,-experimental-xqcilsm,-experimental-xqcisls,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-sha,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smdbltrp,-smepmp,-smmpm,-smnpm,-smrnmi,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssdbltrp,-ssnpm,-sspm,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-supm,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-svvptc,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xmipscmove,-xmipslsp,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zabha,-zacas,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b\" }\n```\nCommand/backtrace:\n```\n$  /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt reduced.ll --passes=loop-vectorize\nWARNING: You're attempting to print out a bitcode file.\nThis is inadvisable as it may cause display problems. If\nyou REALLY want to taste LLVM bitcode first-hand, you\ncan force output with the `-f' option.\n\nopt: /scratch/ewlu/daily-upstream-build/llvm/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:1438: static void llvm::VPlanTransforms::truncateToMinimalBitwidths(llvm::VPlan&, const llvm::MapVector<llvm::Instruction*, long unsigned int>&): Assertion `MinBWs.size() == NumProcessedRecipes && \"some entries in MinBWs haven't been processed\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt reduced.ll --passes=loop-vectorize\n1.      Running pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"reduced.ll\"\n2.      Running pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"c\"\n #0 0x00005ac7451347e2 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x33f67e2)\n #1 0x00005ac74513182f llvm::sys::RunSignalHandlers() (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x33f382f)\n #2 0x00005ac74513196c SignalHandler(int) Signals.cpp:0:0\n #3 0x00007f6297445320 (/lib/x86_64-linux-gnu/libc.so.6+0x45320)\n #4 0x00007f629749eb1c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f629749eb1c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f629749eb1c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f629744526e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f62974288ff abort ./stdlib/abort.c:81:7\n #9 0x00007f629742881b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f629743b507 (/lib/x86_64-linux-gnu/libc.so.6+0x3b507)\n#11 0x00005ac74415e85e llvm::VPlanTransforms::truncateToMinimalBitwidths(llvm::VPlan&, llvm::MapVector<llvm::Instruction*, unsigned long, llvm::DenseMap<llvm::Instruction*, unsigned int, llvm::DenseMapInfo<llvm::Instruction*, void>, llvm::detail::DenseMapPair<llvm::Instruction*, unsigned int>>, llvm::SmallVector<std::pair<llvm::Instruction*, unsigned long>, 0u>> const&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x242085e)\n#12 0x00005ac743fd3d90 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x2295d90)\n#13 0x00005ac743fd42ee llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x22962ee)\n#14 0x00005ac743fd6055 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x2298055)\n#15 0x00005ac743fd8fe1 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x229afe1)\n#16 0x00005ac743fd95c7 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x229b5c7)\n#17 0x00005ac742ce28c5 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfa48c5)\n#18 0x00005ac744f21f0a llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x31e3f0a)\n#19 0x00005ac742ce5055 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfa7055)\n#20 0x00005ac744f2081c llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x31e281c)\n#21 0x00005ac742ce1785 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfa3785)\n#22 0x00005ac744f20dfd llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x31e2dfd)\n#23 0x00005ac74248e195 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x750195)\n#24 0x00005ac74247e41e optMain (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x74041e)\n#25 0x00007f629742a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#26 0x00007f629742a28b call_init ./csu/../csu/libc-start.c:128:20\n#27 0x00007f629742a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#28 0x00005ac742474c75 _start (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x736c75)\nAborted (core dumped)\n```\n\nGodbolt: https://godbolt.org/z/YqE8f1PPz\n\nFound via fuzzer (C program before reduction)",
    "author": "ewlu",
    "labels": [
      "vectorizers",
      "crash",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "patrick-rivos",
        "body": "Some triaging for the same assert here: https://github.com/llvm/llvm-project/issues/87407"
      },
      {
        "author": "cardigan1008",
        "body": "There's a case that triggers the same crash at `-O2`:\n\n```c\nint a, h;\nstruct {\n  char b;\n  long c;\n  char d\n} static e = {2, 2, 5};\nchar f, j, l;\nshort g;\nint *i;\nstatic short k;\nvoid m() {}\nvoid n() {\n  m(e);\n  for (; f; f++) {\n    j ^= (a > (short)*i + k | e.d) <= 0;\n    h = l;\n  }\n}\nvoid o() {\n  g = 1;\n  for (; g;)\n    k = 9;\n}\nvoid main() {}\n```\n\nCompiler Explorer: https://godbolt.org/z/EK3zbjPax\n\nBisected to https://github.com/llvm/llvm-project/commit/6d6eea92e36c301e34a7ec11b2a40e3080f79f53, which was committed by @fhahn \n\nHope it helps :)"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}