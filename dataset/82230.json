{
  "bug_id": "82230",
  "issue_url": "https://github.com/llvm/llvm-project/issues/82230",
  "bug_type": "crash",
  "base_commit": "769c22f25b81b74e4da7871d4e552584605caef1",
  "knowledge_cutoff": "2024-02-19T09:37:19Z",
  "lit_test_dir": [
    "llvm/test/DebugInfo"
  ],
  "hints": {
    "fix_commit": "5b342e6041f8567a39354ae3c5346cf74b3bb84f",
    "components": [
      "IR"
    ],
    "bug_location_lineno": {
      "llvm/lib/IR/AsmWriter.cpp": [
        [
          293,
          299
        ],
        [
          4886,
          4893
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/IR/AsmWriter.cpp": [
        "DPValue::print",
        "PrintCallingConv",
        "getModuleFromDPI"
      ]
    }
  },
  "patch": "commit 5b342e6041f8567a39354ae3c5346cf74b3bb84f\nAuthor: Stephen Tozer <stephen.tozer@sony.com>\nDate:   Mon Feb 19 11:38:04 2024 +0000\n\n    [RemoveDIs][DebugInfo] Check for null marker when printing DPValues (#82238)\n    \n    The function to print DPValues currently tries to incorporate the\n    function it is part of, which is found through its marker; this means\n    when we try to print a DPValue with no marker, we dereference a nullptr.\n    We can print instructions without parents, and so the same should be\n    true for DPValues; this patch changes DPValue::print to check for a null\n    marker and avoid dereferencing it.\n    \n    Fixes issue: https://github.com/llvm/llvm-project/issues/82230\n\ndiff --git a/llvm/lib/IR/AsmWriter.cpp b/llvm/lib/IR/AsmWriter.cpp\nindex 0ae720e8b7ce..d3c64a57f7fd 100644\n--- a/llvm/lib/IR/AsmWriter.cpp\n+++ b/llvm/lib/IR/AsmWriter.cpp\n@@ -293,7 +293,7 @@ static const Module *getModuleFromDPI(const DPMarker *Marker) {\n }\n \n static const Module *getModuleFromDPI(const DPValue *DPV) {\n-  return getModuleFromDPI(DPV->getMarker());\n+  return DPV->getMarker() ? getModuleFromDPI(DPV->getMarker()) : nullptr;\n }\n \n static void PrintCallingConv(unsigned cc, raw_ostream &Out) {\n@@ -4886,8 +4886,9 @@ void DPValue::print(raw_ostream &ROS, ModuleSlotTracker &MST,\n     if (F)\n       MST.incorporateFunction(*F);\n   };\n-  incorporateFunction(Marker->getParent() ? Marker->getParent()->getParent()\n-                                          : nullptr);\n+  incorporateFunction(Marker && Marker->getParent()\n+                          ? Marker->getParent()->getParent()\n+                          : nullptr);\n   AssemblyWriter W(OS, SlotTable, getModuleFromDPI(this), nullptr, IsForDebug);\n   W.printDPValue(*this);\n }\n",
  "tests": [
    {
      "file": "llvm/test/DebugInfo/dpvalue-print-nocrash.ll",
      "commands": [
        "opt -passes=\"instcombine\" -debug %s -o /dev/null 2>&1"
      ],
      "tests": [
        {
          "test_name": "func_10",
          "test_body": "define ptr @func_10(i32 %p_11) {\nentry:\n  %conv108 = zext i32 %p_11 to i64\n    #dbg_value(i64 %conv108, !4, !DIExpression(), !12)\n  br label %func_29.exit\n\nfunc_29.exit:                                     ; preds = %entry\n  store i64 %conv108, ptr null, align 1\n  ret ptr null\n}\n\n!llvm.dbg.cu = !{!0}\n!llvm.module.flags = !{!3}\n\n!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: \"clang\", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, globals: !2, splitDebugInlining: false, nameTableKind: None)\n!1 = !DIFile(filename: \"csmith5961503756960.c\", directory: \"/llvm\")\n!2 = !{}\n!3 = !{i32 2, !\"Debug Info Version\", i32 3}\n!4 = !DILocalVariable(name: \"p_31\", arg: 2, scope: !5, file: !1, line: 148, type: !7)\n!5 = distinct !DISubprogram(name: \"func_29\", scope: !1, file: !1, line: 148, type: !6, scopeLine: 149, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)\n!6 = !DISubroutineType(types: !2)\n!7 = !DIDerivedType(tag: DW_TAG_typedef, name: \"uint64_t\", file: !8, line: 60, baseType: !9)\n!8 = !DIFile(filename: \"/foo/_stdint.h\", directory: \"\")\n!9 = !DIDerivedType(tag: DW_TAG_typedef, name: \"__uint64_t\", file: !10, line: 108, baseType: !11)\n!10 = !DIFile(filename: \"/foo/_default_types.h\", directory: \"\")\n!11 = !DIBasicType(name: \"unsigned long long\", size: 64, encoding: DW_ATE_unsigned)\n!12 = !DILocation(line: 0, scope: !5)\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "opt -passes=\"instcombine\" -debug crashes with non-instrinsic debug-info",
    "body": "llvm commit: d61864f813e3\r\nReproduce with:\r\n```\r\nopt -passes=\"instcombine\" -debug bbi-92509.ll -o /dev/null\r\n```\r\n[bbi-92509.ll.gz](https://github.com/llvm/llvm-project/files/14329283/bbi-92509.ll.gz)\r\n\r\nResult:\r\n```\r\nINSTCOMBINE ITERATION #1 on func_10\r\nADD:   ret ptr null\r\nADD:   store i64 %conv108, ptr null, align 1\r\nADD:   br label %func_29.exit\r\nADD:   %conv108 = zext i32 %p_11 to i64\r\nCLONE: PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: ../../main-github/llvm/build-all/bin/opt -passes=instcombine -debug bbi-92509.ll -o /dev/null\r\n #0 0x000055e12968f4a7 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (../../main-github/llvm/build-all/bin/opt+0x3db14a7)\r\n #1 0x000055e12968cf7e llvm::sys::RunSignalHandlers() (../../main-github/llvm/build-all/bin/opt+0x3daef7e)\r\n #2 0x000055e12968fe6f SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007fdf33999630 __restore_rt sigaction.c:0:0\r\n #4 0x000055e12971f8e0 llvm::DPMarker::getParent() const (../../main-github/llvm/build-all/bin/opt+0x3e418e0)\r\n #5 0x000055e129761abf llvm::DPValue::print(llvm::raw_ostream&, bool) const (../../main-github/llvm/build-all/bin/opt+0x3e83abf)\r\n #6 0x000055e12a244957 llvm::InstCombinerImpl::tryToSinkInstructionDPValues(llvm::Instruction*, llvm::ilist_iterator_w_bits<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true>, false, false>, llvm::BasicBlock*, llvm::BasicBlock*, llvm::SmallVectorImpl<llvm::DPValue*>&) InstructionCombining.cpp:0:0\r\n #7 0x000055e12a242b0c llvm::InstCombinerImpl::tryToSinkInstruction(llvm::Instruction*, llvm::BasicBlock*) InstructionCombining.cpp:0:0\r\n #8 0x000055e12a2453fc llvm::InstCombinerImpl::run() InstructionCombining.cpp:0:0\r\n #9 0x000055e12a248c79 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, llvm::LoopInfo*, llvm::InstCombineOptions const&) InstructionCombining.cpp:0:0\r\n#10 0x000055e12a2482ea llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (../../main-github/llvm/build-all/bin/opt+0x496a2ea)\r\n#11 0x000055e12a95e5bd llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) PassBuilderPipelines.cpp:0:0\r\n#12 0x000055e12989a8e4 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (../../main-github/llvm/build-all/bin/opt+0x3fbc8e4)\r\n#13 0x000055e12a9644dd llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) PassBuilderPipelines.cpp:0:0\r\n#14 0x000055e12989f9ae llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (../../main-github/llvm/build-all/bin/opt+0x3fc19ae)\r\n#15 0x000055e12a95dd9d llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) PassBuilderPipelines.cpp:0:0\r\n#16 0x000055e129899456 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (../../main-github/llvm/build-all/bin/opt+0x3fbb456)\r\n#17 0x000055e12a90a42b llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (../../main-github/llvm/build-all/bin/opt+0x502c42b)\r\n#18 0x000055e129657a28 optMain (../../main-github/llvm/build-all/bin/opt+0x3d79a28)\r\n#19 0x00007fdf310cc555 __libc_start_main (/lib64/libc.so.6+0x22555)\r\n#20 0x000055e129651369 _start (../../main-github/llvm/build-all/bin/opt+0x3d73369)\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nThis starts happening with a93a4ec7dd205\r\n```\r\nReapply \"[DebugInfo][RemoveDIs] Turn on non-instrinsic debug-info by default\"\r\n```\r\n",
    "author": "mikaelholmen",
    "labels": [
      "debuginfo",
      "llvm:crash",
      "llvm:ir"
    ],
    "comments": [
      {
        "author": "SLTozer",
        "body": "Should be fixed by: [5b342e6](https://github.com/llvm/llvm-project/commit/5b342e6041f8567a39354ae3c5346cf74b3bb84f)"
      },
      {
        "author": "mikaelholmen",
        "body": "> Should be fixed by: [5b342e6](https://github.com/llvm/llvm-project/commit/5b342e6041f8567a39354ae3c5346cf74b3bb84f)\r\n\r\nYep, thanks!"
      }
    ]
  }
}