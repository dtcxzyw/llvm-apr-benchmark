{
  "bug_id": "90900",
  "issue_url": "https://github.com/llvm/llvm-project/issues/90900",
  "bug_type": "crash",
  "base_commit": "311339e25cd4d431902f93b1cbc6b67ac3fd2abf",
  "knowledge_cutoff": "2024-05-02T19:52:37Z",
  "lit_test_dir": [
    "llvm/test/Transforms/Reg2Mem"
  ],
  "hints": {
    "fix_commit": "fdaad738753cde2bba6480c2ee5d1e9fb45064b9",
    "components": [
      "DemoteRegToStack"
    ],
    "files": [
      "llvm/lib/Transforms/Utils/DemoteRegToStack.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/DemoteRegToStack.cpp": [
        [
          50,
          55
        ],
        [
          102,
          110
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/DemoteRegToStack.cpp": [
        "llvm::DemoteRegToStack"
      ]
    }
  },
  "patch": "commit fdaad738753cde2bba6480c2ee5d1e9fb45064b9\nAuthor: XChy <xxs_chy@outlook.com>\nDate:   Thu May 16 20:13:39 2024 +0800\n\n    [Reg2Mem] Handle CallBr instructions (#90953)\n    \n    Fixes #90900\n\ndiff --git a/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp b/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp\nindex b2a88eadd3de..f03de2f25a41 100644\n--- a/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp\n+++ b/llvm/lib/Transforms/Utils/DemoteRegToStack.cpp\n@@ -50,6 +50,15 @@ AllocaInst *llvm::DemoteRegToStack(Instruction &I, bool VolatileLoads,\n       assert(BB && \"Unable to split critical edge.\");\n       (void)BB;\n     }\n+  } else if (CallBrInst *CBI = dyn_cast<CallBrInst>(&I)) {\n+    for (int i = 0; i < CBI->getNumSuccessors(); i++) {\n+      auto *Succ = CBI->getSuccessor(i);\n+      if (!Succ->getSinglePredecessor()) {\n+        assert(isCriticalEdge(II, i) && \"Expected a critical edge!\");\n+        BasicBlock *BB = SplitCriticalEdge(II, i);\n+        assert(BB && \"Unable to split critical edge.\");\n+      }\n+    }\n   }\n \n   // Change all of the users of the instruction to read from the stack slot.\n@@ -102,9 +111,14 @@ AllocaInst *llvm::DemoteRegToStack(Instruction &I, bool VolatileLoads,\n         new StoreInst(&I, Slot, Handler->getFirstInsertionPt());\n       return Slot;\n     }\n+  } else if (InvokeInst *II = dyn_cast<InvokeInst>(&I)) {\n+    InsertPt = II->getNormalDest()->getFirstInsertionPt();\n+  } else if (CallBrInst *CBI = dyn_cast<CallBrInst>(&I)) {\n+    for (BasicBlock *Succ : successors(CBI))\n+      new StoreInst(CBI, Slot, Succ->getFirstInsertionPt());\n+    return Slot;\n   } else {\n-    InvokeInst &II = cast<InvokeInst>(I);\n-    InsertPt = II.getNormalDest()->getFirstInsertionPt();\n+    llvm_unreachable(\"Unsupported terminator for Reg2Mem\");\n   }\n \n   new StoreInst(&I, Slot, InsertPt);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/Reg2Mem/callbr-crash.ll",
      "commands": [
        "opt -passes=reg2mem -S < %s"
      ],
      "tests": [
        {
          "test_name": "crash",
          "test_body": "define void @crash() {\nentry:\n  %a = callbr i64 asm \"\", \"=r,r,!i\"(i64 0)\n          to label %then [label %else]\n\nthen:                                             ; preds = %entry\n  %b = inttoptr i64 %a to ptr\n  br label %else\n\nelse:                                             ; preds = %then, %entry\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Reg2Mem pass triggered assertion `isa<To>(V al) && \"cast<Ty>() argument of incompatible type!\"",
    "body": "https://godbolt.org/z/oxW8zbKr6\r\n`opt --passes=reg2mem reduced.ll`\r\n```llvm\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n%struct.__large_struct = type { [100 x i64] }\r\n\r\ndefine fastcc i64 @__se_sys_pselect6() {\r\n  %1 = callbr i64 asm sideeffect \"\\0A1:\\09movq $1,$0\\0A .pushsection \\22__ex_table\\22,\\22a\\22\\0A .balign 4\\0A .long (1b) - .\\0A .long (${2:l}) - .\\0A .long 3 \\0A .popsection\\0A\", \"=r,*m,!i,~{dirflag},~{fpsr},~{flags}\"(ptr elementtype(%struct.__large_struct) null)\r\n          to label %2 [label %common.ret]\r\n\r\n2:                                                ; preds = %0\r\n  %3 = inttoptr i64 %1 to ptr\r\n  %4 = callbr i64 asm sideeffect \"\\0A1:\\09movq $1,$0\\0A .pushsection \\22__ex_table\\22,\\22a\\22\\0A .balign 4\\0A .long (1b) - .\\0A .long (${2:l}) - .\\0A .long 3 \\0A .popsection\\0A\", \"=r,*m,!i,~{dirflag},~{fpsr},~{flags}\"(ptr elementtype(%struct.__large_struct) null)\r\n          to label %common.ret [label %common.ret]\r\n\r\ncommon.ret:                                       ; preds = %2, %2, %0\r\n  ret i64 0\r\n}\r\n```",
    "author": "XChy",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": []
  }
}
