{
  "bug_id": "132841",
  "issue_url": "https://github.com/llvm/llvm-project/issues/132841",
  "bug_type": "crash",
  "base_commit": "822aa5ec1afee68fb16457ff06de9111c1b62450",
  "knowledge_cutoff": "2025-03-24T22:57:28Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "8122bb9dbe39a1dde77eb4aad76bf1c0e70b2d89",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15071,
          15077
        ],
        [
          15098,
          15109
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getLastInstructionInBundle"
      ]
    }
  },
  "patch": "commit 8122bb9dbe39a1dde77eb4aad76bf1c0e70b2d89\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Mar 25 04:10:56 2025 -0700\n\n    [SLP]Fix a check for non-schedulable instructions\n    \n    Need to fix a check for non-schedulable instructions in\n    getLastInstructionInBundle function, because this check may not work\n    correctly during the codegen. Instead, need to check that actually these\n    instructions were never scheduled, since the scheduling analysis always\n    performed before the codegen and is stable.\n    \n    Fixes #132841\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 4dc398f716b3..7741f96ee897 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15071,7 +15071,18 @@ Instruction &BoUpSLP::getLastInstructionInBundle(const TreeEntry *E) {\n \n   // Set the insert point to the beginning of the basic block if the entry\n   // should not be scheduled.\n-  if (doesNotNeedToSchedule(E->Scalars) ||\n+  const auto *It = BlocksSchedules.find(BB);\n+  auto IsNotScheduledEntry = [&](const TreeEntry *E) {\n+    if (E->isGather())\n+      return false;\n+    // Found previously that the instruction do not need to be scheduled.\n+    return It == BlocksSchedules.end() || all_of(E->Scalars, [&](Value *V) {\n+             if (!isa<Instruction>(V))\n+               return true;\n+             return It->second->getScheduleBundles(V).empty();\n+           });\n+  };\n+  if (IsNotScheduledEntry(E) ||\n       (!E->isGather() && all_of(E->Scalars, isVectorLikeInstWithConstOps))) {\n     if ((E->getOpcode() == Instruction::GetElementPtr &&\n          any_of(E->Scalars,\n@@ -15098,12 +15109,11 @@ Instruction &BoUpSLP::getLastInstructionInBundle(const TreeEntry *E) {\n   // scheduled, and the last instruction is VL.back(). So we start with\n   // VL.back() and iterate over schedule data until we reach the end of the\n   // bundle. The end of the bundle is marked by null ScheduleData.\n-  if (BlocksSchedules.count(BB) && !E->isGather()) {\n+  if (It != BlocksSchedules.end() && !E->isGather()) {\n     Value *V = E->isOneOf(E->Scalars.back());\n     if (doesNotNeedToBeScheduled(V))\n       V = *find_if_not(E->Scalars, doesNotNeedToBeScheduled);\n-    if (ArrayRef<ScheduleBundle *> Bundles =\n-            BlocksSchedules[BB]->getScheduleBundles(V);\n+    if (ArrayRef<ScheduleBundle *> Bundles = It->second->getScheduleBundles(V);\n         !Bundles.empty()) {\n       const auto *It = find_if(\n           Bundles, [&](ScheduleBundle *B) { return B->getTreeEntry() == E; });\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/non-schedulable-instructions-become-schedulable.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-unknown -mcpu=znver2 < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test() {\n;\nentry:\n  br label %bb1\n\nif.then.i.i:\n  br label %3\n\nbb1:\n  %0 = zext i1 false to i64\n  %1 = add i64 0, %0\n  %2 = add i64 0, 0\n  br i1 false, label %3, label %bb2\n\n3:\n  %pgocount51962 = phi i64 [ 0, %bb1 ], [ 0, %if.then.i.i ]\n  %pgocount62360 = phi i64 [ 0, %bb1 ], [ 0, %if.then.i.i ]\n  %pgocount83056 = phi i64 [ %1, %bb1 ], [ 0, %if.then.i.i ]\n  %pgocount93354 = phi i64 [ %2, %bb1 ], [ 0, %if.then.i.i ]\n  br label %bb2\n\nbb2:\n  %pgocount51961 = phi i64 [ %pgocount51962, %3 ], [ 0, %bb1 ]\n  %pgocount62359 = phi i64 [ %pgocount62360, %3 ], [ 0, %bb1 ]\n  %pgocount83055 = phi i64 [ %pgocount83056, %3 ], [ %1, %bb1 ]\n  %pgocount93353 = phi i64 [ %pgocount93354, %3 ], [ %2, %bb1 ]\n  store i64 %pgocount51961, ptr getelementptr inbounds nuw (i8, ptr null, i64 40), align 8\n  store i64 %pgocount62359, ptr getelementptr inbounds nuw (i8, ptr null, i64 48), align 8\n  store i64 %pgocount83055, ptr getelementptr inbounds nuw (i8, ptr null, i64 56), align 8\n  store i64 %pgocount93353, ptr getelementptr inbounds nuw (i8, ptr null, i64 64), align 8\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] crash with -fprofile-generate: Instruction::PHI && \"Expected PHI\"",
    "body": "One of our internal tests picked up a new assertion failure since #131625\n\nHere's a reduced test-case\nhttps://godbolt.org/z/rKT64of5b\n```\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-unknown\"\n\ndefine void @_Z1sv() #0 {\nentry:\n  br label %\"_ZZ1svEN3$_08__invokeEii.exit\"\n\nif.then.i.i:                                      ; No predecessors!\n  br label %3\n\n\"_ZZ1svEN3$_08__invokeEii.exit\":                  ; preds = %entry\n  %0 = zext i1 false to i64\n  %1 = add i64 0, %0\n  %2 = add i64 0, 0\n  br i1 false, label %3, label %while.cond.while.end_crit_edge\n\n3:                                                ; preds = %\"_ZZ1svEN3$_08__invokeEii.exit\", %if.then.i.i\n  %pgocount51962 = phi i64 [ 0, %\"_ZZ1svEN3$_08__invokeEii.exit\" ], [ 0, %if.then.i.i ]\n  %pgocount62360 = phi i64 [ 0, %\"_ZZ1svEN3$_08__invokeEii.exit\" ], [ 0, %if.then.i.i ]\n  %pgocount83056 = phi i64 [ %1, %\"_ZZ1svEN3$_08__invokeEii.exit\" ], [ 0, %if.then.i.i ]\n  %pgocount93354 = phi i64 [ %2, %\"_ZZ1svEN3$_08__invokeEii.exit\" ], [ 0, %if.then.i.i ]\n  br label %while.cond.while.end_crit_edge\n\nwhile.cond.while.end_crit_edge:                   ; preds = %3, %\"_ZZ1svEN3$_08__invokeEii.exit\"\n  %pgocount51961 = phi i64 [ %pgocount51962, %3 ], [ 0, %\"_ZZ1svEN3$_08__invokeEii.exit\" ]\n  %pgocount62359 = phi i64 [ %pgocount62360, %3 ], [ 0, %\"_ZZ1svEN3$_08__invokeEii.exit\" ]\n  %pgocount83055 = phi i64 [ %pgocount83056, %3 ], [ %1, %\"_ZZ1svEN3$_08__invokeEii.exit\" ]\n  %pgocount93353 = phi i64 [ %pgocount93354, %3 ], [ %2, %\"_ZZ1svEN3$_08__invokeEii.exit\" ]\n  store i64 %pgocount51961, ptr getelementptr inbounds nuw (i8, ptr null, i64 40), align 8\n  store i64 %pgocount62359, ptr getelementptr inbounds nuw (i8, ptr null, i64 48), align 8\n  store i64 %pgocount83055, ptr getelementptr inbounds nuw (i8, ptr null, i64 56), align 8\n  store i64 %pgocount93353, ptr getelementptr inbounds nuw (i8, ptr null, i64 64), align 8\n  ret void\n}\n\n; uselistorder directives\nuselistorder ptr null, { 3, 2, 1, 0 }\n\nattributes #0 = { \"target-cpu\"=\"znver2\" }\n```\n\n```\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15064: llvm::Instruction& llvm::slpvectorizer::BoUpSLP::getLastInstructionInBundle(const llvm::slpvectorizer::BoUpSLP::TreeEntry*): Assertion `E->getOpcode() == Instruction::PHI && \"Expected PHI\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes slp-vectorizer <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"_Z1sv\"\n```\n\nThis is derived from the following reduced C++ code:\n\nhttps://godbolt.org/z/aqYnvnGdj\n```\nint b, a, c, d, e, g, h, i;\nint j(const char *, const char *);\nint q();\nstruct ag {\n  friend bool r(ag) {\n    const char *f, *k = q() ? 0 : \"\";\n    f = q() ? 0 : \"\";\n    return j(k, f);\n  }\n} l;\nbool m;\nvoid s() {\n  auto n = [](int, int) {\n    if (c) {\n      if (a)\n        return true;\n    } else if (a)\n      if (d)\n        if (e) {\n          bool o = r(l);\n          return o;\n        }\n    return m;\n  };\n  bool (*p)(int, int) = n;\n  while (h)\n    g = p(b, i) ?: g;\n}\n```\n\n```\nclang++: /root/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15064: llvm::Instruction& llvm::slpvectorizer::BoUpSLP::getLastInstructionInBundle(const llvm::slpvectorizer::BoUpSLP::TreeEntry*): Assertion `E->getOpcode() == Instruction::PHI && \"Expected PHI\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/clang++ -gdwarf-4 -g -o /app/output.s -mllvm --x86-asm-syntax=intel -fno-verbose-asm -S --gcc-toolchain=/opt/compiler-explorer/gcc-snapshot -fcolor-diagnostics -fno-crash-diagnostics -O2 -fprofile-generate -march=znver2 <source>\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O2>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"<source>\"\n4.\tRunning pass \"slp-vectorizer\" on function \"_Z1sv\"\n\n```",
    "author": "gregbedwell",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}