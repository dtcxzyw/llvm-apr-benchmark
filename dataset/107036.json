{
  "bug_id": "107036",
  "issue_url": "https://github.com/llvm/llvm-project/issues/107036",
  "bug_type": "crash",
  "base_commit": "70a19adbc60c738903bbbb8e6d5ef2d41b681089",
  "knowledge_cutoff": "2024-09-03T01:22:22Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "f381cd069965dabfeb277f30a4e532d7fd498f6e",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          16055,
          16069
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::computeMinimumValueSizes"
      ]
    }
  },
  "patch": "commit f381cd069965dabfeb277f30a4e532d7fd498f6e\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Sep 3 04:52:47 2024 -0700\n\n    [SLP]Fix PR107036: Check if the type of the user is sizable before requesting its size.\n    \n    Only some instructions should be considered as potentially reducing the\n    size of the operands types, not all instructions should be considered.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/107036\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 58137cd6f543..f58803fc56a2 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -16055,15 +16055,16 @@ void BoUpSLP::computeMinimumValueSizes() {\n                     const TreeEntry *UserTE = E.UserTreeIndices.back().UserTE;\n                     if (TE == UserTE || !TE)\n                       return false;\n+                    if (!isa<CastInst, BinaryOperator, FreezeInst, PHINode,\n+                             SelectInst>(U) ||\n+                        !isa<CastInst, BinaryOperator, FreezeInst, PHINode,\n+                             SelectInst>(UserTE->getMainOp()))\n+                      return true;\n                     unsigned UserTESz = DL->getTypeSizeInBits(\n                         UserTE->Scalars.front()->getType());\n                     auto It = MinBWs.find(TE);\n                     if (It != MinBWs.end() && It->second.first > UserTESz)\n                       return true;\n-                    // The size of icmp is always 1 and should not be\n-                    // considered.\n-                    if (TE->getOpcode() == Instruction::ICmp)\n-                      return true;\n                     return DL->getTypeSizeInBits(U->getType()) > UserTESz;\n                   }));\n         })) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/minbw-user-non-sizable.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s -slp-threshold=-100"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test(ptr %i) {\nbb:\n  %i1 = getelementptr i8, ptr %i, i64 4\n  br label %bb2\n\nbb2:                                              ; preds = %bb2, %bb\n  %i3 = phi i32 [ %i6, %bb2 ], [ 0, %bb ]\n  %i4 = phi i32 [ %i8, %bb2 ], [ 0, %bb ]\n  store i32 %i3, ptr %i, align 4\n  store i32 %i4, ptr %i1, align 4\n  %i5 = trunc i32 0 to i1\n  %i6 = select i1 %i5, i32 0, i32 0\n  %i7 = trunc i32 %i4 to i1\n  %i8 = select i1 %i7, i32 0, i32 0\n  br label %bb2\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] Cannot getTypeInfo() on a type that is unsized!",
    "body": "I tried the following IR with SLP:\r\n\r\n```llvm\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @foo(ptr %i) {\r\nbb:\r\n  %i1 = getelementptr i8, ptr %i, i64 4\r\n  br label %bb2\r\n\r\nbb2:                                              ; preds = %bb2, %bb\r\n  %i3 = phi i32 [ %i6, %bb2 ], [ 0, %bb ]\r\n  %i4 = phi i32 [ %i8, %bb2 ], [ 0, %bb ]\r\n  store i32 %i3, ptr %i\r\n  store i32 %i4, ptr %i1\r\n  %i5 = trunc i32 0 to i1\r\n  %i6 = select i1 %i5, i32 0, i32 0\r\n  %i7 = trunc i32 %i4 to i1\r\n  %i8 = select i1 %i7, i32 0, i32 0\r\n  br label %bb2\r\n}\r\n```\r\n\r\nIt failed with an error output:`Ty->isSized() && \"Cannot getTypeInfo() on a type that is unsized!\"' failed`. It's getting the size returned by the `store i32 %i4, ptr %i1` instruction.\u200b\r\n\r\nhttps://llvm.godbolt.org/z/fMx9qMcfK\r\n\r\ncc f6e01b9ece1e73f6eda6e1dbff3aa72e917f4007 @alexey-bataev\r\n",
    "author": "DianQK",
    "labels": [
      "release:backport",
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "https://github.com/llvm/llvm-project/blob/2cbd1bc830861bc08f78fb6cc11747b82f66c4c6/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp#L16067\r\n\r\n`U` is `store i32 %i4, ptr %i1`.\r\n"
      },
      {
        "author": "DianQK",
        "body": "Reverting f6e01b9ece1e73f6eda6e1dbff3aa72e917f4007 seems reasonable to me. What do you think? @alexey-bataev ^^"
      },
      {
        "author": "alexey-bataev",
        "body": "will fix it asap today"
      }
    ]
  },
  "verified": true
}