{
  "bug_id": "96857",
  "issue_url": "https://github.com/llvm/llvm-project/issues/96857",
  "bug_type": "miscompilation",
  "base_commit": "da24d3a79d73c725d1b672263e558a3de6cbcde9",
  "knowledge_cutoff": "2024-06-27T06:35:48Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "2b3376f35340d86d766dc8007534f137bf93aed3",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          4616,
          4623
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "visitMaskedMerge",
        "InstCombinerImpl::visitXor"
      ]
    }
  },
  "patch": "commit 2b3376f35340d86d766dc8007534f137bf93aed3\nAuthor: Allen <zhongyunde@huawei.com>\nDate:   Wed Jul 3 18:35:34 2024 +0800\n\n    [InstCombine] Guard noundef for transformation from xor to or disjoint (#96905)\n    \n    Fix https://github.com/llvm/llvm-project/issues/96857\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex b8664089c36c..7f52a3ea95f7 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -4616,8 +4616,12 @@ Instruction *InstCombinerImpl::visitXor(BinaryOperator &I) {\n   Value *Op0 = I.getOperand(0), *Op1 = I.getOperand(1);\n   Value *M;\n   if (match(&I, m_c_Xor(m_c_And(m_Not(m_Value(M)), m_Value()),\n-                        m_c_And(m_Deferred(M), m_Value()))))\n-    return BinaryOperator::CreateDisjointOr(Op0, Op1);\n+                        m_c_And(m_Deferred(M), m_Value())))) {\n+    if (isGuaranteedNotToBeUndef(M))\n+      return BinaryOperator::CreateDisjointOr(Op0, Op1);\n+    else\n+      return BinaryOperator::CreateOr(Op0, Op1);\n+  }\n \n   if (Instruction *Xor = visitMaskedMerge(I, Builder))\n     return Xor;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/xor.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "tryFactorization_xor_ashr_ashr",
          "test_body": "define i32 @tryFactorization_xor_ashr_ashr(i32 %a) {\n  %not = ashr i32 -3, %a\n  %shr1 = ashr i32 -5, %a\n  %xor = xor i32 %not, %shr1\n  ret i32 %xor\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Wrong `xor` --> `or disjoint` due to undef inputs",
    "body": "https://alive2.llvm.org/ce/z/XMy5BD\r\n\r\n```ll\r\ndefine i32 @fun0(i32 %val0, i32 %val1, i32 %val2) {\r\n  %val4 = and i32 %val2, %val0\r\n  %val5 = xor i32 %val2, -1\r\n  %val6 = and i32 %val5, %val1\r\n  %val7 = xor i32 %val4, %val6\r\n  ret i32 %val7\r\n}\r\n```\r\n\r\n\r\n\r\n```\r\n----------------------------------------\r\ndefine i32 @fun0(i32 %val0, i32 %val1, i32 %val2) {\r\n#0:\r\n  %val4 = and i32 %val2, %val0\r\n  %val5 = xor i32 %val2, 4294967295\r\n  %val6 = and i32 %val5, %val1\r\n  %val7 = xor i32 %val4, %val6\r\n  ret i32 %val7\r\n}\r\n=>\r\ndefine i32 @fun0(i32 %val0, i32 %val1, i32 %val2) {\r\n#0:\r\n  %val4 = and i32 %val2, %val0\r\n  %val5 = xor i32 %val2, 4294967295\r\n  %val6 = and i32 %val5, %val1\r\n  %val7 = or disjoint i32 %val4, %val6\r\n  ret i32 %val7\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\ni32 %val0 = undef\r\ni32 %val1 = undef\r\ni32 %val2 = undef\r\n\r\nSource:\r\ni32 %val4 = #x00000000 (0)\t[based on undef value]\r\ni32 %val5 = #xffffffff (4294967295, -1)\t[based on undef value]\r\ni32 %val6 = #x00000000 (0)\t[based on undef value]\r\ni32 %val7 = #x00000000 (0)\r\n\r\nTarget:\r\ni32 %val4 = #x0000000f (15)\r\ni32 %val5 = #xffffffff (4294967295, -1)\r\ni32 %val6 = #x0000000f (15)\r\ni32 %val7 = poison\r\nSource value: #x00000000 (0)\r\nTarget value: poison\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```\r\n\r\n\r\n",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "vfdff",
        "body": "It is fine for **xor --> or** ,https://alive2.llvm.org/ce/z/whLTaJ. so just ignore the disjoint ?"
      }
    ]
  }
}
