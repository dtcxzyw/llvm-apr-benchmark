{
  "bug_id": "88297",
  "issue_url": "https://github.com/llvm/llvm-project/issues/88297",
  "bug_type": "crash",
  "base_commit": "9ec6c5d26321f5d32d97218f850ae7cafda32b2e",
  "knowledge_cutoff": "2024-04-10T16:52:41Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "34777c238b117b52dd41a9d12e8b54fb83677a12",
    "components": [
      "LoopVectorize"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/VPlanValue.h"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanValue.h": [
        [
          361,
          368
        ],
        [
          376,
          382
        ]
      ]
    },
    "bug_location_funcname": {}
  },
  "patch": "commit 34777c238b117b52dd41a9d12e8b54fb83677a12\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Apr 16 21:24:24 2024 +0100\n\n    [VPlan] Don't mark VPBlendRecipe as phi-like.\n    \n    VPBlendRecipes don't get lowered to phis and usually do not appear at\n    the beginning of blocks, due to their masks appearing before them.\n    \n    This effectively relaxes an over-eager verifier message.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/88297.\n    Fixes https://github.com/llvm/llvm-project/issues/88804.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanValue.h b/llvm/lib/Transforms/Vectorize/VPlanValue.h\nindex da3a768552fc..3f8d4f4fe7d6 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanValue.h\n+++ b/llvm/lib/Transforms/Vectorize/VPlanValue.h\n@@ -361,8 +361,8 @@ public:\n     VPWidenMemoryInstructionSC,\n     VPWidenSC,\n     VPWidenSelectSC,\n-    // START: Phi-like recipes. Need to be kept together.\n     VPBlendSC,\n+    // START: Phi-like recipes. Need to be kept together.\n     VPWidenPHISC,\n     VPPredInstPHISC,\n     // START: SubclassID for recipes that inherit VPHeaderPHIRecipe.\n@@ -376,7 +376,7 @@ public:\n     VPReductionPHISC,\n     // END: SubclassID for recipes that inherit VPHeaderPHIRecipe\n     // END: Phi-like recipes\n-    VPFirstPHISC = VPBlendSC,\n+    VPFirstPHISC = VPWidenPHISC,\n     VPFirstHeaderPHISC = VPCanonicalIVPHISC,\n     VPLastHeaderPHISC = VPReductionPHISC,\n     VPLastPHISC = VPReductionPHISC,\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/blend-in-header.ll",
      "commands": [
        "opt -p loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "pr88297_incoming_ops_reordered",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\n\ndefine i64 @pr88297_incoming_ops_reordered() {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 false, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %r = phi i64 [ 0, %loop.header ], [ 1, %then ]\n  %iv.next = add i32 %iv, 1\n  %icmp = icmp sgt i32 %iv, 1000\n  br i1 %icmp, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %r.lcssa = phi i64 [ %r, %loop.latch ]\n  ret i64 %r.lcssa\n}\n"
        },
        {
          "test_name": "invar_cond_incoming_ops_reordered",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\n\ndefine i64 @invar_cond_incoming_ops_reordered(i1 %c) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %r = phi i64 [ 0, %loop.header ], [ 1, %then ]\n  %iv.next = add i32 %iv, 1\n  %icmp = icmp sgt i32 %iv, 1000\n  br i1 %icmp, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %r.lcssa = phi i64 [ %r, %loop.latch ]\n  ret i64 %r.lcssa\n}\n"
        },
        {
          "test_name": "pr88297",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\n\ndefine i64 @pr88297() {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 false, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %r = phi i64 [ 1, %then ], [ 0, %loop.header ]\n  %iv.next = add i32 %iv, 1\n  %icmp = icmp sgt i32 %iv, 1000\n  br i1 %icmp, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %r.lcssa = phi i64 [ %r, %loop.latch ]\n  ret i64 %r.lcssa\n}\n"
        },
        {
          "test_name": "invar_cond",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\n\ndefine i64 @invar_cond(i1 %c) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %r = phi i64 [ 1, %then ], [ 0, %loop.header ]\n  %iv.next = add i32 %iv, 1\n  %icmp = icmp sgt i32 %iv, 1000\n  br i1 %icmp, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %r.lcssa = phi i64 [ %r, %loop.latch ]\n  ret i64 %r.lcssa\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `verifyVPlanIsValid(*Plan) && \"VPlan is invalid\"' failed",
    "body": "The following test fails when run opt with -passes loop-vectorize\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @wombat() gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb2, %bb\r\n  %phi = phi i32 [ %add, %bb2 ], [ 0, %bb ]\r\n  br i1 false, label %bb2, label %bb4\r\n\r\nbb2:                                              ; preds = %bb4, %bb1\r\n  %phi3 = phi i64 [ 1, %bb4 ], [ 0, %bb1 ]\r\n  %add = add i32 %phi, 1\r\n  %icmp = icmp sgt i32 %phi, 0\r\n  br i1 %icmp, label %bb5, label %bb1\r\n\r\nbb4:                                              ; preds = %bb1\r\n  br label %bb2\r\n\r\nbb5:                                              ; preds = %bb2\r\n  %phi6 = phi i64 [ %phi3, %bb2 ]\r\n  ret void\r\n}\r\n```\r\nReproducer https://godbolt.org/z/9YW1o7qo6\r\nStack dump:\r\n```\r\nFound non-header PHI recipe in header VPBB: BLEND ir<%phi3> = ir<1> ir<0>/ir<false>\r\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:8555: void llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount): Assertion `verifyVPlanIsValid(*Plan) && \"VPlan is invalid\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes loop-vectorize <source>\r\n #0 0x0000000004d05ee8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d05ee8)\r\n #1 0x0000000004d0363c SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007f7623242520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x00007f76232969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x00007f7623242476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x00007f76232287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00007f762322871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x00007f7623239e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x0000000003de70b8 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3de70b8)\r\n #9 0x0000000003dee731 llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3dee731)\r\n#10 0x0000000003df18fe llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3df18fe)\r\n#11 0x0000000003df4c6d llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3df4c6d)\r\n#12 0x0000000003df5e7b llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3df5e7b)\r\n#13 0x0000000002d67f0e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2d67f0e)\r\n#14 0x0000000000db3554 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdb3554)\r\n#15 0x0000000004b1663e llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4b1663e)\r\n#16 0x0000000000d97cce llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xd97cce)\r\n#17 0x0000000004b1454c llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4b1454c)\r\n#18 0x00000000008c74f2 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8c74f2)\r\n#19 0x00000000008bad45 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8bad45)\r\n#20 0x00007f7623229d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#21 0x00007f7623229e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#22 0x00000000008b1aee _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8b1aee)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  }
}