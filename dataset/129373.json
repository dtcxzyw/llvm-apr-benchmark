{
  "bug_id": "129373",
  "issue_url": "https://github.com/llvm/llvm-project/issues/129373",
  "bug_type": "hang",
  "base_commit": "88460137d97c0b8d3742203e0173ab9ed6c5c8a7",
  "knowledge_cutoff": "2025-03-01T09:39:32Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "5ddf40fa78705384966c22da78e12134df7bd723",
    "components": [
      "VectorCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          1579,
          1584
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "VectorCombine::scalarizeLoadExtract"
      ]
    }
  },
  "patch": "commit 5ddf40fa78705384966c22da78e12134df7bd723\nAuthor: Simon Pilgrim <llvm-dev@redking.me.uk>\nDate:   Sat Mar 1 16:54:22 2025 +0000\n\n    [VectorCombine] scalarizeLoadExtract - don't create scalar loads if any extract is waiting to be erased (#129375)\n    \n    If any extract is waiting to be erased, then bail out as this will distort the cost calculation and possibly lead to infinite loops.\n    \n    Fixes #129373\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex bb4e1c0f67e7..2e8458e2cd03 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -1579,6 +1579,11 @@ bool VectorCombine::scalarizeLoadExtract(Instruction &I) {\n     if (!UI || UI->getParent() != LI->getParent())\n       return false;\n \n+    // If any extract is waiting to be erased, then bail out as this will\n+    // distort the cost calculation and possibly lead to infinite loops.\n+    if (UI->use_empty())\n+      return false;\n+\n     // Check if any instruction between the load and the extract may modify\n     // memory.\n     if (LastCheckedInst->comesBefore(UI)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/X86/load-extractelement-scalarization.ll",
      "commands": [
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=sse2",
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=avx2"
      ],
      "tests": [
        {
          "test_name": "multiple_extract",
          "test_body": "define void @multiple_extract(ptr %p) {\n  %vp = load ptr, ptr %p, align 8\n  %v = load <2 x i32>, ptr %vp, align 16\n  %e0 = extractelement <2 x i32> %v, i64 0\n  %e1 = extractelement <2 x i32> %v, i64 1\n  store i32 %e0, ptr %p, align 4\n  %p1 = getelementptr inbounds nuw i8, ptr %p, i64 4\n  store i32 %e1, ptr %p1, align 4\n  ret void\n}\n"
        },
        {
          "test_name": "unused_extract",
          "test_body": "define void @unused_extract(ptr %p) {\n  %load = load <4 x float>, ptr %p, align 8\n  %shuffle0 = shufflevector <4 x float> zeroinitializer, <4 x float> %load, <4 x i32> <i32 0, i32 4, i32 1, i32 5>\n  %shuffle1 = shufflevector <4 x float> %shuffle0, <4 x float> zeroinitializer, <4 x i32> <i32 0, i32 4, i32 poison, i32 poison>\n  %extract = extractelement <4 x float> %load, i64 1\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[VectorCombine] scalarizeLoadExtract - infinite loop if we scalarize a dead extract waiting to be erased",
    "body": "Reduced test case:\n\n```ll\ndefine void @infinite_loop(ptr %p0) {\n  %load = load <4 x float>, ptr %p0, align 8\n  %shuffle0 = shufflevector <4 x float> zeroinitializer, <4 x float> %load, <4 x i32> <i32 0, i32 4, i32 1, i32 5>\n  %shuffle1 = shufflevector <4 x float> %shuffle0, <4 x float> zeroinitializer, <4 x i32> <i32 0, i32 4, i32 poison, i32 poison>\n  %extract = extractelement <4 x float> %load, i64 1\n  ret void\n}\n```\n\nscalarizeLoadExtract iterates across all users of a load, and doesn't account for possible orders in the worklist that prevent unused instructions that use the load from being erased afterward.\n\nFix incoming",
    "author": "RKSimon",
    "labels": [
      "release:backport",
      "vectorizers",
      "hang"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "035e64c0ec02b237a266ebc672718037fdd53eb2"
}