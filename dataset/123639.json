{
  "bug_id": "123639",
  "issue_url": "https://github.com/llvm/llvm-project/issues/123639",
  "bug_type": "miscompilation",
  "base_commit": "5e4c34a9b67d9ce15d14f83bcea96ccb69de1eae",
  "knowledge_cutoff": "2025-01-20T16:05:11Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "7d01a8f2b9ac28ffe73bef4b513d383d3edf34b5",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13205,
          13213
        ],
        [
          14497,
          14503
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::isGatherShuffledSingleRegisterEntry",
        "add"
      ]
    }
  },
  "patch": "commit 7d01a8f2b9ac28ffe73bef4b513d383d3edf34b5\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Jan 20 14:22:20 2025 -0800\n\n    [SLP]Fix vector factor for repeated node for bv\n    \n    When adding a node vector, when it is used already in the shuffle for\n    buildvector, need to calculate vector factor from all vector, not only\n    this single vector, to avoid incorrect result. Also, need to increase\n    stability of the reused entries detection to avoid mismatch in cost\n    estimation/codegen.\n    \n    Fixes #123639\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex fc3afed391a0..ad4855d90874 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13205,9 +13205,12 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n           VTE = *MIt;\n         }\n       }\n-      Instruction &LastBundleInst = getLastInstructionInBundle(VTE);\n-      if (&LastBundleInst == TEInsertPt || !CheckOrdering(&LastBundleInst))\n-        continue;\n+      if (none_of(TE->CombinedEntriesWithIndices,\n+                  [&](const auto &P) { return P.first == VTE->Idx; })) {\n+        Instruction &LastBundleInst = getLastInstructionInBundle(VTE);\n+        if (&LastBundleInst == TEInsertPt || !CheckOrdering(&LastBundleInst))\n+          continue;\n+      }\n       VToTEs.insert(VTE);\n     }\n     if (VToTEs.empty())\n@@ -14497,7 +14500,9 @@ public:\n           break;\n         }\n     }\n-    int VF = getVF(V1);\n+    unsigned VF = 0;\n+    for (Value *V : InVectors)\n+      VF = std::max(VF, getVF(V));\n     for (unsigned Idx = 0, Sz = CommonMask.size(); Idx < Sz; ++Idx)\n       if (Mask[Idx] != PoisonMaskElem && CommonMask[Idx] == PoisonMaskElem)\n         CommonMask[Idx] = Mask[Idx] + (It == InVectors.begin() ? 0 : VF);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/multi-node-reuse-in-bv.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mattr=+avx2 < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @main() {\nentry:\n  %.neg15 = sub i32 0, 0\n  %0 = trunc i64 1 to i32\n  %.neg.1 = sub i32 0, 0\n  %.neg15.1 = sub i32 0, %0\n  %.neg16.1 = add i32 %.neg.1, %.neg15.1\n  %1 = add i32 %.neg16.1, %.neg15\n  %2 = trunc i64 0 to i32\n  %.neg.2 = sub i32 0, %0\n  %.neg15.2 = sub i32 0, %2\n  %.neg16.2 = add i32 %.neg.2, %.neg15.2\n  %3 = add i32 %.neg16.2, %1\n  %4 = trunc i64 0 to i32\n  %.neg.3 = sub i32 0, %2\n  %.neg15.3 = sub i32 0, %4\n  %.neg16.3 = add i32 %.neg.3, %.neg15.3\n  %5 = add i32 %.neg16.3, %3\n  %6 = trunc i64 0 to i32\n  %.neg.4 = sub i32 0, %4\n  %.neg15.4 = sub i32 0, %6\n  %.neg16.4 = add i32 %.neg.4, %.neg15.4\n  %7 = add i32 %.neg16.4, %5\n  %.neg.5 = sub i32 0, %6\n  %.neg15.5 = sub i32 0, 0\n  %.neg16.5 = add i32 %.neg.5, %.neg15.5\n  %8 = add i32 %.neg16.5, %7\n  %.neg15.6 = sub i32 0, 0\n  %.neg16.6 = add i32 0, %.neg15.6\n  %9 = add i32 %.neg16.6, %8\n  %.neg.7 = sub i32 0, 0\n  %.neg15.7 = sub i32 0, 0\n  %.neg16.7 = add i32 %.neg.7, %.neg15.7\n  %10 = add i32 %.neg16.7, %9\n  %11 = trunc i64 0 to i32\n  %.neg.8 = sub i32 0, 0\n  %.neg15.8 = sub i32 0, %11\n  %.neg16.8 = add i32 %.neg.8, %.neg15.8\n  %12 = add i32 %.neg16.8, %10\n  %13 = trunc i64 0 to i32\n  %.neg.9 = sub i32 0, %11\n  %.neg15.9 = sub i32 0, %13\n  %.neg16.9 = add i32 %.neg.9, %.neg15.9\n  %14 = add i32 %.neg16.9, %12\n  %15 = trunc i64 0 to i32\n  %.neg.10 = sub i32 0, %13\n  %.neg15.10 = sub i32 0, %15\n  %.neg16.10 = add i32 %.neg.10, %.neg15.10\n  %16 = add i32 %.neg16.10, %14\n  %17 = trunc i64 0 to i32\n  %.neg.11 = sub i32 0, %15\n  %.neg15.11 = sub i32 0, %17\n  %.neg16.11 = add i32 %.neg.11, %.neg15.11\n  %18 = add i32 %.neg16.11, %16\n  %19 = trunc i64 0 to i32\n  %.neg.12 = sub i32 0, %17\n  %.neg15.12 = sub i32 0, %19\n  %.neg16.12 = add i32 %.neg.12, %.neg15.12\n  %20 = add i32 %.neg16.12, %18\n  %.neg.13 = sub i32 0, %19\n  %.neg15.13 = sub i32 0, 0\n  %.neg16.13 = add i32 %.neg.13, %.neg15.13\n  %21 = add i32 %.neg16.13, %20\n  %.neg.14 = sub i32 0, 0\n  %.neg15.14 = sub i32 0, 0\n  %.neg16.14 = add i32 %.neg.14, %.neg15.14\n  %22 = add i32 %.neg16.14, %21\n  %.neg.15 = sub i32 0, 0\n  %.neg15.15 = sub i32 0, 0\n  %.neg16.15 = add i32 %.neg.15, %.neg15.15\n  %23 = add i32 %.neg16.15, %22\n  %.neg.16 = sub i32 0, 0\n  %.neg15.16 = sub i32 0, 0\n  %.neg16.16 = add i32 %.neg.16, %.neg15.16\n  %24 = add i32 %.neg16.16, %23\n  %res = xor i32 %24, -2\n  ret i32 %res\n}\n",
          "lli_expected_out": ""
        }
      ]
    }
  ],
  "issue": {
    "title": "SLP Vectorizer miscompilation",
    "body": "During our local testing, we identified a miscompilation where the SLP Vectorizer appears to be the cause. Here is the reproducer we managed to prepare:\nhttps://godbolt.org/z/9nePcq7Go\n\nThe issue can be demonstrated using the `lli` tool. Unfortunately, I cannot use alive2 due to unknown libcall errors, such as @llvm.vector.insert.v32i32.v16i32 not being recognized by alive2\n\n```\n$ bin/opt -passes=slp-vectorizer -mattr=+avx2 src.ll -S > tgt.ll\n$ bin/lli src.ll\nResult: -256\n$ bin/lli tgt.ll\nResult: -272\n```\n\nThe pseudocode represented by the IR is\n```\nt = 0\nfor (i = 0; i < 16; i++) {\n    s -= (t + i)\n    t = i\n}\n```\n```\ns -= (1 + 0) + (2 + 1) + (3 + 2) + (4 + 3) + ... + (14 + 15) + (15 + 16)\ns = -256\n```\nThis indicates that the SLP Vectorizer pass produces incorrect IR.\n\nThe issue became reproducible after patch `[SLP] Match poison as instruction with the same opcode` made by @alexey-bataev \nhttps://github.com/llvm/llvm-project/commit/b8703369daf777706196ff914c0376c27adde3cf\n\nI'll provide more details on how the patch affects the issue as soon as I receive them.",
    "author": "aleks-tmb",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "alexey-bataev",
        "body": "No related directly to this patch, reveals the bug that can be triggered even without patch. I reduced the reproducer, will commit fix soon"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  }
}