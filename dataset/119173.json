{
  "bug_id": "119173",
  "issue_url": "https://github.com/llvm/llvm-project/issues/119173",
  "bug_type": "miscompilation",
  "base_commit": "ab77db03ce28e86a61010e51ea13796ea09efc46",
  "knowledge_cutoff": "2024-12-09T07:19:06Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "30f3752e54fa7cd595a434a985efbe9a7abe9b65",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          6637,
          6644
        ],
        [
          8588,
          8593
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::getInstructionCost",
        "VPRecipeBuilder::tryToWiden"
      ]
    }
  },
  "patch": "commit 30f3752e54fa7cd595a434a985efbe9a7abe9b65\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Mon Feb 3 17:01:02 2025 +0000\n\n    [VPlan] Only use SCEV for live-ins in tryToWiden. (#125436)\n    \n    Replacing a recipe with a live-in may not be correct in all cases,\n    e.g. when replacing recipes involving header-phi recipes, like\n    reductions.\n    \n    For now, only use SCEV to simplify live-ins.\n    \n    More powerful input simplification can be built in top of\n    https://github.com/llvm/llvm-project/pull/124432 in the future.\n    \n    \n    Fixes https://github.com/llvm/llvm-project/issues/119173.\n    Fixes https://github.com/llvm/llvm-project/issues/125374.\n    \n    PR: https://github.com/llvm/llvm-project/pull/125436\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex cbb9960959f2..ce66350669d5 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -6637,8 +6637,10 @@ LoopVectorizationCostModel::getInstructionCost(Instruction *I,\n     // fold away.  We can generalize this for all operations using the notion\n     // of neutral elements.  (TODO)\n     if (I->getOpcode() == Instruction::Mul &&\n-        (PSE.getSCEV(I->getOperand(0))->isOne() ||\n-         PSE.getSCEV(I->getOperand(1))->isOne()))\n+        ((TheLoop->isLoopInvariant(I->getOperand(0)) &&\n+          PSE.getSCEV(I->getOperand(0))->isOne()) ||\n+         (TheLoop->isLoopInvariant(I->getOperand(1)) &&\n+          PSE.getSCEV(I->getOperand(1))->isOne())))\n       return 0;\n \n     // Detect reduction patterns\n@@ -8588,6 +8590,8 @@ VPWidenRecipe *VPRecipeBuilder::tryToWiden(Instruction *I,\n       // to replace operands with constants.\n       ScalarEvolution &SE = *PSE.getSE();\n       auto GetConstantViaSCEV = [this, &SE](VPValue *Op) {\n+        if (!Op->isLiveIn())\n+          return Op;\n         Value *V = Op->getUnderlyingValue();\n         if (isa<Constant>(V) || !SE.isSCEVable(V->getType()))\n           return Op;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/mul-simplification.ll",
      "commands": [
        "opt -p loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "mul_select_operand_known_1_via_scev",
          "test_body": "target triple = \"arm64-apple-macosx\"\n\ndefine i64 @mul_select_operand_known_1_via_scev() {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %red = phi i64 [ 12, %entry ], [ %red.next, %loop ]\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]\n  %0 = and i32 %iv, 1\n  %cmp1.i = icmp eq i32 %0, 0\n  %narrow.i = select i1 %cmp1.i, i32 1, i32 %iv\n  %mul = zext nneg i32 %narrow.i to i64\n  %red.next = mul nsw i64 %red, %mul\n  %iv.next = add nuw nsw i32 %iv, 1\n  %ec = icmp eq i32 %iv, 1\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %res = phi i64 [ %red.next, %loop ]\n  ret i64 %res\n}\n",
          "additional_args": "-src-unroll=4 -tgt-unroll=4"
        },
        {
          "test_name": "pr125374",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main() {\nentry:\n  br label %for.body.i.i\n\nfor.body.i.i:                                     ; preds = %for.body.i.i, %entry\n  %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i, %for.body.i.i ]\n  %conv678.i.i = phi i8 [ 1, %entry ], [ %add.i.i.i, %for.body.i.i ]\n  %add.i.i.i = add i8 0, %conv678.i.i\n  %indvars.iv.next.i.i = add i64 %indvars.iv.i.i, 1\n  %exitcond.not.i.i = icmp eq i64 %indvars.iv.i.i, 1\n  br i1 %exitcond.not.i.i, label %o.exit, label %for.body.i.i\n\no.exit:                                           ; preds = %for.body.i.i\n  %conv6.i.i = zext i8 %add.i.i.i to i32\n  ret i32 %conv6.i.i\n}\n",
          "additional_args": "-src-unroll=2 -tgt-unroll=2"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Miscompilation at -O3",
    "body": "This code prints 15 at -O3, but prints 5 at -O0/1/2:\n```c\nint printf(const char *, ...);\nstatic int a[] = {4294967295, 5};\nint b, c;\nint main() {\n  a[1] = b = 5;\n  unsigned d = -13;\n  for (; d >= 8; d = a[0] + d + 6) {\n    int *e = &b;\n    *e = a[0] - -1 + b;\n  }\n  a[c];\n  printf(\"%d\\n\", b);\n}\n```\n\nCompiler Explorer: https://godbolt.org/z/4xdPqcjPb\n\nBisected to https://github.com/llvm/llvm-project/commit/6d6eea92e36c301e34a7ec11b2a40e3080f79f53, which was committed by @fhahn ",
    "author": "cardigan1008",
    "labels": [
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "hstk30-hw",
        "body": "Don't ignore the warning.\n\n```\n<source>:2:19: warning: implicit conversion from 'long' to 'int' changes value from 4294967294 to -2 [-Wconstant-conversion]\n    2 | static int a[] = {4294967294, 5};\n      |                  ~^~~~~~~~~~\n```"
      },
      {
        "author": "antoniofrighetto",
        "body": "Please leave the issue opened, as it's implementation-defined behaviour, not undefined behaviour."
      },
      {
        "author": "antoniofrighetto",
        "body": "Reduced to:\n```llvm\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine noundef i32 @src() {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %entry, %for.body\n  %d.06 = phi i32 [ -13, %entry ], [ %add2.reass, %for.body ]\n  %add45 = phi i32 [ 5, %entry ], [ %add, %for.body ]\n  %add = add i32 0, %add45\n  %add2.reass = add i32 %d.06, 5\n  %cmp = icmp ugt i32 %add2.reass, 7\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body\n  ret i32 %add\n}\n```\n\n@fhahn I think the issue fundamentally here lies in the fact that we are incorrectly widening the constant 5 (retrieved from SCEV) to `<5, 5, 5, 5>`, when in fact it should be `<5, 0, 0, 0>` (VPlan value: `WIDEN-REDUCTION-PHI ir<%add45> = phi ir<5>`). The VPBasicBlock for the miscompiled basic block is the following one:\n```\nvector.body:\n  EMIT vp<%4> = CANONICAL-INDUCTION ir<0>, vp<%7>\n  WIDEN-INDUCTION %d.06 = phi -13, %add2.reass, ir<5>, vp<%0>\n  WIDEN-REDUCTION-PHI ir<%add45> = phi ir<5>\n  EMIT vp<%5> = WIDEN-CANONICAL-INDUCTION vp<%4>\n  EMIT vp<%6> = icmp ule vp<%5>, vp<%3>\n```\nI'm not that familiar with VPlan, though I feel like that either we are not taking into account the active lane, or we should have not emitted a widen instruction in the first place.\n\n(Godbolt: https://llvm.godbolt.org/z/4Wz46ceh1)"
      },
      {
        "author": "antoniofrighetto",
        "body": "@fhahn Would you be willing to have a look at it? Happy to help with any additional triage, if needed."
      },
      {
        "author": "fhahn",
        "body": "Yep let me take a look!"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  }
}