{
  "bug_id": "85536",
  "issue_url": "https://github.com/llvm/llvm-project/issues/85536",
  "bug_type": "miscompilation",
  "base_commit": "f84980570d3f85bdf5c9432647c05bae04a735a0",
  "knowledge_cutoff": "2024-03-16T15:33:21Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "252d01952c087cf0d141f7f281cf60efeb98be41",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        [
          1650,
          1655
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        "foldOperationIntoSelectOperand"
      ]
    }
  },
  "patch": "commit 252d01952c087cf0d141f7f281cf60efeb98be41\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Mar 17 14:15:27 2024 +0800\n\n    [InstCombine] Drop UB-implying attrs/metadata after speculating an instruction (#85542)\n    \n    When speculating an instruction in `InstCombinerImpl::FoldOpIntoSelect`,\n    the call may result in undefined behavior. This patch drops all\n    UB-implying attrs/metadata to fix this.\n    \n    Fixes #85536.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\nindex edb046defbc1..5d3e41fb5f29 100644\n--- a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n@@ -1650,6 +1650,7 @@ static Value *foldOperationIntoSelectOperand(Instruction &I, SelectInst *SI,\n                                              Value *NewOp, InstCombiner &IC) {\n   Instruction *Clone = I.clone();\n   Clone->replaceUsesOfWith(SI, NewOp);\n+  Clone->dropUBImplyingAttrsAndMetadata();\n   IC.InsertNewInstBefore(Clone, SI->getIterator());\n   return Clone;\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/intrinsic-select.ll",
      "commands": [
        "opt -passes=instcombine -S < %s"
      ],
      "tests": [
        {
          "test_name": "test_drop_noundef",
          "test_body": "define i8 @test_drop_noundef(i1 %cond, i8 %val) {\nentry:\n  %sel = select i1 %cond, i8 -1, i8 %val\n  %ret = call noundef i8 @llvm.smin.i8(i8 %sel, i8 0)\n  ret i8 %ret\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.smin.i8(i8, i8) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "pr85536",
          "test_body": "define i1 @pr85536(i32 %a) {\nentry:\n  %cmp1 = icmp ugt i32 %a, 30\n  %shl1 = shl nsw i32 -1, %a\n  %zext = zext i32 %shl1 to i64\n  %shl2 = shl i64 %zext, 48\n  %shr = ashr exact i64 %shl2, 48\n  %sel = select i1 %cmp1, i64 -1, i64 %shr\n  %smin = call noundef i64 @llvm.smin.i64(i64 %sel, i64 0)\n  %masked = and i64 %smin, 65535\n  %ret = icmp eq i64 %masked, 0\n  ret i1 %ret\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i64 @llvm.smin.i64(i64, i64) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "vec_to_scalar_select_vector",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.vector.reduce.add.v2i32(<2 x i32>) #0\n\ndefine i32 @vec_to_scalar_select_vector(<2 x i1> %b) {\n  %s = select <2 x i1> %b, <2 x i32> <i32 1, i32 2>, <2 x i32> <i32 3, i32 4>\n  %c = call i32 @llvm.vector.reduce.add.v2i32(<2 x i32> %s)\n  ret i32 %c\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Miscompile at -O1",
    "body": "Reduced test case: https://godbolt.org/z/z1a3665hd\r\n```\r\n#include <stdio.h>\r\n#include <stdint.h>\r\nstatic uint16_t\r\n(safe_lshift_func_uint16_t_u_s)(uint16_t left, int right )\r\n{\r\n  return\r\n    ((((int)right) < 0) || (((int)right) >= 32) || (left > ((65535) >> ((int)right)))) ?\r\n    ((left)) :\r\n    (left << ((int)right));\r\n}\r\nstatic int16_t\r\n(safe_unary_minus_func_int16_t_s)(int16_t si )\r\n{\r\n  return\r\n    -si;\r\n}\r\nstatic int32_t\r\n(safe_lshift_func_int32_t_s_u)(int32_t left, unsigned int right )\r\n{\r\n  return\r\n    ((left < 0) || (((unsigned int)right) >= 32) || (left > ((2147483647) >> ((unsigned int)right)))) ?\r\n    ((left)) :\r\n    (left << ((unsigned int)right));\r\n}\r\nlong smin(long d, long p) { return d < p ? d : p; }\r\nstruct e { uint32_t f; } static g[] = {1, 36};\r\nint64_t h, i;\r\nuint8_t j(uint64_t m) {\r\n  if (safe_lshift_func_uint16_t_u_s(\r\n          smin(m, safe_unary_minus_func_int16_t_s(\r\n                                safe_lshift_func_int32_t_s_u(1, g[1].f))),\r\n          3))\r\n     h = 0;\r\n  return m;\r\n}\r\nint8_t k() {\r\n  j(0);\r\n  struct e *l[] = {&g[1], &g[1], &g[1], &g[1], &g[1],\r\n                   &g[1], &g[1], &g[1], &g[1]};\r\n  return i;\r\n}\r\nint main() {\r\n  printf(\"%d\\n\", k());\r\n  return 0;\r\n}\r\n```\r\n\r\n```\r\n> gcc -O0 -fsanitize=address,undefined -w test.c && ./a.out\r\n0\r\n> clang -O3 -w test.c && ./a.out\r\n; no output\r\n```\r\n\r\nReduced LLVM IR: https://alive2.llvm.org/ce/z/hWuhFG\r\n```\r\n%struct.e = type { i32 }\r\n\r\n@g = internal global [2 x %struct.e] [%struct.e { i32 1 }, %struct.e { i32 36 }], align 4\r\n@h = dso_local local_unnamed_addr global i64 0, align 8\r\n@i = dso_local local_unnamed_addr global i64 0, align 8\r\n\r\ndefine i8 @src() {\r\nentry:\r\n  %0 = load i32, ptr getelementptr inbounds ([2 x %struct.e], ptr @g, i64 0, i64 1), align 4\r\n  %or.cond.i.i = icmp ult i32 %0, 31\r\n  %shl.i.neg.i = shl nsw i32 -1, %0\r\n  %.neg.i = zext i32 %shl.i.neg.i to i64\r\n  %sext.i = shl i64 %.neg.i, 48\r\n  %1 = ashr exact i64 %sext.i, 48\r\n  %2 = call i64 @llvm.smin.i64(i64 %1, i64 0)\r\n  %3 = and i64 %2, 65535\r\n  %tobool.not9.i1 = icmp eq i64 %3, 0\r\n  %tobool.not9.i = and i1 %or.cond.i.i, %tobool.not9.i1\r\n  br i1 %tobool.not9.i, label %j.exit, label %if.then.i\r\n\r\nif.then.i:\r\n  store i64 0, ptr @h, align 8\r\n  br label %j.exit\r\n\r\nj.exit:\r\n  %4 = load i64, ptr @i, align 8\r\n  %conv = trunc i64 %4 to i8\r\n  ret i8 %conv\r\n}\r\n\r\n==>\r\n\r\ndefine i8 @tgt() {\r\n  ret i8 poison\r\n}\r\n```\r\n\r\nLLVM version: 74d1a40915834cbf0629f8d34a7265734d4d9073\r\n\r\ncc @nikic ",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced IR: https://alive2.llvm.org/ce/z/Gv9zkm\r\n```\r\n@g = internal global [1 x i32] [i32 1], align 4\r\n\r\ndefine i32 @k() {\r\nentry:\r\n  %ret = load i32, ptr getelementptr inbounds ([1 x i32], ptr @g, i64 0), align 4\r\n  ret i32 %ret\r\n}\r\n\r\n==>\r\ndefine i32 @k() {\r\nentry:\r\n  ret i32 1\r\n}\r\n```\r\n"
      },
      {
        "author": "nikic",
        "body": "@dtcxzyw That last transform is correct for GlobalOpt, alive2 does not support IPO transforms."
      },
      {
        "author": "dtcxzyw",
        "body": "> @dtcxzyw That last transform is correct for GlobalOpt, alive2 does not support IPO transforms.\r\n\r\nOh, sorry about my mistake. I will provide a godbolt link.\r\n\r\n\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "The root cause: https://alive2.llvm.org/ce/z/ThJs3Y\r\n```\r\ndefine i1 @src(i32 %a) {\r\nentry:\r\n  %or.cond.i.i = icmp ugt i32 %a, 30\r\n  %shl.i.neg.i = shl nsw i32 -1, %a\r\n  %.neg.i = zext i32 %shl.i.neg.i to i64\r\n  %sext.i = shl i64 %.neg.i, 48\r\n  %1 = ashr exact i64 %sext.i, 48\r\n  %conv2.i = select i1 %or.cond.i.i, i64 -1, i64 %1\r\n  %cond.i8.i = call noundef i64 @llvm.smin.i64(i64 0, i64 %conv2.i)\r\n  %2 = and i64 %cond.i8.i, 65535\r\n  %tobool.not9.i = icmp eq i64 %2, 0\r\n  ret i1 %tobool.not9.i\r\n}\r\n\r\n==> \r\n\r\ndefine i1 @tgt(i32 %a) {\r\nentry:\r\n  %or.cond.i.i = icmp ult i32 %a, 31\r\n  %shl.i.neg.i = shl nsw i32 -1, %a\r\n  %.neg.i = zext i32 %shl.i.neg.i to i64\r\n  %sext.i = shl i64 %.neg.i, 48\r\n  %0 = ashr exact i64 %sext.i, 48\r\n  %1 = call noundef i64 @llvm.smin.i64(i64 %0, i64 0)\r\n  %2 = and i64 %1, 65535\r\n  %tobool.not9.i1 = icmp eq i64 %2, 0\r\n  %tobool.not9.i = and i1 %or.cond.i.i, %tobool.not9.i1\r\n  ret i1 %tobool.not9.i\r\n}\r\n```"
      },
      {
        "author": "dtcxzyw",
        "body": "We forget to drop the `noundef` attribute for `smin` :(\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "Minimal reproducer: https://alive2.llvm.org/ce/z/aBubZ4\r\n```\r\ndefine i8 @src(i1 %cond, i8 %val) {\r\nentry:\r\n  %sel = select i1 %cond, i8 -1, i8 %val\r\n  %ret = call noundef i8 @llvm.smin.i8(i8 %sel, i8 0)\r\n  ret i8 %ret\r\n}\r\n\r\n==>\r\n\r\ndefine i8 @tgt(i1 %cond, i8 %val) {\r\n  %min = call noundef i8 @llvm.smin.i8(i8 %val, i8 0)\r\n  %ret = select i1 %cond, i8 -1, i8 %min\r\n  ret i8 %ret\r\n}\r\n```\r\n\r\n"
      },
      {
        "author": "nikic",
        "body": "@dtcxzyw We're probably missing a call to dropUBImplyingAttrsAndMetadata in FoldOpIntoSelect."
      }
    ]
  },
  "verified": true
}