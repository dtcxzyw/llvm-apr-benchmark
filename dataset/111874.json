{
  "bug_id": "111874",
  "issue_url": "https://github.com/llvm/llvm-project/issues/111874",
  "bug_type": "crash",
  "base_commit": "6a65e98fa7901dc1de91172d065fafb16ce89d77",
  "knowledge_cutoff": "2024-10-10T17:06:05Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "65da32c634a8345fcbe021f69fc6a609d074c08c",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          6480,
          6491
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::getInstructionCost"
      ]
    }
  },
  "patch": "commit 65da32c634a8345fcbe021f69fc6a609d074c08c\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Fri Oct 11 11:26:57 2024 +0100\n\n    [LV] Account for any-of reduction when computing costs of blend phis.\n    \n    Any-of reductions are narrowed to i1. Update the legacy cost model to\n    use the correct type when computing the cost of a phi that gets lowered\n    to selects (BLEND).\n    \n    This fixes a divergence between legacy and VPlan-based cost models after\n    36fc291b6ec6d.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/111874.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 05dc58a42249..54f57fb0b6b5 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -6480,12 +6480,32 @@ LoopVectorizationCostModel::getInstructionCost(Instruction *I,\n     // Phi nodes in non-header blocks (not inductions, reductions, etc.) are\n     // converted into select instructions. We require N - 1 selects per phi\n     // node, where N is the number of incoming values.\n-    if (VF.isVector() && Phi->getParent() != TheLoop->getHeader())\n+    if (VF.isVector() && Phi->getParent() != TheLoop->getHeader()) {\n+      Type *ResultTy = Phi->getType();\n+\n+      // All instructions in an Any-of reduction chain are narrowed to bool.\n+      // Check if that is the case for this phi node.\n+      auto *HeaderUser = cast_if_present<PHINode>(\n+          find_singleton<User>(Phi->users(), [this](User *U, bool) -> User * {\n+            auto *Phi = dyn_cast<PHINode>(U);\n+            if (Phi && Phi->getParent() == TheLoop->getHeader())\n+              return Phi;\n+            return nullptr;\n+          }));\n+      if (HeaderUser) {\n+        auto &ReductionVars = Legal->getReductionVars();\n+        auto Iter = ReductionVars.find(HeaderUser);\n+        if (Iter != ReductionVars.end() &&\n+            RecurrenceDescriptor::isAnyOfRecurrenceKind(\n+                Iter->second.getRecurrenceKind()))\n+          ResultTy = Type::getInt1Ty(Phi->getContext());\n+      }\n       return (Phi->getNumIncomingValues() - 1) *\n              TTI.getCmpSelInstrCost(\n-                 Instruction::Select, ToVectorTy(Phi->getType(), VF),\n+                 Instruction::Select, ToVectorTy(ResultTy, VF),\n                  ToVectorTy(Type::getInt1Ty(Phi->getContext()), VF),\n                  CmpInst::BAD_ICMP_PREDICATE, CostKind);\n+    }\n \n     return TTI.getCFInstrCost(Instruction::PHI, CostKind);\n   }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/RISCV/blend-any-of-reduction-cost.ll",
      "commands": [
        "opt -p loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "any_of_reduction_used_in_blend",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"riscv64-unknown-linux-gnu\"\n\ndefine i32 @any_of_reduction_used_in_blend(ptr %src, i64 %N, i1 %c.0, i1 %c.1) #0 {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %any.of.red = phi i32 [ 0, %entry ], [ %any.of.red.next, %loop.latch ]\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c.0, label %loop.latch, label %else.1\n\nelse.1:                                           ; preds = %loop.header\n  br i1 %c.1, label %loop.latch, label %else.2\n\nelse.2:                                           ; preds = %else.1\n  %l = load ptr, ptr %src, align 8\n  %c.2 = icmp eq ptr %l, null\n  %sel = select i1 %c.2, i32 0, i32 %any.of.red\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %else.2, %else.1, %loop.header\n  %any.of.red.next = phi i32 [ %any.of.red, %loop.header ], [ %any.of.red, %else.1 ], [ %sel, %else.2 ]\n  %iv.next = add i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, %N\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %res = phi i32 [ %any.of.red.next, %loop.latch ]\n  ret i32 %res\n}\n\nattributes #0 = { \"target-cpu\"=\"sifive-p670\" }\n"
        },
        {
          "test_name": "any_of_reduction_used_in_blend_with_mutliple_phis",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"riscv64-unknown-linux-gnu\"\n\ndefine i32 @any_of_reduction_used_in_blend_with_mutliple_phis(ptr %src, i64 %N, i1 %c.0, i1 %c.1) #0 {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %any.of.red = phi i32 [ 0, %entry ], [ %any.of.red.next, %loop.latch ]\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c.0, label %x.1, label %else.1\n\nelse.1:                                           ; preds = %loop.header\n  br i1 %c.1, label %x.1, label %else.2\n\nelse.2:                                           ; preds = %else.1\n  %l = load ptr, ptr %src, align 8\n  %c.2 = icmp eq ptr %l, null\n  %sel = select i1 %c.2, i32 0, i32 %any.of.red\n  br label %loop.latch\n\nx.1:                                              ; preds = %else.1, %loop.header\n  %p = phi i32 [ %any.of.red, %loop.header ], [ %any.of.red, %else.1 ]\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %x.1, %else.2\n  %any.of.red.next = phi i32 [ %p, %x.1 ], [ %sel, %else.2 ]\n  %iv.next = add i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, %N\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  %res = phi i32 [ %any.of.red.next, %loop.latch ]\n  ret i32 %res\n}\n\nattributes #0 = { \"target-cpu\"=\"sifive-p670\" }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Crash in LV: \"VPlan cost model and legacy cost model disagreed\"",
    "body": "Loop vectorizer crash for the following reproducer:\r\n```\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\ndefine void @init_dependence_analysis(ptr %iiv_used.i.i.i.sroa.0, i64 %indvars.iv71.i.i.i, i1 %cmp104.not.i.i.i, i1 %tobool108.not.i.i.i) #0 {\r\nentry:\r\n  br label %for.cond101.preheader.i.i.i\r\n\r\nfor.cond101.preheader.i.i.i:                      ; preds = %for.inc121.i.i.i, %entry\r\n  %separability.0.i.i = phi i32 [ 0, %entry ], [ %separability.2.i.i, %for.inc121.i.i.i ]\r\n  br label %for.body103.i.i.i\r\n\r\nfor.body103.i.i.i:                                ; preds = %for.inc121.i.i.i, %for.cond101.preheader.i.i.i\r\n  %separability.1.i.i = phi i32 [ %separability.0.i.i, %for.cond101.preheader.i.i.i ], [ %separability.2.i.i, %for.inc121.i.i.i ]\r\n  %indvars.iv71.i.i.i5 = phi i64 [ 0, %for.cond101.preheader.i.i.i ], [ %indvars.iv.next72.i.i.i, %for.inc121.i.i.i ]\r\n  br i1 %cmp104.not.i.i.i, label %for.inc121.i.i.i, label %land.lhs.true105.i.i.i\r\n\r\nland.lhs.true105.i.i.i:                           ; preds = %for.body103.i.i.i\r\n  br i1 %tobool108.not.i.i.i, label %for.inc121.i.i.i, label %land.lhs.true109.i.i.i\r\n\r\nland.lhs.true109.i.i.i:                           ; preds = %land.lhs.true105.i.i.i\r\n  %0 = load ptr, ptr %iiv_used.i.i.i.sroa.0, align 8\r\n  %cmp118.i.i.i = icmp eq ptr %0, null\r\n  %spec.select209.i.i = select i1 %cmp118.i.i.i, i32 0, i32 %separability.1.i.i\r\n  br label %for.inc121.i.i.i\r\n\r\nfor.inc121.i.i.i:                                 ; preds = %land.lhs.true109.i.i.i, %land.lhs.true105.i.i.i, %for.body103.i.i.i\r\n  %separability.2.i.i = phi i32 [ %separability.1.i.i, %for.body103.i.i.i ], [ %separability.1.i.i, %land.lhs.true105.i.i.i ], [ %spec.select209.i.i, %land.lhs.true109.i.i.i ]\r\n  %indvars.iv.next72.i.i.i = add i64 %indvars.iv71.i.i.i5, 1\r\n  %exitcond74.not.i.i.i = icmp eq i64 %indvars.iv71.i.i.i5, %indvars.iv71.i.i.i\r\n  br i1 %exitcond74.not.i.i.i, label %for.cond101.preheader.i.i.i, label %for.body103.i.i.i\r\n\r\n; uselistorder directives\r\n  uselistorder i32 %separability.2.i.i, { 1, 0 }\r\n}\r\n\r\nattributes #0 = { \"target-cpu\"=\"sifive-p670\" }\r\n```\r\n\r\nopt -S --passes=loop-vectorize ./reduced.ll\r\nLoopVectorize.cpp:7430: VectorizationFactor llvm::LoopVectorizationPlanner::computeBestVF(): Assertion `(BestFactor.Width == LegacyVF.Width || planContainsAdditionalSimplifications(getPlanFor(BestFactor.Width), CostCtx, OrigLoop)) && \" VPlan cost model and legacy cost model disagreed\"' failed.\r\n",
    "author": "alexey-bataev",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "36fc291b6ec6d4c8e3d956d6855631ab2db7b05a"
}