{
  "bug_id": "98435",
  "issue_url": "https://github.com/llvm/llvm-project/issues/98435",
  "bug_type": "miscompilation",
  "base_commit": "0e124537aabea0d18e030226a3ca4c6f494c1322",
  "knowledge_cutoff": "2024-07-11T06:06:08Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "9304af3927caecdb43d3a9b5d16c6a5b7a6b5594",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        [
          1735,
          1751
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        "InstCombinerImpl::SimplifyDemandedVectorElts"
      ]
    }
  },
  "patch": "commit 9304af3927caecdb43d3a9b5d16c6a5b7a6b5594\nAuthor: Jorge Botto <23462171+jf-botto@users.noreply.github.com>\nDate:   Fri Aug 9 11:52:56 2024 +0100\n\n    [InstCombine] Fixing wrong select folding in vectors with undef elements (#102244)\n    \n    This PR fixes https://github.com/llvm/llvm-project/issues/98435.\n    `SimplifyDemandedVectorElts` mishandles the undef by assuming that\n    !isNullValue() means the condition is true.\n    \n    By preventing any value that we're not certain equals 1 or 0, it avoids\n    having to make any particular choice by not demanding bits from a\n    particular branch with potentially picking a wrong value.\n    \n    Proof: https://alive2.llvm.org/ce/z/r8CmEu\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\nindex c494fec84c1e..153d8c238ed4 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n@@ -1735,17 +1735,12 @@ Value *InstCombinerImpl::SimplifyDemandedVectorElts(Value *V,\n     APInt DemandedLHS(DemandedElts), DemandedRHS(DemandedElts);\n     if (auto *CV = dyn_cast<ConstantVector>(Sel->getCondition())) {\n       for (unsigned i = 0; i < VWidth; i++) {\n-        // isNullValue() always returns false when called on a ConstantExpr.\n-        // Skip constant expressions to avoid propagating incorrect information.\n         Constant *CElt = CV->getAggregateElement(i);\n-        if (isa<ConstantExpr>(CElt))\n-          continue;\n-        // TODO: If a select condition element is undef, we can demand from\n-        // either side. If one side is known undef, choosing that side would\n-        // propagate undef.\n+\n+        // isNullValue() always returns false when called on a ConstantExpr.\n         if (CElt->isNullValue())\n           DemandedLHS.clearBit(i);\n-        else\n+        else if (CElt->isOneValue())\n           DemandedRHS.clearBit(i);\n       }\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/pr98435.ll",
      "commands": [
        "opt -S -passes=instcombine < %s 2>&1"
      ],
      "tests": [
        {
          "test_name": "pr98435",
          "test_body": "define <2 x i1> @pr98435(<2 x i1> %val) {\n  %val1 = select <2 x i1> <i1 undef, i1 true>, <2 x i1> splat (i1 true), <2 x i1> %val\n  ret <2 x i1> %val1\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Wrong select folding for undef conditions by InstCombine",
    "body": "https://github.com/llvm/llvm-project/blob/7eae9bb856135136cddc4208a2b1546e9db44c9c/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp#L3582-L3585\r\n\r\nAlive2 report: https://alive2.llvm.org/ce/z/Qtu72J\r\n\r\n\r\n```ll\r\n----------------------------------------\r\ndefine <2 x i1> @fun0(<2 x i1> %val0, <2 x i1> %val1) {\r\n#0:\r\n  %val2 = select <2 x i1> %val0, <2 x i1> %val0, <2 x i1> %val0\r\n  %val3 = select <2 x i1> { undef, 1 }, <2 x i1> { 1, 1 }, <2 x i1> %val2\r\n  ret <2 x i1> %val3\r\n}\r\n=>\r\ndefine <2 x i1> @fun0(<2 x i1> %val0, <2 x i1> %val1) {\r\n#0:\r\n  ret <2 x i1> { poison, 1 }\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\n<2 x i1> %val0 = < #x0 (0), #x0 (0) >\r\n<2 x i1> %val1 = < #x0 (0), #x0 (0) >\r\n\r\nSource:\r\n<2 x i1> %val2 = < #x0 (0), #x0 (0) >\r\n<2 x i1> %val3 = < #x0 (0)\t[based on undef value], #x1 (1) >\r\n\r\nTarget:\r\nSource value: < #x0 (0), #x1 (1) >\r\nTarget value: < poison, #x1 (1) >\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "jf-botto",
        "body": "Would this issue be to fix InstCombine to not try to optimise it or get InstCombine to pick  `<2 x i1> { 1, 1 }` because `undef` let's it pick either values and picking a constant vector is better than picking a variable?"
      },
      {
        "author": "nikic",
        "body": "The problematic step seems to be this one: https://alive2.llvm.org/ce/z/C2waWU\r\n\r\nI don't think the quoted code is responsible for this, as it is guarded by `!isa<Constant>(CondVal)`."
      },
      {
        "author": "jf-botto",
        "body": "I think the problem is with how `SimplifyDemandedVectorElts` handles the undef: https://github.com/llvm/llvm-project/blob/af80d3a248101d6f5d9d5e229c7899136b8ce0b8/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp#L1721-L1760"
      },
      {
        "author": "nikic",
        "body": "@jf-botto Agree. It assumes that !isNullValue() means \"is true\", which is not the case."
      }
    ]
  }
}