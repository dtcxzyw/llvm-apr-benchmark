{
  "bug_id": "125259",
  "issue_url": "https://github.com/llvm/llvm-project/issues/125259",
  "bug_type": "miscompilation",
  "base_commit": "f3549814f8a2e14b61ebe05b94cd216008633fa5",
  "knowledge_cutoff": "2025-01-31T17:44:09Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e78aa8f35e6dd66d5152396406d3d4f37f43e7f4",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15094,
          15100
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::processBuildVector"
      ]
    }
  },
  "patch": "commit e78aa8f35e6dd66d5152396406d3d4f37f43e7f4\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Jan 31 11:16:59 2025 -0800\n\n    [SLP]Use the size of gathered scalars when evaluating slice size\n    \n    Need to use the size of the gathered scalars, not the original size of\n    the buildvector scalars, since gathered scalar size might be changed\n    during building the buildvector shuffles.\n    \n    Fixes #125259\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 0a3f57591595..1f7ab9fe01a7 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15094,7 +15094,7 @@ ResTy BoUpSLP::processBuildVector(const TreeEntry *E, Type *ScalarTy,\n       }\n     }\n     if (!GatherShuffles.empty()) {\n-      unsigned SliceSize = getPartNumElems(E->Scalars.size(), NumParts);\n+      unsigned SliceSize = getPartNumElems(GatheredScalars.size(), NumParts);\n       SmallVector<int> VecMask(Mask.size(), PoisonMaskElem);\n       for (const auto [I, TEs] : enumerate(Entries)) {\n         if (TEs.empty()) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/gathered-shuffle-resized.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-grtev4-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define ptr @test(ptr %0, ptr %args_gep) {\nbb:\n  %arg1 = load ptr, ptr %args_gep, align 8\n  %arg26 = load ptr, ptr %0, align 8\n  %1 = load i32, ptr %arg1, align 32\n  %2 = icmp eq i32 %1, 0\n  %3 = zext i1 %2 to i8\n  store i8 %3, ptr %arg26, align 32, !alias.scope !0\n  %4 = icmp eq i32 %1, 0\n  %5 = zext i1 %4 to i8\n  %6 = getelementptr i8, ptr %arg26, i64 1\n  store i8 %5, ptr %6, align 1, !alias.scope !0\n  %7 = icmp eq i32 %1, 0\n  %8 = zext i1 %7 to i8\n  %9 = getelementptr i8, ptr %arg26, i64 2\n  store i8 %8, ptr %9, align 2, !alias.scope !0\n  %10 = icmp eq i32 %1, 0\n  %11 = zext i1 %10 to i8\n  %12 = getelementptr i8, ptr %arg26, i64 3\n  store i8 %11, ptr %12, align 1, !alias.scope !0\n  %13 = icmp eq i32 %1, 0\n  %14 = zext i1 %13 to i8\n  %15 = getelementptr i8, ptr %arg26, i64 4\n  store i8 %14, ptr %15, align 4, !alias.scope !0\n  %16 = icmp eq i32 %1, 0\n  %17 = zext i1 %16 to i8\n  %18 = getelementptr i8, ptr %arg26, i64 5\n  store i8 %17, ptr %18, align 1, !alias.scope !0\n  %19 = getelementptr i8, ptr %arg1, i64 4\n  %20 = load i32, ptr %19, align 4, !noalias !0\n  %21 = icmp eq i32 %20, 0\n  %22 = zext i1 %21 to i8\n  %23 = getelementptr i8, ptr %arg26, i64 6\n  store i8 %22, ptr %23, align 2\n  %24 = icmp eq i32 %20, 0\n  %25 = zext i1 %24 to i8\n  %26 = getelementptr i8, ptr %arg26, i64 7\n  store i8 %25, ptr %26, align 1\n  %27 = icmp eq i32 %20, 0\n  %28 = zext i1 %27 to i8\n  %29 = getelementptr i8, ptr %arg26, i64 8\n  store i8 %28, ptr %29, align 8\n  %30 = icmp eq i32 %20, 0\n  %31 = zext i1 %30 to i8\n  %32 = getelementptr i8, ptr %arg26, i64 9\n  store i8 %31, ptr %32, align 1\n  %33 = icmp eq i32 %20, 0\n  %34 = zext i1 %33 to i8\n  %35 = getelementptr i8, ptr %arg26, i64 10\n  store i8 %34, ptr %35, align 2\n  %36 = icmp eq i32 %20, 0\n  %37 = zext i1 %36 to i8\n  %38 = getelementptr i8, ptr %arg26, i64 11\n  store i8 %37, ptr %38, align 1\n  %39 = icmp eq i32 %1, 0\n  %40 = zext i1 %39 to i8\n  %41 = getelementptr i8, ptr %arg26, i64 12\n  store i8 %40, ptr %41, align 4\n  %42 = icmp eq i32 %1, 0\n  %43 = zext i1 %42 to i8\n  %44 = getelementptr i8, ptr %arg26, i64 13\n  store i8 %43, ptr %44, align 1\n  %45 = icmp eq i32 %1, 0\n  %46 = zext i1 %45 to i8\n  %47 = getelementptr i8, ptr %arg26, i64 14\n  store i8 %46, ptr %47, align 2\n  %48 = icmp eq i32 %1, 0\n  %49 = zext i1 %48 to i8\n  %50 = getelementptr i8, ptr %arg26, i64 15\n  store i8 %49, ptr %50, align 1\n  %51 = icmp eq i32 %1, 0\n  %52 = zext i1 %51 to i8\n  %53 = getelementptr i8, ptr %arg26, i64 17\n  store i8 %52, ptr %53, align 1, !alias.scope !0\n  %54 = icmp eq i32 %20, 0\n  %55 = zext i1 %54 to i8\n  %56 = getelementptr i8, ptr %arg26, i64 18\n  store i8 %55, ptr %56, align 2, !alias.scope !0\n  %57 = icmp eq i32 %20, 0\n  %58 = zext i1 %57 to i8\n  %59 = getelementptr i8, ptr %arg26, i64 19\n  store i8 %58, ptr %59, align 1, !alias.scope !0\n  %60 = icmp eq i32 %20, 0\n  %61 = zext i1 %60 to i8\n  %62 = getelementptr i8, ptr %arg26, i64 20\n  store i8 %61, ptr %62, align 4, !alias.scope !0\n  %63 = icmp eq i32 %20, 0\n  %64 = zext i1 %63 to i8\n  %65 = getelementptr i8, ptr %arg26, i64 21\n  store i8 %64, ptr %65, align 1, !alias.scope !0\n  %66 = icmp eq i32 %20, 0\n  %67 = zext i1 %66 to i8\n  %68 = getelementptr i8, ptr %arg26, i64 22\n  store i8 %67, ptr %68, align 2, !alias.scope !0\n  %69 = icmp eq i32 %20, 0\n  %70 = zext i1 %69 to i8\n  %71 = getelementptr i8, ptr %arg26, i64 23\n  store i8 %70, ptr %71, align 1, !alias.scope !0\n  %72 = getelementptr i8, ptr %arg1, i64 8\n  %73 = load i32, ptr %72, align 8, !noalias !0\n  %74 = icmp eq i32 %73, 0\n  %75 = zext i1 %74 to i8\n  %76 = getelementptr i8, ptr %arg26, i64 24\n  store i8 %75, ptr %76, align 8, !alias.scope !0\n  %77 = icmp eq i32 %73, 0\n  %78 = zext i1 %77 to i8\n  %79 = getelementptr i8, ptr %arg26, i64 25\n  store i8 %78, ptr %79, align 1, !alias.scope !0\n  %80 = icmp eq i32 %73, 0\n  %81 = zext i1 %80 to i8\n  %82 = getelementptr i8, ptr %arg26, i64 26\n  store i8 %81, ptr %82, align 2, !alias.scope !0\n  %83 = icmp eq i32 %73, 0\n  %84 = zext i1 %83 to i8\n  %85 = getelementptr i8, ptr %arg26, i64 27\n  store i8 %84, ptr %85, align 1, !alias.scope !0\n  %86 = icmp eq i32 %73, 0\n  %87 = zext i1 %86 to i8\n  %88 = getelementptr i8, ptr %arg26, i64 28\n  store i8 %87, ptr %88, align 4, !alias.scope !0\n  %89 = icmp eq i32 %73, 0\n  %90 = zext i1 %89 to i8\n  %91 = getelementptr i8, ptr %arg26, i64 29\n  store i8 %90, ptr %91, align 1, !alias.scope !0\n  %92 = getelementptr i8, ptr %arg1, i64 12\n  %93 = load i32, ptr %92, align 4, !noalias !0\n  %94 = icmp eq i32 %93, 0\n  %95 = zext i1 %94 to i8\n  %96 = getelementptr i8, ptr %arg26, i64 30\n  store i8 %95, ptr %96, align 2\n  %97 = icmp eq i32 %93, 0\n  %98 = zext i1 %97 to i8\n  %99 = getelementptr i8, ptr %arg26, i64 31\n  store i8 %98, ptr %99, align 1\n  %100 = icmp eq i32 %93, 0\n  %101 = zext i1 %100 to i8\n  %102 = getelementptr i8, ptr %arg26, i64 32\n  store i8 %101, ptr %102, align 32\n  %103 = icmp eq i32 %93, 0\n  %104 = zext i1 %103 to i8\n  store i8 %104, ptr %0, align 1\n  ret ptr null\n}\n\n!0 = !{!1}\n!1 = !{!\"result slice: {}\", !2}\n!2 = !{!\"fn AA domain\"}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Miscompile within optimization pipeline",
    "body": "Hi All, we are seeing a miscompile somewhere in the optimization pipeline when using O3, we do not see the issue with O2 (I am currently bisecting the commit and will update when I have it)\n\nI've copied the input and optimized output below (and godbolt link https://godbolt.org/z/ae6heox5M)\n\nWe are seeing undefined behaviour in the optimized output: the second half the the variable `%21` is `poison` which are then passed to a `store` (via a `icmp` and `zext`)\n\n<details>\n<summary>Input</summary>\n\n```llvm\nsource_filename = \"example\"\ntarget triple = \"x86_64-grtev4-linux-gnu\"\n\n%CallFrameType = type { ptr, ptr, i64, ptr }\n%ArgType = type { ptr, i64 }\n\n; Function Attrs: uwtable\ndefine ptr @fn(ptr %0) #0 {\n  %fn.invar_address.dim.4 = alloca i64, align 8\n  %fn.invar_address.dim.3 = alloca i64, align 8\n  %fn.invar_address.dim.2 = alloca i64, align 8\n  %fn.invar_address.dim.1 = alloca i64, align 8\n  %fn.invar_address.dim.0 = alloca i64, align 8\n  %args_gep = getelementptr inbounds nuw %CallFrameType, ptr %0, i32 0, i32 3\n  %args = load ptr, ptr %args_gep, align 8\n  %arg0_gep = getelementptr %ArgType, ptr %args, i32 0, i32 0\n  %arg0 = load ptr, ptr %arg0_gep, align 8, !invariant.load !0, !dereferenceable !1, !align !2\n  %args_gep1 = getelementptr inbounds nuw %CallFrameType, ptr %0, i32 0, i32 3\n  %args2 = load ptr, ptr %args_gep1, align 8\n  %arg1_gep = getelementptr %ArgType, ptr %args2, i32 1, i32 0\n  %arg1 = load ptr, ptr %arg1_gep, align 8, !invariant.load !0, !dereferenceable !3, !align !2\n  %args_gep3 = getelementptr inbounds nuw %CallFrameType, ptr %0, i32 0, i32 3\n  %args4 = load ptr, ptr %args_gep3, align 8\n  %arg2_gep = getelementptr %ArgType, ptr %args4, i32 2, i32 0\n  %arg2 = load ptr, ptr %arg2_gep, align 8, !invariant.load !0, !dereferenceable !4, !align !2\n  store i64 0, ptr %fn.invar_address.dim.0, align 4\n  br label %fn.loop_header.dim.0\n\nfn.loop_header.dim.0:       ; preds = %fn.loop_exit.dim.1, %1\n  %fn.indvar.dim.0 = load i64, ptr %fn.invar_address.dim.0, align 4\n  %2 = icmp uge i64 %fn.indvar.dim.0, 3\n  br i1 %2, label %fn.loop_exit.dim.0, label %fn.loop_body.dim.0\n\nfn.loop_body.dim.0:         ; preds = %fn.loop_header.dim.0\n  store i64 0, ptr %fn.invar_address.dim.1, align 4\n  br label %fn.loop_header.dim.1\n\nfn.loop_header.dim.1:       ; preds = %fn.loop_exit.dim.2, %fn.loop_body.dim.0\n  %fn.indvar.dim.1 = load i64, ptr %fn.invar_address.dim.1, align 4\n  %3 = icmp uge i64 %fn.indvar.dim.1, 2\n  br i1 %3, label %fn.loop_exit.dim.1, label %fn.loop_body.dim.1\n\nfn.loop_body.dim.1:         ; preds = %fn.loop_header.dim.1\n  store i64 0, ptr %fn.invar_address.dim.2, align 4\n  br label %fn.loop_header.dim.2\n\nfn.loop_header.dim.2:       ; preds = %fn.loop_exit.dim.3, %fn.loop_body.dim.1\n  %fn.indvar.dim.2 = load i64, ptr %fn.invar_address.dim.2, align 4\n  %4 = icmp uge i64 %fn.indvar.dim.2, 2\n  br i1 %4, label %fn.loop_exit.dim.2, label %fn.loop_body.dim.2\n\nfn.loop_body.dim.2:         ; preds = %fn.loop_header.dim.2\n  store i64 0, ptr %fn.invar_address.dim.3, align 4\n  br label %fn.loop_header.dim.3\n\nfn.loop_header.dim.3:       ; preds = %fn.loop_exit.dim.4, %fn.loop_body.dim.2\n  %fn.indvar.dim.3 = load i64, ptr %fn.invar_address.dim.3, align 4\n  %5 = icmp uge i64 %fn.indvar.dim.3, 6\n  br i1 %5, label %fn.loop_exit.dim.3, label %fn.loop_body.dim.3\n\nfn.loop_body.dim.3:         ; preds = %fn.loop_header.dim.3\n  store i64 0, ptr %fn.invar_address.dim.4, align 4\n  br label %fn.loop_header.dim.4\n\nfn.loop_header.dim.4:       ; preds = %fn.loop_body.dim.4, %fn.loop_body.dim.3\n  %fn.indvar.dim.4 = load i64, ptr %fn.invar_address.dim.4, align 4\n  %6 = icmp uge i64 %fn.indvar.dim.4, 1\n  br i1 %6, label %fn.loop_exit.dim.4, label %fn.loop_body.dim.4\n\nfn.loop_body.dim.4:         ; preds = %fn.loop_header.dim.4\n  %7 = getelementptr inbounds [3 x [2 x [1 x [1 x i32]]]], ptr %arg1, i64 0, i64 %fn.indvar.dim.0, i64 %fn.indvar.dim.2, i64 0, i64 0\n  %8 = load i32, ptr %7, align 4, !invariant.load !0, !noalias !5\n  %9 = getelementptr inbounds [3 x [2 x [1 x [6 x [1 x i32]]]]], ptr %arg0, i64 0, i64 %fn.indvar.dim.0, i64 %fn.indvar.dim.1, i64 0, i64 %fn.indvar.dim.3, i64 0\n  %10 = load i32, ptr %9, align 4, !invariant.load !0, !noalias !5\n  %11 = icmp eq i32 %8, %10\n  %12 = zext i1 %11 to i8\n  %13 = getelementptr inbounds [3 x [2 x [2 x [6 x [1 x i8]]]]], ptr %arg2, i64 0, i64 %fn.indvar.dim.0, i64 %fn.indvar.dim.1, i64 %fn.indvar.dim.2, i64 %fn.indvar.dim.3, i64 0\n  store i8 %12, ptr %13, align 1, !alias.scope !5\n  %invar.inc8 = add nuw nsw i64 %fn.indvar.dim.4, 1\n  store i64 %invar.inc8, ptr %fn.invar_address.dim.4, align 4\n  br label %fn.loop_header.dim.4\n\nfn.loop_exit.dim.4:         ; preds = %fn.loop_header.dim.4\n  %invar.inc7 = add nuw nsw i64 %fn.indvar.dim.3, 1\n  store i64 %invar.inc7, ptr %fn.invar_address.dim.3, align 4\n  br label %fn.loop_header.dim.3\n\nfn.loop_exit.dim.3:         ; preds = %fn.loop_header.dim.3\n  %invar.inc6 = add nuw nsw i64 %fn.indvar.dim.2, 1\n  store i64 %invar.inc6, ptr %fn.invar_address.dim.2, align 4\n  br label %fn.loop_header.dim.2\n\nfn.loop_exit.dim.2:         ; preds = %fn.loop_header.dim.2\n  %invar.inc5 = add nuw nsw i64 %fn.indvar.dim.1, 1\n  store i64 %invar.inc5, ptr %fn.invar_address.dim.1, align 4\n  br label %fn.loop_header.dim.1\n\nfn.loop_exit.dim.1:         ; preds = %fn.loop_header.dim.1\n  %invar.inc = add nuw nsw i64 %fn.indvar.dim.0, 1\n  store i64 %invar.inc, ptr %fn.invar_address.dim.0, align 4\n  br label %fn.loop_header.dim.0\n\nfn.loop_exit.dim.0:         ; preds = %fn.loop_header.dim.0\n  br label %return\n\nreturn:                                           ; preds = %fn.loop_exit.dim.0\n  ret ptr null\n}\n\nattributes #0 = { uwtable \"frame-pointer\"=\"all\" \"prefer-vector-width\"=\"256\" }\n\n!0 = !{}\n!1 = !{i64 144}\n!2 = !{i64 32}\n!3 = !{i64 24}\n!4 = !{i64 72}\n!5 = !{!6}\n!6 = !{!\"result slice: {}\", !7}\n!7 = !{!\"fn AA domain\"}\n\n```\n</details>\n\n<details>\n<summary>Optimized output</summary>\n\n```llvm\nsource_filename = \"example\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-grtev4-linux-gnu\"\n\ndefine noalias noundef ptr @fn(ptr readonly captures(none) %0) local_unnamed_addr #0 {\n  %args_gep = getelementptr inbounds nuw i8, ptr %0, i64 24\n  %args = load ptr, ptr %args_gep, align 8\n  %arg0 = load ptr, ptr %args, align 8, !invariant.load !0, !dereferenceable !1, !align !2\n  %arg1_gep = getelementptr i8, ptr %args, i64 16\n  %arg1 = load ptr, ptr %arg1_gep, align 8, !invariant.load !0, !dereferenceable !3, !align !2\n  %arg2_gep = getelementptr i8, ptr %args, i64 32\n  %arg2 = load ptr, ptr %arg2_gep, align 8, !invariant.load !0, !dereferenceable !4, !align !2\n  %1 = getelementptr inbounds nuw i8, ptr %arg0, i64 32\n  %2 = load <2 x i32>, ptr %arg1, align 32, !invariant.load !0, !noalias !5\n  %3 = shufflevector <2 x i32> %2, <2 x i32> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0>\n  %4 = load <8 x i32>, ptr %arg0, align 32, !invariant.load !0, !noalias !5\n  %5 = load <2 x i32>, ptr %1, align 32, !invariant.load !0, !noalias !5\n  %6 = shufflevector <2 x i32> %5, <2 x i32> poison, <12 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison>\n  %7 = shufflevector <8 x i32> %4, <8 x i32> poison, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison>\n  %8 = shufflevector <12 x i32> %7, <12 x i32> %6, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 poison, i32 poison>\n  %9 = shufflevector <12 x i32> %8, <12 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9>\n  %10 = icmp eq <16 x i32> %3, %9\n  %11 = zext <16 x i1> %10 to <16 x i8>\n  store <16 x i8> %11, ptr %arg2, align 32, !alias.scope !5\n  %12 = getelementptr inbounds nuw i8, ptr %arg0, i64 40\n  %13 = getelementptr inbounds nuw i8, ptr %arg2, i64 16\n  %14 = getelementptr inbounds nuw i8, ptr %arg0, i64 48\n  %15 = getelementptr inbounds nuw i8, ptr %arg1, i64 8\n  %16 = getelementptr inbounds nuw i8, ptr %arg0, i64 56\n  %17 = load <2 x i32>, ptr %1, align 32, !invariant.load !0, !noalias !5\n  %18 = load <2 x i32>, ptr %12, align 8, !invariant.load !0, !noalias !5\n  %19 = load <2 x i32>, ptr %14, align 16, !invariant.load !0, !noalias !5\n  %20 = load <4 x i32>, ptr %16, align 8, !invariant.load !0, !noalias !5\n  %21 = shufflevector <2 x i32> %2, <2 x i32> poison, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %22 = shufflevector <8 x i32> %4, <8 x i32> poison, <12 x i32> <i32 poison, i32 poison, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %23 = shufflevector <4 x i32> %20, <4 x i32> poison, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %24 = shufflevector <12 x i32> %22, <12 x i32> %23, <12 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 12, i32 13, i32 14, i32 15>\n  %25 = shufflevector <2 x i32> %18, <2 x i32> poison, <12 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %26 = shufflevector <12 x i32> %25, <12 x i32> %24, <12 x i32> <i32 0, i32 1, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 20, i32 21, i32 22, i32 23>\n  %27 = shufflevector <2 x i32> %17, <2 x i32> poison, <12 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %28 = shufflevector <12 x i32> %26, <12 x i32> %27, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11>\n  %29 = shufflevector <2 x i32> %19, <2 x i32> poison, <12 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %30 = shufflevector <12 x i32> %28, <12 x i32> %29, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 12, i32 13, i32 8, i32 9, i32 10, i32 11>\n  %31 = shufflevector <12 x i32> %30, <12 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 6, i32 7>\n  %32 = icmp eq <16 x i32> %21, %31\n  %33 = zext <16 x i1> %32 to <16 x i8>\n  store <16 x i8> %33, ptr %13, align 16, !alias.scope !5\n  %34 = getelementptr inbounds nuw i8, ptr %arg2, i64 32\n  %35 = getelementptr inbounds nuw i8, ptr %arg0, i64 72\n  %36 = getelementptr inbounds nuw i8, ptr %arg0, i64 88\n  %37 = load <2 x i32>, ptr %15, align 8, !invariant.load !0, !noalias !5\n  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>\n  %39 = load <4 x i32>, ptr %35, align 8, !invariant.load !0, !noalias !5\n  %40 = load <2 x i32>, ptr %36, align 8, !invariant.load !0, !noalias !5\n  %41 = shufflevector <4 x i32> %39, <4 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison>\n  %42 = shufflevector <4 x i32> %20, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %43 = shufflevector <16 x i32> %42, <16 x i32> %41, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 26, i32 27, i32 28, i32 29, i32 poison, i32 poison>\n  %44 = shufflevector <4 x i32> %39, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %45 = shufflevector <16 x i32> %43, <16 x i32> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 10, i32 11, i32 12, i32 13, i32 poison, i32 poison>\n  %46 = shufflevector <2 x i32> %40, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %47 = shufflevector <16 x i32> %45, <16 x i32> %46, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 10, i32 11, i32 12, i32 13, i32 poison, i32 poison>\n  %48 = shufflevector <2 x i32> %40, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %49 = shufflevector <16 x i32> %47, <16 x i32> %48, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 17>\n  %50 = icmp eq <16 x i32> %38, %49\n  %51 = zext <16 x i1> %50 to <16 x i8>\n  store <16 x i8> %51, ptr %34, align 32, !alias.scope !5\n  %52 = getelementptr inbounds nuw i8, ptr %arg0, i64 96\n  %53 = getelementptr inbounds nuw i8, ptr %arg1, i64 16\n  %54 = getelementptr inbounds nuw i8, ptr %arg2, i64 48\n  %55 = getelementptr inbounds nuw i8, ptr %arg0, i64 128\n  %56 = load <2 x i32>, ptr %53, align 16, !invariant.load !0, !noalias !5\n  %57 = shufflevector <2 x i32> %56, <2 x i32> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0>\n  %58 = load <8 x i32>, ptr %52, align 32, !invariant.load !0, !noalias !5\n  %59 = load <2 x i32>, ptr %55, align 32, !invariant.load !0, !noalias !5\n  %60 = shufflevector <2 x i32> %59, <2 x i32> poison, <12 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison>\n  %61 = shufflevector <8 x i32> %58, <8 x i32> poison, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison>\n  %62 = shufflevector <12 x i32> %61, <12 x i32> %60, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 poison, i32 poison>\n  %63 = shufflevector <12 x i32> %62, <12 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9>\n  %64 = icmp eq <16 x i32> %57, %63\n  %65 = zext <16 x i1> %64 to <16 x i8>\n  store <16 x i8> %65, ptr %54, align 16, !alias.scope !5\n  %66 = getelementptr inbounds nuw i8, ptr %arg2, i64 64\n  %67 = load <4 x i32>, ptr %55, align 32, !invariant.load !0, !noalias !5\n  %68 = shufflevector <2 x i32> %56, <2 x i32> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>\n  %69 = shufflevector <4 x i32> %67, <4 x i32> poison, <8 x i32> <i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>\n  %70 = shufflevector <8 x i32> %58, <8 x i32> %69, <8 x i32> <i32 8, i32 9, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison>\n  %71 = shufflevector <4 x i32> %67, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>\n  %72 = shufflevector <8 x i32> %70, <8 x i32> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>\n  %73 = icmp eq <8 x i32> %68, %72\n  %74 = zext <8 x i1> %73 to <8 x i8>\n  store <8 x i8> %74, ptr %66, align 32, !alias.scope !5\n  ret ptr null\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) uwtable \"frame-pointer\"=\"all\" \"prefer-vector-width\"=\"256\" }\n\n!0 = !{}\n!1 = !{i64 144}\n!2 = !{i64 32}\n!3 = !{i64 24}\n!4 = !{i64 72}\n!5 = !{!6}\n!6 = !{!\"result slice: {}\", !7}\n!7 = !{!\"fn AA domain\"}\n```\n\n</details>",
    "author": "WillFroom",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "WillFroom",
        "body": "@alexey-bataev I haven't 100% confirmed but I think 1d5fbe83c3bcdd27a8ce1d57a68fb7be35e6cbbf might be the root cause (or at least reveals an underlying issue), if you have any ideas what the cause might be that would be great, thanks in advance!"
      }
    ]
  }
}