{
  "bug_id": "95016",
  "issue_url": "https://github.com/llvm/llvm-project/issues/95016",
  "bug_type": "crash",
  "base_commit": "1846523bb77275de954ac573110171bd39bfa930",
  "knowledge_cutoff": "2024-06-10T18:08:58Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "380beaec8633bad0148aec02f03a85d9a59b2a2d",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          835,
          845
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "getSameOpcode"
      ]
    }
  },
  "patch": "commit 380beaec8633bad0148aec02f03a85d9a59b2a2d\nAuthor: Gabriel Baraldi <baraldigabriel@gmail.com>\nDate:   Tue Jul 2 09:15:51 2024 -0300\n\n    Fix potential crash in SLPVectorizer caused by missing check (#95937)\n    \n    I'm not super familiar with this code, but it seems that we were just\n    missing a check.\n    \n    The original code that triggered this did not have uselistorders but\n    llvm-reduce created them and it reproduces the same issue in a way more\n    compact way.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/95016\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex c4876bb92a1c..868e9e2687f5 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -835,11 +835,11 @@ static InstructionsState getSameOpcode(ArrayRef<Value *> VL,\n         auto *CallBase = cast<CallInst>(IBase);\n         if (Call->getCalledFunction() != CallBase->getCalledFunction())\n           return InstructionsState(VL[BaseIndex], nullptr, nullptr);\n-        if (Call->hasOperandBundles() &&\n+        if (Call->hasOperandBundles() && (!CallBase->hasOperandBundles() ||\n             !std::equal(Call->op_begin() + Call->getBundleOperandsStartIndex(),\n                         Call->op_begin() + Call->getBundleOperandsEndIndex(),\n                         CallBase->op_begin() +\n-                            CallBase->getBundleOperandsStartIndex()))\n+                            CallBase->getBundleOperandsStartIndex())))\n           return InstructionsState(VL[BaseIndex], nullptr, nullptr);\n         Intrinsic::ID ID = getVectorIntrinsicIDForCall(Call, &TLI);\n         if (ID != BaseID)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/AArch64/uselistorder.ll",
      "commands": [
        "opt < %s -passes=slp-vectorizer -S -pass-remarks-missed=slp-vectorizer 2>&1"
      ],
      "tests": [
        {
          "test_name": "uselistorder_test",
          "test_body": "target datalayout = \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"aarch64-unknown-linux-gnu\"\n\ndefine void @uselistorder_test() {\n  %max1 = call double @llvm.maximum.f64(double 0.000000e+00, double 0.000000e+00) [ \"a_list\"(ptr null) ]\n  %add1 = fadd double %max1, 0.000000e+00\n  %mul1 = fmul double 0.000000e+00, %add1\n  %mul2 = fmul double %mul1, 0.000000e+00\n  %sel1 = select i1 false, double 0.000000e+00, double %mul2\n  %max2 = call double @llvm.maximum.f64(double 0.000000e+00, double 0.000000e+00)\n  %add2 = fadd double %max2, 0.000000e+00\n  %mul3 = fmul double 0.000000e+00, %add2\n  %mul4 = fmul double %mul3, 0.000000e+00\n  %sel2 = select i1 false, double 0.000000e+00, double %mul4\n  %mul5 = fmul double %sel2, 0.000000e+00\n  %add3 = fadd double 0.000000e+00, %mul5\n  %gep1 = getelementptr { double, [1 x [2 x double]] }, ptr null, i64 0, i32 1\n  store double %add3, ptr %gep1, align 8\n  %mul6 = fmul double %sel1, 0.000000e+00\n  %add4 = fadd double %mul6, 0.000000e+00\n  store double %add4, ptr null, align 8\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare double @llvm.maximum.f64(double, double) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "SLPVectorizer (hasOperandBundles() && \"Don't call otherwise!\") assertion trigger with verified module",
    "body": "SLPVectorize asserts while optimizing the following module\r\n```llvm-ir\r\ntarget datalayout = \"e-m:o-i64:64-i128:128-n32:64-S128-ni:10:11:12:13\"\r\ntarget triple = \"arm64-apple-darwin23.5.0\"\r\n\r\ndefine swiftcc void @julia_multiparameter_a_res_17823() {\r\ntop:\r\n  %0 = call double @llvm.maximum.f64(double 0.000000e+00, double 0.000000e+00) [ \"jl_roots\"(ptr null) ]\r\n  %1 = fadd double %0, 0.000000e+00\r\n  %2 = fmul double 0.000000e+00, %1\r\n  %3 = fmul double %2, 0.000000e+00\r\n  %4 = select i1 false, double 0.000000e+00, double %3\r\n  %5 = call double @llvm.maximum.f64(double 0.000000e+00, double 0.000000e+00)\r\n  %6 = fadd double %5, 0.000000e+00\r\n  %7 = fmul double 0.000000e+00, %6\r\n  %8 = fmul double %7, 0.000000e+00\r\n  %9 = select i1 false, double 0.000000e+00, double %8\r\n  %10 = fmul double %9, 0.000000e+00\r\n  %11 = fadd double 0.000000e+00, %10\r\n  %12 = getelementptr { double, [1 x [2 x double]] }, ptr null, i64 0, i32 1\r\n  store double %11, ptr %12, align 8\r\n  %13 = fmul double %4, 0.000000e+00\r\n  %14 = fadd double %13, 0.000000e+00\r\n  store double %14, ptr null, align 8\r\n  ret void\r\n}\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare double @llvm.maximum.f64(double, double) #0\r\n\r\n; uselistorder directives\r\nuselistorder ptr @llvm.maximum.f64, { 1, 0 }\r\n\r\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\n```\r\n\r\nThis also seems to trigger on godbolt on whatever version of trunk they have there\r\nhttps://godbolt.org/z/favErWG5K\r\n\r\n\r\nstacktrace:\r\n>  #0 0x0000000004e258c8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4e258c8)\r\n #1 0x0000000004e2301c SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007c7148042520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x00007c71480969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x00007c7148042476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x00007c71480287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00007c714802871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x00007c7148039e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x0000000003ee5e8f (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3ee5e8f)\r\n #9 0x0000000003f5e546 getSameOpcode(llvm::ArrayRef<llvm::Value*>, llvm::TargetLibraryInfo const&, unsigned int) (.constprop.1) SLPVectorizer.cpp:0:0\r\n#10 0x0000000003f67928 llvm::slpvectorizer::BoUpSLP::LookAheadHeuristics::getShallowScore(llvm::Value*, llvm::Value*, llvm::Instruction*, llvm::Instruction*, llvm::ArrayRef<llvm::Value*>) const (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f67928)\r\n#11 0x0000000003f67de0 llvm::slpvectorizer::BoUpSLP::LookAheadHeuristics::getScoreAtLevelRec(llvm::Value*, llvm::Value*, llvm::Instruction*, llvm::Instruction*, int, llvm::ArrayRef<llvm::Value*>) const (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f67de0)\r\n#12 0x0000000003f6aaf5 llvm::slpvectorizer::BoUpSLP::VLOperands::getBestOperand(unsigned int, int, int, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::VLOperands::ReorderingMode>, llvm::ArrayRef<llvm::Value*>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f6aaf5)\r\n#13 0x0000000003f6bfcb llvm::slpvectorizer::BoUpSLP::VLOperands::reorder() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f6bfcb)\r\n#14 0x0000000003f6c4f6 llvm::slpvectorizer::BoUpSLP::reorderInputsAccordingToOpcode(llvm::ArrayRef<llvm::Value*>, llvm::SmallVectorImpl<llvm::Value*>&, llvm::SmallVectorImpl<llvm::Value*>&, llvm::slpvectorizer::BoUpSLP const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f6c4f6)\r\n#15 0x0000000003f702f4 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f702f4)\r\n#16 0x0000000003f70392 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f70392)\r\n#17 0x0000000003f70362 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f70362)\r\n#18 0x0000000003f7022b llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f7022b)\r\n#19 0x0000000003f70362 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f70362)\r\n#20 0x0000000003f70362 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f70362)\r\n#21 0x0000000003f6fe47 llvm::slpvectorizer::BoUpSLP::buildTree_rec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f6fe47)\r\n#22 0x0000000003f71b59 llvm::slpvectorizer::BoUpSLP::buildTree(llvm::ArrayRef<llvm::Value*>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f71b59)\r\n#23 0x0000000003f94622 llvm::SLPVectorizerPass::vectorizeStoreChain(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, unsigned int, unsigned int, unsigned int&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f94622)\r\n#24 0x0000000003f95fb0 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&)::'lambda'(std::set<std::pair<unsigned int, int>, llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&)::StoreDistCompare, std::allocator<std::pair<unsigned int, int>>> const&)::operator()(std::set<std::pair<unsigned int, int>, llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&)::StoreDistCompare, std::allocator<std::pair<unsigned int, int>>> const&) const SLPVectorizer.cpp:0:0\r\n#25 0x0000000003f97e88 llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&, llvm::DenseSet<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, llvm::DenseMapInfo<std::tuple<llvm::Value*, llvm::Value*, llvm::Value*, llvm::Value*, unsigned int>, void>>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f97e88)\r\n#26 0x0000000003f985b3 llvm::SLPVectorizerPass::vectorizeStoreChains(llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f985b3)\r\n#27 0x0000000003f9970f llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n#28 0x0000000003f9a163 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f9a163)\r\n#29 0x0000000002e1013e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e1013e)\r\n#30 0x0000000004c2e64c llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c2e64c)\r\n#31 0x0000000000db3bce llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdb3bce)\r\n#32 0x0000000004c2cf8e llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c2cf8e)\r\n#33 0x0000000000db563e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdb563e)\r\n#34 0x0000000004c2ae9c llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c2ae9c)\r\n#35 0x00000000008d7b32 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d7b32)\r\n#36 0x00000000008cacdc optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8cacdc)\r\n#37 0x00007c7148029d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#38 0x00007c7148029e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#39 0x00000000008c212e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8c212e)",
    "author": "gbaraldi",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  }
}