{
  "bug_id": "112476",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112476",
  "bug_type": "miscompilation",
  "base_commit": "3ef630ac339f31686290f9460a40eb2a9c9f5bd0",
  "knowledge_cutoff": "2024-10-16T04:35:15Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "09361953116770b646decf5820a9455ada2ba4fc",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          1738,
          1744
        ],
        [
          1844,
          1850
        ]
      ],
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1448,
          1453
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombinerImpl::foldICmpAndConstConst",
        "InstCombinerImpl::foldICmpAndShift"
      ],
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::foldSelectEqualityTest"
      ]
    }
  },
  "patch": "commit 09361953116770b646decf5820a9455ada2ba4fc\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Oct 16 19:13:52 2024 +0800\n\n    [InstCombine] Drop `samesign` in InstCombine (#112480)\n    \n    Closes https://github.com/llvm/llvm-project/issues/112476.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex 7129499e0f8f..18a6fdcec172 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -1738,7 +1738,7 @@ Instruction *InstCombinerImpl::foldICmpAndShift(ICmpInst &Cmp,\n \n     // Compute X & (C2 << Y).\n     Value *NewAnd = Builder.CreateAnd(Shift->getOperand(0), NewShift);\n-    return replaceOperand(Cmp, 0, NewAnd);\n+    return new ICmpInst(Cmp.getPredicate(), NewAnd, Cmp.getOperand(1));\n   }\n \n   return nullptr;\n@@ -1844,7 +1844,7 @@ Instruction *InstCombinerImpl::foldICmpAndConstConst(ICmpInst &Cmp,\n                                                /*HasNUW=*/true),\n                              One, Or->getName());\n         Value *NewAnd = Builder.CreateAnd(A, NewOr, And->getName());\n-        return replaceOperand(Cmp, 0, NewAnd);\n+        return new ICmpInst(Cmp.getPredicate(), NewAnd, Cmp.getOperand(1));\n       }\n     }\n   }\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 8be2eeed84ad..623694663aa1 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1448,6 +1448,7 @@ Instruction *InstCombinerImpl::foldSelectEqualityTest(SelectInst &Sel) {\n              m_c_SpecificICmp(ICmpInst::ICMP_EQ, m_Specific(X), m_Specific(Y))))\n     return nullptr;\n \n+  cast<ICmpInst>(XeqY)->setSameSign(false);\n   return replaceInstUsesWith(Sel, XeqY);\n }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp-and-shift.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_shr_and_1_ne_0",
          "test_body": "define i1 @test_shr_and_1_ne_0(i32 %a, i32 %b) {\n  %shr = lshr i32 %a, %b\n  %and = and i32 %shr, 1\n  %cmp = icmp ne i32 %and, 0\n  ret i1 %cmp\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/icmp-equality-test.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "icmp_equality_test_swift_optional_pointers",
          "test_body": "define i1 @icmp_equality_test_swift_optional_pointers(i64 %X, i64 %Y) {\nentry:\n  %XeqC = icmp eq i64 %X, 0\n  %YeqC = icmp eq i64 %Y, 0\n  %either = select i1 %XeqC, i1 true, i1 %YeqC\n  %both = select i1 %XeqC, i1 %YeqC, i1 false\n  %XeqY = icmp eq i64 %X, %Y\n  %equal = select i1 %either, i1 %both, i1 %XeqY\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_wrong_equal",
          "test_body": "define i1 @icmp_equality_test_wrong_equal(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %and, i1 %YeqZ\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_commute_icmp1",
          "test_body": "define i1 @icmp_equality_test_commute_icmp1(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %Z, %X\n  %YeqZ = icmp eq i64 %Z, %Y\n  %XeqY = icmp eq i64 %Y, %X\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_wrong_cmp",
          "test_body": "define i1 @icmp_equality_test_wrong_cmp(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, 999\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_wrong_constant",
          "test_body": "define i1 @icmp_equality_test_wrong_constant(i64 %X, i64 %Y) {\nentry:\n  %XeqC = icmp eq i64 %X, 0\n  %YeqC = icmp eq i64 %Y, 999\n  %XeqY = icmp eq i64 %X, %Y\n  %not.YeqC = xor i1 %YeqC, true\n  %and = select i1 %not.YeqC, i1 %XeqY, i1 false\n  %equal = select i1 %XeqC, i1 %YeqC, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_vector",
          "test_body": "define <2 x i1> @icmp_equality_test_vector(<2 x i64> %X, <2 x i64> %Y) {\nentry:\n  %XeqC = icmp eq <2 x i64> %X, <i64 123, i64 456>\n  %YeqC = icmp eq <2 x i64> %Y, <i64 123, i64 456>\n  %XeqY = icmp eq <2 x i64> %X, %Y\n  %not.YeqC = xor <2 x i1> %YeqC, splat (i1 true)\n  %and = select <2 x i1> %not.YeqC, <2 x i1> %XeqY, <2 x i1> zeroinitializer\n  %equal = select <2 x i1> %XeqC, <2 x i1> %YeqC, <2 x i1> %and\n  ret <2 x i1> %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_commute_select2",
          "test_body": "define i1 @icmp_equality_test_commute_select2(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %not.XeqZ = xor i1 %XeqZ, true\n  %and = select i1 %YeqZ, i1 false, i1 %XeqY\n  %equal = select i1 %not.XeqZ, i1 %and, i1 %YeqZ\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_constant",
          "test_body": "define i1 @icmp_equality_test_constant(i42 %X, i42 %Y) {\nentry:\n  %XeqC = icmp eq i42 %X, -42\n  %YeqC = icmp eq i42 %Y, -42\n  %XeqY = icmp eq i42 %X, %Y\n  %not.YeqC = xor i1 %YeqC, true\n  %and = select i1 %not.YeqC, i1 %XeqY, i1 false\n  %equal = select i1 %XeqC, i1 %YeqC, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_wrong_and",
          "test_body": "define i1 @icmp_equality_test_wrong_and(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 false, i1 %XeqY\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test",
          "test_body": "define i1 @icmp_equality_test(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_missing_not",
          "test_body": "define i1 @icmp_equality_test_missing_not(i64 %X, i64 %Y, i64 %Z) {\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %and = select i1 %YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_constant_samesign",
          "test_body": "define i1 @icmp_equality_test_constant_samesign(i42 %X, i42 %Y) {\nentry:\n  %XeqC = icmp eq i42 %X, -42\n  %YeqC = icmp eq i42 %Y, -42\n  %XeqY = icmp samesign eq i42 %X, %Y\n  %not.YeqC = xor i1 %YeqC, true\n  %and = select i1 %not.YeqC, i1 %XeqY, i1 false\n  %equal = select i1 %XeqC, i1 %YeqC, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_commute_icmp2",
          "test_body": "define i1 @icmp_equality_test_commute_icmp2(i64 %X, i64 %Y, i64 %Z) {\n  %XeqZ = icmp eq i64 %Z, %X\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %Y, %X\n  %not.YeqZ = xor i1 %YeqZ, true\n  %and = select i1 %not.YeqZ, i1 %XeqY, i1 false\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        },
        {
          "test_name": "icmp_equality_test_commute_select1",
          "test_body": "define i1 @icmp_equality_test_commute_select1(i64 %X, i64 %Y, i64 %Z) {\nentry:\n  %XeqZ = icmp eq i64 %X, %Z\n  %YeqZ = icmp eq i64 %Y, %Z\n  %XeqY = icmp eq i64 %X, %Y\n  %and = select i1 %YeqZ, i1 false, i1 %XeqY\n  %equal = select i1 %XeqZ, i1 %YeqZ, i1 %and\n  ret i1 %equal\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/icmp.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "icmp_and_or_lshr",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @icmp_and_or_lshr(i32 %x, i32 %y) {\n  %shf = lshr i32 %x, %y\n  %or = or i32 %shf, %x\n  %and = and i32 %or, 1\n  %ret = icmp ne i32 %and, 0\n  ret i1 %ret\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `samesign` flag should be dropped in `InstCombinerImpl::foldICmpAndConstConst`",
    "body": "Reproducer:\r\n```\r\ndefine i1 @src(i32 %x, i32 %y) {\r\n  %shf = lshr i32 %x, %y\r\n  %or = or i32 %shf, %x\r\n  %and = and i32 %or, 1\r\n  %ret = icmp samesign ne i32 %and, 0\r\n  ret i1 %ret\r\n}\r\n\r\ndefine i1 @tgt(i32 %x, i32 %y) {\r\n  %shf1 = shl nuw i32 1, %y\r\n  %or2 = or i32 %shf1, 1\r\n  %and3 = and i32 %x, %or2\r\n  %ret = icmp samesign ne i32 %and3, 0\r\n  ret i1 %ret\r\n}\r\n```\r\n```\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\ni32 %x = #x80000000 (2147483648, -2147483648)\r\ni32 %y = #x0000001f (31)\r\n\r\nSource:\r\ni32 %shf = #x00000001 (1)\r\ni32 %or = #x80000001 (2147483649, -2147483647)\r\ni32 %and = #x00000001 (1)\r\ni1 %ret = #x1 (1)\r\n\r\nTarget:\r\ni32 %shf1 = #x80000000 (2147483648, -2147483648)\r\ni32 %or2 = #x80000001 (2147483649, -2147483647)\r\ni32 %and3 = #x80000000 (2147483648, -2147483648)\r\ni1 %ret = poison\r\nSource value: #x1 (1)\r\nTarget value: poison\r\n```\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}