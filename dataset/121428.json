{
  "bug_id": "121428",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121428",
  "bug_type": "miscompilation",
  "base_commit": "b5f21671ef04984bc00770263234dfb94833a274",
  "knowledge_cutoff": "2025-01-01T09:27:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a37dbc1f51c70d92fd209c2e52a9d794eb15e4e7",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1225,
          1232
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "foldSelectCttzCtlz"
      ]
    }
  },
  "patch": "commit a37dbc1f51c70d92fd209c2e52a9d794eb15e4e7\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Jan 6 00:04:28 2025 +0800\n\n    [InstCombine] Drop noundef in `foldSelectCttzCtlz` (#121692)\n    \n    Close https://github.com/llvm/llvm-project/issues/121428\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex e7a8e947705f..a18b927678ef 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1225,8 +1225,12 @@ static Value *foldSelectCttzCtlz(ICmpInst *ICI, Value *TrueVal, Value *FalseVal,\n   // zext/trunc) have one use (ending at the select), the cttz/ctlz result will\n   // not be used if the input is zero. Relax to 'zero is poison' for that case.\n   if (II->hasOneUse() && SelectArg->hasOneUse() &&\n-      !match(II->getArgOperand(1), m_One()))\n+      !match(II->getArgOperand(1), m_One())) {\n     II->setArgOperand(1, ConstantInt::getTrue(II->getContext()));\n+    // noundef attribute on the intrinsic may no longer be valid.\n+    II->dropUBImplyingAttrsAndMetadata();\n+    IC.addToWorklist(II);\n+  }\n \n   return nullptr;\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select-cmp-cttz-ctlz.ll",
      "commands": [
        "opt -passes=instcombine -S < %s"
      ],
      "tests": [
        {
          "test_name": "test_cttz_not_bw_multiuse",
          "test_body": "define i32 @test_cttz_not_bw_multiuse(i32 %x) {\n  %ct = tail call i32 @llvm.cttz.i32(i32 %x, i1 false)\n  %cmp = icmp ne i32 %x, 0\n  %sel = select i1 %cmp, i32 %ct, i32 123\n  %res = or i32 %sel, %ct\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "test_cttz_not_bw",
          "test_body": "define i32 @test_cttz_not_bw(i32 %x) {\n  %ct = tail call i32 @llvm.cttz.i32(i32 %x, i1 false)\n  %cmp = icmp ne i32 %x, 0\n  %res = select i1 %cmp, i32 %ct, i32 123\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "test_cttz_not_bw_noundef",
          "test_body": "define i32 @test_cttz_not_bw_noundef(i32 %x) {\n  %ct = tail call noundef i32 @llvm.cttz.i32(i32 %x, i1 false)\n  %cmp = icmp ne i32 %x, 0\n  %res = select i1 %cmp, i32 %ct, i32 123\n  ret i32 %res\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.cttz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `noundef` attribute should be dropped",
    "body": "Alive2: https://alive2.llvm.org/ce/z/wKsUWK\n```\ndefine i32 @src(i32 noundef %x) {\n  %ct = call noundef i32 @llvm.cttz.i32(i32 %x, i1 false)\n  %cmp = icmp ne i32 %x, 0\n  %res = select i1 %cmp, i32 %ct, i32 123\n  ret i32 %res\n}\ndefine i32 @tgt(i32 noundef %x) {\n  %ct = call noundef range(i32 0, 33) i32 @llvm.cttz.i32(i32 %x, i1 true)\n  %cmp.not = icmp eq i32 %x, 0\n  %res = select i1 %cmp.not, i32 123, i32 %ct\n  ret i32 %res\n}\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}