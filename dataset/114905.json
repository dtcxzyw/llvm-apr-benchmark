{
  "bug_id": "114905",
  "issue_url": "https://github.com/llvm/llvm-project/issues/114905",
  "bug_type": "miscompilation",
  "base_commit": "1b476ecdcf4b544af1436341fc923c0b73793cbe",
  "knowledge_cutoff": "2024-11-05T01:11:52Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "889215a30ed60474e573f9632d1fa362dfa1b04e",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          19821,
          19841
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "tryToReduce"
      ]
    }
  },
  "patch": "commit 889215a30ed60474e573f9632d1fa362dfa1b04e\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Dec 26 05:09:51 2024 -0800\n\n    [SLP]Followup fix for the poisonous logical op in reductions\n    \n    If the VectorizedTree still may generate poisonous value, but it is not\n    the original operand of the reduction op, need to check if Res still the\n    operand, to generate correct code.\n    \n    Fixes #114905\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 57f3016fbe1e..e9fc89fa242a 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -19821,21 +19821,21 @@ public:\n         Builder.SetCurrentDebugLocation(\n             cast<Instruction>(ReductionOps.front().front())->getDebugLoc());\n         if (AnyBoolLogicOp) {\n-\n-          if (auto It = ReducedValsToOps.find(VectorizedTree);\n-              It == ReducedValsToOps.end() ||\n+          auto It = ReducedValsToOps.find(VectorizedTree);\n+          auto It1 = ReducedValsToOps.find(Res);\n+          if ((It == ReducedValsToOps.end() && It1 == ReducedValsToOps.end()) ||\n               isGuaranteedNotToBePoison(VectorizedTree, AC) ||\n-              any_of(It->getSecond(), [&](Instruction *I) {\n-                return isBoolLogicOp(I) &&\n-                       getRdxOperand(I, 0) == VectorizedTree;\n-              })) {\n+              (It != ReducedValsToOps.end() &&\n+               any_of(It->getSecond(), [&](Instruction *I) {\n+                 return isBoolLogicOp(I) &&\n+                        getRdxOperand(I, 0) == VectorizedTree;\n+               }))) {\n             ;\n-          } else if (auto It = ReducedValsToOps.find(Res);\n-                     It == ReducedValsToOps.end() ||\n-                     isGuaranteedNotToBePoison(Res, AC) ||\n-                     any_of(It->getSecond(), [&](Instruction *I) {\n+          } else if (isGuaranteedNotToBePoison(Res, AC) ||\n+                     (It1 != ReducedValsToOps.end() &&\n+                     any_of(It1->getSecond(), [&](Instruction *I) {\n                        return isBoolLogicOp(I) && getRdxOperand(I, 0) == Res;\n-                     })) {\n+                     }))) {\n             std::swap(VectorizedTree, Res);\n           } else {\n             VectorizedTree = Builder.CreateFreeze(VectorizedTree);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/reduction-logical.ll",
      "commands": [
        "opt < %s -passes=slp-vectorizer -mtriple=x86_64--                 -S",
        "opt < %s -passes=slp-vectorizer -mtriple=x86_64-- -mattr=avx512vl -S"
      ],
      "tests": [
        {
          "test_name": "logical_or_icmp_extra_op",
          "test_body": "define i1 @logical_or_icmp_extra_op(<4 x i32> %x, <4 x i32> %y, i1 %c) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 1\n  %x2 = extractelement <4 x i32> %x, i32 2\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %y0 = extractelement <4 x i32> %y, i32 0\n  %y1 = extractelement <4 x i32> %y, i32 1\n  %y2 = extractelement <4 x i32> %y, i32 2\n  %y3 = extractelement <4 x i32> %y, i32 3\n  %d0 = icmp slt i32 %x0, %y0\n  %d1 = icmp slt i32 %x1, %y1\n  %d2 = icmp slt i32 %x2, %y2\n  %d3 = icmp slt i32 %x3, %y3\n  %s3 = select i1 %c, i1 true, i1 %c\n  %s4 = select i1 %s3, i1 true, i1 %d0\n  %s5 = select i1 %s4, i1 true, i1 %d1\n  %s6 = select i1 %s5, i1 true, i1 %d2\n  %s7 = select i1 %s6, i1 true, i1 %d3\n  ret i1 %s7\n}\n"
        },
        {
          "test_name": "logical_and_icmp_extra_op",
          "test_body": "define i1 @logical_and_icmp_extra_op(<4 x i32> %x, <4 x i32> %y, i1 %c) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 1\n  %x2 = extractelement <4 x i32> %x, i32 2\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %y0 = extractelement <4 x i32> %y, i32 0\n  %y1 = extractelement <4 x i32> %y, i32 1\n  %y2 = extractelement <4 x i32> %y, i32 2\n  %y3 = extractelement <4 x i32> %y, i32 3\n  %d0 = icmp slt i32 %x0, %y0\n  %d1 = icmp slt i32 %x1, %y1\n  %d2 = icmp slt i32 %x2, %y2\n  %d3 = icmp slt i32 %x3, %y3\n  %s3 = select i1 %c, i1 %c, i1 false\n  %s4 = select i1 %s3, i1 %d0, i1 false\n  %s5 = select i1 %s4, i1 %d1, i1 false\n  %s6 = select i1 %s5, i1 %d2, i1 false\n  %s7 = select i1 %s6, i1 %d3, i1 false\n  ret i1 %s7\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/logical-ops-poisonous-repeated.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 -1\n  %x2 = extractelement <4 x i32> %x, i32 2\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c2 = icmp sgt i32 %x2, 0\n  %c3 = icmp slt i32 %x3, 0\n  %s1 = select i1 %1, i1 %c1, i1 false\n  %s2 = select i1 %s1, i1 %c3, i1 false\n  %s3 = select i1 %s2, i1 %c3, i1 false\n  ret i1 %s3\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong folding of `select`s in slp-vectorizer",
    "body": "Alive2 report: https://alive2.llvm.org/ce/z/jEopx9\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine i1 @logical_and_icmp_diff_preds.2(<4 x i32> %x) {\r\n#0:\r\n  %x0 = extractelement <4 x i32> %x, i32 0\r\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\r\n  %x3 = extractelement <4 x i32> %x, i32 3\r\n  %#1 = icmp ugt i32 %x0, 0\r\n  %c1 = icmp slt i32 %x1, 0\r\n  %c3 = icmp slt i32 %x3, 0\r\n  %s1 = select i1 %#1, i1 %c1, i1 0\r\n  %s2 = select i1 %s1, i1 %c3, i1 0\r\n  %s3 = select i1 %s2, i1 %c3, i1 0\r\n  ret i1 %s3\r\n}\r\n=>\r\ndefine i1 @logical_and_icmp_diff_preds.2(<4 x i32> %x) {\r\n#0:\r\n  %x0 = extractelement <4 x i32> %x, i32 0\r\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\r\n  %x3 = extractelement <4 x i32> %x, i32 3\r\n  %#1 = icmp ugt i32 %x0, 0\r\n  %c1 = icmp slt i32 %x1, 0\r\n  %c3 = icmp slt i32 %x3, 0\r\n  %op.rdx = select i1 %c3, i1 %c1, i1 0\r\n  %op.rdx1 = select i1 %op.rdx, i1 %#1, i1 0\r\n  ret i1 %op.rdx1\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\n<4 x i32> %x = < #x00000000 (0), #x00000000 (0), #x00000000 (0), #xffffffff (4294967295, -1) >\r\n\r\nSource:\r\ni32 %x0 = #x00000000 (0)\r\ni32 %x1 = poison\r\ni32 %x3 = #xffffffff (4294967295, -1)\r\ni1 %#1 = #x0 (0)\r\ni1 %c1 = poison\r\ni1 %c3 = #x1 (1)\r\ni1 %s1 = #x0 (0)\r\ni1 %s2 = #x0 (0)\r\ni1 %s3 = #x0 (0)\r\n\r\nTarget:\r\ni32 %x0 = #x00000000 (0)\r\ni32 %x1 = poison\r\ni32 %x3 = #xffffffff (4294967295, -1)\r\ni1 %#1 = #x0 (0)\r\ni1 %c1 = poison\r\ni1 %c3 = #x1 (1)\r\ni1 %op.rdx = poison\r\ni1 %op.rdx1 = poison\r\nSource value: #x0 (0)\r\nTarget value: poison\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "nunoplopes",
        "body": "Alive2 is still not happy with the fix:\n```llvm\ndefine i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %#1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c3 = icmp slt i32 %x3, 0\n  %s1 = select i1 %#1, i1 %c1, i1 0\n  %s2 = select i1 %s1, i1 %c3, i1 0\n  %s3 = select i1 %s2, i1 %c3, i1 0\n  ret i1 %s3\n}\n=>\ndefine i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %#1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c3 = icmp slt i32 %x3, 0\n  %#2 = freeze i1 %c3\n  %op.rdx = select i1 %#2, i1 %c1, i1 0\n  %op.rdx1 = select i1 %op.rdx, i1 %#1, i1 0\n  ret i1 %op.rdx1\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\n<4 x i32> %x = < #x00000000 (0), poison, poison, #xffffffff (4294967295, -1) >\n\nSource:\ni32 %x0 = #x00000000 (0)\ni32 %x1 = poison\ni32 %x3 = #xffffffff (4294967295, -1)\ni1 %#1 = #x0 (0)\ni1 %c1 = poison\ni1 %c3 = #x1 (1)\ni1 %s1 = #x0 (0)\ni1 %s2 = #x0 (0)\ni1 %s3 = #x0 (0)\n\nTarget:\ni32 %x0 = #x00000000 (0)\ni32 %x1 = poison\ni32 %x3 = #xffffffff (4294967295, -1)\ni1 %#1 = #x0 (0)\ni1 %c1 = poison\ni1 %c3 = #x1 (1)\ni1 %#2 = #x1 (1)\ni1 %op.rdx = poison\ni1 %op.rdx1 = poison\nSource value: #x0 (0)\nTarget value: poison\n```"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}