{
  "bug_id": "114905",
  "issue_url": "https://github.com/llvm/llvm-project/issues/114905",
  "bug_type": "miscompilation",
  "base_commit": "6bafbc99b0df7d5554af63115d78d0d97065862a",
  "knowledge_cutoff": "2024-11-05T01:11:52Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "f0f8dab712967b8fca5fcca4d7338b1d25017634",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          19679,
          19698
        ],
        [
          19701,
          19709
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "tryToReduce"
      ]
    }
  },
  "patch": "commit f0f8dab712967b8fca5fcca4d7338b1d25017634\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Dec 24 07:40:35 2024 -0800\n\n    [SLP]Check if the first reduced value requires freeze/swap, if it may be too poisonous\n    \n    If several reduced values are combined and the first reduced value is\n    just the original reduced value of the bool logical op, need to freeze\n    it to prevent the propagation of the poison value.\n    \n    Fixes #114905\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex b5d68c075b98..2785d7fb36ff 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -19679,20 +19679,35 @@ public:\n       return cast<Instruction>(ScalarCond);\n     };\n \n+    bool AnyBoolLogicOp = any_of(ReductionOps.back(), [](Value *V) {\n+      return isBoolLogicOp(cast<Instruction>(V));\n+    });\n     // Return new VectorizedTree, based on previous value.\n     auto GetNewVectorizedTree = [&](Value *VectorizedTree, Value *Res) {\n       if (VectorizedTree) {\n         // Update the final value in the reduction.\n         Builder.SetCurrentDebugLocation(\n             cast<Instruction>(ReductionOps.front().front())->getDebugLoc());\n-        if ((isa<PoisonValue>(VectorizedTree) && !isa<PoisonValue>(Res)) ||\n-            (isGuaranteedNotToBePoison(Res) &&\n-             !isGuaranteedNotToBePoison(VectorizedTree))) {\n-          auto It = ReducedValsToOps.find(Res);\n-          if (It != ReducedValsToOps.end() &&\n-              any_of(It->getSecond(),\n-                     [](Instruction *I) { return isBoolLogicOp(I); }))\n+        if (AnyBoolLogicOp) {\n+\n+          if (auto It = ReducedValsToOps.find(VectorizedTree);\n+              It == ReducedValsToOps.end() ||\n+              isGuaranteedNotToBePoison(VectorizedTree) ||\n+              any_of(It->getSecond(), [&](Instruction *I) {\n+                return isBoolLogicOp(I) &&\n+                       getRdxOperand(I, 0) == VectorizedTree;\n+              })) {\n+            ;\n+          } else if (auto It = ReducedValsToOps.find(Res);\n+                     It == ReducedValsToOps.end() ||\n+                     isGuaranteedNotToBePoison(Res) ||\n+                     any_of(It->getSecond(), [&](Instruction *I) {\n+                       return isBoolLogicOp(I) && getRdxOperand(I, 0) == Res;\n+                     })) {\n             std::swap(VectorizedTree, Res);\n+          } else {\n+            VectorizedTree = Builder.CreateFreeze(VectorizedTree);\n+          }\n         }\n \n         return createOp(Builder, RdxKind, VectorizedTree, Res, \"op.rdx\",\n@@ -19701,9 +19716,6 @@ public:\n       // Initialize the final value in the reduction.\n       return Res;\n     };\n-    bool AnyBoolLogicOp = any_of(ReductionOps.back(), [](Value *V) {\n-      return isBoolLogicOp(cast<Instruction>(V));\n-    });\n     SmallDenseSet<Value *> IgnoreList(ReductionOps.size() *\n                                       ReductionOps.front().size());\n     for (ReductionOpsType &RdxOps : ReductionOps)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/logical-ops-poisonous-repeated.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 -1\n  %x2 = extractelement <4 x i32> %x, i32 2\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c2 = icmp sgt i32 %x2, 0\n  %c3 = icmp slt i32 %x3, 0\n  %s1 = select i1 %1, i1 %c1, i1 false\n  %s2 = select i1 %s1, i1 %c3, i1 false\n  %s3 = select i1 %s2, i1 %c3, i1 false\n  ret i1 %s3\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong folding of `select`s in slp-vectorizer",
    "body": "Alive2 report: https://alive2.llvm.org/ce/z/jEopx9\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine i1 @logical_and_icmp_diff_preds.2(<4 x i32> %x) {\r\n#0:\r\n  %x0 = extractelement <4 x i32> %x, i32 0\r\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\r\n  %x3 = extractelement <4 x i32> %x, i32 3\r\n  %#1 = icmp ugt i32 %x0, 0\r\n  %c1 = icmp slt i32 %x1, 0\r\n  %c3 = icmp slt i32 %x3, 0\r\n  %s1 = select i1 %#1, i1 %c1, i1 0\r\n  %s2 = select i1 %s1, i1 %c3, i1 0\r\n  %s3 = select i1 %s2, i1 %c3, i1 0\r\n  ret i1 %s3\r\n}\r\n=>\r\ndefine i1 @logical_and_icmp_diff_preds.2(<4 x i32> %x) {\r\n#0:\r\n  %x0 = extractelement <4 x i32> %x, i32 0\r\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\r\n  %x3 = extractelement <4 x i32> %x, i32 3\r\n  %#1 = icmp ugt i32 %x0, 0\r\n  %c1 = icmp slt i32 %x1, 0\r\n  %c3 = icmp slt i32 %x3, 0\r\n  %op.rdx = select i1 %c3, i1 %c1, i1 0\r\n  %op.rdx1 = select i1 %op.rdx, i1 %#1, i1 0\r\n  ret i1 %op.rdx1\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\n<4 x i32> %x = < #x00000000 (0), #x00000000 (0), #x00000000 (0), #xffffffff (4294967295, -1) >\r\n\r\nSource:\r\ni32 %x0 = #x00000000 (0)\r\ni32 %x1 = poison\r\ni32 %x3 = #xffffffff (4294967295, -1)\r\ni1 %#1 = #x0 (0)\r\ni1 %c1 = poison\r\ni1 %c3 = #x1 (1)\r\ni1 %s1 = #x0 (0)\r\ni1 %s2 = #x0 (0)\r\ni1 %s3 = #x0 (0)\r\n\r\nTarget:\r\ni32 %x0 = #x00000000 (0)\r\ni32 %x1 = poison\r\ni32 %x3 = #xffffffff (4294967295, -1)\r\ni1 %#1 = #x0 (0)\r\ni1 %c1 = poison\r\ni1 %c3 = #x1 (1)\r\ni1 %op.rdx = poison\r\ni1 %op.rdx1 = poison\r\nSource value: #x0 (0)\r\nTarget value: poison\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "nunoplopes",
        "body": "Alive2 is still not happy with the fix:\n```llvm\ndefine i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %#1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c3 = icmp slt i32 %x3, 0\n  %s1 = select i1 %#1, i1 %c1, i1 0\n  %s2 = select i1 %s1, i1 %c3, i1 0\n  %s3 = select i1 %s2, i1 %c3, i1 0\n  ret i1 %s3\n}\n=>\ndefine i1 @test(<4 x i32> %x) {\n  %x0 = extractelement <4 x i32> %x, i32 0\n  %x1 = extractelement <4 x i32> %x, i32 4294967295\n  %x3 = extractelement <4 x i32> %x, i32 3\n  %#1 = icmp ugt i32 %x0, 0\n  %c1 = icmp slt i32 %x1, 0\n  %c3 = icmp slt i32 %x3, 0\n  %#2 = freeze i1 %c3\n  %op.rdx = select i1 %#2, i1 %c1, i1 0\n  %op.rdx1 = select i1 %op.rdx, i1 %#1, i1 0\n  ret i1 %op.rdx1\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\n<4 x i32> %x = < #x00000000 (0), poison, poison, #xffffffff (4294967295, -1) >\n\nSource:\ni32 %x0 = #x00000000 (0)\ni32 %x1 = poison\ni32 %x3 = #xffffffff (4294967295, -1)\ni1 %#1 = #x0 (0)\ni1 %c1 = poison\ni1 %c3 = #x1 (1)\ni1 %s1 = #x0 (0)\ni1 %s2 = #x0 (0)\ni1 %s3 = #x0 (0)\n\nTarget:\ni32 %x0 = #x00000000 (0)\ni32 %x1 = poison\ni32 %x3 = #xffffffff (4294967295, -1)\ni1 %#1 = #x0 (0)\ni1 %c1 = poison\ni1 %c3 = #x1 (1)\ni1 %#2 = #x1 (1)\ni1 %op.rdx = poison\ni1 %op.rdx1 = poison\nSource value: #x0 (0)\nTarget value: poison\n```"
      }
    ]
  }
}