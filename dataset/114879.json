{
  "bug_id": "114879",
  "issue_url": "https://github.com/llvm/llvm-project/issues/114879",
  "bug_type": "miscompilation",
  "base_commit": "3850801ca57575640a6ad3a5a421a416dc5c6f12",
  "knowledge_cutoff": "2024-11-04T22:12:00Z",
  "lit_test_dir": [
    "llvm/test/Transforms/IndVarSimplify",
    "llvm/test/Transforms/LoopStrengthReduce",
    "llvm/test/Transforms/LoopUnroll",
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "0b9f1cc024ca6c7e8d60524be07c0ddfcd08b23c",
    "components": [
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        [
          6023,
          6029
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        "ScalarEvolution::createNodeForPHI"
      ]
    }
  },
  "patch": "commit 0b9f1cc024ca6c7e8d60524be07c0ddfcd08b23c\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu Nov 7 15:53:51 2024 +0800\n\n    [SCEV] Disallow simplifying phi(undef, X) to X (#115109)\n    \n    See the following case:\n    ```\n    @GlobIntONE = global i32 0, align 4\n    \n    define ptr @src() {\n    entry:\n      br label %for.body.peel.begin\n    \n    for.body.peel.begin:                              ; preds = %entry\n      br label %for.body.peel\n    \n    for.body.peel:                                    ; preds = %for.body.peel.begin\n      br i1 true, label %cleanup.peel, label %cleanup.loopexit.peel\n    \n    cleanup.loopexit.peel:                            ; preds = %for.body.peel\n      br label %cleanup.peel\n    \n    cleanup.peel:                                     ; preds = %cleanup.loopexit.peel, %for.body.peel\n      %retval.2.peel = phi ptr [ undef, %for.body.peel ], [ @GlobIntONE, %cleanup.loopexit.peel ]\n      br i1 true, label %for.body.peel.next, label %cleanup7\n    \n    for.body.peel.next:                               ; preds = %cleanup.peel\n      br label %for.body.peel.next1\n    \n    for.body.peel.next1:                              ; preds = %for.body.peel.next\n      br label %entry.peel.newph\n    \n    entry.peel.newph:                                 ; preds = %for.body.peel.next1\n      br label %for.body\n    \n    for.body:                                         ; preds = %cleanup, %entry.peel.newph\n      %retval.0 = phi ptr [ %retval.2.peel, %entry.peel.newph ], [ %retval.2, %cleanup ]\n      br i1 false, label %cleanup, label %cleanup.loopexit\n    \n    cleanup.loopexit:                                 ; preds = %for.body\n      br label %cleanup\n    \n    cleanup:                                          ; preds = %cleanup.loopexit, %for.body\n      %retval.2 = phi ptr [ %retval.0, %for.body ], [ @GlobIntONE, %cleanup.loopexit ]\n      br i1 false, label %for.body, label %cleanup7.loopexit\n    \n    cleanup7.loopexit:                                ; preds = %cleanup\n      %retval.2.lcssa.ph = phi ptr [ %retval.2, %cleanup ]\n      br label %cleanup7\n    \n    cleanup7:                                         ; preds = %cleanup7.loopexit, %cleanup.peel\n      %retval.2.lcssa = phi ptr [ %retval.2.peel, %cleanup.peel ], [ %retval.2.lcssa.ph, %cleanup7.loopexit ]\n      ret ptr %retval.2.lcssa\n    }\n    \n    define ptr @tgt() {\n    entry:\n      br label %for.body.peel.begin\n    \n    for.body.peel.begin:                              ; preds = %entry\n      br label %for.body.peel\n    \n    for.body.peel:                                    ; preds = %for.body.peel.begin\n      br i1 true, label %cleanup.peel, label %cleanup.loopexit.peel\n    \n    cleanup.loopexit.peel:                            ; preds = %for.body.peel\n      br label %cleanup.peel\n    \n    cleanup.peel:                                     ; preds = %cleanup.loopexit.peel, %for.body.peel\n      %retval.2.peel = phi ptr [ undef, %for.body.peel ], [ @GlobIntONE, %cleanup.loopexit.peel ]\n      br i1 true, label %for.body.peel.next, label %cleanup7\n    \n    for.body.peel.next:                               ; preds = %cleanup.peel\n      br label %for.body.peel.next1\n    \n    for.body.peel.next1:                              ; preds = %for.body.peel.next\n      br label %entry.peel.newph\n    \n    entry.peel.newph:                                 ; preds = %for.body.peel.next1\n      br label %for.body\n    \n    for.body:                                         ; preds = %cleanup, %entry.peel.newph\n      br i1 false, label %cleanup, label %cleanup.loopexit\n    \n    cleanup.loopexit:                                 ; preds = %for.body\n      br label %cleanup\n    \n    cleanup:                                          ; preds = %cleanup.loopexit, %for.body\n      br i1 false, label %for.body, label %cleanup7.loopexit\n    \n    cleanup7.loopexit:                                ; preds = %cleanup\n      %retval.2.lcssa.ph = phi ptr [ %retval.2.peel, %cleanup ]\n      br label %cleanup7\n    \n    cleanup7:                                         ; preds = %cleanup7.loopexit, %cleanup.peel\n      %retval.2.lcssa = phi ptr [ %retval.2.peel, %cleanup.peel ], [ %retval.2.lcssa.ph, %cleanup7.loopexit ]\n      ret ptr %retval.2.lcssa\n    }\n    ```\n    1. `simplifyInstruction(%retval.2.peel)` returns `@GlobIntONE`. Thus,\n    `ScalarEvolution::createNodeForPHI` returns SCEV expr `@GlobIntONE` for\n    `%retval.2.peel`.\n    2. `SimplifyIndvar::replaceIVUserWithLoopInvariant` tries to replace the\n    use of `%retval.2.peel` in `%retval.2.lcssa.ph` with `@GlobIntONE`.\n    3. `simplifyLoopAfterUnroll -> simplifyLoopIVs -> SCEVExpander::expand`\n    reuses `%retval.2.peel = phi ptr [ undef, %for.body.peel ], [\n    @GlobIntONE, %cleanup.loopexit.peel ]` to generate code for\n    `@GlobIntONE`. It is incorrect.\n    \n    This patch disallows simplifying `phi(undef, X)` to `X` by setting\n    `CanUseUndef` to false.\n    Closes https://github.com/llvm/llvm-project/issues/114879.\n\ndiff --git a/llvm/lib/Analysis/ScalarEvolution.cpp b/llvm/lib/Analysis/ScalarEvolution.cpp\nindex 58e23e9556f1..b10811133770 100644\n--- a/llvm/lib/Analysis/ScalarEvolution.cpp\n+++ b/llvm/lib/Analysis/ScalarEvolution.cpp\n@@ -6023,7 +6023,11 @@ const SCEV *ScalarEvolution::createNodeForPHI(PHINode *PN) {\n   if (const SCEV *S = createAddRecFromPHI(PN))\n     return S;\n \n-  if (Value *V = simplifyInstruction(PN, {getDataLayout(), &TLI, &DT, &AC}))\n+  // We do not allow simplifying phi (undef, X) to X here, to avoid reusing the\n+  // phi node for X.\n+  if (Value *V = simplifyInstruction(\n+          PN, {getDataLayout(), &TLI, &DT, &AC, /*CtxI=*/nullptr,\n+               /*UseInstrInfo=*/true, /*CanUseUndef=*/false}))\n     return getSCEV(V);\n \n   if (const SCEV *S = createNodeFromSelectLikePHI(PN))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/IndVarSimplify/invalidate-modified-lcssa-phi.ll",
      "commands": [
        "opt -passes='loop(indvars,loop-deletion)' -verify-scev -S %s"
      ],
      "tests": [
        {
          "test_name": "test_pr52023",
          "test_body": "define i8 @test_pr52023(i1 %c.1, i1 %c.2) {\nentry:\n  br label %loop.1\n\nloop.1:                                           ; preds = %loop.1.latch, %entry\n  %inc79 = phi i8 [ %inc.lcssa, %loop.1.latch ], [ 0, %entry ]\n  br label %loop.2\n\nloop.2:                                           ; preds = %loop.2.latch, %loop.1\n  %inc6 = phi i8 [ %inc79, %loop.1 ], [ %inc, %loop.2.latch ]\n  %inc = add i8 %inc6, 1\n  br i1 %c.1, label %loop.2.latch, label %loop.1.latch\n\nloop.2.latch:                                     ; preds = %loop.2\n  br i1 false, label %loop.2, label %loop.1.latch\n\nloop.1.latch:                                     ; preds = %loop.2.latch, %loop.2\n  %inc.lcssa = phi i8 [ %inc, %loop.2.latch ], [ undef, %loop.2 ]\n  br i1 %c.2, label %exit, label %loop.1\n\nexit:                                             ; preds = %loop.1.latch\n  %inc.lcssa.lcssa = phi i8 [ %inc.lcssa, %loop.1.latch ]\n  ret i8 %inc.lcssa.lcssa\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/IndVarSimplify/no-iv-rewrite.ll",
      "commands": [
        "opt < %s -passes=indvars -S -indvars-predicate-loops=0"
      ],
      "tests": [
        {
          "test_name": "identityphi",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\n; Function Attrs: nounwind\ndefine void @identityphi(i32 %limit) #0 {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %control, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %control ]\n  br i1 undef, label %if.then, label %control\n\nif.then:                                          ; preds = %loop\n  br label %control\n\ncontrol:                                          ; preds = %if.then, %loop\n  %iv.next = phi i32 [ %iv, %loop ], [ undef, %if.then ]\n  %cmp = icmp slt i32 %iv.next, %limit\n  br i1 %cmp, label %loop, label %exit\n\nexit:                                             ; preds = %control\n  ret void\n}\n\nattributes #0 = { nounwind }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopStrengthReduce/X86/2012-01-13-phielim.ll",
      "commands": [
        "opt < %s -S -loop-reduce -mtriple=x86_64-- -mcpu=core2"
      ],
      "tests": [
        {
          "test_name": "test3",
          "test_body": "; Function Attrs: nounwind ssp uwtable\ndefine fastcc void @test3(ptr nocapture %u) #0 {\nentry:\n  br i1 undef, label %meshBB1, label %meshBB5\n\nfor.inc8.us.i:                                    ; preds = %for.body3.us.i\n  br i1 undef, label %meshBB1, label %meshBB\n\nfor.body3.us.i:                                   ; preds = %meshBB, %for.body3.lr.ph.us.i\n  %indvars.iv.i.SV.phi = phi i64 [ %indvars.iv.next.i, %meshBB ], [ 0, %for.body3.lr.ph.us.i ]\n  %storemerge13.us.i.SV.phi = phi i32 [ 0, %meshBB ], [ 0, %for.body3.lr.ph.us.i ]\n  %Opq.sa.calc12 = sub i32 undef, 227\n  %0 = add nsw i64 %indvars.iv.i.SV.phi, %indvars.iv8.i.SV.phi26\n  %1 = trunc i64 %0 to i32\n  %mul.i.us.i = mul nsw i32 0, %1\n  %arrayidx5.us.i = getelementptr inbounds double, ptr %u, i64 %indvars.iv.i.SV.phi\n  %2 = load double, ptr %arrayidx5.us.i, align 8\n  %indvars.iv.next.i = add i64 %indvars.iv.i.SV.phi, 1\n  br i1 undef, label %for.inc8.us.i, label %meshBB\n\nfor.body3.lr.ph.us.i:                             ; preds = %meshBB1, %meshBB\n  %indvars.iv8.i.SV.phi26 = phi i64 [ undef, %meshBB1 ], [ %indvars.iv8.i.SV.phi24, %meshBB ]\n  %arrayidx.us.i = getelementptr inbounds double, ptr undef, i64 %indvars.iv8.i.SV.phi26\n  %3 = add i64 %indvars.iv8.i.SV.phi26, 1\n  br label %for.body3.us.i\n\nfor.inc8.us.i2:                                   ; preds = %meshBB5\n  unreachable\n\neval_At_times_u.exit:                             ; preds = %meshBB5\n  ret void\n\nmeshBB:                                           ; preds = %for.body3.us.i, %for.inc8.us.i\n  %indvars.iv8.i.SV.phi24 = phi i64 [ undef, %for.body3.us.i ], [ %3, %for.inc8.us.i ]\n  %meshStackVariable.phi = phi i32 [ %Opq.sa.calc12, %for.body3.us.i ], [ undef, %for.inc8.us.i ]\n  br i1 undef, label %for.body3.lr.ph.us.i, label %for.body3.us.i\n\nmeshBB1:                                          ; preds = %for.inc8.us.i, %entry\n  br label %for.body3.lr.ph.us.i\n\nmeshBB5:                                          ; preds = %entry\n  br i1 undef, label %eval_At_times_u.exit, label %for.inc8.us.i2\n}\n\nattributes #0 = { nounwind ssp uwtable }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopUnroll/pr114879.ll",
      "commands": [
        "opt -S -passes=loop-unroll-full -unroll-full-max-count=1 %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "@GlobIntONE = external global i32, align 4\n\ndefine ptr @test() {\nentry:\n  br label %for.body\n\nfor.body:                                         ; preds = %cleanup, %entry\n  %retval.0 = phi ptr [ undef, %entry ], [ %retval.2, %cleanup ]\n  %cmp1.not = phi i1 [ true, %entry ], [ false, %cleanup ]\n  br i1 %cmp1.not, label %cleanup, label %cleanup.loopexit\n\ncleanup.loopexit:                                 ; preds = %for.body\n  br label %cleanup\n\ncleanup:                                          ; preds = %cleanup.loopexit, %for.body\n  %retval.2 = phi ptr [ %retval.0, %for.body ], [ @GlobIntONE, %cleanup.loopexit ]\n  br i1 %cmp1.not, label %for.body, label %cleanup2\n\ncleanup2:                                         ; preds = %cleanup\n  %retval.2.lcssa = phi ptr [ %retval.2, %cleanup ]\n  ret ptr %retval.2.lcssa\n}\n",
          "additional_args": "--src-unroll=10 -tgt-unroll=10"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/uniform-blend.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -S %s"
      ],
      "tests": [
        {
          "test_name": "blend_uniform_iv",
          "test_body": "@dst = external global [32 x i16], align 1\n\ndefine void @blend_uniform_iv(i1 %c) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c, label %loop.next, label %loop.latch\n\nloop.next:                                        ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %loop.next, %loop.header\n  %blend = phi i64 [ poison, %loop.header ], [ %iv, %loop.next ]\n  %dst.ptr = getelementptr inbounds [32 x i16], ptr @dst, i16 0, i64 %blend\n  store i16 0, ptr %dst.ptr, align 2\n  %iv.next = add nuw nsw i64 %iv, 1\n  %cmp439 = icmp ult i64 %iv, 31\n  br i1 %cmp439, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        },
        {
          "test_name": "blend_uniform_iv_trunc",
          "test_body": "@dst = external global [32 x i16], align 1\n\ndefine void @blend_uniform_iv_trunc(i1 %c) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %iv.trunc.2 = trunc i64 %iv to i16\n  br i1 %c, label %loop.next, label %loop.latch\n\nloop.next:                                        ; preds = %loop.header\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %loop.next, %loop.header\n  %blend = phi i16 [ poison, %loop.header ], [ %iv.trunc.2, %loop.next ]\n  %dst.ptr = getelementptr inbounds [32 x i16], ptr @dst, i16 0, i16 %blend\n  store i16 0, ptr %dst.ptr, align 2\n  %iv.next = add nuw nsw i64 %iv, 1\n  %cmp439 = icmp ult i64 %iv, 31\n  br i1 %cmp439, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "WRONG code: GVN? Loop opts?",
    "body": "cat wrong0.i\r\n```\r\nint printf(const char *, ...);\r\nunsigned int IntArr[6];\r\nunsigned int GlobIntONE = 1, GlobIntZERO = 0;\r\nconst unsigned int *GlobIntPtr = 0;\r\nunsigned long Res;\r\nunsigned long *ResPtr = &Res;\r\nconst unsigned int **GlobIntPtrPTr = &GlobIntPtr;\r\nunsigned int *func() {\r\n  int *GlobIntONEPtr = &GlobIntONE;\r\n  for (int Idx = 0; Idx <= 7; Idx += 1) {\r\n    int Idx2 = 1;\r\n    if (Idx > 0) {\r\n      for (; Idx2 <= 7; Idx2 += 1)\r\n        ;\r\n      return GlobIntONEPtr;\r\n    }\r\n  }\r\n  0 != &GlobIntONEPtr;\r\n  return &GlobIntZERO;\r\n}\r\n\r\nint main() {\r\n  IntArr[GlobIntZERO] = GlobIntZERO;\r\n  *GlobIntPtrPTr = func();\r\n  unsigned char Byte = *GlobIntPtr;\r\n  *ResPtr = Byte;\r\n  printf(\"checksum = %X\\n\", Res);\r\n}\r\n```\r\n\r\n\r\nIn the above file, func() should obviously should return GlobIntONEPtr, but it does not if compiled with '-fno-inline  -mllvm -unroll-full-max-count=1'.\r\n\r\n```\r\nclang -O0 -march=z16 wrong0.i -o a.out -w -fno-inline  ; ./a.out\r\nchecksum = 1\r\n\r\nclang -O3 -march=z16 wrong0.i -o a.out -w -fno-inline  ; ./a.out\r\nchecksum = 1\r\n\r\nclang -O3 -march=z16 wrong0.i -o a.out -w -fno-inline  -mllvm -unroll-full-max-count=1 ; ./a.out\r\nchecksum = 0\r\n\r\n```\r\nIt may be that GVN does something wrong, as after it @func() is always returning ptr undef. Or it could very well be some of the loop optimizations that is run just before it.\r\n\r\nA bisect shows that\r\n\r\n```\r\nd77067d08a3f56dc2d0e6c95bd2852c943df743a is the first bad commit\r\ncommit d77067d08a3f56dc2d0e6c95bd2852c943df743a\r\nAuthor: Nikita Popov <npopov@redhat.com>\r\nDate:   Wed Dec 6 14:17:18 2023 +0100\r\n\r\n    [ValueTracking] Add dominating condition support in computeKnownBits() (#73662)\r\n\r\n```\r\n@nikic ",
    "author": "JonPsson1",
    "labels": [
      "miscompilation",
      "llvm:SCEV"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Bisected to LoopUnrollFullPass:\r\n```\r\n; bin/opt -passes=loop-unroll-full -unroll-full-max-count=1 test.ll -S\r\n\r\n@GlobIntONE = dso_local global i32 1, align 4\r\n@GlobIntZERO = dso_local local_unnamed_addr global i32 0, align 4\r\n\r\ndefine i32 @main() local_unnamed_addr {\r\nentry:\r\n  br label %for.body\r\n\r\nfor.body:                                         ; preds = %entry, %cleanup\r\n  %retval.0 = phi ptr [ undef, %entry ], [ %retval.2, %cleanup ]\r\n  %cmp1.not = phi i1 [ true, %entry ], [ false, %cleanup ]\r\n  br i1 %cmp1.not, label %cleanup, label %for.cond2.preheader\r\n\r\nfor.cond2.preheader:                              ; preds = %for.body\r\n  br label %cleanup.loopexit\r\n\r\ncleanup.loopexit:                                 ; preds = %for.cond2.preheader\r\n  br label %cleanup\r\n\r\ncleanup:                                          ; preds = %cleanup.loopexit, %for.body\r\n  %retval.2 = phi ptr [ %retval.0, %for.body ], [ @GlobIntONE, %cleanup.loopexit ]\r\n  br i1 %cmp1.not, label %for.body, label %cleanup7\r\n\r\ncleanup7:                                         ; preds = %cleanup\r\n  %retval.2.lcssa = phi ptr [ %retval.2, %cleanup ]\r\n  %res = load i32, ptr %retval.2.lcssa, align 4\r\n  ret i32 %res\r\n}\r\n```\r\n```\r\nsource_filename = \"test.ll\"\r\n\r\n@GlobIntONE = dso_local global i32 1, align 4\r\n@GlobIntZERO = dso_local local_unnamed_addr global i32 0, align 4\r\n\r\ndefine i32 @main() local_unnamed_addr {\r\nentry:\r\n  br label %for.body.peel.begin\r\n\r\nfor.body.peel.begin:                              ; preds = %entry\r\n  br label %for.body.peel\r\n\r\nfor.body.peel:                                    ; preds = %for.body.peel.begin\r\n  br i1 true, label %cleanup.peel, label %for.cond2.preheader.peel\r\n\r\nfor.cond2.preheader.peel:                         ; preds = %for.body.peel\r\n  br label %cleanup.loopexit.peel\r\n\r\ncleanup.loopexit.peel:                            ; preds = %for.cond2.preheader.peel\r\n  br label %cleanup.peel\r\n\r\ncleanup.peel:                                     ; preds = %cleanup.loopexit.peel, %for.body.peel\r\n  %retval.2.peel = phi ptr [ undef, %for.body.peel ], [ @GlobIntONE, %cleanup.loopexit.peel ]\r\n  br i1 true, label %for.body.peel.next, label %cleanup7\r\n\r\nfor.body.peel.next:                               ; preds = %cleanup.peel\r\n  br label %for.body.peel.next1\r\n\r\nfor.body.peel.next1:                              ; preds = %for.body.peel.next\r\n  br label %entry.peel.newph\r\n\r\nentry.peel.newph:                                 ; preds = %for.body.peel.next1\r\n  br label %for.body\r\n\r\nfor.body:                                         ; preds = %cleanup, %entry.peel.newph\r\n  br i1 false, label %cleanup, label %for.cond2.preheader\r\n\r\nfor.cond2.preheader:                              ; preds = %for.body\r\n  br label %cleanup.loopexit\r\n\r\ncleanup.loopexit:                                 ; preds = %for.cond2.preheader\r\n  br label %cleanup\r\n\r\ncleanup:                                          ; preds = %cleanup.loopexit, %for.body\r\n  br i1 false, label %for.body, label %cleanup7.loopexit, !llvm.loop !0\r\n\r\ncleanup7.loopexit:                                ; preds = %cleanup\r\n  %retval.2.lcssa.ph = phi ptr [ %retval.2.peel, %cleanup ]\r\n  br label %cleanup7\r\n\r\ncleanup7:                                         ; preds = %cleanup7.loopexit, %cleanup.peel\r\n  %retval.2.lcssa = phi ptr [ %retval.2.peel, %cleanup.peel ], [ %retval.2.lcssa.ph, %cleanup7.loopexit ]\r\n  %res = load i32, ptr %retval.2.lcssa, align 4\r\n  ret i32 %res\r\n}\r\n\r\n!0 = distinct !{!0, !1}\r\n!1 = !{!\"llvm.loop.peeled.count\", i32 1}\r\n```"
      },
      {
        "author": "dtcxzyw",
        "body": "`simplifyLoopAfterUnroll -> simplifyLoopIVs` causes the miscompilation: https://alive2.llvm.org/ce/z/yiBsZt\r\nI will post a fix later.\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "The root cause is:\r\n1. `simplifyInstruction(%retval.2.peel)` returns `@GlobIntONE`. Thus, `ScalarEvolution::createNodeForPHI` returns SCEV expr `@GlobIntONE` for `%retval.2.peel`.\r\n2.  `SimplifyIndvar::replaceIVUserWithLoopInvariant` tries to replace the use of `%retval.2.peel` in `%retval.2.lcssa.ph` with `@GlobIntONE`.\r\n3. `SCEVExpander::expand` reuses `%retval.2.peel = phi ptr [ undef, %for.body.peel ], [ @GlobIntONE, %cleanup.loopexit.peel ]` to generate code for `@GlobIntONE`. It is incorrect.\r\n\r\nTwo possible solutions:\r\n1. Set `CanUseUndef` to false in `simplifyInstruction`.\r\n2. Block this case in `ScalarEvolution::canReuseInstruction`.\r\n\r\n@nikic @preames Any thoughts?\r\n"
      },
      {
        "author": "nikic",
        "body": "I think setting `CanUseUndef=false` would be the correct thing to do. The reverse replacement here is particularly fishy, but more generally, if we make an assumption about the value of undef at a particular use, we have to be consistent about that assumption, and SCEV cannot really guarantee that this is the case."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}