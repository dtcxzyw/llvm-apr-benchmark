{
  "bug_id": "133288",
  "issue_url": "https://github.com/llvm/llvm-project/issues/133288",
  "bug_type": "crash",
  "base_commit": "77ba6918a14ddef4ee639bf6221cc2eb95adf320",
  "knowledge_cutoff": "2025-03-27T17:54:31Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "1bfc61064ab46e44865453d2c2176f5e7f96987c",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13347,
          13353
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getSpillCost"
      ]
    }
  },
  "patch": "commit 1bfc61064ab46e44865453d2c2176f5e7f96987c\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Mar 28 11:37:42 2025 -0700\n\n    [SLP]Fix spill cost analysis for split vectorized nodes\n    \n    If the entry is SplitVectorize, it can be skipped in favor of its\n    operands, operands allow correctly detect spill costs.\n    \n    Fixes #133288\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex f29fb6780253..850895895d44 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13347,7 +13347,8 @@ InstructionCost BoUpSLP::getSpillCost() {\n     for (const TreeEntry *Op : Operands) {\n       if (!Op->isGather())\n         LiveEntries.push_back(Op);\n-      if ((Entry->getOpcode() != Instruction::PHI && Op->isGather()) ||\n+      if (Entry->State == TreeEntry::SplitVectorize ||\n+          (Entry->getOpcode() != Instruction::PHI && Op->isGather()) ||\n           (Op->isGather() && allConstant(Op->Scalars)))\n         continue;\n       Budget = 0;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/split-node-parent-operands-in-spill.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 -mattr=+sse4.1 < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(i32 %arg) {\n;\nbb:\n  %load = load i32, ptr addrspace(3) null, align 4\n  %load1 = load i32, ptr addrspace(3) null, align 4\n  %load2 = load i32, ptr addrspace(3) null, align 4\n  %load3 = load i32, ptr addrspace(3) null, align 4\n  br label %bb4\n\nbb4:\n  switch i32 0, label %bb8 [\n  i32 0, label %bb7\n  i32 1, label %bb21\n  ]\n\nbb5:\n  %srem = srem i32 0, 0\n  br label %bb21\n\nbb6:\n  br label %bb12\n\nbb7:\n  ret void\n\nbb8:\n  %phi = phi i32 [ 0, %bb4 ]\n  %phi9 = phi i32 [ 0, %bb4 ]\n  %phi10 = phi i32 [ 0, %bb4 ]\n  %phi11 = phi i32 [ 0, %bb4 ]\n  br label %bb12\n\nbb12:\n  %phi13 = phi i32 [ %load, %bb8 ], [ 0, %bb6 ]\n  %phi14 = phi i32 [ %load1, %bb8 ], [ 0, %bb6 ]\n  %phi15 = phi i32 [ %load2, %bb8 ], [ %arg, %bb6 ]\n  %phi16 = phi i32 [ %load3, %bb8 ], [ 0, %bb6 ]\n  %phi17 = phi i32 [ %phi, %bb8 ], [ %srem, %bb6 ]\n  %phi18 = phi i32 [ %phi11, %bb8 ], [ 0, %bb6 ]\n  %phi19 = phi i32 [ %phi9, %bb8 ], [ 0, %bb6 ]\n  %phi20 = phi i32 [ %phi10, %bb8 ], [ 0, %bb6 ]\n  ret void\n\nbb21:\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "slpvectorizer crash",
    "body": "To reproduce run opt with the test below with -passes=slp-vectorizer -slp-threshold=-99999\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @wombat(i32 %arg) #0 gc \"statepoint-example\" {\nbb:\n  %load = load i32, ptr addrspace(3) null, align 4\n  %load1 = load i32, ptr addrspace(3) null, align 4\n  %load2 = load i32, ptr addrspace(3) null, align 4\n  %load3 = load i32, ptr addrspace(3) null, align 4\n  br label %bb4\n\nbb4:                                              ; preds = %bb\n  switch i32 0, label %bb8 [\n    i32 0, label %bb7\n    i32 1, label %bb21\n  ]\n\nbb5:                                              ; No predecessors!\n  %srem = srem i32 0, 0\n  br label %bb21\n\nbb6:                                              ; No predecessors!\n  br label %bb12\n\nbb7:                                              ; preds = %bb4\n  ret void\n\nbb8:                                              ; preds = %bb4\n  %phi = phi i32 [ 0, %bb4 ]\n  %phi9 = phi i32 [ 0, %bb4 ]\n  %phi10 = phi i32 [ 0, %bb4 ]\n  %phi11 = phi i32 [ 0, %bb4 ]\n  br label %bb12\n\nbb12:                                             ; preds = %bb8, %bb6\n  %phi13 = phi i32 [ %load, %bb8 ], [ 0, %bb6 ]\n  %phi14 = phi i32 [ %load1, %bb8 ], [ 0, %bb6 ]\n  %phi15 = phi i32 [ %load2, %bb8 ], [ %arg, %bb6 ]\n  %phi16 = phi i32 [ %load3, %bb8 ], [ 0, %bb6 ]\n  %phi17 = phi i32 [ %phi, %bb8 ], [ %srem, %bb6 ]\n  %phi18 = phi i32 [ %phi11, %bb8 ], [ 0, %bb6 ]\n  %phi19 = phi i32 [ %phi9, %bb8 ], [ 0, %bb6 ]\n  %phi20 = phi i32 [ %phi10, %bb8 ], [ 0, %bb6 ]\n  ret void\n\nbb21:                                             ; preds = %bb5, %bb4\n  ret void\n}\n\nattributes #0 = { \"target-features\"=\"+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,-amx-fp8,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx512ifma,+xsave,+sse4.2,-tsxldtrk,-sm3,-ptwrite,-widekl,-movrs,-invpcid,+64bit,+xsavec,-avx10.1-512,-avx512vpopcntdq,+cmov,-avx512vp2intersect,-avx512cd,+movbe,-avxvnniint8,-ccmp,-amx-int8,-kl,-avx10.1-256,-sha512,-avxvnni,-rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-vpclmulqdq,-avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-avx10.2-256,-gfni,-avxvnniint16,-amx-fp16,-zu,-ndd,+xsaveopt,+rdrnd,-avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,-avx512bw,+sse3,-pku,-nf,-amx-tf32,-amx-avx512,+fsgsbase,+clzero,-mwaitx,-lwp,+lzcnt,+sha,-movdir64b,-ppx,+wbnoinvd,-enqcmd,-amx-transpose,-avx10.2-512,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-amx-movrs,+rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,-avx512dq,+sse4a\" }\n```\nReproducer: https://godbolt.org/z/1E6shqxdd\n\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer -slp-threshold=-99999 <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"wombat\"\n #0 0x000000000549f758 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x549f758)\n #1 0x000000000549d0e4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007d8bfda42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00000000017c9e90 llvm::BasicBlock::getTerminator() const (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x17c9e90)\n #4 0x0000000004492866 llvm::slpvectorizer::BoUpSLP::getSpillCost() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4492866)\n #5 0x00000000044fbea8 llvm::slpvectorizer::BoUpSLP::getTreeCost(llvm::ArrayRef<llvm::Value*>, llvm::InstructionCost) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x44fbea8)\n #6 0x0000000004504152 llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4504152)\n #7 0x000000000450937d bool tryToVectorizeSequence<llvm::Value>(llvm::SmallVectorImpl<llvm::Value*>&, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::ArrayRef<llvm::Value*>, bool)>, bool, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\n #8 0x000000000450ad55 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x450ad55)\n #9 0x0000000004512cbe llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#10 0x000000000451387b llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x451387b)\n#11 0x00000000031ad81e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x31ad81e)\n#12 0x000000000529b7a0 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x529b7a0)\n#13 0x0000000000e7a28e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe7a28e)\n#14 0x000000000529a073 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x529a073)\n#15 0x0000000000e792ae llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe792ae)\n#16 0x0000000005299a80 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5299a80)\n#17 0x000000000093f60a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93f60a)\n#18 0x0000000000932cfc optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x932cfc)\n#19 0x00007d8bfda29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#20 0x00007d8bfda29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#21 0x000000000092a935 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x92a935)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Invalid order"
}