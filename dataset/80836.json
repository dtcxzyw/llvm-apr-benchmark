{
  "bug_id": "80836",
  "issue_url": "https://github.com/llvm/llvm-project/issues/80836",
  "bug_type": "crash",
  "base_commit": "ea2d9383a23ca17b9240ad64c2adc5f2b5a73dc0",
  "knowledge_cutoff": "2024-02-06T14:26:26Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "1c10821022f1799452065fb57474e894e2562b7f",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          2010,
          2025
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "getCost"
      ]
    }
  },
  "patch": "commit 1c10821022f1799452065fb57474e894e2562b7f\nAuthor: David Sherwood <57997763+david-arm@users.noreply.github.com>\nDate:   Wed Feb 14 16:07:51 2024 +0000\n\n    [LoopVectorize] Fix divide-by-zero bug (#80836) (#81721)\n    \n    When attempting to use the estimated trip count to refine the costs of\n    the runtime memory checks we should also check for sane trip counts to\n    prevent divide-by-zero faults on some platforms.\n    \n    Fixes #80836\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex b39bf21cacdb..98b177cf5d2d 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -2010,16 +2010,18 @@ public:\n               BestTripCount = *EstimatedTC;\n           }\n \n+          BestTripCount = std::max(BestTripCount, 1U);\n           InstructionCost NewMemCheckCost = MemCheckCost / BestTripCount;\n \n           // Let's ensure the cost is always at least 1.\n           NewMemCheckCost = std::max(*NewMemCheckCost.getValue(),\n                                      (InstructionCost::CostType)1);\n \n-          LLVM_DEBUG(dbgs()\n-                     << \"We expect runtime memory checks to be hoisted \"\n-                     << \"out of the outer loop. Cost reduced from \"\n-                     << MemCheckCost << \" to \" << NewMemCheckCost << '\\n');\n+          if (BestTripCount > 1)\n+            LLVM_DEBUG(dbgs()\n+                       << \"We expect runtime memory checks to be hoisted \"\n+                       << \"out of the outer loop. Cost reduced from \"\n+                       << MemCheckCost << \" to \" << NewMemCheckCost << '\\n');\n \n           MemCheckCost = NewMemCheckCost;\n         }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/low_trip_memcheck_cost.ll",
      "commands": [
        "opt -p loop-vectorize -debug-only=loop-vectorize -S -disable-output < %s 2>&1"
      ],
      "tests": [
        {
          "test_name": "outer_known_tc3_full_range_checks",
          "test_body": "target triple = \"aarch64-unknown-linux-gnu\"\n\ndefine void @outer_known_tc3_full_range_checks(ptr nocapture noundef %dst, ptr nocapture noundef readonly %src, i64 noundef %n) {\nentry:\n  br label %outer.loop\n\nouter.loop:                                       ; preds = %inner.exit, %entry\n  %outer.iv = phi i64 [ 0, %entry ], [ %outer.iv.next, %inner.exit ]\n  %0 = mul nsw i64 %outer.iv, %n\n  br label %inner.loop\n\ninner.loop:                                       ; preds = %inner.loop, %outer.loop\n  %iv.inner = phi i64 [ 0, %outer.loop ], [ %iv.inner.next, %inner.loop ]\n  %1 = add nuw nsw i64 %iv.inner, %0\n  %arrayidx.us = getelementptr inbounds i32, ptr %src, i64 %1\n  %2 = load i32, ptr %arrayidx.us, align 4\n  %arrayidx8.us = getelementptr inbounds i32, ptr %dst, i64 %1\n  %3 = load i32, ptr %arrayidx8.us, align 4\n  %add9.us = add nsw i32 %3, %2\n  store i32 %add9.us, ptr %arrayidx8.us, align 4\n  %iv.inner.next = add nuw nsw i64 %iv.inner, 1\n  %inner.exit.cond = icmp eq i64 %iv.inner.next, %n\n  br i1 %inner.exit.cond, label %inner.exit, label %inner.loop\n\ninner.exit:                                       ; preds = %inner.loop\n  %outer.iv.next = add nuw nsw i64 %outer.iv, 1\n  %outer.exit.cond = icmp eq i64 %outer.iv.next, 3\n  br i1 %outer.exit.cond, label %outer.exit, label %outer.loop\n\nouter.exit:                                       ; preds = %inner.exit\n  ret void\n}\n"
        },
        {
          "test_name": "outer_pgo_minus1",
          "test_body": "target triple = \"aarch64-unknown-linux-gnu\"\n\ndefine void @outer_pgo_minus1(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i64 noundef %m, i64 noundef %n) {\nentry:\n  br label %outer.loop\n\nouter.loop:                                       ; preds = %inner.exit, %entry\n  %outer.iv = phi i64 [ %outer.iv.next, %inner.exit ], [ 0, %entry ]\n  %mul.us = mul nsw i64 %outer.iv, %n\n  br label %inner.loop\n\ninner.loop:                                       ; preds = %inner.loop, %outer.loop\n  %inner.iv = phi i64 [ 0, %outer.loop ], [ %inner.iv.next, %inner.loop ]\n  %add.us = add nuw nsw i64 %inner.iv, %mul.us\n  %arrayidx.us = getelementptr inbounds i8, ptr %b, i64 %add.us\n  %0 = load i8, ptr %arrayidx.us, align 1\n  %arrayidx7.us = getelementptr inbounds i8, ptr %a, i64 %add.us\n  %1 = load i8, ptr %arrayidx7.us, align 1\n  %add9.us = add i8 %1, %0\n  store i8 %add9.us, ptr %arrayidx7.us, align 1\n  %inner.iv.next = add nuw nsw i64 %inner.iv, 1\n  %exitcond.not = icmp eq i64 %inner.iv.next, %n\n  br i1 %exitcond.not, label %inner.exit, label %inner.loop\n\ninner.exit:                                       ; preds = %inner.loop\n  %outer.iv.next = add nuw nsw i64 %outer.iv, 1\n  %exitcond26.not = icmp eq i64 %outer.iv.next, %m\n  br i1 %exitcond26.not, label %outer.exit, label %outer.loop, !prof !0\n\nouter.exit:                                       ; preds = %inner.exit\n  ret void\n}\n\n!0 = !{!\"branch_weights\", i32 1, i32 -1}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Unhandled  Floating point exception with loop-vectorize ",
    "body": "Run opt with -passes=loop-vectorize \r\n\r\nhttps://godbolt.org/z/s3PWY3vhE\r\n\r\nTest.ll\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine ptr addrspace(1) @wombat(i64 %arg, ptr addrspace(1) %arg1) gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb2\r\n\r\nbb2:                                              ; preds = %bb4, %bb\r\n  br label %bb3\r\n\r\nbb3:                                              ; preds = %bb3, %bb2\r\n  %phi = phi i64 [ 0, %bb2 ], [ %add, %bb3 ]\r\n  %add = add i64 %phi, 1\r\n  %load = load i8, ptr addrspace(1) %arg1, align 1\r\n  %shl = shl i64 0, 0\r\n  store i16 0, ptr addrspace(1) null, align 2\r\n  %icmp = icmp ult i64 %phi, %arg\r\n  br i1 %icmp, label %bb3, label %bb4\r\n\r\nbb4:                                              ; preds = %bb3\r\n  br i1 false, label %bb5, label %bb2, !prof !0\r\n\r\nbb5:                                              ; preds = %bb4\r\n  ret ptr addrspace(1) null\r\n}\r\n\r\n!0 = !{!\"branch_weights\", i32 1, i32 -1}\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "DaniilSuchkov",
        "body": "It started failing after 962fbafecf4730ba84a3b9fd7a662a5c30bb2c7c\r\n```\r\nAuthor: David Sherwood <57997763+david-arm@users.noreply.github.com>\r\nDate:   Fri Jan 26 14:43:48 2024 +0000\r\n\r\n    [LoopVectorize] Refine runtime memory check costs when there is an outer loop (#76034)\r\n\r\n    When we generate runtime memory checks for an inner loop it's\r\n    possible that these checks are invariant in the outer loop and\r\n    so will get hoisted out. In such cases, the effective cost of\r\n    the checks should reduce to reflect the outer loop trip count.\r\n\r\n    This fixes a 25% performance regression introduced by commit\r\n\r\n    49b0e6dcc296792b577ae8f0f674e61a0929b99d\r\n\r\n    when building the SPEC2017 x264 benchmark with PGO, where we\r\n    decided the inner loop trip count wasn't high enough to warrant\r\n    the (incorrect) high cost of the runtime checks. Also, when\r\n    runtime memory checks consist entirely of diff checks these are\r\n    likely to be outer loop invariant.\r\n```\r\nWe have a division by 0 here https://github.com/llvm/llvm-project/commit/962fbafecf4730ba84a3b9fd7a662a5c30bb2c7c#diff-da321d454a7246f8ae276bf1db2782bf26b5210b8133cb59e4d7fd45d0905decR2114 because `getLoopEstimatedTripCount(OuterLoop)` just above that line returns 0."
      },
      {
        "author": "david-arm",
        "body": "OK thanks for raising this issue - I'll take a look this morning!"
      },
      {
        "author": "david-arm",
        "body": "I have a fix in review - https://github.com/llvm/llvm-project/pull/81721"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Unrelated"
}