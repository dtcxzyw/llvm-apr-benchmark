{
  "bug_id": "157277",
  "issue_url": "https://github.com/llvm/llvm-project/issues/157277",
  "bug_type": "crash",
  "base_commit": "5d550bf41ca52348bf11a0fb357df01a5b1684c8",
  "knowledge_cutoff": "2025-09-06T14:41:23Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d0ea176ccea8bdcd60aacc2753734294b9eec71f",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          21889,
          21894
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::collectValuesToDemote"
      ]
    }
  },
  "patch": "commit d0ea176ccea8bdcd60aacc2753734294b9eec71f\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Sep 8 06:43:04 2025 -0700\n\n    [SLP]Do not consider SExt/ZExt profitable for demotion, if the user is a bitcast to float\n    \n    If the user node of the SExt/ZExt node is a bitcast to a float point\n    type, the node itself should not be considered legal to demote, since\n    still the casting is required to match the size of the float point type.\n    \n    Fixes #157277\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 4e90c1d5b9e1..1cfcd3ffbd66 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -21889,6 +21889,10 @@ bool BoUpSLP::collectValuesToDemote(\n     return TryProcessInstruction(BitWidth);\n   case Instruction::ZExt:\n   case Instruction::SExt:\n+    if (E.UserTreeIndex.UserTE && E.UserTreeIndex.UserTE->hasState() &&\n+        E.UserTreeIndex.UserTE->getOpcode() == Instruction::BitCast &&\n+        E.UserTreeIndex.UserTE->getMainOp()->getType()->isFPOrFPVectorTy())\n+      return false;\n     IsProfitableToDemote = true;\n     return TryProcessInstruction(BitWidth);\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/parent-bitcast-with-fp.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i1 @test(i32 %0) {\n;\nentry:\n  %conv22.i.i = sext i32 %0 to i64\n  %1 = bitcast i64 %conv22.i.i to double\n  %2 = fadd double %1, 0.000000e+00\n  %add.i.i.i = select i1 false, double 0.000000e+00, double %2\n  %3 = bitcast double %add.i.i.i to i64\n  %cmp3998.i.i = icmp ne i64 %3, %conv22.i.i\n  %conv22.1.i.i = sext i32 0 to i64\n  %4 = bitcast i64 %conv22.1.i.i to double\n  %5 = fadd double %4, 0.000000e+00\n  %add.i.1.i.i = select i1 false, double 0.000000e+00, double %5\n  %6 = bitcast double %add.i.1.i.i to i64\n  %cmp3998.1.i.i = icmp ne i64 %6, %conv22.1.i.i\n  ret i1 %cmp3998.1.i.i\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Assertion `castIsValid(op, S, Ty) && \"Invalid cast!\"' failed.",
    "body": "Reproducer: https://godbolt.org/z/YMb7ovEoc\n```\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i1 @main(i32 %0) {\nentry:\n  %conv22.i.i = sext i32 %0 to i64\n  %1 = bitcast i64 %conv22.i.i to double\n  %2 = fadd double %1, 0.000000e+00\n  %add.i.i.i = select i1 false, double 0.000000e+00, double %2\n  %3 = bitcast double %add.i.i.i to i64\n  %cmp3998.i.i = icmp ne i64 %3, %conv22.i.i\n  %conv22.1.i.i = sext i32 0 to i64\n  %4 = bitcast i64 %conv22.1.i.i to double\n  %5 = fadd double %4, 0.000000e+00\n  %add.i.1.i.i = select i1 false, double 0.000000e+00, double %5\n  %6 = bitcast double %add.i.1.i.i to i64\n  %cmp3998.1.i.i = icmp ne i64 %6, %conv22.1.i.i\n  ret i1 %cmp3998.1.i.i\n}\n```\n```\nopt: /root/llvm-project/llvm/lib/IR/Instructions.cpp:3041: static llvm::CastInst* llvm::CastInst::Create(llvm::Instruction::CastOps, llvm::Value*, llvm::Type*, const llvm::Twine&, llvm::InsertPosition): Assertion `castIsValid(op, S, Ty) && \"Invalid cast!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x00000000057a4688 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x57a4688)\n #1 0x00000000057a1534 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007338d1c42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007338d1c969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007338d1c42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007338d1c287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007338d1c2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007338d1c39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x0000000005504776 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5504776)\n #9 0x0000000000baea43 llvm::IRBuilderBase::CreateCast(llvm::Instruction::CastOps, llvm::Value*, llvm::Type*, llvm::Twine const&, llvm::MDNode*, llvm::FMFSource) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xbaea43)\n#10 0x00000000035f04d1 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35f04d1)\n#11 0x00000000035edb63 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35edb63)\n#12 0x00000000035ee647 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35ee647)\n#13 0x00000000035edddc llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35edddc)\n#14 0x00000000035edec5 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::slpvectorizer::BoUpSLP::TreeEntry*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35edec5)\n#15 0x0000000003624cc4 llvm::slpvectorizer::BoUpSLP::vectorizeTree(llvm::SmallDenseSet<llvm::Value*, 4u, llvm::DenseMapInfo<llvm::Value*, void>> const&, llvm::Instruction*, llvm::ArrayRef<std::tuple<llvm::Value*, unsigned int, bool>>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3624cc4)\n#16 0x0000000003628d42 llvm::slpvectorizer::BoUpSLP::vectorizeTree() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3628d42)\n#17 0x000000000364a4e5 llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x364a4e5)\n#18 0x000000000364e6ff bool llvm::SLPVectorizerPass::vectorizeCmpInsts<std::reverse_iterator<llvm::CmpInst* const*>>(llvm::iterator_range<std::reverse_iterator<llvm::CmpInst* const*>>, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x364e6ff)\n#19 0x0000000003652191 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3652191)\n#20 0x00000000036586e6 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#21 0x00000000036591fb llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x36591fb)\n#22 0x0000000002e2b4be llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e2b4be)\n#23 0x00000000055904d1 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x55904d1)\n#24 0x0000000000ee0cbe llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xee0cbe)\n#25 0x000000000558ea3a llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x558ea3a)\n#26 0x000000000096d5ae llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96d5ae)\n#27 0x000000000558e3f1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x558e3f1)\n#28 0x00000000009778a8 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9778a8)\n#29 0x000000000096b917 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96b917)\n#30 0x00007338d1c29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#31 0x00007338d1c29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#32 0x0000000000962a35 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x962a35)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\n\ncc @alexey-bataev ",
    "author": "dtcxzyw",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "42cbceb0f0160d67145723613fda325dbd129308"
}