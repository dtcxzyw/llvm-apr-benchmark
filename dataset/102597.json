{
  "bug_id": "102597",
  "issue_url": "https://github.com/llvm/llvm-project/issues/102597",
  "bug_type": "miscompilation",
  "base_commit": "513c3726ebc0a324f7e5a11d25617bb9557324d6",
  "knowledge_cutoff": "2024-08-09T11:02:59Z",
  "lit_test_dir": [
    "llvm/test/Transforms/IndVarSimplify"
  ],
  "hints": {
    "fix_commit": "3512bcc2e9ab06b0ae2cab78744550b515e54184",
    "components": [
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        [
          11961,
          11969
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        "ScalarEvolution::computeConstantDifference"
      ]
    }
  },
  "patch": "commit 3512bcc2e9ab06b0ae2cab78744550b515e54184\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Mon Aug 12 15:18:32 2024 +0200\n\n    [SCEV] Fix incorrect extension in computeConstantDifference()\n    \n    The Mul factor was zero-extended here, resulting in incorrect\n    results for integers larger than 64-bit.\n    \n    As we currently only multiply by 1 or -1, just split this into\n    two cases -- there's no need for a full multiplication here.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/102597.\n\ndiff --git a/llvm/lib/Analysis/ScalarEvolution.cpp b/llvm/lib/Analysis/ScalarEvolution.cpp\nindex 9ecdcbe2c5de..318a9d773dc2 100644\n--- a/llvm/lib/Analysis/ScalarEvolution.cpp\n+++ b/llvm/lib/Analysis/ScalarEvolution.cpp\n@@ -11961,9 +11961,14 @@ ScalarEvolution::computeConstantDifference(const SCEV *More, const SCEV *Less) {\n   SmallDenseMap<const SCEV *, int, 8> Multiplicity;\n   APInt Diff(BW, 0);\n   auto Add = [&](const SCEV *S, int Mul) {\n-    if (auto *C = dyn_cast<SCEVConstant>(S))\n-      Diff += C->getAPInt() * Mul;\n-    else\n+    if (auto *C = dyn_cast<SCEVConstant>(S)) {\n+      if (Mul == 1) {\n+        Diff += C->getAPInt();\n+      } else {\n+        assert(Mul == -1);\n+        Diff -= C->getAPInt();\n+      }\n+    } else\n       Multiplicity[S] += Mul;\n   };\n   auto Decompose = [&](const SCEV *S, int Mul) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/IndVarSimplify/pr102597.ll",
      "commands": [
        "opt -S -passes=indvars < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop.latch, %entry\n  %iv = phi i128 [ 3, %entry ], [ %iv.dec, %loop.latch ]\n  %tobool = icmp ne i128 %iv, 0\n  br i1 %tobool, label %loop.latch, label %if\n\nif:                                               ; preds = %loop\n  call void @foo()\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %if, %loop\n  %iv.dec = add nsw i128 %iv, -1\n  %cmp = icmp sgt i128 %iv, 0\n  br i1 %cmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n\ndeclare void @foo()\n",
          "additional_args": "-src-unroll=4 -tgt-unroll=4"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SCEV] WRONG code ",
    "body": "```\r\nint printf(const char *, ...);\r\n__int128 a = 3, c;\r\nchar b;\r\nint main() {\r\n  c = 3;\r\n  for (; c >= 0; c--) {\r\n    b = 0;\r\n    for (; b <= 3; b++) {\r\n      if (c)\r\n        break;\r\n      a = 0;\r\n    }\r\n  }\r\n  printf(\"%d\\n\", (int)a);\r\n}\r\n\r\n```\r\n\r\nclang -march=z15 -O1 wrong0.i -o a.out\r\n\r\nThis program should print '0' as 'a' is set to zero inside the loop. It now prints '3' instead. A bisect leads to a recent commit: 79af689 \" [SCEV] Handle more adds in computeConstantDifference() (#101339)\".\r\n\r\nSeems like IndVarSimplify has gone wrong with an i128:\r\nGOOD <> BROKEN\r\n```\r\n; *** IR Dump After IndVarSimplifyPass on loo   ; *** IR Dump After IndVarSimplifyPass on loo\r\n\r\n; Preheader:                                    ; Preheader:\r\nentry:                                          entry:\r\n  br label %for.cond1.preheader                   br label %for.cond1.preheader\r\n\r\n; Loop:                                         ; Loop:\r\nfor.cond1.preheader:                            for.cond1.preheader:                         \r\n  %storemerge11 = phi i128 [ 3, %entry ], [ %     %storemerge11 = phi i128 [ 3, %entry ], [ %\r\n  %tobool = icmp ne i128 %storemerge11, 0     |   br i1 true, label %for.inc5, label %if.end.\r\n  br i1 %tobool, label %for.inc5, label %if.e <\r\n\r\nif.end.lr.ph:                                   if.end.lr.ph:                                \r\n  store i128 0, ptr @a, align 8, !tbaa !4         store i128 0, ptr @a, align 8, !tbaa !4\r\n  br label %if.end                                br label %if.end\r\n\r\nif.end:                                         if.end:                                      \r\n  %storemerge89 = phi i8 [ 0, %if.end.lr.ph ]     %storemerge89 = phi i8 [ 0, %if.end.lr.ph ]\r\n  %inc = add nuw nsw i8 %storemerge89, 1          %inc = add nuw nsw i8 %storemerge89, 1\r\n  %cmp2 = icmp ugt i8 %storemerge89, 2            %cmp2 = icmp ugt i8 %storemerge89, 2\r\n  %or.cond = or i1 %tobool, %cmp2             |   %or.cond = or i1 true, %cmp2\r\n  br i1 %or.cond, label %for.inc5.loopexit, l     br i1 %or.cond, label %for.inc5.loopexit, l\r\n\r\nfor.inc5:                                       for.inc5:                                    \r\n  %storemerge8.lcssa = phi i8 [ 0, %for.cond1     %storemerge8.lcssa = phi i8 [ 0, %for.cond1\r\n  %dec = add nsw i128 %storemerge11, -1           %dec = add nsw i128 %storemerge11, -1\r\n  %cmp = icmp ugt i128 %storemerge11, 0           %cmp = icmp ugt i128 %storemerge11, 0\r\n  br i1 %cmp, label %for.cond1.preheader, lab     br i1 %cmp, label %for.cond1.preheader, lab\r\n\r\nfor.inc5.loopexit:                              for.inc5.loopexit:                           \r\n  %inc.lcssa = phi i8 [ %inc, %if.end ]           %inc.lcssa = phi i8 [ %inc, %if.end ]\r\n  br label %for.inc5                              br label %for.inc5\r\n\r\n; Exit blocks                                   ; Exit blocks\r\nfor.end6:                                       for.end6:                                    \r\n  %storemerge8.lcssa.lcssa = phi i8 [ %storem     %storemerge8.lcssa.lcssa = phi i8 [ %storem\r\n  store i128 -1, ptr @c, align 8, !tbaa !4        store i128 -1, ptr @c, align 8, !tbaa !4\r\n  store i8 %storemerge8.lcssa.lcssa, ptr @b,      store i8 %storemerge8.lcssa.lcssa, ptr @b, \r\n  %0 = load i128, ptr @a, align 8, !tbaa !4       %0 = load i128, ptr @a, align 8, !tbaa !4\r\n  %conv7 = trunc i128 %0 to i32                   %conv7 = trunc i128 %0 to i32\r\n  %call = call signext i32 (ptr, ...) @printf     %call = call signext i32 (ptr, ...) @printf\r\n  ret i32 0                                       ret i32 0\r\n\r\n```",
    "author": "JonPsson1",
    "labels": [
      "miscompilation",
      "llvm:SCEV"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Classic mistake: https://github.com/llvm/llvm-project/blob/2f8f58dd17a11934e8c8ec212b6474f76fb18e61/llvm/lib/Analysis/ScalarEvolution.cpp#L11967 This `* Mul` doesn't do what I wanted it to do :)\r\n\r\nI should really pick up https://github.com/llvm/llvm-project/pull/80309 again to prevent this kind of mistake in the first place."
      },
      {
        "author": "JonPsson1",
        "body": "Is this commit self-contained in the sense that I could revert it on my testing machines? Or will you revert / fix soon?"
      }
    ]
  },
  "verified": true
}