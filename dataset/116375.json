{
  "bug_id": "116375",
  "issue_url": "https://github.com/llvm/llvm-project/issues/116375",
  "bug_type": "crash",
  "base_commit": "07507cb5919cae0ae880bfee538ebc993b97dd6c",
  "knowledge_cutoff": "2024-11-15T11:48:16Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "320038579d3c23b78f99618b71640f51423fe321",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          3317,
          3322
        ],
        [
          3325,
          3331
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPFirstOrderRecurrencePHIRecipe::computeCost"
      ]
    }
  },
  "patch": "commit 320038579d3c23b78f99618b71640f51423fe321\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Thu Nov 21 21:11:20 2024 +0000\n\n    [VPlan] Return cost of PHI for scalar VFs in computeCost for FORs.\n    \n    This fixes a crash when the VF is scalar.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/116375.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 71aca3be9e5d..24cf4666c62c 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -3317,6 +3317,10 @@ void VPFirstOrderRecurrencePHIRecipe::execute(VPTransformState &State) {\n InstructionCost\n VPFirstOrderRecurrencePHIRecipe::computeCost(ElementCount VF,\n                                              VPCostContext &Ctx) const {\n+  TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput;\n+  if (VF.isScalar())\n+  return Ctx.TTI.getCFInstrCost(Instruction::PHI, CostKind);\n+\n   if (VF.isScalable() && VF.getKnownMinValue() == 1)\n     return InstructionCost::getInvalid();\n \n@@ -3325,7 +3329,6 @@ VPFirstOrderRecurrencePHIRecipe::computeCost(ElementCount VF,\n   Type *VectorTy =\n       ToVectorTy(Ctx.Types.inferScalarType(this->getVPSingleValue()), VF);\n \n-  TTI::TargetCostKind CostKind = TTI::TCK_RecipThroughput;\n   return Ctx.TTI.getShuffleCost(TargetTransformInfo::SK_Splice,\n                                 cast<VectorType>(VectorTy), Mask, CostKind,\n                                 VF.getKnownMinValue() - 1);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/invalid-costs.ll",
      "commands": [
        "opt -passes=\"loop-vectorize\" -pass-remarks-output=/dev/stderr -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; REMARKS: the cost-model indicates that vectorization is not beneficial\n\n; Test for https://github.com/llvm/llvm-project/issues/116375.\ndefine void @test_i24_load_for(ptr noalias %src, ptr %dst) {\n;\nentry:\n  br label %loop\n\nloop:\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop ]\n  %for = phi i24 [ 0, %entry ], [ %for.next, %loop ]\n  %iv.next = add i16 %iv, 1\n  %gep.src = getelementptr inbounds i24, ptr %src, i16 %iv\n  %for.next = load i24, ptr %gep.src, align 1\n  %gep.dst = getelementptr inbounds i24, ptr %dst, i16 %iv\n  store i24 %for, ptr %gep.dst\n  %ec = icmp eq i16 %iv.next, 1000\n  br i1 %ec, label %exit, label %loop\n\nexit:\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "opt -passes=\"loop-vectorize\" -pass-remarks-output=tmp.opts crashes with 'Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.'",
    "body": "llvm commit: 10b048c8922d\r\nReproduce with: ```opt -passes=\"loop-vectorize\" bbi-101140.ll -o /dev/null -pass-remarks-output=tmp.opts```\r\nResult:\r\n```\r\nopt: ../include/llvm/Support/Casting.h:578: decltype(auto) llvm::cast(From *) [To = llvm::VectorType, From = llvm::Type]: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: build-all/bin/opt -passes=loop-vectorize bbi-101140.ll -o /dev/null -pass-remarks-output=tmp.opts\r\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"bbi-101140.ll\"\r\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"main\"\r\n #0 0x000055b814f24938 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (build-all/bin/opt+0x4435938)\r\n #1 0x000055b814f223fe llvm::sys::RunSignalHandlers() (build-all/bin/opt+0x44333fe)\r\n #2 0x000055b814f2516d SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007f5d1b5dbcf0 __restore_rt (/lib64/libpthread.so.0+0x12cf0)\r\n #4 0x00007f5d19194acf raise (/lib64/libc.so.6+0x4eacf)\r\n #5 0x00007f5d19167ea5 abort (/lib64/libc.so.6+0x21ea5)\r\n #6 0x00007f5d19167d79 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d79)\r\n #7 0x00007f5d1918d426 (/lib64/libc.so.6+0x47426)\r\n #8 0x000055b816474525 llvm::VPFirstOrderRecurrencePHIRecipe::computeCost(llvm::ElementCount, llvm::VPCostContext&) const (build-all/bin/opt+0x5985525)\r\n #9 0x000055b816461f4c llvm::VPRecipeBase::cost(llvm::ElementCount, llvm::VPCostContext&) (build-all/bin/opt+0x5972f4c)\r\n#10 0x000055b8163faa3a llvm::LoopVectorizationPlanner::emitInvalidCostRemarks(llvm::OptimizationRemarkEmitter*) (build-all/bin/opt+0x590ba3a)\r\n#11 0x000055b816427189 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (build-all/bin/opt+0x5938189)\r\n#12 0x000055b81642cd0b llvm::LoopVectorizePass::runImpl(llvm::Function&) (build-all/bin/opt+0x593dd0b)\r\n#13 0x000055b81642d568 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (build-all/bin/opt+0x593e568)\r\n#14 0x000055b8162e33dd llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) PassBuilderPipelines.cpp:0:0\r\n#15 0x000055b81512d317 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (build-all/bin/opt+0x463e317)\r\n#16 0x000055b8162dcf6d llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) PassBuilderPipelines.cpp:0:0\r\n#17 0x000055b815131ea6 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (build-all/bin/opt+0x4642ea6)\r\n#18 0x000055b8162d6a0d llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) PassBuilderPipelines.cpp:0:0\r\n#19 0x000055b81512c047 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (build-all/bin/opt+0x463d047)\r\n#20 0x000055b81627ab63 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (build-all/bin/opt+0x578bb63)\r\n#21 0x000055b814eebd0a optMain (build-all/bin/opt+0x43fcd0a)\r\n#22 0x00007f5d19180d85 __libc_start_main (/lib64/libc.so.6+0x3ad85)\r\n#23 0x000055b814ee5b2e _start (build-all/bin/opt+0x43f6b2e)\r\nAbort (core dumped)\r\n```\r\n[bbi-101140.ll.gz](https://github.com/user-attachments/files/17774956/bbi-101140.ll.gz)\r\n",
    "author": "mikaelholmen",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "mikaelholmen",
        "body": "This starts happening with https://github.com/llvm/llvm-project/commit/680901ed8010319843cd81275b845d682f77e27f\r\n```\r\n[VPlan] Implement VPHeaderPHIRecipe::computeCost.\r\n\r\nFill out computeCost implementations for various header PHI recipes,\r\nmatching the legacy cost model for now.\r\n```"
      },
      {
        "author": "mikaelholmen",
        "body": "Thanks!"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}