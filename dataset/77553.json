{
  "bug_id": "77553",
  "issue_url": "https://github.com/llvm/llvm-project/issues/77553",
  "bug_type": "crash",
  "base_commit": "c9c8f0c2fcf3b25ec310a75216f1d5b582ec343f",
  "knowledge_cutoff": "2024-01-10T04:18:48Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "66eedd1dd370d22ddf994540c20848618d64d1a6",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1704,
          1714
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::foldSelectInstWithICmp"
      ]
    }
  },
  "patch": "commit 66eedd1dd370d22ddf994540c20848618d64d1a6\nAuthor: hanbeom <kese111@gmail.com>\nDate:   Thu Jan 11 17:34:30 2024 +0900\n\n    [InstCombine] Fix worklist management in select fold (#77738)\n    \n    `InstCombine` uses `Worklist` to manage change history. `setOperand`,\n    which was previously used to change the `Select` Instruction, does not,\n    so it is `run` twice, which causes an `LLVM ERROR`.\n    \n    This problem is resolved by changing `setOperand` to `replaceOperand` as\n    the change history will be registered in the Worklist.\n    \n    Fixes #77553.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex ab55f235920a..21bfc91148bf 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1704,11 +1704,11 @@ Instruction *InstCombinerImpl::foldSelectInstWithICmp(SelectInst &SI,\n   if (CmpRHS != CmpLHS && isa<Constant>(CmpRHS) && !isa<Constant>(CmpLHS)) {\n     if (CmpLHS == TrueVal && Pred == ICmpInst::ICMP_EQ) {\n       // Transform (X == C) ? X : Y -> (X == C) ? C : Y\n-      SI.setOperand(1, CmpRHS);\n+      replaceOperand(SI, 1, CmpRHS);\n       Changed = true;\n     } else if (CmpLHS == FalseVal && Pred == ICmpInst::ICMP_NE) {\n       // Transform (X != C) ? Y : X -> (X != C) ? Y : C\n-      SI.setOperand(2, CmpRHS);\n+      replaceOperand(SI, 2, CmpRHS);\n       Changed = true;\n     }\n   }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "src_select_xxory_eq0_xorxy_y",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i32 @src_select_xxory_eq0_xorxy_y(i32 %x, i32 %y) {\n  %xor = xor i32 %x, %y\n  %xor0 = icmp eq i32 %xor, 0\n  %cond = select i1 %xor0, i32 %xor, i32 %y\n  ret i32 %cond\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "LLVM ERROR while InstCombine",
    "body": "```\r\n$ bllvm0/bin/clang --version\r\nclang version 18.0.0git (git@github.com:ParkHanbum/llvm-project.git a9f39ff2b628e38826d5b95c1e8ae3cb7c692de9)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /home/m/bllvm0/bin\r\n```\r\nmy clang version.\r\n\r\nIR that caused the error\r\n```\r\ndefine i32 @no_trans_select_xor_eq0_xor_and(i32 %x, i32 %y) {\r\n; CHECK-LABEL: @no_trans_select_xor_eq0_xor_and(\r\n; CHECK-NEXT:    [[XOR:%.*]] = xor i32 [[X:%.*]], [[Y:%.*]]\r\n; CHECK-NEXT:    [[XOR0:%.*]] = icmp eq i32 [[XOR]], 0\r\n; CHECK-NEXT:    [[AND:%.*]] = and i32 [[X]], [[Y]]\r\n; CHECK-NEXT:    [[COND:%.*]] = select i1 [[XOR0]], i32 [[XOR]], i32 [[AND]]\r\n; CHECK-NEXT:    ret i32 [[COND]]\r\n;\r\n  %xor = xor i32 %x, %y\r\n  %xor0 = icmp eq i32 %xor, 0\r\n  %and = and i32 %x, %y\r\n  %cond = select i1 %xor0, i32 %xor, i32 %and\r\n  ret i32 %cond\r\n}\r\n```\r\n\r\nand Debug message :\r\n```\r\n$ bllvm0/bin/opt -passes=instcombine temp.ll -debug\r\nINSTCOMBINE ITERATION #1 on no_trans_select_xor_eq0_xor_and\r\nADD:   ret i32 %cond\r\nADD:   %cond = select i1 %xor0, i32 %xor, i32 %and\r\nADD:   %and = and i32 %x, %y\r\nADD:   %xor0 = icmp eq i32 %xor, 0\r\nADD:   %xor = xor i32 %x, %y\r\nIC: Visiting:   %xor = xor i32 %x, %y\r\nIC: Visiting:   %xor0 = icmp eq i32 %xor, 0\r\nIC: Visiting:   %and = and i32 %x, %y\r\nIC: Visiting:   %cond = select i1 %xor0, i32 %xor, i32 %and\r\nIC: Mod =   %cond = select i1 %xor0, i32 %xor, i32 %and\r\n    New =   %cond = select i1 %xor0, i32 0, i32 %and\r\nADD:   %cond = select i1 %xor0, i32 0, i32 %and\r\nIC: Visiting:   %cond = select i1 %xor0, i32 0, i32 %and\r\nIC: Visiting:   ret i32 %cond\r\n\r\n\r\nINSTCOMBINE ITERATION #2 on no_trans_select_xor_eq0_xor_and\r\nADD:   ret i32 %cond\r\nADD:   %cond = select i1 %xor0, i32 0, i32 %and\r\nADD:   %and = and i32 %x, %y\r\nADD:   %xor0 = icmp eq i32 %xor, 0\r\nADD:   %xor = xor i32 %x, %y\r\nIC: Visiting:   %xor = xor i32 %x, %y\r\nIC: Visiting:   %xor0 = icmp eq i32 %xor, 0\r\nIC: Old =   %xor0 = icmp eq i32 %xor, 0\r\n    New =   <badref> = icmp eq i32 %x, %y\r\nADD:   %xor0 = icmp eq i32 %x, %y\r\nIC: ERASE   %1 = icmp eq i32 %xor, 0\r\nADD DEFERRED:   %xor = xor i32 %x, %y\r\nIC: ERASE   %xor = xor i32 %x, %y\r\nIC: Visiting:   %xor0 = icmp eq i32 %x, %y\r\nIC: Visiting:   %and = and i32 %x, %y\r\nIC: Visiting:   %cond = select i1 %xor0, i32 0, i32 %and\r\nIC: Visiting:   ret i32 %cond\r\nLLVM ERROR: Instruction Combining did not reach a fixpoint after 1 iterations\r\n\r\n```\r\n\r\nIf time isn't tight, I'd like to take on this issue.\r\n\r\n",
    "author": "ParkHanbum",
    "labels": [
      "llvm:instcombine",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "The problem is likely that https://github.com/llvm/llvm-project/blob/084f1c2ee074a5ac8186ea4b5b181b48bf4621b6/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp#L1704-L1714 calls setOperand() instead of replaceOperand()."
      },
      {
        "author": "ParkHanbum",
        "body": "@nikic can I try this?"
      },
      {
        "author": "nikic",
        "body": "Sure."
      }
    ]
  }
}
