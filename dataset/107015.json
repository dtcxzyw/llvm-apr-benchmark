{
  "bug_id": "107015",
  "issue_url": "https://github.com/llvm/llvm-project/issues/107015",
  "bug_type": "crash",
  "base_commit": "50a02e7c68f964c5d8338369746c849ed8d3bef4",
  "knowledge_cutoff": "2024-09-02T18:45:19Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "954ed05c1001489802ae43d4bea403181570a799",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          8393,
          8398
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h": [
        [
          174,
          184
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "VPRecipeBuilder::tryToWiden"
      ],
      "llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h": [
        "getVPValueOrAddLiveIn"
      ]
    }
  },
  "patch": "commit 954ed05c1001489802ae43d4bea403181570a799\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Mon Sep 2 21:25:30 2024 +0100\n\n    [VPlan] Simplify MUL operands at recipe construction.\n    \n    This moves the logic to create simplified operands using SCEV to MUL\n    recipe creation. This is needed to match the behavior of the legacy's cost\n    model. TODOs are to extend to other opcodes and move to a transform.\n    \n    Note that this also restricts the number of SCEV simplifications we\n    apply to more precisely match the cases handled by the legacy cost\n    model.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/107015.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex a8722db654f5..a64848c1fdce 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -8393,6 +8393,20 @@ VPWidenRecipe *VPRecipeBuilder::tryToWiden(Instruction *I,\n   case Instruction::Sub:\n   case Instruction::Xor:\n   case Instruction::Freeze:\n+    if (I->getOpcode() == Instruction::Mul) {\n+      // Simplify operands of multiplications using SCEV. This is needed at the\n+      // moment to match the behavior of the legacy cost-model.\n+      // TODO: Generalize to any opcode and move to VPlan transformation.\n+      SmallVector<VPValue *> NewOps(Operands);\n+      ScalarEvolution &SE = *PSE.getSE();\n+      for (unsigned I = 0; I < Operands.size(); ++I) {\n+        Value *V = NewOps[I]->getUnderlyingValue();\n+        if (!isa<Constant>(V) && SE.isSCEVable(V->getType()))\n+          if (auto *C = dyn_cast<SCEVConstant>(PSE.getSE()->getSCEV(V)))\n+            NewOps[I] = Plan.getOrAddLiveIn(C->getValue());\n+      }\n+      return new VPWidenRecipe(*I, make_range(NewOps.begin(), NewOps.end()));\n+    }\n     return new VPWidenRecipe(*I, make_range(Operands.begin(), Operands.end()));\n   };\n }\ndiff --git a/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h b/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h\nindex 0fbdeeddaf4a..25b8bf3e089e 100644\n--- a/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h\n+++ b/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h\n@@ -174,11 +174,6 @@ public:\n       if (auto *R = Ingredient2Recipe.lookup(I))\n         return R->getVPSingleValue();\n     }\n-    ScalarEvolution &SE = *PSE.getSE();\n-    if (!isa<Constant>(V) && SE.isSCEVable(V->getType()))\n-      if (auto *C = dyn_cast<SCEVConstant>(PSE.getSE()->getSCEV(V)))\n-        return Plan.getOrAddLiveIn(C->getValue());\n-\n     return Plan.getOrAddLiveIn(V);\n   }\n };\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/mul-simplification.ll",
      "commands": [
        "opt -p loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "mul_select_operand_known_1_via_scev",
          "test_body": "target triple = \"arm64-apple-macosx\"\n\ndefine i64 @mul_select_operand_known_1_via_scev() {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %red = phi i64 [ 12, %entry ], [ %red.next, %loop ]\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]\n  %0 = and i32 %iv, 1\n  %cmp1.i = icmp eq i32 %0, 0\n  %narrow.i = select i1 %cmp1.i, i32 1, i32 %iv\n  %mul = zext nneg i32 %narrow.i to i64\n  %red.next = mul nsw i64 %red, %mul\n  %iv.next = add nuw nsw i32 %iv, 1\n  %ec = icmp eq i32 %iv, 1\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %res = phi i64 [ %red.next, %loop ]\n  ret i64 %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Crash with assertion failed in Vectorize",
    "body": "The compiler crashed with -O2 in this code:\r\n\r\n```c\r\n#include<stdint.h>\r\nstatic uint8_t b[][1] = {127};\r\nlong a(int c, int e) {\r\n  long d;\r\n  for (; c <= e; c++)\r\n    if (c % 2 == 0)\r\n      ;\r\n    else\r\n      d *= c;\r\n  return d;\r\n}\r\nint64_t f();\r\nint16_t g() {\r\n  int32_t h = 1653000360;\r\n  f(a(h - 1653000360, b[0][0] - 126));\r\n  uint8_t *i[] = {b, b};\r\n}\r\n```\r\n\r\nThe crash is:\r\n```\r\nclang: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:7369: llvm::VectorizationFactor llvm::LoopVectorizationPlanner::computeBestVF(): Assertion `(BestFactor.Width == LegacyVF.Width || planContainsAdditionalSimplifications(getPlanFor(BestFactor.Width), CostCtx, OrigLoop)) && \" VPlan cost model and legacy cost model disagreed\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\r\n```\r\n\r\nThe details can be found here: https://godbolt.org/z/eeWW6raPb",
    "author": "cardigan1008",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}