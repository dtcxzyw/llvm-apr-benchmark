{
  "bug_id": "129242",
  "issue_url": "https://github.com/llvm/llvm-project/issues/129242",
  "bug_type": "crash",
  "base_commit": "5faa5f848a35de13196f2f516f51aa970da942b4",
  "knowledge_cutoff": "2025-02-28T13:35:26Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "a36a67c79afaa1fdd0dbe0440ec852fd4eb3a532",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          11425,
          11435
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getEntryCost"
      ]
    }
  },
  "patch": "commit a36a67c79afaa1fdd0dbe0440ec852fd4eb3a532\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Feb 28 13:15:46 2025 -0800\n\n    [SLP]Fix the analysis of the user buildvector nodes for minbitwidth\n    \n    If the user node is a buildvector/gather node and it has no internal\n    instructions state, need to check properly for this state and check the\n    type of the node itself, not its operands.\n    \n    Fixes #129242\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 4a68e0ee5989..4f3fd6d53909 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -11425,11 +11425,14 @@ BoUpSLP::getEntryCost(const TreeEntry *E, ArrayRef<Value *> VectorizedVals,\n             E->Idx != 0 &&\n             (E->getOpcode() != Instruction::Load || E->UserTreeIndex)) {\n           const EdgeInfo &EI = E->UserTreeIndex;\n-          if (EI.UserTE->getOpcode() != Instruction::Select ||\n+          if (!EI.UserTE->hasState() ||\n+              EI.UserTE->getOpcode() != Instruction::Select ||\n               EI.EdgeIdx != 0) {\n             auto UserBWIt = MinBWs.find(EI.UserTE);\n             Type *UserScalarTy =\n-                EI.UserTE->getOperand(EI.EdgeIdx).front()->getType();\n+                EI.UserTE->isGather()\n+                    ? EI.UserTE->Scalars.front()->getType()\n+                    : EI.UserTE->getOperand(EI.EdgeIdx).front()->getType();\n             if (UserBWIt != MinBWs.end())\n               UserScalarTy = IntegerType::get(ScalarTy->getContext(),\n                                               UserBWIt->second.first);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/user-buildvector-with-minbiwidth.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(i8 %0, i32 %conv2, i1 %cmp.i, i64 %shl.i) {\n;\nentry:\n  %conv21 = sext i8 %0 to i32\n  %conv7 = zext i32 %conv2 to i64\n  %cond.i = shl i64 %conv7, %shl.i\n  %1 = and i64 %cond.i, 4294967295\n  %.not = icmp eq i64 %1, 1\n  %conv7.1 = zext i32 %conv2 to i64\n  %cond.i.1 = shl i64 %conv7.1, %shl.i\n  %2 = and i64 %cond.i.1, 4294967295\n  %.not.1 = icmp eq i64 %2, 1\n  %sub.2 = or i32 %conv21, 1\n  %cond.2 = select i1 %cmp.i, i32 %sub.2, i32 0\n  %conv7.2 = zext i32 %cond.2 to i64\n  %cmp.i.2 = icmp slt i32 %cond.2, 1\n  %shl.i.2 = zext i1 %cmp.i.2 to i64\n  %cond.i.2 = shl i64 %conv7.2, %shl.i.2\n  %3 = and i64 %cond.i.2, 4294967295\n  %.not.2 = icmp eq i64 %3, 1\n  %sub.3 = or i32 %conv21, 1\n  %cond.3 = select i1 %cmp.i, i32 %sub.3, i32 0\n  %conv7.3 = zext i32 %cond.3 to i64\n  %cmp.i.3 = icmp slt i32 %cond.3, 1\n  %shl.i.3 = zext i1 %cmp.i.3 to i64\n  %cond.i.3 = shl i64 %conv7.3, %shl.i.3\n  %4 = and i64 %cond.i.3, 4294967295\n  %.not.3 = icmp eq i64 %4, 1\n  %sub.4 = or i32 %conv21, 1\n  %cond.4 = select i1 %cmp.i, i32 %sub.4, i32 0\n  %conv7.4 = zext i32 %cond.4 to i64\n  %cmp.i.4 = icmp slt i32 %cond.4, 1\n  %shl.i.4 = zext i1 %cmp.i.4 to i64\n  %cond.i.4 = shl i64 %conv7.4, %shl.i.4\n  %5 = and i64 %cond.i.4, 4294967295\n  %.not.4 = icmp eq i64 %5, 1\n  %sub.5 = or i32 %conv21, 1\n  %cond.5 = select i1 %cmp.i, i32 %sub.5, i32 0\n  %conv7.5 = zext i32 %cond.5 to i64\n  %cmp.i.5 = icmp slt i32 %cond.5, 1\n  %shl.i.5 = zext i1 %cmp.i.5 to i64\n  %cond.i.5 = shl i64 %conv7.5, %shl.i.5\n  %6 = and i64 %cond.i.5, 4294967295\n  %.not.5 = icmp eq i64 %6, 1\n  %sub.6 = or i32 %conv21, 1\n  %cond.6 = select i1 %cmp.i, i32 %sub.6, i32 0\n  %conv7.6 = zext i32 %cond.6 to i64\n  %cmp.i.6 = icmp slt i32 %cond.6, 1\n  %shl.i.6 = zext i1 %cmp.i.6 to i64\n  %cond.i.6 = shl i64 %conv7.6, %shl.i.6\n  %7 = and i64 %cond.i.6, 4294967295\n  %.not.6 = icmp eq i64 %7, 1\n  %sub.7 = or i32 %conv21, 1\n  %cond.7 = select i1 %cmp.i, i32 %sub.7, i32 0\n  %conv7.7 = zext i32 %cond.7 to i64\n  %cmp.i.7 = icmp slt i32 %cond.7, 1\n  %shl.i.7 = zext i1 %cmp.i.7 to i64\n  %cond.i.7 = shl i64 %conv7.7, %shl.i.7\n  %8 = and i64 %cond.i.7, 4294967295\n  %.not.7 = icmp eq i64 %8, 1\n  %sub.8 = or i32 %conv21, 1\n  %cond.8 = select i1 %cmp.i, i32 %sub.8, i32 0\n  %conv7.8 = zext i32 %cond.8 to i64\n  %cmp.i.8 = icmp slt i32 %cond.8, 1\n  %shl.i.8 = zext i1 %cmp.i.8 to i64\n  %cond.i.8 = shl i64 %conv7.8, %shl.i.8\n  %9 = and i64 %cond.i.8, 4294967295\n  %.not.8 = icmp eq i64 %9, 1\n  %sub.9 = or i32 %conv21, 1\n  %cond.9 = select i1 %cmp.i, i32 %sub.9, i32 0\n  %conv7.9 = zext i32 %cond.9 to i64\n  %cmp.i.9 = icmp slt i32 %cond.9, 1\n  %shl.i.9 = zext i1 %cmp.i.9 to i64\n  %cond.i.9 = shl i64 %conv7.9, %shl.i.9\n  %10 = and i64 %cond.i.9, 4294967295\n  %.not.9 = icmp eq i64 %10, 1\n  br label %while.body\n\nwhile.body:\n  br i1 %.not, label %for.inc, label %if.then10\n\nif.then10:\n  br label %for.inc\n\nfor.inc:\n  br i1 %.not.1, label %for.inc.1, label %if.then10.1\n\nif.then10.1:\n  br label %for.inc.1\n\nfor.inc.1:\n  br i1 %.not.2, label %for.inc.2, label %if.then10.2\n\nif.then10.2:\n  br label %for.inc.2\n\nfor.inc.2:\n  br i1 %.not.3, label %for.inc.3, label %if.then10.3\n\nif.then10.3:\n  br label %for.inc.3\n\nfor.inc.3:\n  br i1 %.not.4, label %for.inc.4, label %if.then10.4\n\nif.then10.4:\n  br label %for.inc.4\n\nfor.inc.4:\n  br i1 %.not.5, label %for.inc.5, label %if.then10.5\n\nif.then10.5:\n  br label %for.inc.5\n\nfor.inc.5:\n  br i1 %.not.6, label %for.inc.6, label %if.then10.6\n\nif.then10.6:\n  br label %for.inc.6\n\nfor.inc.6:\n  br i1 %.not.7, label %for.inc.7, label %if.then10.7\n\nif.then10.7:\n  br label %for.inc.7\n\nfor.inc.7:\n  br i1 %.not.8, label %for.inc.8, label %if.then10.8\n\nif.then10.8:\n  br label %for.inc.8\n\nfor.inc.8:\n  br i1 %.not.9, label %while.body, label %if.then10.9\n\nif.then10.9:\n  br label %while.body\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes on valid code at -O{2,3} on x86_64-linux-gnu: Assertion `valid() && \"InstructionsState is invalid.\"' failed",
    "body": "It appears to be a recent regression as it doesn't reproduce with 19.1.0 and earlier.\n\nCompiler Explorer: https://godbolt.org/z/8KTq9hGv9\n\n```\n[516] % clangtk -v\nclang version 21.0.0git (https://github.com/llvm/llvm-project.git d0edd931bcc328b9502289d346f2b2219341f853)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/10\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\n[517] % \n[517] % clangtk -O2 -w small.c\nclang-21: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:821: llvm::Instruction* {anonymous}::InstructionsState::getMainOp() const: Assertion `valid() && \"InstructionsState is invalid.\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/suz-local/software/local/clang-trunk/bin/clang-21 -cc1 -triple x86_64-unknown-linux-gnu -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/20250227-clangtk-m64-O3-build-235136/delta -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/20250227-clangtk-m64-O3-build-235136/delta -resource-dir /local/suz-local/software/local/clang-trunk/lib/clang/21 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/suz-local/software/local/clang-trunk/lib/clang/21/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/11/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -O2 -w -ferror-limit 19 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-933a0f.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O2>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x00005597e9b142df llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x455e2df)\n #1 0x00005597e9b11ab4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007fa06c8aa420 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x14420)\n #3 0x00007fa06c2e100b raise /build/glibc-LcI20x/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1\n #4 0x00007fa06c2c0859 abort /build/glibc-LcI20x/glibc-2.31/stdlib/abort.c:81:7\n #5 0x00007fa06c2c0729 get_sysdep_segment_value /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:509:8\n #6 0x00007fa06c2c0729 _nl_load_domain /build/glibc-LcI20x/glibc-2.31/intl/loadmsgcat.c:970:34\n #7 0x00007fa06c2d1fd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\n #8 0x00005597eb591745 (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x5fdb745)\n #9 0x00005597eb62a4e5 llvm::slpvectorizer::BoUpSLP::getEntryCost(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::ArrayRef<llvm::Value*>, llvm::SmallPtrSetImpl<llvm::Value*>&)::'lambda0'(llvm::function_ref<llvm::InstructionCost (unsigned int)>, llvm::function_ref<llvm::InstructionCost (llvm::InstructionCost)>)::operator()(llvm::function_ref<llvm::InstructionCost (unsigned int)>, llvm::function_ref<llvm::InstructionCost (llvm::InstructionCost)>) const SLPVectorizer.cpp:0:0\n#10 0x00005597eb633034 llvm::slpvectorizer::BoUpSLP::getEntryCost(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::ArrayRef<llvm::Value*>, llvm::SmallPtrSetImpl<llvm::Value*>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x607d034)\n#11 0x00005597eb668741 llvm::slpvectorizer::BoUpSLP::getTreeCost(llvm::ArrayRef<llvm::Value*>) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x60b2741)\n#12 0x00005597eb672691 llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x60bc691)\n#13 0x00005597eb676e5e bool llvm::SLPVectorizerPass::vectorizeCmpInsts<std::reverse_iterator<llvm::CmpInst* const*>>(llvm::iterator_range<std::reverse_iterator<llvm::CmpInst* const*>>, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x60c0e5e)\n#14 0x00005597eb6773db llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&)::'lambda3'(bool)::operator()(bool) const SLPVectorizer.cpp:0:0\n#15 0x00005597eb67ac20 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x60c4c20)\n#16 0x00005597eb681396 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#17 0x00005597eb681ef3 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x60cbef3)\n#18 0x00005597eb104166 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x5b4e166)\n#19 0x00005597e948caf9 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x3ed6af9)\n#20 0x00005597e6d6c406 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x17b6406)\n#21 0x00005597e948b362 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x3ed5362)\n#22 0x00005597e6d6a4b6 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x17b44b6)\n#23 0x00005597e948ad81 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x3ed4d81)\n#24 0x00005597e9ddb283 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#25 0x00005597e9ddf573 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x4829573)\n#26 0x00005597ea51bba0 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x4f65ba0)\n#27 0x00005597ebe39acc clang::ParseAST(clang::Sema&, bool, bool) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x6883acc)\n#28 0x00005597ea51bfc8 clang::CodeGenAction::ExecuteAction() (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x4f65fc8)\n#29 0x00005597ea7f2779 clang::FrontendAction::Execute() (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x523c779)\n#30 0x00005597ea77325e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x51bd25e)\n#31 0x00005597ea8e7626 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x5331626)\n#32 0x00005597e68fefb7 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x1348fb7)\n#33 0x00005597e68f66ea ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#34 0x00005597e68fa97a clang_main(int, char**, llvm::ToolContext const&) (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x134497a)\n#35 0x00005597e67edccb main (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x1237ccb)\n#36 0x00007fa06c2c2083 __libc_start_main /build/glibc-LcI20x/glibc-2.31/csu/../csu/libc-start.c:342:3\n#37 0x00005597e68f617e _start (/local/suz-local/software/local/clang-trunk/bin/clang-21+0x134017e)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 21.0.0git (https://github.com/llvm/llvm-project.git d0edd931bcc328b9502289d346f2b2219341f853)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-fd80bc.c\nclangtk: note: diagnostic msg: /tmp/small-fd80bc.sh\nclangtk: note: diagnostic msg: \n\n********************\n[518] % \n[518] % cat small.c\nint a[1], g;\nchar b, c;\nvolatile int d;\nlong e, f;\nlong h(long i) { return i > 1 ? i : i << 1; }\nint main() {\n  if (g)\n    while (1) {\n      b = 0;\n      for (; b < 10; b++) {\n        e = c & b ? 0 : c - b;\n        f = h(e);\n        g = (a != 0) % (unsigned)f;\n        if (g)\n          d;\n      }\n    }\n  return 0;\n}\n```\n\n",
    "author": "zhendongsu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}