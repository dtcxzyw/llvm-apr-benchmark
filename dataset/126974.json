{
  "bug_id": "126974",
  "issue_url": "https://github.com/llvm/llvm-project/issues/126974",
  "bug_type": "miscompilation",
  "base_commit": "dab9156923133b4ce3c40efcae4f80b0d720e72f",
  "knowledge_cutoff": "2025-02-12T21:21:07Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "29f3a352068ce562bcb65e18a676c82a9991583c",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          5637,
          5642
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombinerImpl::foldICmpWithMinMax"
      ]
    }
  },
  "patch": "commit 29f3a352068ce562bcb65e18a676c82a9991583c\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Feb 16 20:18:29 2025 +0800\n\n    [InstCombine] Do not keep samesign when speculatively executing icmps (#127007)\n    \n    Closes https://github.com/llvm/llvm-project/issues/126974.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex 96d6db2ba5bf..76020d2b1dbf 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -5637,6 +5637,11 @@ Instruction *InstCombinerImpl::foldICmpWithMinMax(Instruction &I,\n       return false;\n     return std::nullopt;\n   };\n+  // Remove samesign here since it is illegal to keep it when we speculatively\n+  // execute comparisons. For example, `icmp samesign ult umax(X, -46), -32`\n+  // cannot be decomposed into `(icmp samesign ult X, -46) or (icmp samesign ult\n+  // -46, -32)`. `X` is allowed to be non-negative here.\n+  Pred = static_cast<CmpInst::Predicate>(Pred);\n   auto CmpXZ = IsCondKnownTrue(simplifyICmpInst(Pred, X, Z, Q));\n   auto CmpYZ = IsCondKnownTrue(simplifyICmpInst(Pred, Y, Z, Q));\n   if (!CmpXZ.has_value() && !CmpYZ.has_value())\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/umax-icmp.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "pr126974",
          "test_body": "define i1 @pr126974(i8 %x) {\nentry:\n  %cond = icmp sgt i8 %x, -2\n  br i1 %cond, label %if.then, label %if.else\n\nif.then:                                          ; preds = %entry\n  %umax = call i8 @llvm.umax.i8(i8 %x, i8 -46)\n  %cmp = icmp samesign ult i8 %umax, -32\n  ret i1 %cmp\n\nif.else:                                          ; preds = %entry\n  ret i1 false\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.umax.i8(i8, i8) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[RISC-V] Miscompile using rv64gcv",
    "body": "Testcase:\n```c\nint a[][21][21];\nvoid b(int c, int d, int e, short f, _Bool g, char h, char i, int j, int k,\n       int l, unsigned char m, int n, char o, int p, long long q[],\n       unsigned short r[][10], unsigned s[][10],\n       unsigned long long t[][10][10][10], unsigned long long u[][10][10][10],\n       int w[][10][10][10][10], _Bool x) {\n  for (signed z = 0; z < (char)m + 3; z = 4)\n    for (short aa = ({\n                      __typeof__(0) ab = 173;\n                      __typeof__(0) ac = ({\n                        __typeof__(0) ab = m;\n                        ab;\n                      });\n                      ab > ac ? ab : ac;\n                    }) -\n                    171;\n         aa < 9; aa = k)\n      a[z][aa][aa] = ~0;\n}\ntypedef int ad;\nint printf(const char *, ...);\nlong long ae;\nvoid af(long long *ae, int v) { *ae ^= v; }\nint c;\nint d;\nint e;\nshort f;\n_Bool g;\nchar h;\nchar i;\nint j;\nint k = 2805750831;\nint l;\nchar m;\nint n;\nchar o;\nint p;\nlong long q[0];\nunsigned short r[0][10];\nunsigned s[0][10];\nunsigned long long t[0][10][10][10];\nunsigned long long u[0][10][10][10];\nint w[0][10][10][10][10];\n_Bool x;\nint a[21][21][21];\nvoid ag() {\n  for (ad y = 0; y < 10; ++y)\n    for (ad ah = 0; ah < 10; ++ah)\n      for (ad ai = 0; ai < 10; ++ai)\n        af(&ae, a[y][ah][ai]);\n}\nint main() {\n  b(c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, w, x);\n  ag();\n  printf(\"%llu\\n\", ae);\n}\n```\n\nCommands:\n```\n# riscv \n$ QEMU_CPU=rv64,vlen=128,rvv_ta_all_1s=true,rvv_ma_all_1s=true,v=true,vext_spec=v1.0,zve32f=true,zve64f=true timeout --verbose -k 0.1 4 /scratch/ewlu/daily-upstream-build/build-gcv/bin/qemu-riscv64 user-config.out 1\n0\n\n# x86\n$ ./native.out 1\n18446744073709551615\n```\n\nGodbolt: https://godbolt.org/z/85rz18rxY\n\nBisected to cfee344dda7394631f2177a15e56cfeee1d61fc4 as the first bad commit\n\nI tried reducing the testcase down farther but was unsuccessful\n\nFound via fuzzer. First detected 01/24/2025",
    "author": "ewlu",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "dzaima",
        "body": "Some manual simplification, reproduces on x86-64 `-O3` too:\n\n```c\n#include<stdio.h>\n\nvoid f(int more_than_20, unsigned char zero) {\n  int i = 0;\n  while (i < (signed char)zero + 2) {\n    int max = zero < 210 ? 210 : zero; // 210; has to be >127\n    int j = max - 200; // 10\n    while (j < 20) {\n      printf(\"I should be printed once\\n\");\n      j = more_than_20;\n    }\n    i = 2; // can be anything >2\n  }\n}\n\nint main() {\n  f(50, 0);\n}\n```\n\nhttps://godbolt.org/z/qfn9PT6r5"
      },
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/adparc"
      },
      {
        "author": "dtcxzyw",
        "body": "Further reduced: https://alive2.llvm.org/ce/z/5da83j"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "cfee344dda7394631f2177a15e56cfeee1d61fc4"
}