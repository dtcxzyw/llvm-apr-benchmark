{
  "bug_id": "149679",
  "issue_url": "https://github.com/llvm/llvm-project/issues/149679",
  "bug_type": "crash",
  "base_commit": "33bfbacdcba2ec9f81162637a7cf15c13975af0b",
  "knowledge_cutoff": "2025-07-19T21:56:32Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopSimplifyCFG"
  ],
  "hints": {
    "fix_commit": "04107209856bb39e041aa38cf40de0afa90a6b2d",
    "components": [
      "LoopSimplifyCFG"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp": [
        [
          128,
          133
        ],
        [
          216,
          221
        ],
        [
          546,
          551
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp": [
        "analyze",
        "run"
      ]
    }
  },
  "patch": "commit 04107209856bb39e041aa38cf40de0afa90a6b2d\nAuthor: Justus Klausecker <117751770+Justus2308@users.noreply.github.com>\nDate:   Tue Jul 22 16:01:49 2025 +0200\n\n    [LoopSimplifyCFG] Add check for missing loop preheader (#149743)\n    \n    Closes #147869\n    Closes #149679\n    \n    Adds a check for a missing loop preheader during analysis. This fixes a\n    nullptr dereference that happened whenever LoopSimplify was unable to\n    generate a preheader because the loop was entered by an indirectbr\n    instruction (as stated in the LoopSimplify.cpp doc comment).\n\ndiff --git a/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp b/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp\nindex 221094f170ac..b9546c5fa236 100644\n--- a/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp\n+++ b/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp\n@@ -128,6 +128,8 @@ private:\n   // from any other block. So this variable set to true means that loop's latch\n   // has become unreachable from loop header.\n   bool DeleteCurrentLoop = false;\n+  // Whether or not we enter the loop through an indirectbr.\n+  bool HasIndirectEntry = false;\n \n   // The blocks of the original loop that will still be reachable from entry\n   // after the constant folding.\n@@ -216,6 +218,19 @@ private:\n       return;\n     }\n \n+    // We need a loop preheader to split in handleDeadExits(). If LoopSimplify\n+    // wasn't able to form one because the loop can be entered through an\n+    // indirectbr we cannot continue.\n+    if (!L.getLoopPreheader()) {\n+      assert(any_of(predecessors(L.getHeader()),\n+                    [&](BasicBlock *Pred) {\n+                      return isa<IndirectBrInst>(Pred->getTerminator());\n+                    }) &&\n+             \"Loop should have preheader if it is not entered indirectly\");\n+      HasIndirectEntry = true;\n+      return;\n+    }\n+\n     // Collect live and dead loop blocks and exits.\n     LiveLoopBlocks.insert(L.getHeader());\n     for (auto I = DFS.beginRPO(), E = DFS.endRPO(); I != E; ++I) {\n@@ -546,6 +561,12 @@ public:\n       return false;\n     }\n \n+    if (HasIndirectEntry) {\n+      LLVM_DEBUG(dbgs() << \"Loops which can be entered indirectly are not\"\n+                           \" supported!\\n\");\n+      return false;\n+    }\n+\n     // Nothing to constant-fold.\n     if (FoldCandidates.empty()) {\n       LLVM_DEBUG(\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopSimplifyCFG/enter-through-indirectbr.ll",
      "commands": [
        "opt -S -enable-loop-simplifycfg-term-folding=true -passes='require<domtree>,loop(loop-simplifycfg)' -verify-loop-info -verify-dom-info -verify-loop-lcssa < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(ptr %addr) {\n;\n\n  indirectbr ptr %addr, [label %A, label %C]\n\nA:\n  br i1 true, label %B, label %C\n\nB:\n  br i1 true, label %A, label %C\n\nC:\n  unreachable\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopSimplifyCFG] null `Preheader` deref",
    "body": "```llvm\ndefine void @repro() {\n  indirectbr ptr null, [ label %A, label %B ]\nA:\n  br i1 false, label %B, label %C\nB:\n  unreachable\nC:\n  br i1 true, label %A, label %B\n}\n```\n```console\n$ opt --version\nLLVM (http://llvm.org/):\n  LLVM version 22.0.0git\n  DEBUG build with assertions.\n  Default target: x86_64-unknown-linux-gnu\n  Host CPU: znver5\n$ opt -passes=loop-simplifycfg reduced.ll\nWARNING: You're attempting to print out a bitcode file.\nThis is inadvisable as it may cause display problems. If\nyou REALLY want to taste LLVM bitcode first-hand, you\ncan force output with the `-f' option.\n\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: opt -passes=loop-simplifycfg reduced.ll\n1.\tRunning pass \"function(loop(loop-simplifycfg))\" on module \"reduced.ll\"\n2.\tRunning pass \"loop(loop-simplifycfg)\" on function \"repro\"\n #0 0x00007f12e7e16396 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) llvm/lib/Support/Unix/Signals.inc:834:11\n #1 0x00007f12e7e1697f PrintStackTraceSignalHandler(void*) llvm/lib/Support/Unix/Signals.inc:918:1\n #2 0x00007f12e7e146a0 llvm::sys::RunSignalHandlers() llvm/lib/Support/Signals.cpp:104:5\n #3 0x00007f12e7e16f82 SignalHandler(int, siginfo_t*, void*) llvm/lib/Support/Unix/Signals.inc:426:38\n #4 0x00007f12e7624750 (/usr/lib64/libc.so.6+0x3d750)\n #5 0x00007f12eaf14629 llvm::detail::PunnedPointer<llvm::ilist_node_base<true, llvm::BasicBlock>*>::asInt() const llvm/include/llvm/ADT/PointerIntPair.h:41:5\n #6 0x00007f12eaf145d9 llvm::detail::PunnedPointer<llvm::ilist_node_base<true, llvm::BasicBlock>*>::operator long() const llvm/include/llvm/ADT/PointerIntPair.h:45:41\n #7 0x00007f12eaf14579 llvm::PointerIntPair<llvm::ilist_node_base<true, llvm::BasicBlock>*, 1u, unsigned int, llvm::PointerLikeTypeTraits<llvm::ilist_node_base<true, llvm::BasicBlock>*>, llvm::PointerIntPairInfo<llvm::ilist_node_base<true, llvm::BasicBlock>*, 1u, llvm::PointerLikeTypeTraits<llvm::ilist_node_base<true, llvm::BasicBlock>*>>>::getPointer() const llvm/include/llvm/ADT/PointerIntPair.h:94:58\n #8 0x00007f12eaf14559 llvm::ilist_detail::node_base_prevnext<llvm::ilist_node_base<true, llvm::BasicBlock>, true>::getPrev() const llvm/include/llvm/ADT/ilist_node_base.h:41:31\n #9 0x00007f12eaf14539 llvm::ilist_node_impl<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true, llvm::BasicBlock>>::getPrev() const llvm/include/llvm/ADT/ilist_node.h:123:5\n#10 0x00007f12eaf144fd llvm::ilist_sentinel<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true, llvm::BasicBlock>>::empty() const llvm/include/llvm/ADT/ilist_node.h:319:45\n#11 0x00007f12eaf14429 llvm::simple_ilist<llvm::Instruction, llvm::ilist_iterator_bits<true>, llvm::ilist_parent<llvm::BasicBlock>>::empty() const llvm/include/llvm/ADT/simple_ilist.h:139:38\n#12 0x00007f12eaf143c1 llvm::BasicBlock::getTerminator() const llvm/include/llvm/IR/BasicBlock.h:234:26\n#13 0x00007f12eaf11e99 llvm::BasicBlock::getTerminator() llvm/include/llvm/IR/BasicBlock.h:239:5\n#14 0x00007f12eb21b8c4 (anonymous namespace)::ConstantTerminatorFoldingImpl::handleDeadExits() llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:353:31\n#15 0x00007f12eb21abb9 (anonymous namespace)::ConstantTerminatorFoldingImpl::run() llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:601:5\n#16 0x00007f12eb21a25e constantFoldTerminators(llvm::Loop&, llvm::DominatorTree&, llvm::LoopInfo&, llvm::ScalarEvolution&, llvm::MemorySSAUpdater*, bool&) llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:654:8\n#17 0x00007f12eb21a111 simplifyLoopCFG(llvm::Loop&, llvm::DominatorTree&, llvm::LoopInfo&, llvm::ScalarEvolution&, llvm::MemorySSAUpdater*, bool&) llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:700:14\n#18 0x00007f12eb219fc3 llvm::LoopSimplifyCFGPass::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:721:7\n#19 0x00007f12ee841768 llvm::detail::PassModel<llvm::Loop, llvm::LoopSimplifyCFGPass, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) llvm/include/llvm/IR/PassManagerInternal.h:91:17\n#20 0x00007f12eb208307 std::__1::optional<llvm::PreservedAnalyses> llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runSinglePass<llvm::Loop, std::__1::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::__1::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>>(llvm::Loop&, std::__1::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::__1::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&, llvm::PassInstrumentation&) llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:375:7\n#21 0x00007f12eb206c03 llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runWithoutLoopNestPasses(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) llvm/lib/Transforms/Scalar/LoopPassManager.cpp:165:10\n#22 0x00007f12eb206497 llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) llvm/lib/Transforms/Scalar/LoopPassManager.cpp:0:32\n#23 0x00007f12ee744ad8 llvm::detail::PassModel<llvm::Loop, llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) llvm/include/llvm/IR/PassManagerInternal.h:91:17\n#24 0x00007f12eb2075a7 llvm::FunctionToLoopPassAdaptor::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) llvm/lib/Transforms/Scalar/LoopPassManager.cpp:305:17\n#25 0x00007f12f5907238 llvm::detail::PassModel<llvm::Function, llvm::FunctionToLoopPassAdaptor, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) llvm/include/llvm/IR/PassManagerInternal.h:91:17\n#26 0x00007f12e895a2eb llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) llvm/include/llvm/IR/PassManagerImpl.h:80:5\n#27 0x00007f12f58e7308 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) llvm/include/llvm/IR/PassManagerInternal.h:91:17\n#28 0x00007f12e8958c75 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) llvm/lib/IR/PassManager.cpp:127:38\n#29 0x00007f12f58e7bb8 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) llvm/include/llvm/IR/PassManagerInternal.h:91:17\n#30 0x00007f12e895923b llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) llvm/include/llvm/IR/PassManagerImpl.h:80:5\n#31 0x00007f12f75e5619 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::__1::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) llvm/tools/opt/NewPMDriver.cpp:557:3\n#32 0x00007f12f76234a1 optMain llvm/tools/opt/optdriver.cpp:744:12\n#33 0x00005587e9d895d9 main llvm/tools/opt/opt.cpp:25:42\n#34 0x00007f12e760e3fb (/usr/lib64/libc.so.6+0x273fb)\n#35 0x00007f12e760e4ab __libc_start_main (/usr/lib64/libc.so.6+0x274ab)\n#36 0x00005587e9d894e5 _start (opt+0x24e5)\n```\nReproduces with both 20.1.8 and 07100c6658c71e4016675e624da8c94543479745.",
    "author": "jacobly0",
    "labels": [
      "loopoptim",
      "crash"
    ],
    "comments": [
      {
        "author": "jacobly0",
        "body": "Probably a reduction of #147869"
      }
    ]
  },
  "verified": true
}