{
  "bug_id": "120823",
  "issue_url": "https://github.com/llvm/llvm-project/issues/120823",
  "bug_type": "miscompilation",
  "base_commit": "9d0a5d4620a2aa5dc01b150e5ebe7613238cae1c",
  "knowledge_cutoff": "2024-12-21T05:25:23Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "030829a7e53fad0eab9b87b5dd49427e9fb13303",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15483,
          15488
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit 030829a7e53fad0eab9b87b5dd49427e9fb13303\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Dec 23 16:53:37 2024 -0800\n\n    [SLP]Drop samesign flag if the vector node has reduced bitwidth\n    \n    If the operands of the icmp instructions has reduced bitwidth after\n    MinBitwidth analysis, need to drop samesign flag to preserve correctness\n    of the transformation.\n    \n    Fixes #120823\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex d22379429d00..b5d68c075b98 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15483,6 +15483,8 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n       CmpInst::Predicate P0 = cast<CmpInst>(VL0)->getPredicate();\n       Value *V = Builder.CreateCmp(P0, L, R);\n       propagateIRFlags(V, E->Scalars, VL0);\n+      if (auto *ICmp = dyn_cast<ICmpInst>(V); ICmp && It == MinBWs.end())\n+        ICmp->setSameSign(/*B=*/false);\n       // Do not cast for cmps.\n       VecTy = cast<FixedVectorType>(V->getType());\n       V = FinalShuffle(V, E);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/buildvector-schedule-for-subvector.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i1 @test() {\nentry:\n  %and.i1698.1.i = zext i16 0 to i32\n  %and19.i1699.2.i = and i32 %and.i1698.1.i, 0\n  %and.i1698.2.i = zext i16 0 to i32\n  %cmp25.i1700.2.i2 = icmp samesign uge i32 %and19.i1699.2.i, %and.i1698.1.i\n  %and19.i1699.11841.i = and i32 %and.i1698.2.i, 0\n  %cmp25.i1700.11842.i3 = icmp samesign uge i32 %and19.i1699.11841.i, %and.i1698.2.i\n  %and.i1698.1.1.i = zext i16 0 to i32\n  %and19.i1699.2.1.i = and i32 %and.i1698.1.1.i, 0\n  %0 = add i16 1, 0\n  %and.i1698.2.1.i = zext i16 %0 to i32\n  %cmp25.i1700.2.1.i4 = icmp samesign uge i32 %and19.i1699.2.1.i, %and.i1698.1.1.i\n  %and19.i1699.21846.i = and i32 %and.i1698.2.1.i, 0\n  %cmp25.i1700.21847.i = icmp samesign uge i32 %and19.i1699.21846.i, %and.i1698.2.1.i\n  ret i1 %cmp25.i1700.21847.i\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] `samesign` flags should be dropped after narrowing down the width of operands",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/AvBhy9\n```\n; bin/opt -passes=slp-vectorizer test.ll -S\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i1 @test() {\nentry:\n  %and.i1698.1.i = zext i16 0 to i32\n  %and19.i1699.2.i = and i32 %and.i1698.1.i, 0\n  %and.i1698.2.i = zext i16 0 to i32\n  %cmp25.i1700.2.i2 = icmp samesign uge i32 %and19.i1699.2.i, %and.i1698.1.i\n  %and19.i1699.11841.i = and i32 %and.i1698.2.i, 0\n  %cmp25.i1700.11842.i3 = icmp samesign uge i32 %and19.i1699.11841.i, %and.i1698.2.i\n  %and.i1698.1.1.i = zext i16 0 to i32\n  %and19.i1699.2.1.i = and i32 %and.i1698.1.1.i, 0\n  %0 = add i16 1, 0\n  %and.i1698.2.1.i = zext i16 %0 to i32\n  %cmp25.i1700.2.1.i4 = icmp samesign uge i32 %and19.i1699.2.1.i, %and.i1698.1.1.i\n  %and19.i1699.21846.i = and i32 %and.i1698.2.1.i, 0\n  %cmp25.i1700.21847.i = icmp samesign uge i32 %and19.i1699.21846.i, %and.i1698.2.1.i\n  ret i1 %cmp25.i1700.21847.i\n}\n```\n```\ndefine i1 @test() {\nentry:\n  %0 = add i16 1, 0\n  %1 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %0, i32 0\n  %2 = trunc <4 x i16> %1 to <4 x i1>\n  %3 = and <4 x i1> %2, zeroinitializer\n  %4 = icmp samesign uge <4 x i1> %3, %2\n  %5 = extractelement <4 x i1> %4, i32 0\n  ret i1 %5\n}\n```\n```\n\n----------------------------------------\ndefine i1 @src() {\nentry:\n  %#0 = add i16 1, 0\n  %and.i1698.2.1.i = zext i16 %#0 to i32\n  %and19.i1699.21846.i = and i32 %and.i1698.2.1.i, 0\n  %cmp25.i1700.21847.i = icmp samesign uge i32 %and19.i1699.21846.i, %and.i1698.2.1.i\n  ret i1 %cmp25.i1700.21847.i\n}\n=>\ndefine i1 @src() {\nentry:\n  %#0 = add i16 1, 0\n  %#1 = insertelement <4 x i16> { poison, 0, 0, 0 }, i16 %#0, i32 0\n  %#2 = trunc <4 x i16> %#1 to <4 x i1>\n  %#3 = and <4 x i1> %#2, { 0, 0, 0, 0 }\n  %#4 = icmp samesign uge <4 x i1> %#3, %#2\n  %#5 = extractelement <4 x i1> %#4, i32 0\n  ret i1 %#5\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\n\nSource:\ni16 %#0 = #x0001 (1)\ni32 %and.i1698.2.1.i = #x00000001 (1)\ni32 %and19.i1699.21846.i = #x00000000 (0)\ni1 %cmp25.i1700.21847.i = #x0 (0)\n\nTarget:\ni16 %#0 = #x0001 (1)\n<4 x i16> %#1 = < #x0001 (1), #x0000 (0), #x0000 (0), #x0000 (0) >\n<4 x i1> %#2 = < #x1 (1), #x0 (0), #x0 (0), #x0 (0) >\n<4 x i1> %#3 = < #x0 (0), #x0 (0), #x0 (0), #x0 (0) >\n<4 x i1> %#4 = < poison, #x1 (1), #x1 (1), #x1 (1) >\ni1 %#5 = poison\nSource value: #x0 (0)\nTarget value: poison\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}