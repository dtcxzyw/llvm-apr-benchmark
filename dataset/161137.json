{
  "bug_id": "161137",
  "issue_url": "https://github.com/llvm/llvm-project/issues/161137",
  "bug_type": "crash",
  "base_commit": "8df643f66374fc3fc16523a2d6a63d14d4a560a5",
  "knowledge_cutoff": "2025-09-29T06:57:28Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SimplifyCFG"
  ],
  "hints": {
    "fix_commit": "5ff9f7b886290f7b6efc9aba33c632c2f1aac9e6",
    "components": [
      "SimplifyCFG"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        [
          84,
          90
        ],
        [
          6356,
          6380
        ],
        [
          6382,
          6388
        ],
        [
          6422,
          6434
        ],
        [
          6448,
          6458
        ],
        [
          6466,
          6476
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        "foldSwitchToSelect"
      ]
    }
  },
  "patch": "commit 5ff9f7b886290f7b6efc9aba33c632c2f1aac9e6\nAuthor: Antonio Frighetto <me@antoniofrighetto.com>\nDate:   Mon Sep 29 10:56:23 2025 +0200\n\n    [SimplifyCFG] Ensure selects have not been constant folded in `foldSwitchToSelect`\n    \n    Make sure selects do exist prior to assigning weights to edges.\n    \n    Fixes: https://github.com/llvm/llvm-project/issues/161137.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\nindex 2d84b4ae1ba5..216bdf4eb9ef 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n@@ -84,7 +84,6 @@\n #include <cstdint>\n #include <iterator>\n #include <map>\n-#include <numeric>\n #include <optional>\n #include <set>\n #include <tuple>\n@@ -6356,25 +6355,25 @@ static Value *foldSwitchToSelect(const SwitchCaseResultVectorTy &ResultVector,\n     if (DefaultResult) {\n       Value *ValueCompare =\n           Builder.CreateICmpEQ(Condition, SecondCase, \"switch.selectcmp\");\n-      SelectInst *SelectValueInst = cast<SelectInst>(Builder.CreateSelect(\n-          ValueCompare, ResultVector[1].first, DefaultResult, \"switch.select\"));\n-      SelectValue = SelectValueInst;\n-      if (HasBranchWeights) {\n+      SelectValue = Builder.CreateSelect(ValueCompare, ResultVector[1].first,\n+                                         DefaultResult, \"switch.select\");\n+      if (auto *SI = dyn_cast<SelectInst>(SelectValue);\n+          SI && HasBranchWeights) {\n         // We start with 3 probabilities, where the numerator is the\n         // corresponding BranchWeights[i], and the denominator is the sum over\n         // BranchWeights. We want the probability and negative probability of\n         // Condition == SecondCase.\n         assert(BranchWeights.size() == 3);\n-        setBranchWeights(SelectValueInst, BranchWeights[2],\n+        setBranchWeights(SI, BranchWeights[2],\n                          BranchWeights[0] + BranchWeights[1],\n                          /*IsExpected=*/false);\n       }\n     }\n     Value *ValueCompare =\n         Builder.CreateICmpEQ(Condition, FirstCase, \"switch.selectcmp\");\n-    SelectInst *Ret = cast<SelectInst>(Builder.CreateSelect(\n-        ValueCompare, ResultVector[0].first, SelectValue, \"switch.select\"));\n-    if (HasBranchWeights) {\n+    Value *Ret = Builder.CreateSelect(ValueCompare, ResultVector[0].first,\n+                                      SelectValue, \"switch.select\");\n+    if (auto *SI = dyn_cast<SelectInst>(Ret); SI && HasBranchWeights) {\n       // We may have had a DefaultResult. Base the position of the first and\n       // second's branch weights accordingly. Also the proability that Condition\n       // != FirstCase needs to take that into account.\n@@ -6382,7 +6381,7 @@ static Value *foldSwitchToSelect(const SwitchCaseResultVectorTy &ResultVector,\n       size_t FirstCasePos = (Condition != nullptr);\n       size_t SecondCasePos = FirstCasePos + 1;\n       uint32_t DefaultCase = (Condition != nullptr) ? BranchWeights[0] : 0;\n-      setBranchWeights(Ret, BranchWeights[FirstCasePos],\n+      setBranchWeights(SI, BranchWeights[FirstCasePos],\n                        DefaultCase + BranchWeights[SecondCasePos],\n                        /*IsExpected=*/false);\n     }\n@@ -6422,13 +6421,13 @@ static Value *foldSwitchToSelect(const SwitchCaseResultVectorTy &ResultVector,\n           Value *And = Builder.CreateAnd(Condition, AndMask);\n           Value *Cmp = Builder.CreateICmpEQ(\n               And, Constant::getIntegerValue(And->getType(), AndMask));\n-          SelectInst *Ret = cast<SelectInst>(\n-              Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult));\n-          if (HasBranchWeights) {\n+          Value *Ret =\n+              Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult);\n+          if (auto *SI = dyn_cast<SelectInst>(Ret); SI && HasBranchWeights) {\n             // We know there's a Default case. We base the resulting branch\n             // weights off its probability.\n             assert(BranchWeights.size() >= 2);\n-            setBranchWeights(Ret, accumulate(drop_begin(BranchWeights), 0),\n+            setBranchWeights(SI, accumulate(drop_begin(BranchWeights), 0),\n                              BranchWeights[0], /*IsExpected=*/false);\n           }\n           return Ret;\n@@ -6448,11 +6447,11 @@ static Value *foldSwitchToSelect(const SwitchCaseResultVectorTy &ResultVector,\n         Value *And = Builder.CreateAnd(Condition, ~BitMask, \"switch.and\");\n         Value *Cmp = Builder.CreateICmpEQ(\n             And, Constant::getNullValue(And->getType()), \"switch.selectcmp\");\n-        SelectInst *Ret = cast<SelectInst>(\n-            Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult));\n-        if (HasBranchWeights) {\n+        Value *Ret =\n+            Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult);\n+        if (auto *SI = dyn_cast<SelectInst>(Ret); SI && HasBranchWeights) {\n           assert(BranchWeights.size() >= 2);\n-          setBranchWeights(Ret, accumulate(drop_begin(BranchWeights), 0),\n+          setBranchWeights(SI, accumulate(drop_begin(BranchWeights), 0),\n                            BranchWeights[0], /*IsExpected=*/false);\n         }\n         return Ret;\n@@ -6466,11 +6465,11 @@ static Value *foldSwitchToSelect(const SwitchCaseResultVectorTy &ResultVector,\n       Value *Cmp2 = Builder.CreateICmpEQ(Condition, CaseValues[1],\n                                          \"switch.selectcmp.case2\");\n       Value *Cmp = Builder.CreateOr(Cmp1, Cmp2, \"switch.selectcmp\");\n-      SelectInst *Ret = cast<SelectInst>(\n-          Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult));\n-      if (HasBranchWeights) {\n+      Value *Ret =\n+          Builder.CreateSelect(Cmp, ResultVector[0].first, DefaultResult);\n+      if (auto *SI = dyn_cast<SelectInst>(Ret); SI && HasBranchWeights) {\n         assert(BranchWeights.size() >= 2);\n-        setBranchWeights(Ret, accumulate(drop_begin(BranchWeights), 0),\n+        setBranchWeights(SI, accumulate(drop_begin(BranchWeights), 0),\n                          BranchWeights[0], /*IsExpected=*/false);\n       }\n       return Ret;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SimplifyCFG/switch-to-select-two-case.ll",
      "commands": [
        "opt < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S"
      ],
      "tests": [
        {
          "test_name": "negative_constfold_select",
          "test_body": "define i32 @negative_constfold_select() {\nentry:\n  switch i32 poison, label %default [\n    i32 0, label %bb\n    i32 2, label %bb\n  ]\n\nbb:                                               ; preds = %entry, %entry\n  br label %default\n\ndefault:                                          ; preds = %bb, %entry\n  %ret = phi i32 [ poison, %entry ], [ poison, %bb ]\n  ret i32 %ret\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O1 and above on x86_64-linux-gnu: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed",
    "body": "Compiler Explorer: https://godbolt.org/z/6hcjfv3dv\n\n```\n[508] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git abffc542ff876d9e74d64ee5cb83ec405ec2e70e)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nCandidate multilib: 32;@m32\nCandidate multilib: x32;@mx32\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[509] % \n[509] % clangtk -O1 small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/include/llvm/Support/Casting.h:578: decltype(auto) llvm::cast(From*) [with To = llvm::SelectInst; From = llvm::Value]: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O1 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/20250929-clangtk-m64-O3-build-064159/delta -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/20250929-clangtk-m64-O3-build-064159/delta -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -ferror-limit 19 -fmessage-length=130 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-9bbc20.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(mem2reg,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>\" on function \"main\"\n #0 0x0000561abed1d620 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4324620)\n #1 0x0000561abed1a2df llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x43212df)\n #2 0x0000561abed1a432 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007f1f4810b520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f1f4815f9fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f1f4815f9fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f1f4815f9fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f1f4810b476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f1f480f17f3 abort ./stdlib/abort.c:81:7\n #9 0x00007f1f480f171b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f1f48102e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x0000561abe80ce34 decltype(auto) llvm::cast<llvm::SelectInst, llvm::Value>(llvm::Value*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3e13e34)\n#12 0x0000561abeee538c trySwitchToSelect(llvm::SwitchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&, llvm::DomTreeUpdater*, llvm::DataLayout const&, llvm::TargetTransformInfo const&) SimplifyCFG.cpp:0:0\n#13 0x0000561abeef0009 (anonymous namespace)::SimplifyCFGOpt::simplifySwitch(llvm::SwitchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&) SimplifyCFG.cpp:0:0\n#14 0x0000561abeef82b6 llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x44ff2b6)\n#15 0x0000561abebef121 iterativelySimplifyCFG(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#16 0x0000561abebf0052 simplifyFunctionCFGImpl(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DominatorTree*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#17 0x0000561abebf1195 simplifyFunctionCFG(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DominatorTree*, llvm::SimplifyCFGOptions const&) SimplifyCFGPass.cpp:0:0\n#18 0x0000561abebf12ee llvm::SimplifyCFGPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x41f82ee)\n#19 0x0000561abc76d8f6 llvm::detail::PassModel<llvm::Function, llvm::SimplifyCFGPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x1d748f6)\n#20 0x0000561abe64df12 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c54f12)\n#21 0x0000561abbd2cdb6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x1333db6)\n#22 0x0000561abe64bdb9 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c52db9)\n#23 0x0000561abbd2d4a6 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x13344a6)\n#24 0x0000561abe64cb05 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c53b05)\n#25 0x0000561abefd0a83 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#26 0x0000561abefd4c93 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x45dbc93)\n#27 0x0000561abf65b7da clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4c627da)\n#28 0x0000561ac11108cc clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x67178cc)\n#29 0x0000561abf9778b9 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f7e8b9)\n#30 0x0000561abf8f1d85 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4ef8d85)\n#31 0x0000561abfa6b763 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5072763)\n#32 0x0000561abb89c227 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xea3227)\n#33 0x0000561abb8926fa ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>) driver.cpp:0:0\n#34 0x0000561abb896aa4 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe9daa4)\n#35 0x0000561abb76215b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd6915b)\n#36 0x00007f1f480f2d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#37 0x00007f1f480f2e40 call_init ./csu/../csu/libc-start.c:128:20\n#38 0x00007f1f480f2e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#39 0x0000561abb891e15 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe98e15)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git abffc542ff876d9e74d64ee5cb83ec405ec2e70e)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-bb6bbe.c\nclangtk: note: diagnostic msg: /tmp/small-bb6bbe.sh\nclangtk: note: diagnostic msg: \n\n********************\n[510] % \n[510] % cat small.c\nint a, b;\nstatic int *c;\nint main() {\n  int e;\n  if (!b)\n    return a;\n  {\n    int f;\n    if (*c)\n      goto g;\n  }\ng:\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "antoniofrighetto",
        "body": "Related to: https://github.com/llvm/llvm-project/pull/159645."
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "d2f14bcaa5d2ca392656efe702770171ad7f3161"
}