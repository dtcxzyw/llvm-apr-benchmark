{
  "bug_id": "122584",
  "issue_url": "https://github.com/llvm/llvm-project/issues/122584",
  "bug_type": "crash",
  "base_commit": "34ba84fe90b3e369c03e695a395ec632ef60e23d",
  "knowledge_cutoff": "2025-01-11T08:32:25Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "af524de1fa94e4b4cee8b745d1b68f4ea0090759",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          14935,
          14942
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::processBuildVector"
      ]
    }
  },
  "patch": "commit af524de1fa94e4b4cee8b745d1b68f4ea0090759\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Jan 13 06:48:56 2025 -0800\n\n    [SLP]Do not include subvectors for fully matched buildvectors\n    \n    If the buildvector node fully matched another node, need to exclude\n    subvectors, when building final shuffle, just a shuffle of the original\n    node must be emitted.\n    \n    Fixes #122584\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex e3487b501534..df46c69ff3ab 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -14935,8 +14935,8 @@ ResTy BoUpSLP::processBuildVector(const TreeEntry *E, Type *ScalarTy,\n           }\n         }\n         ShuffleBuilder.add(*FrontTE, Mask);\n-        Res = ShuffleBuilder.finalize(E->getCommonMask(), SubVectors,\n-                                      SubVectorsMask);\n+        // Full matched entry found, no need to insert subvectors.\n+        Res = ShuffleBuilder.finalize(E->getCommonMask(), {}, {});\n         return Res;\n       }\n       if (!Resized) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/AArch64/vectorizable-selects-uniform-cmps.ll",
      "commands": [
        "opt -passes=slp-vectorizer -S %s",
        "opt -aa-pipeline=basic-aa -passes='slp-vectorizer' -S %s"
      ],
      "tests": [
        {
          "test_name": "select_uniform_ugt_16xi8",
          "test_body": "target datalayout = \"e-m:o-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"arm64-apple-ios5.0.0\"\n\ndefine void @select_uniform_ugt_16xi8(ptr %ptr, i8 %x) {\nentry:\n  %l.0 = load i8, ptr %ptr, align 1\n  %cmp.0 = icmp ugt i8 %l.0, -1\n  %s.0 = select i1 %cmp.0, i8 %l.0, i8 %x\n  store i8 %s.0, ptr %ptr, align 2\n  %gep.1 = getelementptr inbounds i8, ptr %ptr, i8 1\n  %l.1 = load i8, ptr %gep.1, align 1\n  %cmp.1 = icmp ugt i8 %l.1, -1\n  %s.1 = select i1 %cmp.1, i8 %l.1, i8 %x\n  store i8 %s.1, ptr %gep.1, align 2\n  %gep.2 = getelementptr inbounds i8, ptr %ptr, i8 2\n  %l.2 = load i8, ptr %gep.2, align 1\n  %cmp.2 = icmp ugt i8 %l.2, -1\n  %s.2 = select i1 %cmp.2, i8 %l.2, i8 %x\n  store i8 %s.2, ptr %gep.2, align 2\n  %gep.3 = getelementptr inbounds i8, ptr %ptr, i8 3\n  %l.3 = load i8, ptr %gep.3, align 1\n  %cmp.3 = icmp ugt i8 %l.3, -1\n  %s.3 = select i1 %cmp.3, i8 %l.3, i8 %x\n  store i8 %s.3, ptr %gep.3, align 2\n  %gep.4 = getelementptr inbounds i8, ptr %ptr, i8 4\n  %l.4 = load i8, ptr %gep.4, align 1\n  %cmp.4 = icmp ugt i8 %l.4, -1\n  %s.4 = select i1 %cmp.4, i8 %l.4, i8 %x\n  store i8 %s.4, ptr %gep.4, align 2\n  %gep.5 = getelementptr inbounds i8, ptr %ptr, i8 5\n  %l.5 = load i8, ptr %gep.5, align 1\n  %cmp.5 = icmp ugt i8 %l.5, -1\n  %s.5 = select i1 %cmp.5, i8 %l.5, i8 %x\n  store i8 %s.5, ptr %gep.5, align 2\n  %gep.6 = getelementptr inbounds i8, ptr %ptr, i8 6\n  %l.6 = load i8, ptr %gep.6, align 1\n  %cmp.6 = icmp ugt i8 %l.6, -1\n  %s.6 = select i1 %cmp.6, i8 %l.6, i8 %x\n  store i8 %s.6, ptr %gep.6, align 2\n  %gep.7 = getelementptr inbounds i8, ptr %ptr, i8 7\n  %l.7 = load i8, ptr %gep.7, align 1\n  %cmp.7 = icmp ugt i8 %l.7, -1\n  %s.7 = select i1 %cmp.7, i8 %l.7, i8 %x\n  store i8 %s.7, ptr %gep.7, align 2\n  %gep.8 = getelementptr inbounds i8, ptr %ptr, i8 8\n  %l.8 = load i8, ptr %gep.8, align 1\n  %cmp.8 = icmp ugt i8 %l.8, -1\n  %s.8 = select i1 %cmp.8, i8 %l.0, i8 %x\n  store i8 %s.0, ptr %gep.8, align 2\n  %gep.9 = getelementptr inbounds i8, ptr %ptr, i8 9\n  %l.9 = load i8, ptr %gep.9, align 1\n  %cmp.9 = icmp ugt i8 %l.9, -1\n  %s.9 = select i1 %cmp.9, i8 %l.9, i8 %x\n  store i8 %s.9, ptr %gep.9, align 2\n  %gep.10 = getelementptr inbounds i8, ptr %ptr, i8 10\n  %l.10 = load i8, ptr %gep.10, align 1\n  %cmp.10 = icmp ugt i8 %l.10, -1\n  %s.10 = select i1 %cmp.10, i8 %l.10, i8 %x\n  store i8 %s.10, ptr %gep.10, align 2\n  %gep.11 = getelementptr inbounds i8, ptr %ptr, i8 11\n  %l.11 = load i8, ptr %gep.11, align 1\n  %cmp.11 = icmp ugt i8 %l.11, -1\n  %s.11 = select i1 %cmp.11, i8 %l.11, i8 %x\n  store i8 %s.11, ptr %gep.11, align 2\n  %gep.12 = getelementptr inbounds i8, ptr %ptr, i8 12\n  %l.12 = load i8, ptr %gep.12, align 1\n  %cmp.12 = icmp ugt i8 %l.12, -1\n  %s.12 = select i1 %cmp.12, i8 %l.12, i8 %x\n  store i8 %s.12, ptr %gep.12, align 2\n  %gep.13 = getelementptr inbounds i8, ptr %ptr, i8 13\n  %l.13 = load i8, ptr %gep.13, align 1\n  %cmp.13 = icmp ugt i8 %l.13, -1\n  %s.13 = select i1 %cmp.13, i8 %l.13, i8 %x\n  store i8 %s.13, ptr %gep.13, align 2\n  %gep.14 = getelementptr inbounds i8, ptr %ptr, i8 14\n  %l.14 = load i8, ptr %gep.14, align 1\n  %cmp.14 = icmp ugt i8 %l.14, -1\n  %s.14 = select i1 %cmp.14, i8 %l.14, i8 %x\n  store i8 %s.14, ptr %gep.14, align 2\n  %gep.15 = getelementptr inbounds i8, ptr %ptr, i8 15\n  %l.15 = load i8, ptr %gep.15, align 1\n  %cmp.15 = icmp ugt i8 %l.15, -1\n  %s.15 = select i1 %cmp.15, i8 %l.15, i8 %x\n  store i8 %s.15, ptr %gep.15, align 2\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/full-matched-bv-with-subvectors.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-threshold=-9999 -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(i64 %l.549) {\nentry:\n  %conv3 = sext i32 0 to i64\n  br label %if.then19\n\np:                                                ; preds = %if.end29, %if.end25\n  %l.0 = phi i64 [ %xor, %if.end29 ], [ %l.5493, %if.end25 ]\n  %m.0 = phi i64 [ %not21, %if.end29 ], [ %m.550, %if.end25 ]\n  br i1 false, label %s, label %q\n\nq:                                                ; preds = %land.lhs.true, %p\n  %xor39 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  %l.1 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  %m.1 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  br i1 false, label %lor.lhs.false, label %r\n\nlor.lhs.false:                                    ; preds = %q\n  br i1 false, label %land.lhs.true, label %s\n\nr:                                                ; preds = %if.then19, %q\n  %xor38 = phi i64 [ %xor39, %q ], [ %xor, %if.then19 ]\n  %j.0 = phi i64 [ %conv3, %q ], [ %not21, %if.then19 ]\n  %l.2 = phi i64 [ %l.1, %q ], [ %l.549, %if.then19 ]\n  %m.2 = phi i64 [ %m.1, %q ], [ %m.550, %if.then19 ]\n  br i1 false, label %s, label %land.lhs.true\n\nland.lhs.true:                                    ; preds = %r, %lor.lhs.false\n  %xor37 = phi i64 [ %xor38, %r ], [ 0, %lor.lhs.false ]\n  %j.1 = phi i64 [ %j.0, %r ], [ 0, %lor.lhs.false ]\n  %l.3 = phi i64 [ %l.2, %r ], [ 0, %lor.lhs.false ]\n  %m.3 = phi i64 [ %m.2, %r ], [ 0, %lor.lhs.false ]\n  br i1 false, label %q, label %s\n\ns:                                                ; preds = %land.lhs.true, %r, %lor.lhs.false, %p\n  %xor36 = phi i64 [ %xor37, %land.lhs.true ], [ %xor38, %r ], [ %xor39, %lor.lhs.false ], [ %l.0, %p ]\n  %j.2 = phi i64 [ %j.1, %land.lhs.true ], [ %j.0, %r ], [ %conv3, %lor.lhs.false ], [ %m.0, %p ]\n  %l.4 = phi i64 [ %l.3, %land.lhs.true ], [ %l.2, %r ], [ %l.1, %lor.lhs.false ], [ %l.0, %p ]\n  %m.4 = phi i64 [ %m.3, %land.lhs.true ], [ %m.2, %r ], [ %m.1, %lor.lhs.false ], [ %m.0, %p ]\n  br label %if.then19\n\nif.then19:                                        ; preds = %s, %entry\n  %m.550 = phi i64 [ 0, %entry ], [ %m.4, %s ]\n  %l.5493 = phi i64 [ 0, %entry ], [ %l.4, %s ]\n  %xor = xor i64 0, 0\n  %not21 = xor i64 0, 0\n  br i1 false, label %r, label %if.end25\n\nif.end25:                                         ; preds = %if.then19\n  br i1 false, label %if.end29, label %p\n\nif.end29:                                         ; preds = %if.end25\n  br label %p\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes on valid code at -O{s,2,3} on x86_64-linux-gnu: Assertion `I1 == PoisonMaskElem && \"Expected unused subvectors mask\"' failed",
    "body": "It appears to be a recent regression as it doesn't reproduce with 19.1.0 and earlier.\n\nCompiler Explorer: https://godbolt.org/z/vWPhsMfoz\n\n```\n[510] % clangtk -v\nclang version 20.0.0git (https://github.com/llvm/llvm-project.git 24bd9bc0b59d51c82e9a4d84c21d86d58d0ef6ce)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[511] % \n[511] % clangtk -O2 small.c\nclang-20: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:10936: llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::finalize(llvm::ArrayRef<int>, llvm::ArrayRef<std::pair<const llvm::slpvectorizer::BoUpSLP::TreeEntry*, unsigned int> >, llvm::ArrayRef<int>, unsigned int, llvm::function_ref<void(llvm::Value*&, llvm::SmallVectorImpl<int>&)>): Assertion `I1 == PoisonMaskElem && \"Expected unused subvectors mask\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20 -cc1 -triple x86_64-unknown-linux-gnu -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/20250111-clangtk-m64-Os-build-025751/delta -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/20250111-clangtk-m64-Os-build-025751/delta -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/20 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/20/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -O2 -ferror-limit 19 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-2771d7.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O2>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x0000562bd646d500 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x4576500)\n #1 0x0000562bd646a91f llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x457391f)\n #2 0x0000562bd646aa75 SignalHandler(int) Signals.cpp:0:0\n #3 0x00007f13d1771520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f13d17c5a7c pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x96a7c)\n #5 0x00007f13d1771476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #6 0x00007f13d17577f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #7 0x00007f13d175771b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #8 0x00007f13d1768e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #9 0x0000562bd7f25a4f llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::finalize(llvm::ArrayRef<int>, llvm::ArrayRef<std::pair<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, unsigned int>>, llvm::ArrayRef<int>, unsigned int, llvm::function_ref<void (llvm::Value*&, llvm::SmallVectorImpl<int>&)>) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x602ea4f)\n#10 0x0000562bd7f9164b llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::processBuildVector<llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator, llvm::InstructionCost, llvm::TargetTransformInfo, llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP, llvm::SmallPtrSetImpl<llvm::Value*>>(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::Type*, llvm::TargetTransformInfo&, llvm::ArrayRef<llvm::Value*>&, llvm::slpvectorizer::BoUpSLP&, llvm::SmallPtrSetImpl<llvm::Value*>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x609a64b)\n#11 0x0000562bd7f92881 llvm::slpvectorizer::BoUpSLP::getEntryCost(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::ArrayRef<llvm::Value*>, llvm::SmallPtrSetImpl<llvm::Value*>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x609b881)\n#12 0x0000562bd7faaa12 llvm::slpvectorizer::BoUpSLP::getTreeCost(llvm::ArrayRef<llvm::Value*>) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x60b3a12)\n#13 0x0000562bd7fb43e8 llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x60bd3e8)\n#14 0x0000562bd7fb92b0 bool tryToVectorizeSequence<llvm::Value>(llvm::SmallVectorImpl<llvm::Value*>&, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::ArrayRef<llvm::Value*>, bool)>, bool, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\n#15 0x0000562bd7fbabe9 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x60c3be9)\n#16 0x0000562bd7fc268e llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#17 0x0000562bd7fc31d1 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x60cc1d1)\n#18 0x0000562bd79d6826 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x5adf826)\n#19 0x0000562bd5de82ef llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x3ef12ef)\n#20 0x0000562bd37a5226 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x18ae226)\n#21 0x0000562bd5de664b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x3eef64b)\n#22 0x0000562bd37a3b36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x18acb36)\n#23 0x0000562bd5de724d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x3ef024d)\n#24 0x0000562bd67194c7 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#25 0x0000562bd671d213 clang::emitBackendOutput(clang::CompilerInstance&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x4826213)\n#26 0x0000562bd6df1805 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x4efa805)\n#27 0x0000562bd8a8c2cc clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x6b952cc)\n#28 0x0000562bd70d6ca9 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x51dfca9)\n#29 0x0000562bd7054ad5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x515dad5)\n#30 0x0000562bd71bbf73 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x52c4f73)\n#31 0x0000562bd334425f cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x144d25f)\n#32 0x0000562bd333ab2a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#33 0x0000562bd333efe7 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x1447fe7)\n#34 0x0000562bd322eb3b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x1337b3b)\n#35 0x00007f13d1758d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#36 0x00007f13d1758e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#37 0x0000562bd333a255 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-20+0x1443255)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 20.0.0git (https://github.com/llvm/llvm-project.git 24bd9bc0b59d51c82e9a4d84c21d86d58d0ef6ce)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-929da7.c\nclangtk: note: diagnostic msg: /tmp/small-929da7.sh\nclangtk: note: diagnostic msg: \n\n********************\n[512] % \n[512] % cat small.c\nint a, b, d, e, f, i, n;\nlong c, g, h;\nunsigned o;\nint main() {\n  unsigned long j;\n  long l, m;\n  if (0) {\n  k:\n    h = ~g;\n    l = g;\n    m = j;\n    i = d;\n  p:\n    b = g = i;\n    if (d) {\n    q:\n      j = a;\n      if (i || i >= a)\n      r:\n        if (f && h > a)\n          goto q;\n      goto s;\n    }\n    g = l;\n    j = m;\n  s:;\n  }\n  if (c) {\n    n = j % -1;\n    o = b;\n    if (n) {\n      g = d ^ j;\n      j = ~(1 / o);\n      if (!(n - 1))\n        goto r;\n      if (e)\n        goto p;\n    }\n    goto k;\n  }\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced reproducer: https://godbolt.org/z/MzcesqWz1\n```\n; bin/opt -passes=slp-vectorizer reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main(i64 %l.549) {\nentry:\n  %conv3 = sext i32 0 to i64\n  br label %if.then19\n\np:                                                ; preds = %if.end29, %if.end25\n  %l.0 = phi i64 [ %xor, %if.end29 ], [ %l.5493, %if.end25 ]\n  %m.0 = phi i64 [ %not21, %if.end29 ], [ %m.550, %if.end25 ]\n  br i1 false, label %s, label %q\n\nq:                                                ; preds = %land.lhs.true, %p\n  %xor39 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  %l.1 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  %m.1 = phi i64 [ 0, %p ], [ 0, %land.lhs.true ]\n  br i1 false, label %lor.lhs.false, label %r\n\nlor.lhs.false:                                    ; preds = %q\n  br i1 false, label %land.lhs.true, label %s\n\nr:                                                ; preds = %if.then19, %q\n  %xor38 = phi i64 [ %xor39, %q ], [ %xor, %if.then19 ]\n  %j.0 = phi i64 [ %conv3, %q ], [ %not21, %if.then19 ]\n  %l.2 = phi i64 [ %l.1, %q ], [ %l.549, %if.then19 ]\n  %m.2 = phi i64 [ %m.1, %q ], [ %m.550, %if.then19 ]\n  br i1 false, label %s, label %land.lhs.true\n\nland.lhs.true:                                    ; preds = %r, %lor.lhs.false\n  %xor37 = phi i64 [ %xor38, %r ], [ 0, %lor.lhs.false ]\n  %j.1 = phi i64 [ %j.0, %r ], [ 0, %lor.lhs.false ]\n  %l.3 = phi i64 [ %l.2, %r ], [ 0, %lor.lhs.false ]\n  %m.3 = phi i64 [ %m.2, %r ], [ 0, %lor.lhs.false ]\n  br i1 false, label %q, label %s\n\ns:                                                ; preds = %land.lhs.true, %r, %lor.lhs.false, %p\n  %xor36 = phi i64 [ %xor37, %land.lhs.true ], [ %xor38, %r ], [ %xor39, %lor.lhs.false ], [ %l.0, %p ]\n  %j.2 = phi i64 [ %j.1, %land.lhs.true ], [ %j.0, %r ], [ %conv3, %lor.lhs.false ], [ %m.0, %p ]\n  %l.4 = phi i64 [ %l.3, %land.lhs.true ], [ %l.2, %r ], [ %l.1, %lor.lhs.false ], [ %l.0, %p ]\n  %m.4 = phi i64 [ %m.3, %land.lhs.true ], [ %m.2, %r ], [ %m.1, %lor.lhs.false ], [ %m.0, %p ]\n  br label %if.then19\n\nif.then19:                                        ; preds = %s, %entry\n  %m.550 = phi i64 [ 0, %entry ], [ %m.4, %s ]\n  %l.5493 = phi i64 [ 0, %entry ], [ %l.4, %s ]\n  %xor = xor i64 0, 0\n  %not21 = xor i64 0, 0\n  br i1 false, label %r, label %if.end25\n\nif.end25:                                         ; preds = %if.then19\n  br i1 false, label %if.end29, label %p\n\nif.end29:                                         ; preds = %if.end25\n  br label %p\n}\n\n```"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}