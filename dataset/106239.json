{
  "bug_id": "106239",
  "issue_url": "https://github.com/llvm/llvm-project/issues/106239",
  "bug_type": "crash",
  "base_commit": "15405b32b1cdbefab9ce1b1f301a51ae25404037",
  "knowledge_cutoff": "2024-08-27T15:51:29Z",
  "lit_test_dir": [
    "llvm/test/Transforms/IndVarSimplify"
  ],
  "hints": {
    "fix_commit": "c9a5e1b665dbba898e9981fd7d48881947e6560e",
    "components": [
      "SimplifyIndVar"
    ],
    "files": [
      "llvm/lib/Transforms/Utils/SimplifyIndVar.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyIndVar.cpp": [
        [
          1928,
          1945
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyIndVar.cpp": [
        "WidenIV::widenIVUse",
        "NarrowIVDefUse"
      ]
    }
  },
  "patch": "commit c9a5e1b665dbba898e9981fd7d48881947e6560e\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Aug 28 12:54:14 2024 +0200\n\n    [IndVars] Check if WideInc available before trying to use it\n    \n    WideInc/WideIncExpr can be null. Previously this worked out\n    because the comparison with WideIncExpr would fail. Now we have\n    accesses to WideInc prior to that. Avoid the issue with an\n    explicit check.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/106239.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp b/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp\nindex 8e3a14bb4f6d..a950a4f57ef4 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp\n@@ -1928,18 +1928,24 @@ Instruction *WidenIV::widenIVUse(WidenIV::NarrowIVDefUse DU,\n     if (!WideAddRec.first)\n       return nullptr;\n \n-    // Reuse the IV increment that SCEVExpander created. Recompute flags, unless\n-    // the flags for both increments agree and it is safe to use the ones from\n-    // the original inc. In that case, the new use of the wide increment won't\n-    // be more poisonous.\n-    bool NeedToRecomputeFlags =\n-        !SCEVExpander::canReuseFlagsFromOriginalIVInc(OrigPhi, WidePhi,\n-                                                      DU.NarrowUse, WideInc) ||\n-        DU.NarrowUse->hasNoUnsignedWrap() != WideInc->hasNoUnsignedWrap() ||\n-        DU.NarrowUse->hasNoSignedWrap() != WideInc->hasNoSignedWrap();\n+    auto CanUseWideInc = [&]() {\n+      if (!WideInc)\n+        return false;\n+      // Reuse the IV increment that SCEVExpander created. Recompute flags,\n+      // unless the flags for both increments agree and it is safe to use the\n+      // ones from the original inc. In that case, the new use of the wide\n+      // increment won't be more poisonous.\n+      bool NeedToRecomputeFlags =\n+          !SCEVExpander::canReuseFlagsFromOriginalIVInc(\n+              OrigPhi, WidePhi, DU.NarrowUse, WideInc) ||\n+          DU.NarrowUse->hasNoUnsignedWrap() != WideInc->hasNoUnsignedWrap() ||\n+          DU.NarrowUse->hasNoSignedWrap() != WideInc->hasNoSignedWrap();\n+      return WideAddRec.first == WideIncExpr &&\n+             Rewriter.hoistIVInc(WideInc, DU.NarrowUse, NeedToRecomputeFlags);\n+    };\n+\n     Instruction *WideUse = nullptr;\n-    if (WideAddRec.first == WideIncExpr &&\n-        Rewriter.hoistIVInc(WideInc, DU.NarrowUse, NeedToRecomputeFlags))\n+    if (CanUseWideInc())\n       WideUse = WideInc;\n     else {\n       WideUse = cloneIVUser(DU, WideAddRec.first);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/IndVarSimplify/pr106239.ll",
      "commands": [
        "opt -S -passes=indvars < %s"
      ],
      "tests": [
        {
          "test_name": "m",
          "test_body": "target datalayout = \"n8:16:32:64\"\n\ndefine i32 @m() {\nentry:\n  %div.i4 = sdiv i32 1, 0\n  br label %for.body.i6\n\nfor.body.i6:                                      ; preds = %if.end.i, %entry\n  %add57.i = phi i32 [ %add.i7, %if.end.i ], [ 0, %entry ]\n  br i1 true, label %i.exit, label %if.end.i\n\nif.end.i:                                         ; preds = %for.body.i6\n  %add.i7 = add i32 %add57.i, %div.i4\n  %conv.i = zext i32 %add57.i to i64\n  store i64 %conv.i, ptr null, align 8\n  br label %for.body.i6\n\ni.exit:                                           ; preds = %for.body.i6\n  ret i32 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Crash with O2 optimization flag",
    "body": "I compiled this code with -O2 flag and it crashed. The code is:\r\n\r\n```c\r\n#include <stdint.h>\r\nlong a, c;\r\nunsigned d;\r\nint32_t g;\r\nuint8_t h[];\r\nlong b(long p1, long k) {\r\n  long e = k;\r\n  int b = 0;\r\n  while (e) {\r\n    e /= 10;\r\n    b++;\r\n  }\r\n  for (int f = 0; f < b; f++)\r\n    p1 *= 10;\r\n  a = p1 + k;\r\n  return a;\r\n}\r\nlong i(int p1, int, int l) {\r\n  int j = l / p1;\r\n  for (int f = 0; f < p1; f++) {\r\n    if (d > l)\r\n      break;\r\n    c = d += j;\r\n  }\r\n}\r\nuint32_t m() {\r\n  for (g = 8; b(35, 46) - 3546 + g >= 0; g--)\r\n    ;\r\n  h[i(g + 1, 0, -4294967221)];\r\n}\r\n```\r\n\r\nThe crash is: clang: /root/llvm-project/llvm/include/llvm/Support/Casting.h:662: decltype(auto) llvm::dyn_cast(From*) [with To = llvm::BinaryOperator; From = llvm::Instruction]: Assertion `detail::isPresent(Val) && \"dyn_cast on a non-existent value\"' failed.\r\n\r\n\r\nThe details can be found here: https://godbolt.org/z/37WsGxMcv",
    "author": "cardigan1008",
    "labels": [
      "regression",
      "release:backport",
      "confirmed",
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "shafik",
        "body": "Looks like a regression, does not crash in clang-18: https://godbolt.org/z/1zYqs3sbz"
      },
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://godbolt.org/z/bbdhPxx5E\r\n\r\n```\r\n; bin/opt -passes=indvars reduced.ll -S\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\n\r\ndefine i32 @m() {\r\nentry:\r\n  %div.i4 = sdiv i32 1, 0\r\n  br label %for.body.i6\r\n\r\nfor.body.i6:                                      ; preds = %if.end.i, %entry\r\n  %add57.i = phi i32 [ %add.i7, %if.end.i ], [ 0, %entry ]\r\n  br i1 true, label %i.exit, label %if.end.i\r\n\r\nif.end.i:                                         ; preds = %for.body.i6\r\n  %add.i7 = add i32 %add57.i, %div.i4\r\n  %conv.i = zext i32 %add57.i to i64\r\n  store i64 %conv.i, ptr null, align 8\r\n  br label %for.body.i6\r\n\r\ni.exit:                                           ; preds = %for.body.i6\r\n  ret i32 0\r\n}\r\n```\r\ncc @nikic"
      },
      {
        "author": "DimitryAndric",
        "body": "This regressed with `llvmorg-19-init-02822-g`4db93e5d564 (\"[IndVars] Recompute flags if needed in widenIVUse of IV increment. (#82352)\") by @fhahn."
      },
      {
        "author": "nikic",
        "body": "/cherry-pick c9a5e1b665dbba898e9981fd7d48881947e6560e"
      },
      {
        "author": "llvmbot",
        "body": "/pull-request llvm/llvm-project#106892"
      }
    ]
  }
}
