{
  "bug_id": "107139",
  "issue_url": "https://github.com/llvm/llvm-project/issues/107139",
  "bug_type": "crash",
  "base_commit": "5d17293caaf0f62ea94fecc137b9b6f07c659dac",
  "knowledge_cutoff": "2024-09-03T18:28:59Z",
  "lit_test_dir": [
    "llvm/test/Transforms/Coroutines"
  ],
  "hints": {
    "fix_commit": "853bff2122e1f42398587f76234c05d56f16318e",
    "components": [
      "Coroutines"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Coroutines/CoroSplit.cpp": [
        [
          2080,
          2091
        ],
        [
          2105,
          2117
        ],
        [
          2200,
          2205
        ],
        [
          2211,
          2217
        ],
        [
          2223,
          2236
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Coroutines/CoroSplit.cpp": [
        "CoroSplitPass::run",
        "replacePrepare",
        "splitCoroutine",
        "updateCallGraphAfterCoroutineSplit"
      ]
    }
  },
  "patch": "commit 853bff2122e1f42398587f76234c05d56f16318e\nAuthor: Yuxuan Chen <ych@fb.com>\nDate:   Thu Sep 12 10:45:20 2024 -0700\n\n    [Coroutines] properly update CallGraph in CoroSplit (#107935)\n    \n    Fixes https://github.com/llvm/llvm-project/issues/107139.\n    \n    We weren't updating the call graph properly in CoroSplit. This crash is\n    due to the await_suspend() function calling the coroutine, forming a\n    multi-node SCC. The issue bisected to\n    https://github.com/llvm/llvm-project/pull/79712 but I think this is red\n    herring. We haven't been properly updating the call graph.\n    \n    Added an example of such code as a test case.\n\ndiff --git a/llvm/lib/Transforms/Coroutines/CoroSplit.cpp b/llvm/lib/Transforms/Coroutines/CoroSplit.cpp\nindex dc3829d7f28e..8ea460badaad 100644\n--- a/llvm/lib/Transforms/Coroutines/CoroSplit.cpp\n+++ b/llvm/lib/Transforms/Coroutines/CoroSplit.cpp\n@@ -2080,12 +2080,13 @@ splitCoroutine(Function &F, SmallVectorImpl<Function *> &Clones,\n   return Shape;\n }\n \n-static void updateCallGraphAfterCoroutineSplit(\n+static LazyCallGraph::SCC &updateCallGraphAfterCoroutineSplit(\n     LazyCallGraph::Node &N, const coro::Shape &Shape,\n     const SmallVectorImpl<Function *> &Clones, LazyCallGraph::SCC &C,\n     LazyCallGraph &CG, CGSCCAnalysisManager &AM, CGSCCUpdateResult &UR,\n     FunctionAnalysisManager &FAM) {\n \n+  auto *CurrentSCC = &C;\n   if (!Clones.empty()) {\n     switch (Shape.ABI) {\n     case coro::ABI::Switch:\n@@ -2105,13 +2106,16 @@ static void updateCallGraphAfterCoroutineSplit(\n     }\n \n     // Let the CGSCC infra handle the changes to the original function.\n-    updateCGAndAnalysisManagerForCGSCCPass(CG, C, N, AM, UR, FAM);\n+    CurrentSCC = &updateCGAndAnalysisManagerForCGSCCPass(CG, *CurrentSCC, N, AM,\n+                                                         UR, FAM);\n   }\n \n   // Do some cleanup and let the CGSCC infra see if we've cleaned up any edges\n   // to the split functions.\n   postSplitCleanup(N.getFunction());\n-  updateCGAndAnalysisManagerForFunctionPass(CG, C, N, AM, UR, FAM);\n+  CurrentSCC = &updateCGAndAnalysisManagerForFunctionPass(CG, *CurrentSCC, N,\n+                                                          AM, UR, FAM);\n+  return *CurrentSCC;\n }\n \n /// Replace a call to llvm.coro.prepare.retcon.\n@@ -2200,6 +2204,7 @@ PreservedAnalyses CoroSplitPass::run(LazyCallGraph::SCC &C,\n   if (Coroutines.empty() && PrepareFns.empty())\n     return PreservedAnalyses::all();\n \n+  auto *CurrentSCC = &C;\n   // Split all the coroutines.\n   for (LazyCallGraph::Node *N : Coroutines) {\n     Function &F = N->getFunction();\n@@ -2211,7 +2216,8 @@ PreservedAnalyses CoroSplitPass::run(LazyCallGraph::SCC &C,\n     coro::Shape Shape =\n         splitCoroutine(F, Clones, FAM.getResult<TargetIRAnalysis>(F),\n                        OptimizeFrame, MaterializableCallback);\n-    updateCallGraphAfterCoroutineSplit(*N, Shape, Clones, C, CG, AM, UR, FAM);\n+    CurrentSCC = &updateCallGraphAfterCoroutineSplit(\n+        *N, Shape, Clones, *CurrentSCC, CG, AM, UR, FAM);\n \n     auto &ORE = FAM.getResult<OptimizationRemarkEmitterAnalysis>(F);\n     ORE.emit([&]() {\n@@ -2223,14 +2229,14 @@ PreservedAnalyses CoroSplitPass::run(LazyCallGraph::SCC &C,\n \n     if (!Shape.CoroSuspends.empty()) {\n       // Run the CGSCC pipeline on the original and newly split functions.\n-      UR.CWorklist.insert(&C);\n+      UR.CWorklist.insert(CurrentSCC);\n       for (Function *Clone : Clones)\n         UR.CWorklist.insert(CG.lookupSCC(CG.get(*Clone)));\n     }\n   }\n \n   for (auto *PrepareFn : PrepareFns) {\n-    replaceAllPrepares(PrepareFn, CG, C);\n+    replaceAllPrepares(PrepareFn, CG, *CurrentSCC);\n   }\n \n   return PreservedAnalyses::none();\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/Coroutines/gh107139-split-in-scc.ll",
      "commands": [
        "opt < %s -passes='cgscc(coro-split)' -S"
      ],
      "tests": [
        {
          "test_name": "foo",
          "test_body": "target triple = \"x86_64-redhat-linux-gnu\"\n\n; Function Attrs: presplitcoroutine\ndefine void @foo() #0 personality ptr null {\nentry:\n  %0 = call token @llvm.coro.id(i32 0, ptr null, ptr null, ptr null)\n  %1 = call ptr @llvm.coro.begin(token %0, ptr null)\n  %2 = call token @llvm.coro.save(ptr null)\n  %3 = call i8 @llvm.coro.suspend(token none, i1 false)\n  %4 = call token @llvm.coro.save(ptr null)\n  call void @llvm.coro.await.suspend.void(ptr null, ptr null, ptr @bar)\n  ret void\n}\n\ndeclare void @bar(ptr, ptr)\n\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)\ndeclare token @llvm.coro.id(i32, ptr readnone, ptr nocapture readonly, ptr) #1\n\n; Function Attrs: nounwind\ndeclare ptr @llvm.coro.begin(token, ptr writeonly) #2\n\n; Function Attrs: nomerge nounwind\ndeclare token @llvm.coro.save(ptr) #3\n\ndeclare void @llvm.coro.await.suspend.void(ptr, ptr, ptr)\n\n; Function Attrs: nounwind\ndeclare i8 @llvm.coro.suspend(token, i1) #2\n\nattributes #0 = { presplitcoroutine }\nattributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }\nattributes #2 = { nounwind }\nattributes #3 = { nomerge nounwind }\n"
        },
        {
          "test_name": "bar",
          "test_body": "target triple = \"x86_64-redhat-linux-gnu\"\n\n; Function Attrs: presplitcoroutine\ndeclare void @foo() #0\n\ndefine void @bar(ptr %0, ptr %1) {\nentry:\n  call void @foo()\n  ret void\n}\n\nattributes #0 = { presplitcoroutine }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "\"Invalidated the current SCC\" assertion failure after #79712",
    "body": "For the source file in https://gist.github.com/smeenai/fcd14380467e813a28f1ef8c5484b775 (reduced from a large example that uses libunifex; it's probably possible to reduce this further but I'm not at all familiar with coroutines), the following command succeeds with Clang 18 but fails with Clang 19 and trunk:\r\n\r\n```\r\n$ clang -c -o /dev/null coroutine_crash.cpp -std=c++20 -w\r\nclang: llvm/lib/Analysis/CGSCCPassManager.cpp:1167: LazyCallGraph::SCC &updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph &, LazyCallGraph::SCC &, LazyCallGraph::Node &, llvm::CGSCCAnalysisManager &, llvm::CGSCCUpdateResult &, llvm::FunctionAnalysisManager &, bool): Assertion `!UR.InvalidatedSCCs.count(C) && \"Invalidated the current SCC!\"' failed.\r\n```\r\n\r\nI bisected this to #79712. CC @fpasserby, @ChuanqiXu9, and @yuxuanchen1997 ",
    "author": "smeenai",
    "labels": [
      "crash",
      "coroutines",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "yuxuanchen1997",
        "body": "I took a look at this and I think it was due to incorrect call graph updates. `updateCGAndAnalysisManagerFor(CGSCC|Function)Pass` seems to return an updated SCC but we discarded the updated SCC.\r\n\r\nSee example usage: https://github.com/llvm/llvm-project/blob/main/llvm/lib/Analysis/CGSCCPassManager.cpp#L561-L562\r\nSee implementation: https://github.com/llvm/llvm-project/blob/main/llvm/lib/Analysis/CGSCCPassManager.cpp#L1170-L1175\r\n\r\nI have a patch https://github.com/llvm/llvm-project/pull/107935 but still need some time for a test case. "
      },
      {
        "author": "yuxuanchen1997",
        "body": "This happens when foo has is not a single node SCC:\r\n```\r\ndefine void @foo() presplitcoroutine personality ptr null {\r\nentry:\r\n  %0 = call token @llvm.coro.id(i32 0, ptr null, ptr null, ptr null)\r\n  %1 = call ptr @llvm.coro.begin(token %0, ptr null)\r\n  %2 = call token @llvm.coro.save(ptr null)\r\n  %3 = call i8 @llvm.coro.suspend(token none, i1 false)\r\n  %4 = call token @llvm.coro.save(ptr null)\r\n  call void @llvm.coro.await.suspend.void(ptr null, ptr null, ptr @bar)\r\n  ret void\r\n}\r\n\r\ndefine void @bar(ptr %0, ptr %1) {\r\nentry:\r\n  call void @foo()\r\n  ret void\r\n}\r\n\r\ndeclare token @llvm.coro.id(i32, ptr readnone, ptr nocapture readonly, ptr) #0\r\ndeclare ptr @llvm.coro.begin(token, ptr writeonly) nounwind\r\ndeclare token @llvm.coro.save(ptr) nomerge nounwind\r\ndeclare void @llvm.coro.await.suspend.void(ptr, ptr, ptr)\r\ndeclare i8 @llvm.coro.suspend(token, i1) nounwind\r\n\r\nattributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }\r\n```\r\n\r\nRepro the crash with `clang -O0 bad.ll`."
      },
      {
        "author": "yuxuanchen1997",
        "body": "The 3rd argument to `@llvm.coro.await.suspend` is the `await_suspend` function in C++. This happens when `await_suspend()` calls the same coroutine from its body. "
      }
    ]
  }
}