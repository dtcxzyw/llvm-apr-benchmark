{
  "bug_id": "152998",
  "issue_url": "https://github.com/llvm/llvm-project/issues/152998",
  "bug_type": "crash",
  "base_commit": "d0246fe1e79c6ea06b6b72f66a71a96a3342aa42",
  "knowledge_cutoff": "2025-08-11T11:57:40Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LICM"
  ],
  "hints": {
    "fix_commit": "d1408667de830da8817c24cb9788da6caae551c7",
    "components": [
      "MemorySSAUpdater"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        [
          411,
          427
        ],
        [
          504,
          514
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/MemorySSAUpdater.cpp": [
        "MemorySSAUpdater::fixupDefs",
        "MemorySSAUpdater::insertDef"
      ]
    }
  },
  "patch": "commit d1408667de830da8817c24cb9788da6caae551c7\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Thu Sep 4 10:23:29 2025 +0200\n\n    [MemorySSA] Don't create phi nodes in fixupDefs() (#156021)\n    \n    The general flow when inserting MemoryDefs is:\n    \n     * Insert the def and set it's defining access (may insert phis)\n     * Insert IDF phis\n     * Update defining access for defs after the new one (fixupDefs)\n     * Rename uses if requested\n    \n    fixupDefs() uses getPreviousDef() which can create new MemoryPHIs, but\n    for which we're not going to insert IDF phis, so the required dominance\n    property may not hold.\n    \n    I believe this is a leftover from a time before the \"Insert IDF phis\"\n    step existed. Now that step should already ensure that all necessary\n    MemoryPhis have been inserted, and we only need to update them.\n    \n    The fixupDefs() implementation was also returning after updating a\n    single access, which is not right.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/47875.\n    Fixes https://github.com/llvm/llvm-project/issues/117157.\n    Fixes https://github.com/llvm/llvm-project/issues/152998.\n    Fixes https://github.com/llvm/llvm-project/issues/155161.\n    Fixes https://github.com/llvm/llvm-project/issues/155184.\n\ndiff --git a/llvm/lib/Analysis/MemorySSAUpdater.cpp b/llvm/lib/Analysis/MemorySSAUpdater.cpp\nindex ecfecb03c375..bb3e679219ae 100644\n--- a/llvm/lib/Analysis/MemorySSAUpdater.cpp\n+++ b/llvm/lib/Analysis/MemorySSAUpdater.cpp\n@@ -411,17 +411,11 @@ void MemorySSAUpdater::insertDef(MemoryDef *MD, bool RenameUses) {\n     FixupList.push_back(MD);\n   }\n \n-  // Remember the index where we stopped inserting new phis above, since the\n-  // fixupDefs call in the loop below may insert more, that are already minimal.\n+  // Update defining access of following defs.\n   unsigned NewPhiIndexEnd = InsertedPHIs.size();\n-\n-  while (!FixupList.empty()) {\n-    unsigned StartingPHISize = InsertedPHIs.size();\n-    fixupDefs(FixupList);\n-    FixupList.clear();\n-    // Put any new phis on the fixup list, and process them\n-    FixupList.append(InsertedPHIs.begin() + StartingPHISize, InsertedPHIs.end());\n-  }\n+  fixupDefs(FixupList);\n+  assert(NewPhiIndexEnd == InsertedPHIs.size() &&\n+         \"Should not insert new phis during fixupDefs()\");\n \n   // Optimize potentially non-minimal phis added in this method.\n   unsigned NewPhiSize = NewPhiIndexEnd - NewPhiIndex;\n@@ -504,11 +498,8 @@ void MemorySSAUpdater::fixupDefs(const SmallVectorImpl<WeakVH> &Vars) {\n         assert(MSSA->dominates(NewDef, FirstDef) &&\n                \"Should have dominated the new access\");\n \n-        // This may insert new phi nodes, because we are not guaranteed the\n-        // block we are processing has a single pred, and depending where the\n-        // store was inserted, it may require phi nodes below it.\n-        cast<MemoryDef>(FirstDef)->setDefiningAccess(getPreviousDef(FirstDef));\n-        return;\n+        cast<MemoryDef>(FirstDef)->setDefiningAccess(NewDef);\n+        continue;\n       }\n       // We didn't find a def, so we must continue.\n       for (const auto *S : successors(FixupBlock)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LICM/pr117157.ll",
      "commands": [
        "opt -S -passes=licm -verify-memoryssa < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(ptr %p) {\n;\nentry:\n  br label %loop0\n\nloop0:                                            ; preds = %loop0.latch, %entry\n  br label %loop1\n\nloop1:                                            ; preds = %loop1, %loop0\n  %dec10 = phi i64 [ 0, %loop0 ], [ 1, %loop1 ]\n  store i64 %dec10, ptr %p\n  br i1 false, label %loop1.exit, label %loop1\n\nloop1.exit:                                       ; preds = %loop1\n  switch i32 0, label %loop0.latch [\n  i32 0, label %loop0.latch\n  i32 2, label %loop3.preheader\n  i32 1, label %loop2\n  ]\n\nloop2:                                            ; preds = %loop2.latch, %loop1.exit\n  br i1 false, label %loop0.latch, label %loop3.preheader\n\nloop3.preheader:                                  ; preds = %loop1.exit, %loop2\n  br label %loop3\n\nloop3:                                            ; preds = %loop3.preheader, %loop3\n  switch i32 0, label %exit [\n  i32 0, label %loop3\n  i32 1, label %loop2.latch\n  ]\n\nloop2.latch:                                      ; preds = %loop3\n  br label %loop2\n\nloop0.latch:                                      ; preds = %loop2, %loop1.exit, %loop1.exit\n  store i64 0, ptr %p\n  br label %loop0\n\nexit:                                             ; preds = %loop3\n  store i64 1, ptr %p\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O3 on x86_64-linux-gnu: Assertion `MSSA->dominates(NewDef, FirstDef) && \"Should have dominated the new access\"' failed",
    "body": "Compiler Explorer: https://godbolt.org/z/bGf17cfaK\n\nNote:\n- fail: 16.0.0 and later\n- work: 15.0.0 and earlier\n\n```\n[522] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git a976843033485ff44bb4bbb0b0b8a537956b4c40)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[523] % \n[523] % clangtk -O3 small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:504: void llvm::MemorySSAUpdater::fixupDefs(const llvm::SmallVectorImpl<llvm::WeakVH>&): Assertion `MSSA->dominates(NewDef, FirstDef) && \"Should have dominated the new access\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O3 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/bug126/dup/red1 -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/bug126/dup/red1 -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -ferror-limit 19 -fmessage-length=100 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-15a2f9.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"require<globals-aa>,function(invalidate<aa>),require<profile-summary>,cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,argpromotion,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,speculative-execution<only-if-divergent-target>,jump-threading,correlated-propagation,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,reassociate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,loop(loop-idiom,indvars,extra-simple-loop-unswitch-passes,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyopt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split,coro-annotation-elide)),function(invalidate<should-not-run-function-passes>),cgscc(devirt<4>())\" on module \"small.c\"\n4.\tRunning pass \"cgscc(devirt<4>(inline,function-attrs<skip-non-recursive-function-attrs>,argpromotion,openmp-opt-cgscc,function<eager-inv;no-rerun>(sroa<modify-cfg>,early-cse<memssa>,speculative-execution<only-if-divergent-target>,jump-threading,correlated-propagation,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,aggressive-instcombine,libcalls-shrinkwrap,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,reassociate,constraint-elimination,loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>),simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>,loop(loop-idiom,indvars,extra-simple-loop-unswitch-passes,loop-deletion,loop-unroll-full),sroa<modify-cfg>,vector-combine,mldst-motion<no-split-footer-bb>,gvn<>,sccp,bdce,instcombine<max-iterations=1;no-verify-fixpoint>,jump-threading,correlated-propagation,adce,memcpyopt,dse,move-auto-init,loop-mssa(licm<allowspeculation>),coro-elide,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,instcombine<max-iterations=1;no-verify-fixpoint>),function-attrs,function(require<should-not-run-function-passes>),coro-split,coro-annotation-elide))\" on module \"small.c\"\n5.\tRunning pass \"loop-mssa(loop-instsimplify,loop-simplifycfg,licm<no-allowspeculation>,loop-rotate<header-duplication;no-prepare-for-lto>,licm<allowspeculation>,simple-loop-unswitch<nontrivial;trivial>)\" on function \"main\"\n #0 0x000055b1cc5dcd70 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x424ad70)\n #1 0x000055b1cc5d9a1f llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4247a1f)\n #2 0x000055b1cc5d9b72 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007efc86a3c520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007efc86a909fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007efc86a909fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007efc86a909fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007efc86a3c476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007efc86a227f3 abort ./stdlib/abort.c:81:7\n #9 0x00007efc86a2271b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007efc86a33e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x000055b1cb4f78cf llvm::MemorySSAUpdater::fixupDefs(llvm::SmallVectorImpl<llvm::WeakVH> const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x31658cf)\n#12 0x000055b1cb4f7aaf llvm::MemorySSAUpdater::insertDef(llvm::MemoryDef*, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3165aaf)\n#13 0x000055b1cc3d50ff (anonymous namespace)::LoopPromoter::doExtraRewritesBeforeFinalDeletion() LICM.cpp:0:0\n#14 0x000055b1cc766a87 llvm::LoadAndStorePromoter::run(llvm::SmallVectorImpl<llvm::Instruction*> const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x43d4a87)\n#15 0x000055b1cc3d27f8 llvm::promoteLoopAccessesToScalars(llvm::SmallSetVector<llvm::Value*, 8u> const&, llvm::SmallVectorImpl<llvm::BasicBlock*>&, llvm::SmallVectorImpl<llvm::ilist_iterator_w_bits<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void, true, llvm::BasicBlock>, false, false>>&, llvm::SmallVectorImpl<llvm::MemoryAccess*>&, llvm::PredIteratorCache&, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::TargetLibraryInfo const*, llvm::TargetTransformInfo*, llvm::Loop*, llvm::MemorySSAUpdater&, llvm::ICFLoopSafetyInfo*, llvm::OptimizationRemarkEmitter*, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x40407f8)\n#16 0x000055b1cc3df89e (anonymous namespace)::LoopInvariantCodeMotion::runOnLoop(llvm::Loop*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::TargetLibraryInfo*, llvm::TargetTransformInfo*, llvm::ScalarEvolution*, llvm::MemorySSA*, llvm::OptimizationRemarkEmitter*, bool) (.part.0) LICM.cpp:0:0\n#17 0x000055b1cc3e13d3 llvm::LICMPass::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x404f3d3)\n#18 0x000055b1c968a336 llvm::detail::PassModel<llvm::Loop, llvm::LICMPass, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f8336)\n#19 0x000055b1cc3e6d9f std::optional<llvm::PreservedAnalyses> llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runSinglePass<llvm::Loop, std::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>>(llvm::Loop&, std::unique_ptr<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>, std::default_delete<llvm::detail::PassConcept<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>>>&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&, llvm::PassInstrumentation&) (.isra.0) LoopPassManager.cpp:0:0\n#20 0x000055b1cc3e8090 llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::runWithoutLoopNestPasses(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4056090)\n#21 0x000055b1cc3e821c llvm::PassManager<llvm::Loop, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&>::run(llvm::Loop&, llvm::AnalysisManager<llvm::Loop, llvm::LoopStandardAnalysisResults&>&, llvm::LoopStandardAnalysisResults&, llvm::LPMUpdater&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x405621c)\n#22 0x000055b1cc3e92ef llvm::FunctionToLoopPassAdaptor::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x40572ef)\n#23 0x000055b1c968a1e6 llvm::detail::PassModel<llvm::Function, llvm::FunctionToLoopPassAdaptor, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f81e6)\n#24 0x000055b1cbf35617 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba3617)\n#25 0x000055b1c968a486 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f8486)\n#26 0x000055b1cb386871 llvm::CGSCCToFunctionPassAdaptor::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x2ff4871)\n#27 0x000055b1c9687756 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::CGSCCToFunctionPassAdaptor, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f5756)\n#28 0x000055b1cb37de1c llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x2febe1c)\n#29 0x000055b1cd6c2ca6 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5330ca6)\n#30 0x000055b1cb387b6d llvm::DevirtSCCRepeatedPass::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x2ff5b6d)\n#31 0x000055b1cd6c2cf6 llvm::detail::PassModel<llvm::LazyCallGraph::SCC, llvm::DevirtSCCRepeatedPass, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5330cf6)\n#32 0x000055b1cb382796 llvm::ModuleToPostOrderCGSCCPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x2ff0796)\n#33 0x000055b1c9687706 llvm::detail::PassModel<llvm::Module, llvm::ModuleToPostOrderCGSCCPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x12f5706)\n#34 0x000055b1cbf33954 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba1954)\n#35 0x000055b1cdde6698 llvm::ModuleInlinerWrapperPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5a54698)\n#36 0x000055b1cd6c2346 llvm::detail::PassModel<llvm::Module, llvm::ModuleInlinerWrapperPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5330346)\n#37 0x000055b1cbf33954 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3ba1954)\n#38 0x000055b1cc883683 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#39 0x000055b1cc887c23 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x44f5c23)\n#40 0x000055b1ccf8154f clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4bef54f)\n#41 0x000055b1ce9d538c clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x664338c)\n#42 0x000055b1cd29ebe9 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f0cbe9)\n#43 0x000055b1cd21a5b5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4e885b5)\n#44 0x000055b1cd38f6b8 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4ffd6b8)\n#45 0x000055b1c920bf98 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe79f98)\n#46 0x000055b1c920259a ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#47 0x000055b1c9207054 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe75054)\n#48 0x000055b1c90d32ab main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd412ab)\n#49 0x00007efc86a23d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#50 0x00007efc86a23e40 call_init ./csu/../csu/libc-start.c:128:20\n#51 0x00007efc86a23e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#52 0x000055b1c9201cc5 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xe6fcc5)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git a976843033485ff44bb4bbb0b0b8a537956b4c40)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-0daa56.c\nclangtk: note: diagnostic msg: /tmp/small-0daa56.sh\nclangtk: note: diagnostic msg: \n\n********************\n[524] % \n[524] % cat small.c\nint a[9], b, c, h, l, m;\nint k(int n[]) {\n  for (int i = 0; i < 2; i++)\n    for (int j; j < 9; j++)\n      if (n[0] != a[j])\n        return b;\n  if (b)\n    __builtin_abort();\n  return 0;\n}\nvoid ac() {\n  h = 1;\n  for (; h; h--)\n    k((int[]){0});\n  c = 0;\n  for (; c <= 1; c++) {\n    if (l)\n      goto e;\n    goto f;\n  g:\n    if (m > 0)\n      goto e;\n  f:\n  e:\n    if (m)\n      goto g;\n  }\n}\nint main() {\n  while (c)\n    ac();\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "loopoptim",
      "crash",
      "regression:16"
    ],
    "comments": [
      {
        "author": "shafik",
        "body": "https://godbolt.org/z/vPhxE18bh"
      },
      {
        "author": "XChy",
        "body": "Reduced:\n```llvm\n; RUN: opt < %s -passes=licm -S | FileCheck %s\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main(ptr %h) {\nentry:\n  br label %while.cond\n\nwhile.cond:                                       ; preds = %ac.exit, %entry\n  br label %for.body.i\n\nfor.cond1.preheader.i:                            ; preds = %for.body.i\n  br i1 false, label %ethread-pre-split.i, label %ethread-pre-split.thread.i\n\nfor.body.i:                                       ; preds = %for.body.i, %while.cond\n  %dec.i1 = phi i32 [ 1, %for.body.i ], [ 0, %while.cond ]\n  store i32 %dec.i1, ptr %h, align 4\n  br i1 false, label %for.cond1.preheader.i, label %for.body.i\n\nethread-pre-split.i:                              ; preds = %ethread-pre-split.split.i, %for.cond1.preheader.i\n  br i1 false, label %ac.exit, label %ethread-pre-split.split.i\n\nethread-pre-split.thread.i:                       ; preds = %for.cond1.preheader.i\n  br i1 false, label %ac.exit, label %ethread-pre-split.split.i\n\nethread-pre-split.split.i:                        ; preds = %ethread-pre-split.thread.i, %ethread-pre-split.i\n  br i1 false, label %ethread-pre-split.split.split.i, label %ethread-pre-split.i\n\nethread-pre-split.split.split.i:                  ; preds = %ethread-pre-split.split.i\n  store i32 0, ptr null, align 4\n  ret i32 0\n\nac.exit:                                          ; preds = %ethread-pre-split.thread.i, %ethread-pre-split.i\n  store i32 0, ptr null, align 4\n  br label %while.cond\n}\n```"
      },
      {
        "author": "XChy",
        "body": "MemorySSAUpdater appears to be out of order when inserting the MSSA definition of the inserted store at `for.cond1.preheader.i`."
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "verified": true
}