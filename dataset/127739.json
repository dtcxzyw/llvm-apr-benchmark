{
  "bug_id": "127739",
  "issue_url": "https://github.com/llvm/llvm-project/issues/127739",
  "bug_type": "crash",
  "base_commit": "d6301b218c6698ceb0db1753c8de480d37d11cf8",
  "knowledge_cutoff": "2025-02-19T03:17:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/Scalarizer"
  ],
  "hints": {
    "fix_commit": "1440f02259abf585f0c2965bd4ececf0f3499405",
    "components": [
      "Scalarizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/Scalarizer.cpp": [
        [
          719,
          731
        ],
        [
          1083,
          1088
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/Scalarizer.cpp": [
        "ScalarizerVisitor::splitCall",
        "ScalarizerVisitor::visitExtractValueInst"
      ]
    }
  },
  "patch": "commit 1440f02259abf585f0c2965bd4ececf0f3499405\nAuthor: Deric C. <cheung.deric@gmail.com>\nDate:   Tue Mar 4 13:10:31 2025 -0800\n\n    [Scalarizer] Ensure valid VectorSplits for each struct element in `visitExtractValueInst` (#128538)\n    \n    Fixes #127739\n    \n    The `visitExtractValueInst` is missing a check that was present in\n    `splitCall` / `visitCallInst`.\n    This check ensures that each struct element has a VectorSplit, and that\n    each VectorSplit contains the same number of elements packed per\n    fragment.\n    \n    ---------\n    \n    Co-authored-by: Jay Foad <jay.foad@amd.com>\n\ndiff --git a/llvm/lib/Transforms/Scalar/Scalarizer.cpp b/llvm/lib/Transforms/Scalar/Scalarizer.cpp\nindex 2b27150112ad..820c8e12d244 100644\n--- a/llvm/lib/Transforms/Scalar/Scalarizer.cpp\n+++ b/llvm/lib/Transforms/Scalar/Scalarizer.cpp\n@@ -719,13 +719,12 @@ bool ScalarizerVisitor::splitCall(CallInst &CI) {\n     for (unsigned I = 1; I < CallType->getNumContainedTypes(); I++) {\n       std::optional<VectorSplit> CurrVS =\n           getVectorSplit(cast<FixedVectorType>(CallType->getContainedType(I)));\n-      // This case does not seem to happen, but it is possible for\n-      // VectorSplit.NumPacked >= NumElems. If that happens a VectorSplit\n-      // is not returned and we will bailout of handling this call.\n-      // The secondary bailout case is if NumPacked does not match.\n-      // This can happen if ScalarizeMinBits is not set to the default.\n-      // This means with certain ScalarizeMinBits intrinsics like frexp\n-      // will only scalarize when the struct elements have the same bitness.\n+      // It is possible for VectorSplit.NumPacked >= NumElems. If that happens a\n+      // VectorSplit is not returned and we will bailout of handling this call.\n+      // The secondary bailout case is if NumPacked does not match. This can\n+      // happen if ScalarizeMinBits is not set to the default. This means with\n+      // certain ScalarizeMinBits intrinsics like frexp will only scalarize when\n+      // the struct elements have the same bitness.\n       if (!CurrVS || CurrVS->NumPacked != VS->NumPacked)\n         return false;\n       if (isVectorIntrinsicWithStructReturnOverloadAtField(ID, I, TTI))\n@@ -1083,6 +1082,18 @@ bool ScalarizerVisitor::visitExtractValueInst(ExtractValueInst &EVI) {\n   std::optional<VectorSplit> VS = getVectorSplit(VecType);\n   if (!VS)\n     return false;\n+  for (unsigned I = 1; I < OpTy->getNumContainedTypes(); I++) {\n+    std::optional<VectorSplit> CurrVS =\n+        getVectorSplit(cast<FixedVectorType>(OpTy->getContainedType(I)));\n+    // It is possible for VectorSplit.NumPacked >= NumElems. If that happens a\n+    // VectorSplit is not returned and we will bailout of handling this call.\n+    // The secondary bailout case is if NumPacked does not match. This can\n+    // happen if ScalarizeMinBits is not set to the default. This means with\n+    // certain ScalarizeMinBits intrinsics like frexp will only scalarize when\n+    // the struct elements have the same bitness.\n+    if (!CurrVS || CurrVS->NumPacked != VS->NumPacked)\n+      return false;\n+  }\n   IRBuilder<> Builder(&EVI);\n   Scatterer Op0 = scatter(&EVI, Op, *VS);\n   assert(!EVI.getIndices().empty() && \"Make sure an index exists\");\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/Scalarizer/min-bits.ll",
      "commands": [
        "opt %s -passes='function(scalarizer<load-store;min-bits=16>,dce)' -S",
        "opt %s -passes='function(scalarizer<load-store;min-bits=32>,dce)' -S",
        "opt %s -passes='function(scalarizer<load-store;min-bits=64>,dce)' -S"
      ],
      "tests": [
        {
          "test_name": "load_add_store_v2i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @load_add_store_v2i16(ptr %pa, ptr %pb) {\n  %a = load <2 x i16>, ptr %pa, align 8\n  %b = load <2 x i16>, ptr %pb, align 8\n  %c = add <2 x i16> %a, %b\n  store <2 x i16> %c, ptr %pa, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "select_uniform_condition_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x half> @select_uniform_condition_v3f16(<3 x half> %a, <3 x half> %b, i1 %cc) {\n  %r = select i1 %cc, <3 x half> %a, <3 x half> %b\n  ret <3 x half> %r\n}\n"
        },
        {
          "test_name": "call_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x half> @call_v4f16(<4 x half> %a, <4 x half> %b) {\n  %r = call <4 x half> @llvm.minnum.v4f16(<4 x half> %a, <4 x half> %b)\n  ret <4 x half> %r\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <4 x half> @llvm.minnum.v4f16(<4 x half>, <4 x half>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "unary_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x half> @unary_v4f16(<4 x half> %a) {\n  %r = fneg <4 x half> %a\n  ret <4 x half> %r\n}\n"
        },
        {
          "test_name": "gep1_v4",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x ptr> @gep1_v4(ptr %base, <4 x i16> %a) {\n  %p = getelementptr i32, ptr %base, <4 x i16> %a\n  ret <4 x ptr> %p\n}\n"
        },
        {
          "test_name": "fptosi_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x i16> @fptosi_v3f16(<3 x half> %a) {\n  %r = fptosi <3 x half> %a to <3 x i16>\n  ret <3 x i16> %r\n}\n"
        },
        {
          "test_name": "binary_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x half> @binary_v2f16(<2 x half> %a, <2 x half> %b) {\n  %r = fadd <2 x half> %a, %b\n  ret <2 x half> %r\n}\n"
        },
        {
          "test_name": "gep3_v4",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x ptr> @gep3_v4(<4 x ptr> %base, <4 x i16> %a) {\n  %p = getelementptr i32, <4 x ptr> %base, <4 x i16> %a\n  ret <4 x ptr> %p\n}\n"
        },
        {
          "test_name": "fptosi_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x i16> @fptosi_v4f16(<4 x half> %a) {\n  %r = fptosi <4 x half> %a to <4 x i16>\n  ret <4 x i16> %r\n}\n"
        },
        {
          "test_name": "binary_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x half> @binary_v3f16(<3 x half> %a, <3 x half> %b) {\n  %r = fadd <3 x half> %a, %b\n  ret <3 x half> %r\n}\n"
        },
        {
          "test_name": "load_add_store_v4i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @load_add_store_v4i16(ptr %pa, ptr %pb) {\n  %a = load <4 x i16>, ptr %pa, align 8\n  %b = load <4 x i16>, ptr %pb, align 8\n  %c = add <4 x i16> %a, %b\n  store <4 x i16> %c, ptr %pa, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "select_uniform_condition_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x half> @select_uniform_condition_v2f16(<2 x half> %a, <2 x half> %b, i1 %cc) {\n  %r = select i1 %cc, <2 x half> %a, <2 x half> %b\n  ret <2 x half> %r\n}\n"
        },
        {
          "test_name": "shufflevector_shrink",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @shufflevector_shrink(ptr %pa) {\n  %a = load <4 x i16>, ptr %pa, align 8\n  %r = shufflevector <4 x i16> %a, <4 x i16> poison, <2 x i32> <i32 1, i32 2>\n  store <2 x i16> %r, ptr %pa, align 4\n  ret void\n}\n"
        },
        {
          "test_name": "phi_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @phi_v2f16(ptr %base, i64 %bound) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %x = phi <2 x half> [ zeroinitializer, %entry ], [ %x.next, %loop ]\n  %idx = phi i64 [ 0, %entry ], [ %idx.next, %loop ]\n  %p = getelementptr <2 x half>, ptr %base, i64 %idx\n  %a = load <2 x half>, ptr %p, align 2\n  %x.next = fadd <2 x half> %x, %a\n  %idx.next = add i64 %idx, 1\n  %cc = icmp ult i64 %idx.next, %bound\n  br i1 %cc, label %loop, label %end\n\nend:                                              ; preds = %loop\n  store <2 x half> %x.next, ptr %base, align 4\n  ret void\n}\n"
        },
        {
          "test_name": "frexp_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine noundef <2 x half> @frexp_v2f16(<2 x half> noundef %h) {\n  %r = call { <2 x half>, <2 x i32> } @llvm.frexp.v2f16.v2i32(<2 x half> %h)\n  %e0 = extractvalue { <2 x half>, <2 x i32> } %r, 0\n  ret <2 x half> %e0\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare { <2 x half>, <2 x i32> } @llvm.frexp.v2f16.v2i32(<2 x half>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "load_insertelement_v3i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x i16> @load_insertelement_v3i16(ptr %pa, i16 %b) {\n  %a = load <3 x i16>, ptr %pa, align 8\n  %r = insertelement <3 x i16> %a, i16 %b, i64 2\n  ret <3 x i16> %r\n}\n"
        },
        {
          "test_name": "load_add_store_v3i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @load_add_store_v3i16(ptr %pa, ptr %pb) {\n  %a = load <3 x i16>, ptr %pa, align 8\n  %b = load <3 x i16>, ptr %pb, align 8\n  %c = add <3 x i16> %a, %b\n  store <3 x i16> %c, ptr %pa, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "fptosi_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x i16> @fptosi_v2f16(<2 x half> %a) {\n  %r = fptosi <2 x half> %a to <2 x i16>\n  ret <2 x i16> %r\n}\n"
        },
        {
          "test_name": "insertelement_v4i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @insertelement_v4i16(ptr %p, <4 x i16> %a, i16 %b) {\n  %r = insertelement <4 x i16> %a, i16 %b, i64 3\n  store <4 x i16> %r, ptr %p, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "load_insertelement_v2i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x i16> @load_insertelement_v2i16(ptr %pa, i16 %b) {\n  %a = load <2 x i16>, ptr %pa, align 4\n  %r = insertelement <2 x i16> %a, i16 %b, i64 1\n  ret <2 x i16> %r\n}\n"
        },
        {
          "test_name": "load_insertelement_v4i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x i16> @load_insertelement_v4i16(ptr %pa, i16 %b) {\n  %a = load <4 x i16>, ptr %pa, align 8\n  %r = insertelement <4 x i16> %a, i16 %b, i64 3\n  ret <4 x i16> %r\n}\n"
        },
        {
          "test_name": "insertelement_v2i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @insertelement_v2i16(ptr %p, <2 x i16> %a, i16 %b) {\n  %r = insertelement <2 x i16> %a, i16 %b, i64 1\n  store <2 x i16> %r, ptr %p, align 4\n  ret void\n}\n"
        },
        {
          "test_name": "shufflevector_grow",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @shufflevector_grow(ptr %pa, ptr %pb) {\n  %a = load <2 x i16>, ptr %pa, align 4\n  %b = load <2 x i16>, ptr %pb, align 4\n  %r = shufflevector <2 x i16> %a, <2 x i16> %b, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\n  store <4 x i16> %r, ptr %pa, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "uadd_with_overflow_v3i32",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x i32> @uadd_with_overflow_v3i32(<3 x i32> %a, <3 x i32> %b) {\n  %t = call { <3 x i32>, <3 x i1> } @llvm.uadd.with.overflow.v3i32(<3 x i32> %a, <3 x i32> %b)\n  %r = extractvalue { <3 x i32>, <3 x i1> } %t, 0\n  ret <3 x i32> %r\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare { <3 x i32>, <3 x i1> } @llvm.uadd.with.overflow.v3i32(<3 x i32>, <3 x i32>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "insertelement_v3i16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @insertelement_v3i16(ptr %p, <3 x i16> %a, i16 %b) {\n  %r = insertelement <3 x i16> %a, i16 %b, i64 2\n  store <3 x i16> %r, ptr %p, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "call_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x half> @call_v2f16(<2 x half> %a, <2 x half> %b) {\n  %r = call <2 x half> @llvm.minnum.v2f16(<2 x half> %a, <2 x half> %b)\n  ret <2 x half> %r\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <2 x half> @llvm.minnum.v2f16(<2 x half>, <2 x half>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "phi_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @phi_v3f16(ptr %base, i64 %bound) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %x = phi <3 x half> [ zeroinitializer, %entry ], [ %x.next, %loop ]\n  %idx = phi i64 [ 0, %entry ], [ %idx.next, %loop ]\n  %p = getelementptr <3 x half>, ptr %base, i64 %idx\n  %a = load <3 x half>, ptr %p, align 2\n  %x.next = fadd <3 x half> %x, %a\n  %idx.next = add i64 %idx, 1\n  %cc = icmp ult i64 %idx.next, %bound\n  br i1 %cc, label %loop, label %end\n\nend:                                              ; preds = %loop\n  store <3 x half> %x.next, ptr %base, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "phi_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @phi_v4f16(ptr %base, i64 %bound) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %x = phi <4 x half> [ zeroinitializer, %entry ], [ %x.next, %loop ]\n  %idx = phi i64 [ 0, %entry ], [ %idx.next, %loop ]\n  %p = getelementptr <4 x half>, ptr %base, i64 %idx\n  %a = load <4 x half>, ptr %p, align 2\n  %x.next = fadd <4 x half> %x, %a\n  %idx.next = add i64 %idx, 1\n  %cc = icmp ult i64 %idx.next, %bound\n  br i1 %cc, label %loop, label %end\n\nend:                                              ; preds = %loop\n  store <4 x half> %x.next, ptr %base, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "call_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x half> @call_v3f16(<3 x half> %a, <3 x half> %b) {\n  %r = call <3 x half> @llvm.minnum.v3f16(<3 x half> %a, <3 x half> %b)\n  ret <3 x half> %r\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <3 x half> @llvm.minnum.v3f16(<3 x half>, <3 x half>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "binary_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x half> @binary_v4f16(<4 x half> %a, <4 x half> %b) {\n  %r = fadd <4 x half> %a, %b\n  ret <4 x half> %r\n}\n"
        },
        {
          "test_name": "fpext_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x float> @fpext_v4f16(<4 x half> %a) {\n  %r = fpext <4 x half> %a to <4 x float>\n  ret <4 x float> %r\n}\n"
        },
        {
          "test_name": "load_add_store_v4i10",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine void @load_add_store_v4i10(ptr %pa, ptr %pb) {\n  %a = load <4 x i10>, ptr %pa, align 8\n  %b = load <4 x i10>, ptr %pb, align 8\n  %c = add <4 x i10> %a, %b\n  store <4 x i10> %c, ptr %pa, align 8\n  ret void\n}\n"
        },
        {
          "test_name": "unary_v3f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <3 x half> @unary_v3f16(<3 x half> %a) {\n  %r = fneg <3 x half> %a\n  ret <3 x half> %r\n}\n"
        },
        {
          "test_name": "unary_v2f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <2 x half> @unary_v2f16(<2 x half> %a) {\n  %r = fneg <2 x half> %a\n  ret <2 x half> %r\n}\n"
        },
        {
          "test_name": "select_uniform_condition_v4f16",
          "test_body": "target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n\ndefine <4 x half> @select_uniform_condition_v4f16(<4 x half> %a, <4 x half> %b, i1 %cc) {\n  %r = select i1 %cc, <4 x half> %a, <4 x half> %b\n  ret <4 x half> %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[Scalarizer] Test *_with_overflow crash with min-bits=32 and min-bits=16",
    "body": "first reported here: https://github.com/llvm/llvm-project/pull/127520\nintroduced by: https://github.com/llvm/llvm-project/pull/126815\n\n```llvm\n; RUN: opt %s -passes='function(scalarizer<load-store;min-bits=16>,dce)' -S | FileCheck %s --check-prefixes=CHECK,MIN16\n; RUN: opt %s -passes='function(scalarizer<load-store;min-bits=32>,dce)' -S | FileCheck %s --check-prefixes=CHECK,MIN32\n\ndefine <3 x i32> @call_v3i32(<3 x i32> %a, <3 x i32> %b) {\n; CHECK-LABEL: @call_v3i32(\n; CHECK-NEXT:    [[T:%.*]] = call { <3 x i32>, <3 x i1> } @llvm.uadd.with.overflow.v3i32(<3 x i32> [[A:%.*]], <3 x i32> [[B:%.*]])\n; CHECK-NEXT:    [[R:%.*]] = extractvalue { <3 x i32>, <3 x i1> } [[T]], 0\n; CHECK-NEXT:    ret <3 x i32> [[R]]\n;\n  %t = call { <3 x i32>, <3 x i1> } @llvm.uadd.with.overflow.v3i32(<3 x i32> %a, <3 x i32> %b)\n  %r = extractvalue { <3 x i32>, <3 x i1> } %t, 0\n  ret <3 x i32> %r\n}\n\n```\n\n```bash\nopt: include/llvm/Support/Casting.h:578: decltype(auto) llvm::cast(From *) [To = llvm::VectorType, From = llvm::Type]: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: opt -passes=function(scalarizer<load-store;min-bits=16>,dce) -S\n1.\tRunning pass \"function(scalarizer,dce)\" on module \"<stdin>\"\n2.\tRunning pass \"scalarizer\" on function \"call_v3i32\"\n #0 0x0000000004028908 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (opt+0x4028908)\n #1 0x000000000402643e llvm::sys::RunSignalHandlers() (opt+0x402643e)\n #2 0x0000000004029131 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x000075c457a45330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x000075c457a9eb2c __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x000075c457a9eb2c __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x000075c457a9eb2c pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x000075c457a4527e raise ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x000075c457a288ff abort ./stdlib/abort.c:81:7\n #9 0x000075c457a2881b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x000075c457a3b517 (/lib/x86_64-linux-gnu/libc.so.6+0x3b517)\n#11 0x0000000004143bea (opt+0x4143bea)\n#12 0x00000000049addf4 (anonymous namespace)::Scatterer::operator[](unsigned int) Scalarizer.cpp:0:0\n#13 0x00000000049aa142 (anonymous namespace)::ScalarizerVisitor::visit(llvm::Function&) Scalarizer.cpp:0:0\n#14 0x00000000049a5419 llvm::ScalarizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (opt+0x49a5419)\n```\n\nNo line numbers, Looks like we have some missing debug symbols I suspect the assert is coming from `ScalarizerVisitor::visitExtractValueInst`\n\nThere is a use of Scatterer::operator[] as part of creating the ExtractValue IR.\n\n```cpp\nfor (unsigned OpIdx = 0; OpIdx < Op0.size(); ++OpIdx) {\n    Value *ResElem = Builder.CreateExtractValue(\n        Op0[OpIdx], Index, EVI.getName() + \".elem\" + Twine(Index));\n    Res.push_back(ResElem);\n  }\n```\n\nWe likely need to check `VS.NumPacked` before calling `Scatterer::operator[]`\n\nBecause that operator is  using `Frag * VS.NumPacked` to create the exrtractElement instruction.\n\n```cpp\n CV[Frag] = Builder.CreateExtractElement(V, Frag * VS.NumPacked,\n                                            V->getName() + \".i\" + Twine(Frag))\n```\n\n  ",
    "author": "farzonl",
    "labels": [
      "crash-on-valid",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "farzonl",
        "body": "@Icohedron can you look into this  issue. I'm also noticing a second potential issue:\n\n`call { <3 x i32>, <3 x i1> }`\n\nThe struct return elements are not the same type. one is vec3 of i32 one is and one is vec3 of i1.  you need to add the `*_with_overflow` intrinsics to `isVectorIntrinsicWithStructReturnOverloadAtField` if these types are not the same."
      },
      {
        "author": "Icohedron",
        "body": "I'm on it"
      },
      {
        "author": "jayfoad",
        "body": "As mentioned in #127996, note that you can also provoke this bug by adding `min-bits=64` to `test/Transforms/Scalarizer/frexp.ll`."
      },
      {
        "author": "Icohedron",
        "body": "> [@Icohedron](https://github.com/Icohedron) can you look into this issue. I'm also noticing a second potential issue:\n> \n> `call { <3 x i32>, <3 x i1> }`\n> \n> The struct return elements are not the same type. one is vec3 of i32 one is and one is vec3 of i1. you need to add the `*_with_overflow` intrinsics to `isVectorIntrinsicWithStructReturnOverloadAtField` if these types are not the same.\n\n`isVectorIntrinsicWithStructReturnOverloadAtField` appears to only be for intrinsic name-mangling when there is more than one possible type for the the 2nd element in the struct return type (see [splitCall](https://github.com/llvm/llvm-project/blob/5f8da7e7738f043dbde447e48622e9b2afb5ba92/llvm/lib/Transforms/Scalar/Scalarizer.cpp#L770) and [getOrInsertDeclaration](https://github.com/llvm/llvm-project/blob/5f8da7e7738f043dbde447e48622e9b2afb5ba92/llvm/lib/IR/Intrinsics.cpp#L763)). For the `*_with_overflow` intrinsics, the 2nd element of the return struct is always i1, so it does not need to be added to `isVectorIntrinsicWithStructReturnOverloadAtField`.\n\nAdding the `*_with_overflow` intrinsic to `isVectorIntrinsicWithStructReturnOverloadAtField` results in a broken LLVM module.\n```\nIntrinsic name not mangled correctly for type arguments! Should be: llvm.uadd.with.overflow.i32\nptr @llvm.uadd.with.overflow.i32.i1\nLLVM ERROR: Broken module found, compilation aborted!\n```"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "bisect": "N/A"
}