{
  "bug_id": "159402",
  "issue_url": "https://github.com/llvm/llvm-project/issues/159402",
  "bug_type": "crash",
  "base_commit": "90a6b0002d1ba7d6cbfe67942bf7499f1f011d65",
  "knowledge_cutoff": "2025-09-17T17:08:20Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "addfdb5273170901ed4fec5dac421e0559466ffb",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          2904,
          2919
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationCostModel::getDivRemSpeculationCost"
      ]
    }
  },
  "patch": "commit addfdb5273170901ed4fec5dac421e0559466ffb\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun Sep 21 15:08:50 2025 +0100\n\n    [LV] Skip select cost for invariant divisors in legacy cost model.\n    \n    For UDiv/SDiv with invariant divisors, the created selects will be\n    hoisted out. Don't compute their cost for each iteration, to match the\n    more accurate VPlan-based cost modeling.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/159402.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex f71369e7f021..3ec187c6b41e 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -2904,16 +2904,18 @@ LoopVectorizationCostModel::getDivRemSpeculationCost(Instruction *I,\n     // likely.\n     ScalarizationCost = ScalarizationCost / getPredBlockCostDivisor(CostKind);\n   }\n-  InstructionCost SafeDivisorCost = 0;\n \n+  InstructionCost SafeDivisorCost = 0;\n   auto *VecTy = toVectorTy(I->getType(), VF);\n-\n-  // The cost of the select guard to ensure all lanes are well defined\n-  // after we speculate above any internal control flow.\n-  SafeDivisorCost +=\n-      TTI.getCmpSelInstrCost(Instruction::Select, VecTy,\n-                             toVectorTy(Type::getInt1Ty(I->getContext()), VF),\n-                             CmpInst::BAD_ICMP_PREDICATE, CostKind);\n+  auto *DivisorI = dyn_cast<Instruction>(I->getOperand(1));\n+  if (DivisorI && !Legal->isInvariant(DivisorI)) {\n+    // The cost of the select guard to ensure all lanes are well defined\n+    // after we speculate above any internal control flow.\n+    SafeDivisorCost +=\n+        TTI.getCmpSelInstrCost(Instruction::Select, VecTy,\n+                               toVectorTy(Type::getInt1Ty(I->getContext()), VF),\n+                               CmpInst::BAD_ICMP_PREDICATE, CostKind);\n+  }\n \n   SmallVector<const Value *, 4> Operands(I->operand_values());\n   SafeDivisorCost += TTI.getArithmeticInstrCost(\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/RISCV/divrem.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -scalable-vectorization=on -mtriple riscv64-linux-gnu -mattr=+v,+f -S",
        "opt < %s -passes=loop-vectorize -scalable-vectorization=off -mtriple riscv64-linux-gnu -mattr=+v,+f -S"
      ],
      "tests": [
        {
          "test_name": "udiv_sdiv_with_invariant_divisors",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\"\ntarget triple = \"riscv64\"\n\ndefine i32 @udiv_sdiv_with_invariant_divisors(i8 %x, i16 %y, i1 %c) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i16 [ -12, %entry ], [ %iv.next, %loop.latch ]\n  %narrow.iv = phi i8 [ -12, %entry ], [ %iv.next.trunc, %loop.latch ]\n  br i1 %c, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  %ud = udiv i8 %narrow.iv, %x\n  %ud.ext = zext i8 %ud to i16\n  %sd = sdiv i16 %ud.ext, %y\n  %sd.ext = sext i16 %sd to i32\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %merge = phi i32 [ 0, %loop.header ], [ %sd.ext, %then ]\n  %iv.next = add nsw i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 0\n  %iv.next.trunc = trunc i16 %iv.next to i8\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret i32 %merge\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorizer] Trigger assertion \" VPlan cost model and legacy cost model disagreed\"",
    "body": "Reproducer: https://godbolt.org/z/ef9TWaKrj\nThe testcase is generated by Csmith.\nOutput:\n```\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:7074: llvm::VectorizationFactor llvm::LoopVectorizationPlanner::computeBestVF(): Assertion `(BestFactor.Width == LegacyVF.Width || BestPlan.hasEarlyExit() || planContainsAdditionalSimplifications(getPlanFor(BestFactor.Width), CostCtx, OrigLoop, BestFactor.Width) || planContainsAdditionalSimplifications( getPlanFor(LegacyVF.Width), CostCtx, OrigLoop, LegacyVF.Width)) && \" VPlan cost model and legacy cost model disagreed\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace and instructions to reproduce the bug.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -O2 <source>\n1.\tRunning pass \"function<eager-inv>(float2int,lower-constant-intrinsics,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O2>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"func_1\"\n #0 0x00000000058b6c38 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x58b6c38)\n #1 0x00000000058b3ae4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007134e2e42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007134e2e969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007134e2e42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007134e2e287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007134e2e2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007134e2e39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x000000000363aad6 llvm::LoopVectorizationPlanner::computeBestVF() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x363aad6)\n #9 0x0000000003648204 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3648204)\n#10 0x000000000364b400 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x364b400)\n#11 0x000000000364bae5 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x364bae5)\n#12 0x0000000002f44ece llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2f44ece)\n#13 0x000000000569e1f1 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x569e1f1)\n#14 0x0000000000eeadbe llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xeeadbe)\n#15 0x000000000569c75a llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x569c75a)\n#16 0x000000000096fb6e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96fb6e)\n#17 0x000000000569c111 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x569c111)\n#18 0x0000000000979d28 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x979d28)\n#19 0x000000000096dee9 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96dee9)\n#20 0x00007134e2e29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#21 0x00007134e2e29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#22 0x0000000000965035 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x965035)\nProgram terminated with signal: SIGSEGV\n```",
    "author": "XChy",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true
}