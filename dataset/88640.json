{
  "bug_id": "88640",
  "issue_url": "https://github.com/llvm/llvm-project/issues/88640",
  "bug_type": "crash",
  "base_commit": "34013e7ce25868aa8ddea116f79184e8603af56c",
  "knowledge_cutoff": "2024-04-14T02:29:49Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "b73476c7843f21966acb2fb5cab8515d9ec02905",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          15155,
          15162
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "getMinVF",
        "SLPVectorizerPass::vectorizeStores",
        "getValue"
      ]
    }
  },
  "patch": "commit b73476c7843f21966acb2fb5cab8515d9ec02905\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Apr 16 13:29:34 2024 +0100\n\n    [SLP] Make sure MinVF is a power-of-2 by using PowerOf2Ceil.\n    \n    This should ensure we explore the same VFs as before 6d66db3890a18e39.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/88640.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex c63b500f546f..d0bcdceae392 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -15155,8 +15155,8 @@ bool SLPVectorizerPass::vectorizeStores(ArrayRef<StoreInst *> Stores,\n       Type *ValueTy = StoreTy;\n       if (auto *Trunc = dyn_cast<TruncInst>(Store->getValueOperand()))\n         ValueTy = Trunc->getSrcTy();\n-      unsigned MinVF = TTI->getStoreMinimumVF(\n-          R.getMinVF(DL->getTypeSizeInBits(StoreTy)), StoreTy, ValueTy);\n+      unsigned MinVF = PowerOf2Ceil(TTI->getStoreMinimumVF(\n+          R.getMinVF(DL->getTypeStoreSizeInBits(StoreTy)), StoreTy, ValueTy));\n \n       if (MaxVF < MinVF) {\n         LLVM_DEBUG(dbgs() << \"SLP: Vectorization infeasible as MaxVF (\" << MaxVF\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/trunc-store-value-ty-not-power-of-2.ll",
      "commands": [
        "opt -p slp-vectorizer -S %s"
      ],
      "tests": [
        {
          "test_name": "test_4_trunc_i24_to_i16",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @test_4_trunc_i24_to_i16(i24 %x, ptr %A) {\n  %t = trunc i24 %x to i16\n  store i16 %t, ptr %A, align 1\n  %gep.1 = getelementptr i16, ptr %A, i64 1\n  store i16 %t, ptr %gep.1, align 1\n  %gep.2 = getelementptr i16, ptr %A, i64 2\n  store i16 %t, ptr %gep.2, align 1\n  %gep.3 = getelementptr i16, ptr %A, i64 3\n  store i16 %t, ptr %gep.3, align 1\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "A/F: \"Assertion `!empty()' failed.\" after 6704faf",
    "body": "Several of our internal tests started to hit an assertion failure in the compiler which I bisected back to commit 6704faf6f8a26c21c71fd0efad6af6a8d6ee52b4. Consider the following code:\r\n\r\n```c++\r\n#define c() 0\r\nstruct d {\r\n  d();\r\n  long a : 24;\r\n  long b : 23;\r\n} f;\r\nlong e;\r\nvoid h() {\r\n  f.b = e;\r\n  long g = c();\r\n  f.a = g;\r\n}\r\n```\r\nWhen compiled with a compiler that includes 6704faf6f8a26c21c71fd0efad6af6a8d6ee52b4, it hits an assertion failure:\r\n```\r\n$ ~/src/upstream/6704faf6f8a2-linux/bin/clang -c -O2 repro.cpp -march=btver2                                                                                                                                        \r\nclang: /home/dyung/src/upstream/llvm_clean_git/llvm/include/llvm/ADT/ArrayRef.h:169: const T &llvm::ArrayRef<llvm::Value *>::front() const [T = llvm::Value *]: Assertion `!empty()' failed.                          \r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\r\nStack dump:                                                                                                                        \r\n0.      Program arguments: /home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang -c -O2 repro.cpp -march=btver2          \r\n1.      <eof> parser at end of file                                                                                                                                                                                                                                    \r\n2.      Optimizer                                                                                                                                                                                                                                                      \r\n #0 0x00000000033ead87 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x33ead87)     \r\n #1 0x00000000033e87ee llvm::sys::RunSignalHandlers() (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x33e87ee)\r\n #2 0x00000000033ea16d llvm::sys::CleanupOnSignal(unsigned long) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x33ea16d)                                                                                                                                     \r\n #3 0x0000000003356058 CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0\r\n #4 0x00007f3230250420 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x14420)                                                                                                                                                                                    \r\n #5 0x00007f322fd1300b raise /build/glibc-wuryBv/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51:1                                                                                                                                                             \r\n #6 0x00007f322fcf2859 abort /build/glibc-wuryBv/glibc-2.31/stdlib/abort.c:81:7\r\n #7 0x00007f322fcf2729 get_sysdep_segment_value /build/glibc-wuryBv/glibc-2.31/intl/loadmsgcat.c:509:8                                                                                                                                                                 \r\n #8 0x00007f322fcf2729 _nl_load_domain /build/glibc-wuryBv/glibc-2.31/intl/loadmsgcat.c:970:34                                                                                                                                                                         \r\n #9 0x00007f322fd03fd6 (/lib/x86_64-linux-gnu/libc.so.6+0x33fd6)\r\n#10 0x0000000004a0d29a llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&)::$_154::operator()(std::set<std::pair<unsigned int, int>, llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::Store[32/1950]\r\nlvm::slpvectorizer::BoUpSLP&)::StoreDistCompare, std::allocator<std::pair<unsigned int, int>>> const&) const SLPVectorizer.cpp:0:0\r\n#11 0x0000000004a0c5cb llvm::SLPVectorizerPass::vectorizeStores(llvm::ArrayRef<llvm::StoreInst*>, llvm::slpvectorizer::BoUpSLP&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x4a0c5cb)\r\n#12 0x0000000004a08a0f llvm::SLPVectorizerPass::vectorizeStoreChains(llvm::slpvectorizer::BoUpSLP&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x4a08a0f)\r\n#13 0x0000000004a0748b llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::Opti\r\nmizationRemarkEmitter*) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x4a0748b)\r\n#14 0x0000000004a06957 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x4a06957)\r\n#15 0x000000000467e8ad llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x467e8ad)\r\n#16 0x0000000002e2cc66 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x2e2cc66)\r\n#17 0x0000000000efcc1d llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dyung/src/upstream\r\n/6704faf6f8a2-linux/bin/clang+0xefcc1d)\r\n#18 0x0000000002e31210 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x2e31210)\r\n#19 0x0000000000efc9ed llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0xefc9ed)\r\n#20 0x0000000002e2be26 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x2e2be26)\r\n#21 0x00000000035dfd08 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm\r\n::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0 \r\n#22 0x00000000035d7051 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::Intrusi\r\nveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x35d7051)\r\n#23 0x0000000003babfb6 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3babfb6)\r\n#24 0x00000000054cfb76 clang::ParseAST(clang::Sema&, bool, bool) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x54cfb76)\r\n#25 0x0000000003e620b0 clang::FrontendAction::Execute() (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3e620b0)\r\n#26 0x0000000003dc9ce8 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3dc9ce8)\r\n#27 0x0000000003f2e707 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3f2e707)\r\n#28 0x0000000000b77275 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0xb77275)\r\n#29 0x0000000000b73c10 ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\r\n#30 0x0000000003c03e69 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const::$_1>(long) Job.c\r\npp:0:0\r\n#31 0x0000000003355d99 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3355d99)\r\n#32 0x0000000003c03780 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3c0378\r\n0)\r\n#33 0x0000000003bbc29d clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3bbc29d)\r\n#34 0x0000000003bbc837 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3bbc837)\r\n#35 0x0000000003be0397 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0x3be0397)\r\n#36 0x0000000000b72b1b clang_main(int, char**, llvm::ToolContext const&) (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0xb72b1b)\r\n#37 0x0000000000b83a17 main (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0xb83a17)                                                                                                                                                                           \r\n#38 0x00007f322fcf4083 __libc_start_main /build/glibc-wuryBv/glibc-2.31/csu/../csu/libc-start.c:342:3                                                                                                                                                                  \r\n#39 0x0000000000b713be _start (/home/dyung/src/upstream/6704faf6f8a2-linux/bin/clang+0xb713be)                                                                                                                                                                         \r\nclang: error: clang frontend command failed with exit code 134 (use -v to see invocation)\r\nclang version 19.0.0 (https://github.com/llvm/llvm-project.git 6704faf6f8a26c21c71fd0efad6af6a8d6ee52b4)\r\n```\r\n@fhahn this was your change, can you take a look?",
    "author": "dyung",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  }
}