{
  "bug_id": "87856",
  "issue_url": "https://github.com/llvm/llvm-project/issues/87856",
  "bug_type": "crash",
  "base_commit": "b17d44558ba4c30a3005089b334f68593d6a9c7c",
  "knowledge_cutoff": "2024-04-06T02:19:05Z",
  "lit_test_dir": [
    "llvm/test/Transforms/Attributor"
  ],
  "hints": {
    "fix_commit": "2d61692d4b75b7d92b44bfafb1011c1723955151",
    "components": [
      "AttributorAttributes"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/IPO/AttributorAttributes.cpp": [
        [
          5899,
          5908
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/IPO/AttributorAttributes.cpp": [
        "AANoCaptureImpl::updateImpl"
      ]
    }
  },
  "patch": "commit 2d61692d4b75b7d92b44bfafb1011c1723955151\nAuthor: Matt Arsenault <Matthew.Arsenault@amd.com>\nDate:   Thu May 23 19:31:33 2024 +0200\n\n    Attributor: Do not assume function context in AANoCapture (#91462)\n    \n    If the calling function has the null_pointer_is_valid attribute, somehow\n    a null constant reaches here. I'm not sure why exactly, it doesn't\n    happen for other types of constants.\n    \n    Fixes #87856\n\ndiff --git a/llvm/lib/Transforms/IPO/AttributorAttributes.cpp b/llvm/lib/Transforms/IPO/AttributorAttributes.cpp\nindex 41b66aafe7d3..1b3bf3c732ed 100644\n--- a/llvm/lib/Transforms/IPO/AttributorAttributes.cpp\n+++ b/llvm/lib/Transforms/IPO/AttributorAttributes.cpp\n@@ -5690,6 +5690,9 @@ bool AANoCapture::isImpliedByIR(Attributor &A, const IRPosition &IRP,\n     return V.use_empty();\n \n   // You cannot \"capture\" null in the default address space.\n+  //\n+  // FIXME: This should use NullPointerIsDefined to account for the function\n+  // attribute.\n   if (isa<UndefValue>(V) || (isa<ConstantPointerNull>(V) &&\n                              V.getType()->getPointerAddressSpace() == 0)) {\n     return true;\n@@ -5899,10 +5902,13 @@ ChangeStatus AANoCaptureImpl::updateImpl(Attributor &A) {\n \n   const Function *F =\n       isArgumentPosition() ? IRP.getAssociatedFunction() : IRP.getAnchorScope();\n-  assert(F && \"Expected a function!\");\n-  const IRPosition &FnPos = IRPosition::function(*F);\n+\n+  // TODO: Is the checkForAllUses below useful for constants?\n+  if (!F)\n+    return indicatePessimisticFixpoint();\n \n   AANoCapture::StateType T;\n+  const IRPosition &FnPos = IRPosition::function(*F);\n \n   // Readonly means we cannot capture through memory.\n   bool IsKnown;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/Attributor/issue87856.ll",
      "commands": [
        "opt -S -passes=attributor < %s"
      ],
      "tests": [
        {
          "test_name": "null_ptr_is_valid_call_with_undef",
          "test_body": "; Function Attrs: null_pointer_is_valid\ndefine void @null_ptr_is_valid_call_with_undef() #0 {\n  call void @store_as0(ptr undef)\n  ret void\n}\n\ndeclare void @store_as0(ptr)\n\nattributes #0 = { null_pointer_is_valid }\n"
        },
        {
          "test_name": "store_as0",
          "test_body": "define void @store_as0(ptr %0) {\n  store i16 0, ptr %0, align 2\n  ret void\n}\n"
        },
        {
          "test_name": "call_store_as1",
          "test_body": "define void @call_store_as1() {\n  call void @store_as1(ptr addrspace(1) null)\n  ret void\n}\n\ndeclare void @store_as1(ptr addrspace(1))\n"
        },
        {
          "test_name": "null_ptr_is_valid_call_with_null",
          "test_body": "; Function Attrs: null_pointer_is_valid\ndefine void @null_ptr_is_valid_call_with_null() #0 {\n  call void @store_as0(ptr null)\n  ret void\n}\n\ndeclare void @store_as0(ptr)\n\nattributes #0 = { null_pointer_is_valid }\n"
        },
        {
          "test_name": "store_as1",
          "test_body": "define void @store_as1(ptr addrspace(1) %arg) {\n  store i16 0, ptr addrspace(1) %arg, align 2\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[attributor] Crash on `null_pointer_is_valid` function",
    "body": "With\r\n\r\n```\r\ntarget datalayout = \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"aarch64-none-linux-android28\"\r\n\r\n; Function Attrs: null_pointer_is_valid\r\ndefine i64 @foo() #0 {\r\n  call fastcc void @bar(ptr null)\r\n  ret i64 0\r\n}\r\n\r\ndefine fastcc void @bar(ptr %0) {\r\n  store i16 0, ptr %0, align 2\r\n  ret void\r\n}\r\n\r\nattributes #0 = { null_pointer_is_valid }\r\n```\r\n\r\nand running\r\n\r\n```\r\nopt -passes=attributor file.ll\r\n```\r\n\r\nwe crash with\r\n\r\n```\r\nopt: llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:5901: virtual ChangeStatus (anonymous namespace)::AANoCaptureImpl::updateImpl(Attributor &): Assertion `F && \"Expected a function!\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: opt -passes=attributor reduced.ll\r\n #0 0x000000000165bf38 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (llvm-project/build/Release/bin/opt+0x165bf38)\r\n #1 0x0000000001659a40 llvm::sys::RunSignalHandlers() (llvm-project/build/Release/bin/opt+0x1659a40)\r\n #2 0x000000000165c938 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007f3ec923e6f0 __restore_rt (/lib64/libc.so.6+0x3e6f0)\r\n #4 0x00007f3ec928b94c __pthread_kill_implementation (/lib64/libc.so.6+0x8b94c)\r\n #5 0x00007f3ec923e646 gsignal (/lib64/libc.so.6+0x3e646)\r\n #6 0x00007f3ec92287f3 abort (/lib64/libc.so.6+0x287f3)\r\n #7 0x00007f3ec922871b _nl_load_domain.cold (/lib64/libc.so.6+0x2871b)\r\n #8 0x00007f3ec9237386 (/lib64/libc.so.6+0x37386)\r\n #9 0x0000000002f2a65b (anonymous namespace)::AANoCaptureImpl::updateImpl(llvm::Attributor&) AttributorAttributes.cpp:0:0\r\n#10 0x0000000002ec8492 llvm::AbstractAttribute::update(llvm::Attributor&) (llvm-project/build/Release/bin/opt+0x2ec8492)\r\n#11 0x0000000002ed3b83 llvm::Attributor::updateAA(llvm::AbstractAttribute&) (llvm-project/build/Release/bin/opt+0x2ed3b83)\r\n#12 0x0000000002eec289 llvm::AANoCapture const* llvm::Attributor::getOrCreateAAFor<llvm::AANoCapture>(llvm::IRPosition, llvm::AbstractAttribute const*, llvm::DepClassTy, bool, bool) Attributor.cpp:0:0\r\n#13 0x0000000002f1ab57 (anonymous namespace)::AANoAliasCallSiteArgument::updateImpl(llvm::Attributor&) AttributorAttributes.cpp:0:0\r\n#14 0x0000000002ec8492 llvm::AbstractAttribute::update(llvm::Attributor&) (llvm-project/build/Release/bin/opt+0x2ec8492)\r\n#15 0x0000000002ed3b83 llvm::Attributor::updateAA(llvm::AbstractAttribute&) (llvm-project/build/Release/bin/opt+0x2ed3b83)\r\n#16 0x0000000002efba19 llvm::AANoAlias const* llvm::Attributor::getOrCreateAAFor<llvm::AANoAlias>(llvm::IRPosition, llvm::AbstractAttribute const*, llvm::DepClassTy, bool, bool) Attributor.cpp:0:0\r\n#17 0x0000000002ede880 void llvm::Attributor::checkAndQueryIRAttr<(llvm::Attribute::AttrKind)20, llvm::AANoAlias>(llvm::IRPosition const&, llvm::AttributeSet) (llvm-project/build/Release/bin/opt+0x2ede880)\r\n#18 0x0000000002edd545 llvm::Attributor::identifyDefaultAbstractAttributes(llvm::Function&) (llvm-project/build/Release/bin/opt+0x2edd545)\r\n#19 0x0000000002ee0800 runAttributorOnFunctions(llvm::InformationCache&, llvm::SetVector<llvm::Function*, llvm::SmallVector<llvm::Function*, 0u>, llvm::DenseSet<llvm::Function*, llvm::DenseMapInfo<llvm::Function*, void>>, 0u>&, llvm::AnalysisGetter&, llvm::CallGraphUpdater&, bool, bool) Attributor.cpp:0:0\r\n#20 0x0000000002edfc41 llvm::AttributorPass::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (llvm-project/build/Release/bin/opt+0x2edfc41)\r\n#21 0x0000000002b6fcdd llvm::detail::PassModel<llvm::Module, llvm::AttributorPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) PassBuilderPipelines.cpp:0:0\r\n#22 0x0000000001853e56 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (llvm-project/build/Release/bin/opt+0x1853e56)\r\n#23 0x0000000002afaa4b llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (llvm-project/build/Release/bin/opt+0x2afaa4b)\r\n#24 0x0000000001622f36 optMain (llvm-project/build/Release/bin/opt+0x1622f36)\r\n```",
    "author": "lanza",
    "labels": [
      "crash-on-valid",
      "llvm::Attributor"
    ],
    "comments": [
      {
        "author": "lanza",
        "body": "https://github.com/llvm/llvm-project/blob/0f52f4ddd909eb38f2a691ffed8469263fe5f635/llvm/lib/Transforms/IPO/AttributorAttributes.cpp#L5901"
      },
      {
        "author": "dtcxzyw",
        "body": "cc @arsenm "
      },
      {
        "author": "arsenm",
        "body": "Just returning on the null function seems to work, but I don't understand exactly why it reaches here. AANoCapture::isImpliedByIR is incorrectly reimplementing NullPointerIsDefined but fixing that doesn't seem to help any "
      }
    ]
  }
}