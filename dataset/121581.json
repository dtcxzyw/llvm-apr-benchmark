{
  "bug_id": "121581",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121581",
  "bug_type": "miscompilation",
  "base_commit": "95c5c5d4badf7c2128d098be325356e15c2197be",
  "knowledge_cutoff": "2025-01-03T16:31:11Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "fac46469977da9c4e9c6eeaac21103c971190577",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          747,
          752
        ],
        [
          764,
          770
        ],
        [
          804,
          810
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "transformToIndexedCompare",
        "InstCombinerImpl::foldGEPICmp"
      ]
    }
  },
  "patch": "commit fac46469977da9c4e9c6eeaac21103c971190577\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sat Jan 4 17:23:57 2025 +0800\n\n    [InstCombine] Check no wrap flags before folding icmp of GEPs with same indices (#121628)\n    \n    Alive2: https://alive2.llvm.org/ce/z/Dr3Sbe\n    Closes https://github.com/llvm/llvm-project/issues/121581.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex d6fdade25559..8b23583c5106 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -747,6 +747,8 @@ Instruction *InstCombinerImpl::foldGEPICmp(GEPOperator *GEPLHS, Value *RHS,\n                         ConstantExpr::getPointerBitCastOrAddrSpaceCast(\n                             cast<Constant>(RHS), Base->getType()));\n   } else if (GEPOperator *GEPRHS = dyn_cast<GEPOperator>(RHS)) {\n+    GEPNoWrapFlags NW = GEPLHS->getNoWrapFlags() & GEPRHS->getNoWrapFlags();\n+\n     // If the base pointers are different, but the indices are the same, just\n     // compare the base pointer.\n     if (PtrBase != GEPRHS->getOperand(0)) {\n@@ -764,7 +766,8 @@ Instruction *InstCombinerImpl::foldGEPICmp(GEPOperator *GEPLHS, Value *RHS,\n \n       // If all indices are the same, just compare the base pointers.\n       Type *BaseType = GEPLHS->getOperand(0)->getType();\n-      if (IndicesTheSame && CmpInst::makeCmpResultType(BaseType) == I.getType())\n+      if (IndicesTheSame &&\n+          CmpInst::makeCmpResultType(BaseType) == I.getType() && CanFold(NW))\n         return new ICmpInst(Cond, GEPLHS->getOperand(0), GEPRHS->getOperand(0));\n \n       // If we're comparing GEPs with two base pointers that only differ in type\n@@ -804,7 +807,6 @@ Instruction *InstCombinerImpl::foldGEPICmp(GEPOperator *GEPLHS, Value *RHS,\n       return transformToIndexedCompare(GEPLHS, RHS, Cond, DL, *this);\n     }\n \n-    GEPNoWrapFlags NW = GEPLHS->getNoWrapFlags() & GEPRHS->getNoWrapFlags();\n     if (GEPLHS->getNumOperands() == GEPRHS->getNumOperands() &&\n         GEPLHS->getSourceElementType() == GEPRHS->getSourceElementType()) {\n       // If the GEPs only differ by one index, compare it.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp-gep.ll",
      "commands": [
        "opt -passes=instcombine -S  < %s"
      ],
      "tests": [
        {
          "test_name": "pointer_icmp_aligned_with_offset_negative",
          "test_body": "target datalayout = \"e-p:64:64:64-p1:16:16:16-p2:32:32:32-p3:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n\ndefine i1 @pointer_icmp_aligned_with_offset_negative(ptr align 8 %a, ptr align 8 %a2) {\n  %gep = getelementptr i8, ptr %a, i64 8\n  %cmp = icmp eq ptr %gep, %a2\n  ret i1 %cmp\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Incorrect fold of the comparison of GEPs",
    "body": "Alive2: https://alive2.llvm.org/ce/z/HRsqeW\n```\ndefine i1 @test(ptr %x, ptr %y) {\n  %gep1 = getelementptr i8, ptr %x, i32 1\n  %gep2 = getelementptr i8, ptr %y, i32 1\n  %cmp = icmp ult ptr %gep1, %gep2\n  ret i1 %cmp\n}\n```\n```\n\n----------------------------------------\ndefine i1 @test(ptr %x, ptr %y) {\n#0:\n  %gep1 = gep ptr %x, 1 x i32 1\n  %gep2 = gep ptr %y, 1 x i32 1\n  %cmp = icmp ult ptr %gep1, %gep2\n  ret i1 %cmp\n}\n=>\ndefine i1 @test(ptr %x, ptr %y) {\n#0:\n  %cmp = icmp ult ptr %x, %y\n  ret i1 %cmp\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\nptr %x = pointer(non-local, block_id=0, offset=-1) / Address=#xf\nptr %y = null\n\nSource:\nptr %gep1 = null\nptr %gep2 = pointer(non-local, block_id=0, offset=1) / Address=#x1\ni1 %cmp = #x1 (1)\n\nSOURCE MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: 0\nBlock 1 >\tsize: 1\talign: 2\talloc type: 0\talive: true\taddress: 2\nBlock 2 >\tsize: 0\talign: 1\talloc type: 0\talive: true\taddress: 3\n\nTarget:\ni1 %cmp = #x0 (0)\nSource value: #x1 (1)\nTarget value: #x0 (0)\n\nSummary:\n  0 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}
