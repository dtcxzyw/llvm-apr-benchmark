{
  "bug_id": "107473",
  "issue_url": "https://github.com/llvm/llvm-project/issues/107473",
  "bug_type": "crash",
  "base_commit": "99fb1506a869fa5e82dbd36e1a63cd21450f1502",
  "knowledge_cutoff": "2024-09-05T21:51:36Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "e3c537ff903af9a92ff43bab6d21c0ea759d65e5",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          7314,
          7322
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "planContainsAdditionalSimplifications"
      ]
    }
  },
  "patch": "commit e3c537ff903af9a92ff43bab6d21c0ea759d65e5\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Sep 10 21:37:12 2024 +0100\n\n    [VPlan] Consider non-header phis in planContainsAdditionalSimp.\n    \n    Update planContainsAdditionalSimplifications to also check phis not in\n    the loop header. This ensures we don't miss cases where VPBlendRecipes\n    (which correspond to such phis) have been simplified.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/107473.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 2be3b5775292..b821da03c16e 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -7314,9 +7314,10 @@ static bool planContainsAdditionalSimplifications(VPlan &Plan,\n   // Return true if the loop contains any instructions that are not also part of\n   // the VPlan or are skipped for VPlan-based cost computations. This indicates\n   // that the VPlan contains extra simplifications.\n-  return any_of(TheLoop->blocks(), [&SeenInstrs, &CostCtx](BasicBlock *BB) {\n-    return any_of(*BB, [&SeenInstrs, &CostCtx](Instruction &I) {\n-      if (isa<PHINode>(&I))\n+  return any_of(TheLoop->blocks(), [&SeenInstrs, &CostCtx,\n+                                    TheLoop](BasicBlock *BB) {\n+    return any_of(*BB, [&SeenInstrs, &CostCtx, TheLoop, BB](Instruction &I) {\n+      if (isa<PHINode>(&I) && BB == TheLoop->getHeader())\n         return false;\n       return !SeenInstrs.contains(&I) && !CostCtx.skipCostComputation(&I, true);\n     });\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/RISCV/dead-ops-cost.ll",
      "commands": [
        "opt -p loop-vectorize -mtriple riscv64-linux-gnu -mattr=+v,+f -S %s"
      ],
      "tests": [
        {
          "test_name": "dead_load",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine void @dead_load(ptr %p, i16 %start) {\nentry:\n  %start.ext = sext i16 %start to i64\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ %start.ext, %entry ], [ %iv.next, %loop ]\n  %gep = getelementptr i16, ptr %p, i64 %iv\n  store i16 0, ptr %gep, align 2\n  %l = load i16, ptr %gep, align 2\n  %iv.next = add i64 %iv, 3\n  %cmp = icmp slt i64 %iv, 111\n  br i1 %cmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "dead_live_out_due_to_scalar_epilogue_required",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine i8 @dead_live_out_due_to_scalar_epilogue_required(ptr %src, ptr %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]\n  %idxprom = sext i32 %iv to i64\n  %gep.src = getelementptr i8, ptr %src, i64 %idxprom\n  %l = load i8, ptr %gep.src, align 1\n  %gep.dst = getelementptr i8, ptr %dst, i64 %idxprom\n  store i8 0, ptr %gep.dst, align 1\n  %iv.next = add i32 %iv, 4\n  %cmp = icmp ult i32 %iv, 1001\n  br i1 %cmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  %r = phi i8 [ %l, %loop ]\n  ret i8 %r\n}\n"
        },
        {
          "test_name": "test_phi_in_latch_redundant",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\ndefine void @test_phi_in_latch_redundant(ptr %dst, i32 %a) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 false, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  %not.a = xor i32 %a, -1\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %p = phi i32 [ %not.a, %then ], [ 0, %loop.header ]\n  %gep = getelementptr i32, ptr %dst, i64 %iv\n  store i32 %p, ptr %gep, align 4\n  %iv.next = add i64 %iv, 9\n  %ec = icmp slt i64 %iv, 322\n  br i1 %ec, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        },
        {
          "test_name": "cost_of_exit_branch_and_cond_insts",
          "test_body": "target datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i16 @llvm.umax.i16(i16, i16) #0\n\ndefine i32 @cost_of_exit_branch_and_cond_insts(ptr %a, ptr %b, i1 %c, i16 %x) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 %c, label %then, label %loop.exiting\n\nthen:                                             ; preds = %loop.header\n  %gep = getelementptr inbounds i32, ptr %b, i32 %iv\n  store i1 false, ptr %a, align 1\n  store i32 0, ptr %gep, align 4\n  br label %loop.exiting\n\nloop.exiting:                                     ; preds = %then, %loop.header\n  %iv.next = add i32 %iv, 1\n  %umax = tail call i16 @llvm.umax.i16(i16 %x, i16 111)\n  %umax.ext = zext i16 %umax to i32\n  %sub = sub i32 770, %umax.ext\n  %ec = icmp slt i32 %iv, %sub\n  br i1 %ec, label %loop.latch, label %exit\n\nloop.latch:                                       ; preds = %loop.exiting\n  br label %loop.header\n\nexit:                                             ; preds = %loop.exiting\n  br label %return\n\nreturn:                                           ; preds = %exit\n  ret i32 0\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[VPlan] Assertion \" VPlan cost model and legacy cost model disagreed\"' failed.",
    "body": "Testing using 0c1500ef05e0a5b25cae79d2bd361dbc6e14e726\r\n\r\nC testcase:\r\n```\r\nint a;\r\nextern int b[][3][3][3][3][3];\r\n_Bool c;\r\nunsigned char d[1][13][13];\r\nunsigned e[1][13][13][13];\r\nint f[6];\r\nunsigned short g[1][13][13][13];\r\nunsigned h[1][13][13], i[1][13][13];\r\nshort j[1][13][13];\r\nunsigned k[3][13][13];\r\nunsigned short l[1][13];\r\nshort m[1][13];\r\nunsigned short n[1][13][13];\r\nunsigned o[1][13];\r\nvoid p(char q, int r, char s, unsigned char z[][13][13],\r\n       unsigned aa[][13][13][13], int ab[], unsigned short ac[][13][13][13],\r\n       unsigned ad[][13][13], short ae[][13][13], unsigned af[][13][13],\r\n       unsigned short ag[][13], short ah[][13], unsigned short ai[][13][13],\r\n       unsigned aj[][13][13], unsigned ak[][13]) {\r\n  for (unsigned t = 0; t < q; t += 50)\r\n    for (unsigned u = 0; u < 2; u = 6)\r\n      for (short w = 0; w < 2; w += 42155)\r\n        for (signed x = -15; x < r; x += s) {\r\n          b[x][x][u][2][x][2] = ab[5] ? ~af[2][1][x] : 0;\r\n          a = x ? c ? aj[2][u][x] : 0 : ae[2][w][4];\r\n        }\r\n}\r\nint main() {\r\n  f[5] = 8;\r\n  for (long t = 0; t < 3; ++t)\r\n    for (long v = 0; v < 3; ++v)\r\n      for (long y = 0; y < 3; ++y)\r\n        k[t][v][y] = 3004284279;\r\n  p(8, 322, 9, d, e, f, g, h, j, k, l, m, n, i, o);\r\n}\r\n```\r\n\r\nLLVM IR:\r\n```llvm ir\r\n; ModuleID = 'reduced.bc'\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\ndefine i32 @main(i64 %indvars.iv) #0 {\r\nentry:\r\n  br label %for.body17.us77.us.us.i\r\n\r\nfor.body17.us77.us.us.i:                          ; preds = %cond.end.us84.us.us.i, %entry\r\n  %indvars.iv1 = phi i64 [ %indvars.iv.next, %cond.end.us84.us.us.i ], [ 0, %entry ]\r\n  br i1 false, label %cond.end.us84.us.us.i, label %cond.true.us80.us.us.i\r\n\r\ncond.true.us80.us.us.i:                           ; preds = %for.body17.us77.us.us.i\r\n  %not.us83.us.us.i = xor i32 0, 0\r\n  br label %cond.end.us84.us.us.i\r\n\r\ncond.end.us84.us.us.i:                            ; preds = %cond.true.us80.us.us.i, %for.body17.us77.us.us.i\r\n  %cond.us85.us.us.i = phi i32 [ %not.us83.us.us.i, %cond.true.us80.us.us.i ], [ 0, %for.body17.us77.us.us.i ]\r\n  %arrayidx30.us87.us.us.i = getelementptr [0 x [3 x [3 x [3 x [3 x [3 x i32]]]]]], ptr null, i64 0, i64 %indvars.iv1, i64 %indvars.iv, i64 0, i64 2, i64 %indvars.iv, i64 2\r\n  store i32 %cond.us85.us.us.i, ptr %arrayidx30.us87.us.us.i, align 4\r\n  %indvars.iv.next = add i64 %indvars.iv1, 9\r\n  %cmp14.us95.us.us.i = icmp slt i64 %indvars.iv1, 322\r\n  br i1 %cmp14.us95.us.us.i, label %for.body17.us77.us.us.i, label %for.body17.us77.us.us.1.i.preheader\r\n\r\nfor.body17.us77.us.us.1.i.preheader:              ; preds = %cond.end.us84.us.us.i\r\n  ret i32 0\r\n}\r\n\r\nattributes #0 = { \"target-features\"=\"+64bit,+a,+c,+d,+f,+m,+relax,+v,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-b,-e,-experimental-smctr,-experimental-smmpm,-experimental-smnpm,-experimental-ssctr,-experimental-ssnpm,-experimental-sspm,-experimental-supm,-experimental-zacas,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smepmp,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zaamo,-zabha,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b\" }\r\n```\r\n\r\nCommand/backtrace:\r\n```\r\n> /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt -passes=loop-vectorize reduced.ll -S\r\nopt: /scratch/tc-testing/tc-compiler-fuzz-trunk/llvm/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:7400: llvm::VectorizationFactor llvm::LoopVectorizationPlanner::computeBestVF(): Assertion `(BestFactor.Width == LegacyVF.Width || planContainsAdditionalSimplifications(getPlanFor(BestFactor.Width), CostCtx, OrigLoop)) && \" VPlan cost model and legacy cost model disagreed\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt -passes=loop-vectorize reduced.ll -S\r\n1.      Running pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"reduced.ll\"\r\n2.      Running pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"main\"\r\n #0 0x000059162be7f6e0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x30136e0)\r\n #1 0x000059162be7caef llvm::sys::RunSignalHandlers() (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x3010aef)\r\n #2 0x000059162be7cc45 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007152dd642520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007152dd6969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007152dd6969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007152dd6969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007152dd642476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007152dd6287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00007152dd62871b _nl_load_domain ./intl/loadmsgcat.c:1177:9\r\n#10 0x00007152dd639e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n#11 0x000059162ae52310 llvm::LoopVectorizationPlanner::computeBestVF() (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x1fe6310)\r\n#12 0x000059162ae6910b llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x1ffd10b)\r\n#13 0x000059162ae6c121 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2000121)\r\n#14 0x000059162ae6c797 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2000797)\r\n#15 0x0000591629cc8756 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xe5c756)\r\n#16 0x000059162bc8b67f llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2e1f67f)\r\n#17 0x0000591629ccb8e6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xe5f8e6)\r\n#18 0x000059162bc89a1b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2e1da1b)\r\n#19 0x0000591629cc7b36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xe5bb36)\r\n#20 0x000059162bc8a57d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2e1e57d)\r\n#21 0x00005916294f41b6 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x6881b6)\r\n#22 0x00005916294e5f11 optMain (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x679f11)\r\n#23 0x00007152dd629d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#24 0x00007152dd629e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#25 0x00007152dd629e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#26 0x00005916294dc2c5 _start (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x6702c5)\r\nzsh: IOT instruction (core dumped)  /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt\r\n```\r\nhttps://godbolt.org/z/qEEqe1exM\r\n\r\nFound via fuzzer\r\n\r\nRelated/prior issue: https://github.com/llvm/llvm-project/issues/107171\r\n\r\ncc @fhahn",
    "author": "patrick-rivos",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "patrick-rivos",
        "body": "Ping. The C fuzzer is hitting this assertion ~15 times a day since the runs starting sep 6th."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}