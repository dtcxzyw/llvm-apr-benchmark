{
  "bug_id": "113462",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113462",
  "bug_type": "crash",
  "base_commit": "3605d9a456185f4af78c01a2684b822b57bca9b0",
  "knowledge_cutoff": "2024-10-23T14:33:27Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "b65b2b4ab60763515694c740935989f908a03312",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          9840,
          9852
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "size",
        "BaseShuffleAnalysis",
        "getFullVectorNumberOfElements",
        "getWidenedType",
        "getShuffleCost",
        "BoUpSLP",
        "ShuffleCostEstimator"
      ]
    }
  },
  "patch": "commit b65b2b4ab60763515694c740935989f908a03312\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Oct 23 12:03:38 2024 -0700\n\n    [SLP]Expand vector to the whole register size in extracts adjustment\n    \n    Need to expand the number of elements to the whole register to correctly\n    process estimation and avoid compiler crash.\n    \n    Fixes #113462\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex d824c40c401d..889c4d94ba5e 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -9840,13 +9840,14 @@ class BoUpSLP::ShuffleCostEstimator : public BaseShuffleAnalysis {\n             ::getShuffleCost(TTI, *RegShuffleKind,\n                              getWidenedType(ScalarTy, EltsPerVector), SubMask);\n       }\n+      const unsigned BaseVF = getFullVectorNumberOfElements(\n+          *R.TTI, VL.front()->getType(), alignTo(NumElts, EltsPerVector));\n       for (unsigned Idx : Indices) {\n-        assert((Idx + EltsPerVector) <= alignTo(NumElts, EltsPerVector) &&\n+        assert((Idx + EltsPerVector) <= BaseVF &&\n                \"SK_ExtractSubvector index out of range\");\n-        Cost += ::getShuffleCost(\n-            TTI, TTI::SK_ExtractSubvector,\n-            getWidenedType(ScalarTy, alignTo(NumElts, EltsPerVector)), {},\n-            CostKind, Idx, getWidenedType(ScalarTy, EltsPerVector));\n+        Cost += ::getShuffleCost(TTI, TTI::SK_ExtractSubvector,\n+                                 getWidenedType(ScalarTy, BaseVF), {}, CostKind,\n+                                 Idx, getWidenedType(ScalarTy, EltsPerVector));\n       }\n       // Second attempt to check, if just a permute is better estimated than\n       // subvector extract.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/partial-register-extract.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(i32 %v, ptr %p) {\nentry:\n  %ld = load i32, ptr %p, align 4\n  br i1 false, label %inc, label %ph\n\nph:                                               ; preds = %entry\n  %bi.i.not = icmp eq i32 %ld, 0\n  %b1.i.i = icmp eq i32 %ld, 0\n  %b3.i.i = icmp eq i32 %ld, 0\n  %0 = or i1 %b3.i.i, %b1.i.i\n  %b4.i.i = icmp eq i32 %ld, 0\n  %i4.i.i = select i1 %b4.i.i, i64 0, i64 0\n  %b5.i.i = icmp eq i32 0, 0\n  %i5.i.i = select i1 %b5.i.i, i64 0, i64 0\n  %inc34.5.i.i = or i64 %i4.i.i, %i5.i.i\n  %1 = or i1 %b5.i.i, %b4.i.i\n  %i6.i.i = select i1 false, i64 0, i64 0\n  %inc34.6.i.i = or i64 %inc34.5.i.i, %i6.i.i\n  %b7.i.i = icmp eq i32 0, 0\n  %i7.i.i = select i1 false, i64 0, i64 0\n  %inc34.7.i.i = or i64 %inc34.6.i.i, %i7.i.i\n  %i8.i.i = select i1 false, i64 0, i64 0\n  %inc34.8.i.i = or i64 %inc34.7.i.i, %i8.i.i\n  %i9.i.i = select i1 false, i64 0, i64 0\n  %inc34.9.i.i = or i64 %inc34.8.i.i, %i9.i.i\n  %b10.i.i = icmp eq i32 0, 0\n  %b11.i.i = icmp eq i32 0, 0\n  %2 = or i1 %b11.i.i, %b10.i.i\n  %b12.i.i = icmp eq i32 %v, 0\n  %3 = or i1 %b12.i.i, %2\n  %b13.i.i = icmp eq i32 0, 0\n  %b14.i.i = icmp eq i32 0, 0\n  %4 = or i1 %b14.i.i, %b13.i.i\n  %b16.i.i = icmp eq i32 0, 0\n  %b17.i.i = icmp eq i32 0, 0\n  %5 = or i1 %b17.i.i, %b16.i.i\n  %b18.i.i = icmp eq i32 0, 0\n  %6 = or i1 %b18.i.i, %5\n  %b19.i.i = icmp eq i32 0, 0\n  %b20.i.i = icmp eq i32 0, 0\n  %7 = or i1 %b20.i.i, %b19.i.i\n  %b21.i.i = icmp eq i32 0, 0\n  %8 = or i1 %b21.i.i, %7\n  %b22.i.i = icmp eq i32 0, 0\n  %b23.i.i = icmp eq i32 0, 0\n  %9 = or i1 %b23.i.i, %b22.i.i\n  %b24.i.i = icmp eq i32 0, 0\n  %10 = or i1 %b24.i.i, %9\n  %11 = select i1 %10, i1 true, i1 %8\n  %12 = select i1 %11, i1 true, i1 %6\n  %13 = select i1 %12, i1 true, i1 %4\n  %14 = select i1 %13, i1 true, i1 %3\n  %15 = select i1 %14, i1 true, i1 %b7.i.i\n  %16 = select i1 %15, i1 true, i1 %1\n  %17 = or i1 %0, %bi.i.not\n  %18 = select i1 %16, i1 true, i1 %17\n  %and252.us.i.24.i.i = select i1 %18, i32 0, i32 0\n  br label %inc\n\ninc:                                              ; preds = %ph, %entry\n  %p1 = phi i32 [ %and252.us.i.24.i.i, %ph ], [ 0, %entry ]\n  %p2 = phi i64 [ %inc34.9.i.i, %ph ], [ 0, %entry ]\n  ret i32 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Assertion `(Idx + EltsPerVector) <= alignTo(NumElts, EltsPerVector) && \"SK_ExtractSubvector index out of range\"' failed.",
    "body": "Reproducer: https://godbolt.org/z/fxYWYnWKs\r\n```\r\n; bin/opt -passes=slp-vectorizer reduced.ll -S\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndeclare void @callee(i32, i64)\r\n\r\ndefine i32 @main(i32 %g_274.promoted2477.i.i.i, ptr %p) {\r\nentry:\r\n  %g_274.promoted2477.i.i.i1 = load i32, ptr %p, align 4\r\n  br i1 false, label %for.inc347.i.i.i, label %for.cond159.preheader.i.i.i\r\n\r\nfor.cond159.preheader.i.i.i:                      ; preds = %entry\r\n  %tobool239.not.us.i.i.i.not = icmp eq i32 %g_274.promoted2477.i.i.i1, 0\r\n  %tobool239.not.us.i.1.i.i = icmp eq i32 %g_274.promoted2477.i.i.i1, 0\r\n  %tobool239.not.us.i.3.i.i = icmp eq i32 %g_274.promoted2477.i.i.i1, 0\r\n  %0 = or i1 %tobool239.not.us.i.3.i.i, %tobool239.not.us.i.1.i.i\r\n  %tobool239.not.us.i.4.i.i = icmp eq i32 %g_274.promoted2477.i.i.i1, 0\r\n  %inc34.i21362404.us.v.i.4.i.i = select i1 %tobool239.not.us.i.4.i.i, i64 0, i64 0\r\n  %tobool239.not.us.i.5.i.i = icmp eq i32 0, 0\r\n  %inc34.i21362404.us.v.i.5.i.i = select i1 %tobool239.not.us.i.5.i.i, i64 0, i64 0\r\n  %inc34.i21362404.us.i.5.i.i = or i64 %inc34.i21362404.us.v.i.4.i.i, %inc34.i21362404.us.v.i.5.i.i\r\n  %1 = or i1 %tobool239.not.us.i.5.i.i, %tobool239.not.us.i.4.i.i\r\n  %inc34.i21362404.us.v.i.6.i.i = select i1 false, i64 0, i64 0\r\n  %inc34.i21362404.us.i.6.i.i = or i64 %inc34.i21362404.us.i.5.i.i, %inc34.i21362404.us.v.i.6.i.i\r\n  %tobool239.not.us.i.7.i.i = icmp eq i32 0, 0\r\n  %inc34.i21362404.us.v.i.7.i.i = select i1 false, i64 0, i64 0\r\n  %inc34.i21362404.us.i.7.i.i = or i64 %inc34.i21362404.us.i.6.i.i, %inc34.i21362404.us.v.i.7.i.i\r\n  %inc34.i21362404.us.v.i.8.i.i = select i1 false, i64 0, i64 0\r\n  %inc34.i21362404.us.i.8.i.i = or i64 %inc34.i21362404.us.i.7.i.i, %inc34.i21362404.us.v.i.8.i.i\r\n  %inc34.i21362404.us.v.i.9.i.i = select i1 false, i64 0, i64 0\r\n  %inc34.i21362404.us.i.9.i.i = or i64 %inc34.i21362404.us.i.8.i.i, %inc34.i21362404.us.v.i.9.i.i\r\n  %tobool239.not.us.i.10.i.i = icmp eq i32 0, 0\r\n  %tobool239.not.us.i.11.i.i = icmp eq i32 0, 0\r\n  %2 = or i1 %tobool239.not.us.i.11.i.i, %tobool239.not.us.i.10.i.i\r\n  %tobool239.not.us.i.12.i.i = icmp eq i32 %g_274.promoted2477.i.i.i, 0\r\n  %3 = or i1 %tobool239.not.us.i.12.i.i, %2\r\n  %tobool239.not.us.i.13.i.i = icmp eq i32 0, 0\r\n  %tobool239.not.us.i.14.i.i = icmp eq i32 0, 0\r\n  %4 = or i1 %tobool239.not.us.i.14.i.i, %tobool239.not.us.i.13.i.i\r\n  %tobool239.not.us.i.16.i.i = icmp eq i32 0, 0\r\n  %tobool239.not.us.i.17.i.i = icmp eq i32 0, 0\r\n  %5 = or i1 %tobool239.not.us.i.17.i.i, %tobool239.not.us.i.16.i.i\r\n  %tobool239.not.us.i.18.i.i = icmp eq i32 0, 0\r\n  %6 = or i1 %tobool239.not.us.i.18.i.i, %5\r\n  %tobool239.not.us.i.19.i.i = icmp eq i32 0, 0\r\n  %tobool239.not.us.i.20.i.i = icmp eq i32 0, 0\r\n  %7 = or i1 %tobool239.not.us.i.20.i.i, %tobool239.not.us.i.19.i.i\r\n  %tobool239.not.us.i.21.i.i = icmp eq i32 0, 0\r\n  %8 = or i1 %tobool239.not.us.i.21.i.i, %7\r\n  %tobool239.not.us.i.22.i.i = icmp eq i32 0, 0\r\n  %tobool239.not.us.i.23.i.i = icmp eq i32 0, 0\r\n  %9 = or i1 %tobool239.not.us.i.23.i.i, %tobool239.not.us.i.22.i.i\r\n  %tobool239.not.us.i.24.i.i = icmp eq i32 0, 0\r\n  %10 = or i1 %tobool239.not.us.i.24.i.i, %9\r\n  %11 = select i1 %10, i1 true, i1 %8\r\n  %12 = select i1 %11, i1 true, i1 %6\r\n  %13 = select i1 %12, i1 true, i1 %4\r\n  %14 = select i1 %13, i1 true, i1 %3\r\n  %15 = select i1 %14, i1 true, i1 %tobool239.not.us.i.7.i.i\r\n  %16 = select i1 %15, i1 true, i1 %1\r\n  %17 = or i1 %0, %tobool239.not.us.i.i.i.not\r\n  %18 = select i1 %16, i1 true, i1 %17\r\n  %and252.us.i.24.i.i = select i1 %18, i32 0, i32 0\r\n  br label %for.inc347.i.i.i\r\n\r\nfor.inc347.i.i.i:                                 ; preds = %for.cond159.preheader.i.i.i, %entry\r\n  %g_202.promoted.i.i.i = phi i32 [ %and252.us.i.24.i.i, %for.cond159.preheader.i.i.i ], [ 0, %entry ]\r\n  %.us-phi24612468.i.i.i = phi i64 [ %inc34.i21362404.us.i.9.i.i, %for.cond159.preheader.i.i.i ], [ 0, %entry ]\r\n  call void @callee(i32 %g_202.promoted.i.i.i, i64 %.us-phi24612468.i.i.i)\r\n  ret i32 0\r\n}\r\n```\r\n```\r\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:9844: llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::computeExtractCost(llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<int>, llvm::ArrayRef<std::optional<llvm::TargetTransformInfo::ShuffleKind> >, unsigned int): Assertion `(Idx + EltsPerVector) <= alignTo(NumElts, EltsPerVector) && \"SK_ExtractSubvector index out of range\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\r\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\r\n2.\tRunning pass \"slp-vectorizer\" on function \"main\"\r\n #0 0x00000000050d8608 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x50d8608)\r\n #1 0x00000000050d5fbc SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007ed1b9642520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x00007ed1b96969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x00007ed1b9642476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x00007ed1b96287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00007ed1b962871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x00007ed1b9639e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x000000000413c75f llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::computeExtractCost(llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<int>, llvm::ArrayRef<std::optional<llvm::TargetTransformInfo::ShuffleKind>>, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x413c75f)\r\n #9 0x0000000004140d8b llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::adjustExtracts(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::MutableArrayRef<int>, llvm::ArrayRef<std::optional<llvm::TargetTransformInfo::ShuffleKind>>, unsigned int, bool&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4140d8b)\r\n#10 0x000000000417b42a llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::processBuildVector<llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator, llvm::InstructionCost, llvm::TargetTransformInfo, llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP, llvm::SmallPtrSetImpl<llvm::Value*>>(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::Type*, llvm::TargetTransformInfo&, llvm::ArrayRef<llvm::Value*>&, llvm::slpvectorizer::BoUpSLP&, llvm::SmallPtrSetImpl<llvm::Value*>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x417b42a)\r\n#11 0x000000000417cae7 llvm::slpvectorizer::BoUpSLP::getEntryCost(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::ArrayRef<llvm::Value*>, llvm::SmallPtrSetImpl<llvm::Value*>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x417cae7)\r\n#12 0x00000000041b6e11 llvm::slpvectorizer::BoUpSLP::getTreeCost(llvm::ArrayRef<llvm::Value*>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x41b6e11)\r\n#13 0x00000000041bc5df (anonymous namespace)::HorizontalReduction::tryToReduce(llvm::slpvectorizer::BoUpSLP&, llvm::DataLayout const&, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo const&) SLPVectorizer.cpp:0:0\r\n#14 0x00000000041bfb71 llvm::SLPVectorizerPass::vectorizeHorReduction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::SmallVectorImpl<llvm::WeakTrackingVH>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x41bfb71)\r\n#15 0x00000000041c431b llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\r\n#16 0x00000000041c856e llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x41c856e)\r\n#17 0x00000000041cf231 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n#18 0x00000000041cfedb llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x41cfedb)\r\n#19 0x0000000002f64f0e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2f64f0e)\r\n#20 0x0000000004ed9788 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4ed9788)\r\n#21 0x0000000000e2773e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe2773e)\r\n#22 0x0000000004ed81ae llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4ed81ae)\r\n#23 0x0000000000e26e8e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe26e8e)\r\n#24 0x0000000004ed7be0 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4ed7be0)\r\n#25 0x000000000090a07a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x90a07a)\r\n#26 0x00000000008fce7c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8fce7c)\r\n#27 0x00007ed1b9629d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#28 0x00007ed1b9629e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#29 0x00000000008f493e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8f493e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```\r\n\r\nllvm version: 8a9921f5692ab33451d11454b40a023ca0965a69\r\n",
    "author": "dtcxzyw",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  }
}
