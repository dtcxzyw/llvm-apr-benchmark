{
  "bug_id": "113423",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113423",
  "bug_type": "miscompilation",
  "base_commit": "a1c6dc223ee1eedc049890676992b508ebd6b623",
  "knowledge_cutoff": "2024-10-23T07:13:21Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "cf1963afad335cf74a9411f106d1f2fe80dbed2f",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          529,
          537
        ],
        [
          564,
          569
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::foldSelectIntoOp"
      ]
    }
  },
  "patch": "commit cf1963afad335cf74a9411f106d1f2fe80dbed2f\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu Oct 31 23:26:45 2024 +0800\n\n    [InstCombine] Fix FMF propagation in `foldSelectIntoOp` (#114356)\n    \n    Closes https://github.com/llvm/llvm-project/issues/113423.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex c5f39a4c381e..9e193e7faa8a 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -529,9 +529,6 @@ Instruction *InstCombinerImpl::foldSelectIntoOp(SelectInst &SI, Value *TrueVal,\n     if (!OpToFold)\n       return nullptr;\n \n-    // TODO: We probably ought to revisit cases where the select and FP\n-    // instructions have different flags and add tests to ensure the\n-    // behaviour is correct.\n     FastMathFlags FMF;\n     if (isa<FPMathOperator>(&SI))\n       FMF = SI.getFastMathFlags();\n@@ -564,6 +561,8 @@ Instruction *InstCombinerImpl::foldSelectIntoOp(SelectInst &SI, Value *TrueVal,\n     BinaryOperator *BO =\n         BinaryOperator::Create(TVI->getOpcode(), FalseVal, NewSel);\n     BO->copyIRFlags(TVI);\n+    if (isa<FPMathOperator>(&SI))\n+      BO->andIRFlags(NewSel);\n     return BO;\n   };\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/fold-select-fmul-if-zero.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "fmul_by_self_if_0_oeq_zero_f32_fmul_nnan_ninf_nsz",
          "test_body": "define float @fmul_by_self_if_0_oeq_zero_f32_fmul_nnan_ninf_nsz(float %x) {\n  %x.is.zero = fcmp oeq float %x, 0.000000e+00\n  %scaled.x = fmul nnan ninf nsz float %x, %x\n  %scaled.if.denormal = select nnan i1 %x.is.zero, float %scaled.x, float %x\n  ret float %scaled.if.denormal\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Wrong folding of `select` into floating number ops",
    "body": "https://github.com/llvm/llvm-project/blob/ae618d360456c5ccf6c8cf2294e708ac6625950e/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp#L559-L568\r\n\r\nThe compiler explorer's alive2 times out for this case.\r\nBut I post a proof that the optimization actually happens: https://alive2.llvm.org/ce/z/7MRSu5\r\n\r\n\r\nThis is the Alive2 report on my machine:\r\n```llvm\r\n----------------------------------------\r\ndefine float @fmul_by_self_if_0_oeq_zero_f32_fmul_nnan_ninf_nsz.2(float %x) {\r\n#0:\r\n  %#1 = fcmp ule float %x, 0.000000\r\n  %scaled.x = fmul nnan ninf nsz float %x, %x\r\n  %scaled.if.denormal = select nnan i1 %#1, float %x, float %scaled.x\r\n  ret float %scaled.if.denormal\r\n}\r\n=>\r\ndefine float @fmul_by_self_if_0_oeq_zero_f32_fmul_nnan_ninf_nsz.2(float %x) {\r\n#0:\r\n  %#1 = fcmp ule float %x, 0.000000\r\n  %scaled.x = select nnan i1 %#1, float 1.000000, float %x\r\n  %scaled.if.denormal = fmul nnan ninf nsz float %scaled.x, %x\r\n  ret float %scaled.if.denormal\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\nfloat %x = #xff800000 (-oo)\r\n\r\nSource:\r\ni1 %#1 = #x1 (1)\r\nfloat %scaled.x = poison\r\nfloat %scaled.if.denormal = #xff800000 (-oo)\r\n\r\nTarget:\r\ni1 %#1 = #x1 (1)\r\nfloat %scaled.x = #x3f800000 (1)\r\nfloat %scaled.if.denormal = poison\r\nSource value: #xff800000 (-oo)\r\nTarget value: poison\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}