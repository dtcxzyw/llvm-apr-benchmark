{
  "bug_id": "112460",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112460",
  "bug_type": "miscompilation",
  "base_commit": "65cf7afb6d9d8c6137b90d909ee4fcf251439f48",
  "knowledge_cutoff": "2024-10-16T01:34:25Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e56e9dd8adca2e86f22783bf5e745ee1ba7ead5f",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          14953,
          14958
        ],
        [
          17095,
          17100
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::collectValuesToDemote",
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit e56e9dd8adca2e86f22783bf5e745ee1ba7ead5f\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Oct 18 13:32:41 2024 -0700\n\n    [SLP]Fix minbitwidth emission and analysis for freeze instruction\n    \n    Need to add minbw emission and analysis for freeze instruction to fix\n    incorrect signedness propagation.\n    \n    Fixes #112460\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 53632efe913e..e7b52fbdcc3b 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -14953,6 +14953,12 @@ Value *BoUpSLP::vectorizeTree(TreeEntry *E, bool PostponedPHIs) {\n         return E->VectorizedValue;\n       }\n \n+      if (Op->getType() != VecTy) {\n+        assert((It != MinBWs.end() || getOperandEntry(E, 0)->isGather() ||\n+                MinBWs.contains(getOperandEntry(E, 0))) &&\n+               \"Expected item in MinBWs.\");\n+        Op = Builder.CreateIntCast(Op, VecTy, GetOperandSignedness(0));\n+      }\n       Value *V = Builder.CreateFreeze(Op);\n       V = FinalShuffle(V, E);\n \n@@ -17095,6 +17101,8 @@ bool BoUpSLP::collectValuesToDemote(\n     return TryProcessInstruction(\n         BitWidth, {getOperandEntry(&E, 0), getOperandEntry(&E, 1)});\n   }\n+  case Instruction::Freeze:\n+    return TryProcessInstruction(BitWidth, getOperandEntry(&E, 0));\n   case Instruction::Shl: {\n     // If we are truncating the result of this SHL, and if it's a shift of an\n     // inrange amount, we can always perform a SHL in a smaller type.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/freeze-signedness-missed.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(i1 %.b, i8 %conv18, i32 %k.promoted61) {\n  %not..b79 = xor i1 %.b, true\n  %1 = zext i1 %not..b79 to i8\n  %cmp.i51 = icmp eq i8 %1, 0\n  %cond.i55 = freeze i8 %1\n  %.cmp = icmp ugt i8 %cond.i55, %conv18\n  %.urem = select i1 %.cmp, i8 0, i8 %cond.i55\n  %2 = sub nuw i8 %conv18, %.urem\n  %cond.in.i = select i1 %cmp.i51, i8 %conv18, i8 %2\n  %not..b80 = xor i1 %.b, true\n  %3 = zext i1 %not..b80 to i8\n  %cmp.i51.1 = icmp eq i8 %3, 0\n  %cond.i55.1 = freeze i8 %3\n  %.cmp.1 = icmp ugt i8 %cond.i55.1, %conv18\n  %.urem.1 = select i1 %.cmp.1, i8 0, i8 %cond.i55.1\n  %4 = sub nuw i8 %conv18, %.urem.1\n  %cond.in.i.1 = select i1 %cmp.i51.1, i8 %conv18, i8 %4\n  %not..b81 = xor i1 %.b, true\n  %5 = zext i1 %not..b81 to i8\n  %cmp.i51.2 = icmp eq i8 %5, 0\n  %cond.i55.2 = freeze i8 %5\n  %.cmp.2 = icmp ugt i8 %cond.i55.2, %conv18\n  %.urem.2 = select i1 %.cmp.2, i8 0, i8 %cond.i55.2\n  %6 = sub nuw i8 %conv18, %.urem.2\n  %cond.in.i.2 = select i1 %cmp.i51.2, i8 %conv18, i8 %6\n  %not..b = xor i1 %.b, true\n  %7 = zext i1 %not..b to i8\n  %cmp.i51.3 = icmp eq i8 %7, 0\n  %cond.i55.3 = freeze i8 %7\n  %.cmp.3 = icmp ugt i8 %cond.i55.3, %conv18\n  %.urem.3 = select i1 %.cmp.3, i8 0, i8 %cond.i55.3\n  %8 = sub nuw i8 %conv18, %.urem.3\n  %cond.in.i.3 = select i1 %cmp.i51.3, i8 %conv18, i8 %8\n  %conv26 = zext nneg i8 %cond.in.i to i32\n  %or = or i32 %k.promoted61, %conv26\n  %conv26.1 = zext nneg i8 %cond.in.i.1 to i32\n  %or.1 = or i32 %or, %conv26.1\n  %conv26.2 = zext nneg i8 %cond.in.i.2 to i32\n  %or.2 = or i32 %or.1, %conv26.2\n  %conv26.3 = zext nneg i8 %cond.in.i.3 to i32\n  %or.3 = or i32 %or.2, %conv26.3\n  ret i32 %or.3\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Miscompilation at -O2",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/Tw0oUm\r\n```\r\n; bin/opt -passes=slp-vectorizer test.ll -S\r\ndefine i32 @src(i1 %.b, i8 %conv18, i32 %k.promoted61) {\r\n  %not..b79 = xor i1 %.b, true\r\n  %3 = zext i1 %not..b79 to i8\r\n  %cmp.i51 = icmp eq i8 %3, 0\r\n  %cond.i55.frozen = freeze i8 %3\r\n  %.cmp = icmp ugt i8 %cond.i55.frozen, %conv18\r\n  %.urem = select i1 %.cmp, i8 0, i8 %cond.i55.frozen\r\n  %4 = sub nuw i8 %conv18, %.urem\r\n  %cond.in.i = select i1 %cmp.i51, i8 %conv18, i8 %4\r\n  %not..b80 = xor i1 %.b, true\r\n  %5 = zext i1 %not..b80 to i8\r\n  %cmp.i51.1 = icmp eq i8 %5, 0\r\n  %cond.i55.frozen.1 = freeze i8 %5\r\n  %.cmp.1 = icmp ugt i8 %cond.i55.frozen.1, %conv18\r\n  %.urem.1 = select i1 %.cmp.1, i8 0, i8 %cond.i55.frozen.1\r\n  %6 = sub nuw i8 %conv18, %.urem.1\r\n  %cond.in.i.1 = select i1 %cmp.i51.1, i8 %conv18, i8 %6\r\n  %not..b81 = xor i1 %.b, true\r\n  %7 = zext i1 %not..b81 to i8\r\n  %cmp.i51.2 = icmp eq i8 %7, 0\r\n  %cond.i55.frozen.2 = freeze i8 %7\r\n  %.cmp.2 = icmp ugt i8 %cond.i55.frozen.2, %conv18\r\n  %.urem.2 = select i1 %.cmp.2, i8 0, i8 %cond.i55.frozen.2\r\n  %8 = sub nuw i8 %conv18, %.urem.2\r\n  %cond.in.i.2 = select i1 %cmp.i51.2, i8 %conv18, i8 %8\r\n  %not..b = xor i1 %.b, true\r\n  %9 = zext i1 %not..b to i8\r\n  %cmp.i51.3 = icmp eq i8 %9, 0\r\n  %cond.i55.frozen.3 = freeze i8 %9\r\n  %.cmp.3 = icmp ugt i8 %cond.i55.frozen.3, %conv18\r\n  %.urem.3 = select i1 %.cmp.3, i8 0, i8 %cond.i55.frozen.3\r\n  %10 = sub nuw i8 %conv18, %.urem.3\r\n  %cond.in.i.3 = select i1 %cmp.i51.3, i8 %conv18, i8 %10\r\n  %conv26 = zext nneg i8 %cond.in.i to i32\r\n  %or = or i32 %k.promoted61, %conv26\r\n  %conv26.1 = zext nneg i8 %cond.in.i.1 to i32\r\n  %or.1 = or i32 %or, %conv26.1\r\n  %conv26.2 = zext nneg i8 %cond.in.i.2 to i32\r\n  %or.2 = or i32 %or.1, %conv26.2\r\n  %conv26.3 = zext nneg i8 %cond.in.i.3 to i32\r\n  %or.3 = or i32 %or.2, %conv26.3\r\n  ret i32 %or.3\r\n}\r\n```\r\n```\r\ndefine i32 @src(i1 %.b, i8 %conv18, i32 %k.promoted61) {\r\n  %1 = insertelement <4 x i1> poison, i1 %.b, i32 0\r\n  %2 = shufflevector <4 x i1> %1, <4 x i1> poison, <4 x i32> zeroinitializer\r\n  %3 = xor <4 x i1> %2, <i1 true, i1 true, i1 true, i1 true>\r\n  %4 = zext <4 x i1> %3 to <4 x i8>\r\n  %5 = icmp eq <4 x i8> %4, zeroinitializer\r\n  %6 = freeze <4 x i1> %3\r\n  %7 = sext <4 x i1> %6 to <4 x i8>\r\n  %8 = insertelement <4 x i8> poison, i8 %conv18, i32 0\r\n  %9 = shufflevector <4 x i8> %8, <4 x i8> poison, <4 x i32> zeroinitializer\r\n  %10 = icmp ugt <4 x i8> %7, %9\r\n  %11 = select <4 x i1> %10, <4 x i8> zeroinitializer, <4 x i8> %7\r\n  %12 = sub nuw <4 x i8> %9, %11\r\n  %13 = select <4 x i1> %5, <4 x i8> %9, <4 x i8> %12\r\n  %14 = zext <4 x i8> %13 to <4 x i32>\r\n  %15 = call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %14)\r\n  %op.rdx = or i32 %15, %k.promoted61\r\n  ret i32 %op.rdx\r\n}\r\n```\r\n```\r\nTransformation doesn't verify!\r\n\r\nERROR: Value mismatch\r\n\r\nExample:\r\ni1 %.b = #x0 (0)\r\ni8 %conv18 = #x01 (1)\r\ni32 %k.promoted61 = #x00000000 (0)\r\n\r\nSource:\r\ni1 %not..b79 = #x1 (1)\r\ni8 %#1 = #x01 (1)\r\ni1 %cmp.i51 = #x0 (0)\r\ni8 %cond.i55.frozen = #x01 (1)\r\ni1 %.cmp = #x0 (0)\r\ni8 %.urem = #x01 (1)\r\ni8 %#2 = #x00 (0)\r\ni8 %cond.in.i = #x00 (0)\r\ni1 %not..b80 = #x1 (1)\r\ni8 %#3 = #x01 (1)\r\ni1 %cmp.i51.1 = #x0 (0)\r\ni8 %cond.i55.frozen.1 = #x01 (1)\r\ni1 %.cmp.1 = #x0 (0)\r\ni8 %.urem.1 = #x01 (1)\r\ni8 %#4 = #x00 (0)\r\ni8 %cond.in.i.1 = #x00 (0)\r\ni1 %not..b81 = #x1 (1)\r\ni8 %#5 = #x01 (1)\r\ni1 %cmp.i51.2 = #x0 (0)\r\ni8 %cond.i55.frozen.2 = #x01 (1)\r\ni1 %.cmp.2 = #x0 (0)\r\ni8 %.urem.2 = #x01 (1)\r\ni8 %#6 = #x00 (0)\r\ni8 %cond.in.i.2 = #x00 (0)\r\ni1 %not..b = #x1 (1)\r\ni8 %#7 = #x01 (1)\r\ni1 %cmp.i51.3 = #x0 (0)\r\ni8 %cond.i55.frozen.3 = #x01 (1)\r\ni1 %.cmp.3 = #x0 (0)\r\ni8 %.urem.3 = #x01 (1)\r\ni8 %#8 = #x00 (0)\r\ni8 %cond.in.i.3 = #x00 (0)\r\ni32 %conv26 = #x00000000 (0)\r\ni32 %or = #x00000000 (0)\r\ni32 %conv26.1 = #x00000000 (0)\r\ni32 %or.1 = #x00000000 (0)\r\ni32 %conv26.2 = #x00000000 (0)\r\ni32 %or.2 = #x00000000 (0)\r\ni32 %conv26.3 = #x00000000 (0)\r\ni32 %or.3 = #x00000000 (0)\r\n\r\nTarget:\r\n<4 x i1> %#1 = < #x0 (0), poison, poison, poison >\r\n<4 x i1> %#2 = < #x0 (0), #x0 (0), #x0 (0), #x0 (0) >\r\n<4 x i1> %#3 = < #x1 (1), #x1 (1), #x1 (1), #x1 (1) >\r\n<4 x i8> %#4 = < #x01 (1), #x01 (1), #x01 (1), #x01 (1) >\r\n<4 x i1> %#5 = < #x0 (0), #x0 (0), #x0 (0), #x0 (0) >\r\n<4 x i1> %#6 = < #x1 (1), #x1 (1), #x1 (1), #x1 (1) >\r\n<4 x i8> %#7 = < #xff (255, -1), #xff (255, -1), #xff (255, -1), #xff (255, -1) >\r\n<4 x i8> %#8 = < #x01 (1), poison, poison, poison >\r\n<4 x i8> %#9 = < #x01 (1), #x01 (1), #x01 (1), #x01 (1) >\r\n<4 x i1> %#10 = < #x1 (1), #x1 (1), #x1 (1), #x1 (1) >\r\n<4 x i8> %#11 = < #x00 (0), #x00 (0), #x00 (0), #x00 (0) >\r\n<4 x i8> %#12 = < #x01 (1), #x01 (1), #x01 (1), #x01 (1) >\r\n<4 x i8> %#13 = < #x01 (1), #x01 (1), #x01 (1), #x01 (1) >\r\n<4 x i32> %#14 = < #x00000001 (1), #x00000001 (1), #x00000001 (1), #x00000001 (1) >\r\ni32 %#15 = #x00000001 (1)\r\ni32 %op.rdx = #x00000001 (1)\r\nSource value: #x00000000 (0)\r\nTarget value: #x00000001 (1)\r\n```\r\n\r\nllvm version: 69f7758ddba662b63667507f2c472c008909dd7e\r\ncc @alexey-bataev ",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": []
  }
}