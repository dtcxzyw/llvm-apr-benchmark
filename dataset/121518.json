{
  "bug_id": "121518",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121518",
  "bug_type": "crash",
  "base_commit": "2a5050aa5ef56b01cf4a8f73e0d0eddd6d9ce2a9",
  "knowledge_cutoff": "2025-01-02T20:14:01Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "e258bca9505f35e0a22cb213a305eea9b76d11ea",
    "components": [
      "LoopVectorize",
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp": [
        [
          1451,
          1457
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          3404,
          3410
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanUtils.cpp": [
        [
          30,
          40
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp": [
        "SCEVExpander::expandCodeFor"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPExpandSCEVRecipe::execute"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanUtils.cpp": [
        "vputils::getOrCreateVPValueForSCEVExpr"
      ]
    }
  },
  "patch": "commit e258bca9505f35e0a22cb213a305eea9b76d11ea\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Tue Feb 11 13:03:12 2025 +0100\n\n    [VPlan] Only skip expansion for SCEVUnknown if it isn't an instruction. (#125235)\n    \n    Update getOrCreateVPValueForSCEVExpr to only skip expansion of\n    SCEVUnknown if the underlying value isn't an instruction. Instructions\n    may be defined in a loop and using them without expansion may break\n    LCSSA form. SCEVExpander will take care of preserving LCSSA if needed.\n    \n    We could also try to pass LoopInfo, but there are some users of the\n    function where it won't be available and main benefit from skipping\n    expansion is slightly more concise VPlans.\n    \n    Note that SCEVExpander is now used to expand SCEVUnknown with floats.\n    Adjust the check in expandCodeFor to only check the types and casts if\n    the type of the value is different to the requested type. Otherwise we\n    crash when trying to expand a float and requesting a float type.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/121518.\n    \n    PR: https://github.com/llvm/llvm-project/pull/125235\n\ndiff --git a/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp b/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp\nindex 3a761bc4e811..d429fe96f9be 100644\n--- a/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp\n+++ b/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp\n@@ -1451,7 +1451,7 @@ Value *SCEVExpander::expandCodeFor(const SCEV *SH, Type *Ty) {\n   // Expand the code for this SCEV.\n   Value *V = expand(SH);\n \n-  if (Ty) {\n+  if (Ty && Ty != V->getType()) {\n     assert(SE.getTypeSizeInBits(Ty) == SE.getTypeSizeInBits(SH->getType()) &&\n            \"non-trivial casts should be done with the SCEVs directly!\");\n     V = InsertNoopCastOfTo(V, Ty);\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 618c8aef3840..1855fb67aa54 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -3404,7 +3404,7 @@ void VPExpandSCEVRecipe::execute(VPTransformState &State) {\n   }\n \n   const DataLayout &DL = State.CFG.PrevBB->getDataLayout();\n-  SCEVExpander Exp(SE, DL, \"induction\");\n+  SCEVExpander Exp(SE, DL, \"induction\", /*PreserveLCSSA=*/true);\n \n   Value *Res = Exp.expandCodeFor(Expr, Expr->getType(),\n                                  &*State.Builder.GetInsertPoint());\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanUtils.cpp b/llvm/lib/Transforms/Vectorize/VPlanUtils.cpp\nindex e40af3e2e3d3..1a7322ec0aff 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanUtils.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanUtils.cpp\n@@ -30,11 +30,18 @@ VPValue *vputils::getOrCreateVPValueForSCEVExpr(VPlan &Plan, const SCEV *Expr,\n   VPValue *Expanded = nullptr;\n   if (auto *E = dyn_cast<SCEVConstant>(Expr))\n     Expanded = Plan.getOrAddLiveIn(E->getValue());\n-  else if (auto *E = dyn_cast<SCEVUnknown>(Expr))\n-    Expanded = Plan.getOrAddLiveIn(E->getValue());\n   else {\n-    Expanded = new VPExpandSCEVRecipe(Expr, SE);\n-    Plan.getEntry()->appendRecipe(Expanded->getDefiningRecipe());\n+    auto *U = dyn_cast<SCEVUnknown>(Expr);\n+    // Skip SCEV expansion if Expr is a SCEVUnknown wrapping a non-instruction\n+    // value. Otherwise the value may be defined in a loop and using it directly\n+    // will break LCSSA form. The SCEV expansion takes care of preserving LCSSA\n+    // form.\n+    if (U && !isa<Instruction>(U->getValue())) {\n+      Expanded = Plan.getOrAddLiveIn(U->getValue());\n+    } else {\n+      Expanded = new VPExpandSCEVRecipe(Expr, SE);\n+      Plan.getEntry()->appendRecipe(Expanded->getDefiningRecipe());\n+    }\n   }\n   Plan.addSCEVExpansion(Expr, Expanded);\n   return Expanded;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/scev-checks-unprofitable.ll",
      "commands": [
        "opt -p loop-vectorize -vectorizer-min-trip-count=8  -mcpu=skylake-avx512 -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Test case for https://github.com/llvm/llvm-project/issues/121518. Make sure\n; that we preserve LCSSA form when using %iv.1 from loop.1 in the trip count\n; expression when vectorizing loop.2\ndefine void @value_defined_in_loop1_used_for_trip_counts(i32 %start, i1 %c, ptr %dst) {\n;\nentry:\n  %select = select i1 %c, i32 0, i32 7\n  %zext = zext i32 %select to i64\n  br label %loop.1\n\nloop.1:\n  %iv.1 = phi i64 [ 0, %entry ], [ %zext, %loop.1 ]\n  br i1 false, label %loop.1.exit, label %loop.1\n\nloop.1.exit:\n  br i1 %c, label %loop.2, label %loop.3\n\nloop.2:\n  %iv.2 = phi i64 [ 0, %loop.1.exit ], [ %iv.2.next, %loop.2 ]\n  %iv.3 = phi i32 [ %start, %loop.1.exit ], [ %iv.3.next, %loop.2 ]\n  %iv.3.next = add i32 %iv.3, 1\n  %iv.2.next = add i64 %iv.2, 1\n  %shl = shl i32 %iv.3, 1\n  %zext8 = zext i32 %shl to i64\n  %gep.dst = getelementptr i8, ptr %dst, i64 %zext8\n  store i16 0, ptr %gep.dst, align 2\n  %ec.2 = icmp ult i64 %iv.2, %iv.1\n  br i1 %ec.2, label %loop.2, label %exit.1\n\nloop.3:\n  %iv.4 = phi i64 [ 0, %loop.1.exit ], [ %iv.4.next, %loop.3 ]\n  %gep.dst.2 = getelementptr i8, ptr %dst, i64 %iv.4\n  store i8 0, ptr %gep.dst.2, align 1\n  %iv.4.next = add i64 %iv.4, 1\n  %ec.3 = icmp ult i64 %iv.4.next, %iv.1\n  br i1 %ec.3, label %loop.3, label %exit.1\n\nexit.1:\n  ret void\n}\n;.\n;."
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/float-induction.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize,dce,instcombine -force-vector-interleave=1 -force-vector-width=4 -S",
        "opt < %s -passes=loop-vectorize,dce,instcombine -force-vector-interleave=2 -force-vector-width=4 -S",
        "opt < %s -passes=loop-vectorize,dce,instcombine -force-vector-interleave=2 -force-vector-width=1 -S",
        "opt < %s -passes=loop-vectorize,dce,simplifycfg,instcombine,simplifycfg -force-vector-interleave=1 -force-vector-width=2 -simplifycfg-require-and-preserve-domtree=1 -keep-loops=false -S"
      ],
      "tests": [
        {
          "test_name": "fp_iv_loop3",
          "test_body": "@fp_inc = external global float, align 4\n\ndefine void @fp_iv_loop3(float %init, ptr noalias captures(none) %A, ptr noalias captures(none) %B, ptr noalias captures(none) %C, i32 %N) {\nentry:\n  %cmp9 = icmp sgt i32 %N, 0\n  br i1 %cmp9, label %for.body.lr.ph, label %for.end\n\nfor.body.lr.ph:                                   ; preds = %entry\n  %0 = load float, ptr @fp_inc, align 4\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %for.body.lr.ph\n  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]\n  %y.012 = phi float [ 0x3FB99999A0000000, %for.body.lr.ph ], [ %conv1, %for.body ]\n  %x.011 = phi float [ %init, %for.body.lr.ph ], [ %add, %for.body ]\n  %arrayidx = getelementptr inbounds float, ptr %A, i64 %indvars.iv\n  store float %x.011, ptr %arrayidx, align 4\n  %add = fadd fast float %x.011, %0\n  %conv1 = fadd fast float %y.012, -5.000000e-01\n  %add2 = fadd fast float %conv1, %add\n  %arrayidx4 = getelementptr inbounds float, ptr %B, i64 %indvars.iv\n  store float %add2, ptr %arrayidx4, align 4\n  %arrayidx6 = getelementptr inbounds float, ptr %C, i64 %indvars.iv\n  store float %conv1, ptr %arrayidx6, align 4\n  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1\n  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\n  %exitcond = icmp eq i32 %lftr.wideiv, %N\n  br i1 %exitcond, label %for.end.loopexit, label %for.body\n\nfor.end.loopexit:                                 ; preds = %for.body\n  br label %for.end\n\nfor.end:                                          ; preds = %for.end.loopexit, %entry\n  ret void\n}\n\n!llvm.module.flags = !{!0}\n\n!0 = !{i32 2, !\"Debug Info Version\", i32 3}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `all_of(I->users(), [&InsertedSet](Value *U) { return InsertedSet.contains(cast<Instruction>(U)); }) && \"removed instruction should only be used by instructions inserted \" \"during expansion\"' failed.",
    "body": "To reproduce run opt with the test below (-passes=loop-vectorize ):\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine ptr addrspace(1) @wombat(i32 %arg) gc \"statepoint-example\" {\nbb:\n  %select = select i1 false, i32 0, i32 8\n  br label %bb3\n\nbb1:                                              ; preds = %bb3\n  br i1 false, label %bb4, label %bb9\n\nbb2:                                              ; No predecessors!\n  %zext = zext i32 %select to i64\n  br label %bb3\n\nbb3:                                              ; preds = %bb3, %bb2, %bb\n  %phi = phi i64 [ %zext, %bb2 ], [ 0, %bb3 ], [ 0, %bb ]\n  br i1 false, label %bb1, label %bb3\n\nbb4:                                              ; preds = %bb4, %bb1\n  %phi5 = phi i64 [ %add7, %bb4 ], [ 0, %bb1 ]\n  %phi6 = phi i32 [ %add, %bb4 ], [ %arg, %bb1 ]\n  %add = add i32 %phi6, 1\n  %add7 = add i64 %phi5, 1\n  %shl = shl i32 %phi6, 1\n  %zext8 = zext i32 %shl to i64\n  %getelementptr = getelementptr i8, ptr addrspace(1) null, i64 %zext8\n  store i16 0, ptr addrspace(1) %getelementptr, align 2\n  %icmp = icmp ult i64 %phi5, %phi\n  br i1 %icmp, label %bb4, label %bb15\n\nbb9:                                              ; preds = %bb9, %bb1\n  %phi10 = phi i64 [ %add12, %bb9 ], [ 0, %bb1 ]\n  %getelementptr11 = getelementptr i8, ptr addrspace(1) null, i64 %phi10\n  store i8 0, ptr addrspace(1) %getelementptr11, align 1\n  %add12 = add i64 %phi10, 1\n  %icmp13 = icmp ult i64 %add12, %phi\n  br i1 %icmp13, label %bb9, label %bb14\n\nbb14:                                             ; preds = %bb9\n  ret ptr addrspace(1) null\n\nbb15:                                             ; preds = %bb4\n  ret ptr addrspace(1) null\n}\n```\nReproducer: https://godbolt.org/z/67vadzMbr\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"wombat\"\n #0 0x000000000525d5d8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x525d5d8)\n #1 0x000000000525afdc SignalHandler(int) Signals.cpp:0:0\n #2 0x00007cf6f6042520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007cf6f60969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007cf6f6042476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007cf6f60287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007cf6f602871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007cf6f6039e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000045a6237 llvm::SCEVExpanderCleaner::cleanup() (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x45a6237)\n #9 0x00000000041cf7df (anonymous namespace)::GeneratedRTChecks::~GeneratedRTChecks() LoopVectorize.cpp:0:0\n#10 0x0000000004227f36 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4227f36)\n#11 0x0000000004229cc9 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4229cc9)\n#12 0x000000000422a303 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x422a303)\n#13 0x0000000003029e0e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3029e0e)\n#14 0x000000000505b4d0 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x505b4d0)\n#15 0x0000000000e6bc0e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe6bc0e)\n#16 0x0000000005059deb llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5059deb)\n#17 0x0000000000e6b29e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe6b29e)\n#18 0x00000000050597f0 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x50597f0)\n#19 0x0000000000941fba llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x941fba)\n#20 0x0000000000934559 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x934559)\n#21 0x00007cf6f6029d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#22 0x00007cf6f6029e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#23 0x000000000092be35 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x92be35)\nProgram terminated with signal: SIGSEGV\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "release:backport",
      "vectorizers",
      "llvm:SCEV",
      "crash"
    ],
    "comments": [
      {
        "author": "TatyanaDoubts",
        "body": "Triage on our side found the fault commit\n\ncommit 6dc23b70097e4135ecde33f49550b1f473a5c385\n\nAuthor: Nikita Popov <[npopov@redhat.com](mailto:npopov@redhat.com)>\n\nDate:   Mon Nov 11 12:36:29 2024 +0100\n\n \n\n    [SCEVExpander] Don't try to reuse SCEVUnknown values (#115141)\n\n \n\n    The expansion of a SCEVUnknown is trivial (it's just the wrapped value).\n\n    If we try to reuse an existing value it might be a more complex\n\n    expression that simplifies to the SCEVUnknown.\n\n \n\n    This is inspired by [WRONG code: GVN? Loop opts? \u00b7 Issue #114879 \u00b7 llvm/llvm-project](https://github.com/llvm/llvm-project/issues/114879) ,\n\n    because SCEVExpander replacing a constant with a phi node is just silly.\n\n    (I don't consider this a fix for that issue though.)\n\n@nikic , could you please have a look? Thank you!"
      },
      {
        "author": "danilaml",
        "body": "Looks like when `FindValueInExprValueMap` returns a `nullptr` (like it does for a phi in reproducer after `SCEVUnknown` changes) the code runs `fixupLCSSAFormFor`. This function runs `llvm::formLCSSAForInstructions` that can insert a new LCSSA phi and more importantly can rewrite the uses of instructions in the worklist. So what happens is this function is run, new phi is added, some old phi uses are replaced with this new phi, then the changes are \"rolled back\", i.e. the cleanup is called on SCEVExpander, it tries to remove the inserted lcssa phi but it doesn't know how to rewrite the uses back so it just asserts (since those users were not inserted by the expander itself, they were already there - they just had their arguments replaced to use instruction from expander).\n\n@nikic this looks like an old issue, although I wasn't yet able to figure out how to trigger it before `SCEVUnknown` changes (and if it even practically possible or just theoretically)."
      },
      {
        "author": "danilaml",
        "body": "`fixupLCSSAFormFor` was introduced by @fhahn so perhaps they have a better understanding where the issue lies."
      },
      {
        "author": "nikic",
        "body": "I think there are two issues here:\n1. It looks like LV is generating references to the TC that break LCSSA form.\n2. SCEVExpander cleanup can't handle the case where LCSSA formation modified existing uses."
      },
      {
        "author": "nikic",
        "body": "This is a possible fix for the SCEVExpander issue: https://github.com/nikic/llvm-project/commit/3217b044ce2b153621f91f8edaaa90984c0998e7\n\nBut after thinking about this, I'm not convinced that SCEVExpander really needs fixing. It is being invoked in PreserveLCSSA mode, so it should be able to rely on the original IR being in LCSSA form.\n\nNote that the `[[N_RND_UP:%.*]] = add i64 [[PHI]], 15` in https://github.com/nikic/llvm-project/commit/3217b044ce2b153621f91f8edaaa90984c0998e7#diff-9e3a00a1cffe1764ee50ab6c79bdea53cd1847cf7b77810a4cdc6835bfc79a52R44 doesn't satisfy LCSSA form, it should be using `PHI_LCSSA`.\n\nMaybe @fhahn could take a look at the LoopVectorize issue?\n\nI could also be convinced to land the SCEVExpander change, as it seems harmless even if LV is fixed..."
      },
      {
        "author": "fhahn",
        "body": "Yep, I'll take a look in the next few days"
      },
      {
        "author": "fhahn",
        "body": "https://github.com/llvm/llvm-project/pull/125235 should fix the place where LCSSA is broken"
      }
    ]
  },
  "verified": true
}