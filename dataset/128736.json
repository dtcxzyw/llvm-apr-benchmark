{
  "bug_id": "128736",
  "issue_url": "https://github.com/llvm/llvm-project/issues/128736",
  "bug_type": "crash",
  "base_commit": "02128342d2818e5a65846fec4179ed5344045102",
  "knowledge_cutoff": "2025-02-25T16:27:23Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "39bab1de33333ee3c62b586c4e8d26f8c443bc60",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          1389,
          1397
        ],
        [
          2849,
          2859
        ],
        [
          2915,
          2926
        ],
        [
          16466,
          16474
        ],
        [
          17075,
          17081
        ],
        [
          20449,
          20456
        ],
        [
          20678,
          20684
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::vectorizeTree",
        "removeInstructionsAndOperands",
        "tryToReduce"
      ]
    }
  },
  "patch": "commit 39bab1de33333ee3c62b586c4e8d26f8c443bc60\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Wed Feb 26 14:12:05 2025 -0800\n\n    [SLP]Check if the operand for removal is the reduction operand, awaiting for the reduction\n    \n    If the operand of the instruction-to-be-removed is a reduction value,\n    which is not reduced yet, and, thus, it has no users, it may be removed\n    during operands analysis.\n    \n    Fixes #128736\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex b25b09306aca..e8c91ebd508c 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -1389,9 +1389,10 @@ public:\n   /// Vectorize the tree but with the list of externally used values \\p\n   /// ExternallyUsedValues. Values in this MapVector can be replaced but the\n   /// generated extractvalue instructions.\n-  Value *\n-  vectorizeTree(const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n-                Instruction *ReductionRoot = nullptr);\n+  Value *vectorizeTree(\n+      const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n+      Instruction *ReductionRoot = nullptr,\n+      ArrayRef<std::tuple<Value *, unsigned, bool>> VectorValuesAndScales = {});\n \n   /// \\returns the cost incurred by unwanted spills and fills, caused by\n   /// holding live values over call sites.\n@@ -2849,11 +2850,13 @@ public:\n   /// Remove instructions from the parent function and clear the operands of \\p\n   /// DeadVals instructions, marking for deletion trivially dead operands.\n   template <typename T>\n-  void removeInstructionsAndOperands(ArrayRef<T *> DeadVals) {\n+  void removeInstructionsAndOperands(\n+      ArrayRef<T *> DeadVals,\n+      ArrayRef<std::tuple<Value *, unsigned, bool>> VectorValuesAndScales) {\n     SmallVector<WeakTrackingVH> DeadInsts;\n     for (T *V : DeadVals) {\n       auto *I = cast<Instruction>(V);\n-      DeletedInstructions.insert(I);\n+      eraseInstruction(I);\n     }\n     DenseSet<Value *> Processed;\n     for (T *V : DeadVals) {\n@@ -2915,12 +2918,17 @@ public:\n         // loop iteration.\n         if (auto *OpI = dyn_cast<Instruction>(OpV))\n           if (!DeletedInstructions.contains(OpI) &&\n+              (!OpI->getType()->isVectorTy() ||\n+               none_of(VectorValuesAndScales,\n+                       [&](const std::tuple<Value *, unsigned, bool> &V) {\n+                         return std::get<0>(V) == OpI;\n+                       })) &&\n               isInstructionTriviallyDead(OpI, TLI))\n             DeadInsts.push_back(OpI);\n       }\n \n       VI->removeFromParent();\n-      DeletedInstructions.insert(VI);\n+      eraseInstruction(VI);\n       SE->forgetValue(VI);\n     }\n   }\n@@ -16466,9 +16474,10 @@ Value *BoUpSLP::vectorizeTree() {\n   return vectorizeTree(ExternallyUsedValues);\n }\n \n-Value *\n-BoUpSLP::vectorizeTree(const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n-                       Instruction *ReductionRoot) {\n+Value *BoUpSLP::vectorizeTree(\n+    const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n+    Instruction *ReductionRoot,\n+    ArrayRef<std::tuple<Value *, unsigned, bool>> VectorValuesAndScales) {\n   // All blocks must be scheduled before any instructions are inserted.\n   for (auto &BSIter : BlocksSchedules) {\n     scheduleBlock(BSIter.second.get());\n@@ -17075,7 +17084,7 @@ BoUpSLP::vectorizeTree(const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n   // cache correctness.\n   // NOTE: removeInstructionAndOperands only marks the instruction for deletion\n   // - instructions are not deleted until later.\n-  removeInstructionsAndOperands(ArrayRef(RemovedInsts));\n+  removeInstructionsAndOperands(ArrayRef(RemovedInsts), VectorValuesAndScales);\n \n   Builder.ClearInsertionPoint();\n   InstrElementSize.clear();\n@@ -20449,8 +20458,8 @@ public:\n           InsertPt = GetCmpForMinMaxReduction(RdxRootInst);\n \n         // Vectorize a tree.\n-        Value *VectorizedRoot =\n-            V.vectorizeTree(LocalExternallyUsedValues, InsertPt);\n+        Value *VectorizedRoot = V.vectorizeTree(\n+            LocalExternallyUsedValues, InsertPt, VectorValuesAndScales);\n         // Update TrackedToOrig mapping, since the tracked values might be\n         // updated.\n         for (Value *RdxVal : Candidates) {\n@@ -20678,7 +20687,7 @@ public:\n             Ignore->replaceAllUsesWith(P);\n           }\n         }\n-        V.removeInstructionsAndOperands(RdxOps);\n+        V.removeInstructionsAndOperands(RdxOps, VectorValuesAndScales);\n       }\n     } else if (!CheckForReusedReductionOps) {\n       for (ReductionOpsType &RdxOps : ReductionOps)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/reduction-with-removed-extracts.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=znver2 < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(i32 %arg) {\n;\nbb:\n  br label %bb1\n\nbb1:\n  %phi = phi i32 [ 0, %bb ], [ %mul37, %bb1 ]\n  %mul = mul i64 0, 0\n  %trunc = trunc i64 %mul to i32\n  %or = or i32 0, %trunc\n  %or2 = or i32 0, %or\n  %or3 = or i32 %or2, 0\n  %mul4 = mul i32 0, %or3\n  %mul5 = mul i32 %or3, 0\n  %mul6 = mul i32 %mul5, %mul4\n  %mul7 = mul i32 %mul6, %mul4\n  %mul8 = mul i32 %mul7, %or3\n  %mul9 = mul i64 0, 0\n  %trunc10 = trunc i64 %mul9 to i32\n  %or11 = or i32 0, %trunc10\n  %or12 = or i32 %arg, %or11\n  %or13 = or i32 %or12, 0\n  %mul14 = mul i32 %or13, %mul8\n  %mul15 = mul i32 %mul14, 0\n  %mul16 = mul i32 %mul15, 0\n  %mul17 = mul i32 %mul16, %or13\n  %shl = shl i64 0, 0\n  %mul18 = mul i64 %shl, 0\n  %trunc19 = trunc i64 %mul18 to i32\n  %or20 = or i32 0, %trunc19\n  %or21 = or i32 0, %or20\n  %or22 = or i32 %or21, 0\n  %mul23 = mul i32 %or22, %mul17\n  %mul24 = mul i32 %mul23, 0\n  %mul25 = mul i32 %mul24, 0\n  %mul26 = mul i32 %mul25, %or22\n  %shl27 = shl i64 0, 0\n  %mul28 = mul i64 %shl27, 0\n  %trunc29 = trunc i64 %mul28 to i32\n  %or30 = or i32 0, %trunc29\n  %or31 = or i32 0, %or30\n  %or32 = or i32 %or31, 0\n  %mul33 = mul i32 0, %or32\n  %mul34 = mul i32 %or32, %mul26\n  %mul35 = mul i32 %mul34, %mul33\n  %mul36 = mul i32 %mul35, %mul33\n  %mul37 = mul i32 %mul36, %or32\n  br label %bb1\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `I->use_empty() && \"trying to erase instruction with users.\"' failed.",
    "body": "To reproduce run opt with the test below using -passes=slp-vectorizer.\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @wombat(i32 %arg) #0 gc \"statepoint-example\" {\nbb:\n  br label %bb1\n  \nbb1:                                              ; preds = %bb1, %bb\n  %phi = phi i32 [ 0, %bb ], [ %mul37, %bb1 ]\n  %mul = mul i64 0, 0\n  %trunc = trunc i64 %mul to i32\n  %or = or i32 0, %trunc\n  %or2 = or i32 0, %or\n  %or3 = or i32 %or2, 0\n  %mul4 = mul i32 0, %or3\n  %mul5 = mul i32 %or3, 0\n  %mul6 = mul i32 %mul5, %mul4\n  %mul7 = mul i32 %mul6, %mul4\n  %mul8 = mul i32 %mul7, %or3\n  %mul9 = mul i64 0, 0\n  %trunc10 = trunc i64 %mul9 to i32\n  %or11 = or i32 0, %trunc10\n  %or12 = or i32 %arg, %or11\n  %or13 = or i32 %or12, 0\n  %mul14 = mul i32 %or13, %mul8\n  %mul15 = mul i32 %mul14, 0\n  %mul16 = mul i32 %mul15, 0\n  %mul17 = mul i32 %mul16, %or13\n  %shl = shl i64 0, 0\n  %mul18 = mul i64 %shl, 0\n  %trunc19 = trunc i64 %mul18 to i32\n  %or20 = or i32 0, %trunc19\n  %or21 = or i32 0, %or20\n  %or22 = or i32 %or21, 0\n  %mul23 = mul i32 %or22, %mul17\n  %mul24 = mul i32 %mul23, 0\n  %mul25 = mul i32 %mul24, 0\n  %mul26 = mul i32 %mul25, %or22\n  %shl27 = shl i64 0, 0\n  %mul28 = mul i64 %shl27, 0\n  %trunc29 = trunc i64 %mul28 to i32\n  %or30 = or i32 0, %trunc29\n  %or31 = or i32 0, %or30\n  %or32 = or i32 %or31, 0\n  %mul33 = mul i32 0, %or32\n  %mul34 = mul i32 %or32, %mul26\n %mul35 = mul i32 %mul34, %mul33\n  %mul36 = mul i32 %mul35, %mul33\n  %mul37 = mul i32 %mul36, %or32\n  br label %bb1\n}\n\nattributes #0 = { \"target-cpu\"=\"znver2\" }\n```\n\nReproducer: https://godbolt.org/z/4PPzsMbP3\n\nStack dump:\n```\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4570: llvm::slpvectorizer::BoUpSLP::~BoUpSLP(): Assertion `I->use_empty() && \"trying to erase instruction with users.\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"wombat\"\n #0 0x00000000054546a8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54546a8)\n #1 0x0000000005452064 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007b5c5f242520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007b5c5f2969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007b5c5f242476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007b5c5f2287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007b5c5f22871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007b5c5f239e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x000000000440d177 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x440d177)\n #9 0x00000000044d46ae llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#10 0x00000000044d50cb llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x44d50cb)\n#11 0x000000000318a35e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x318a35e)\n#12 0x000000000524e9e0 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x524e9e0)\n#13 0x0000000000e6f88e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe6f88e)\n#14 0x000000000524d2fb llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x524d2fb)\n#15 0x0000000000e6eb7e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe6eb7e)\n#16 0x000000000524cd00 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x524cd00)\n#17 0x0000000000935e7a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x935e7a)\n#18 0x00000000009294ec optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9294ec)\n#19 0x00007b5c5f229d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#20 0x00007b5c5f229e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#21 0x0000000000920dc5 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x920dc5)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "bisect": "2ad816648f2719e6c0da507a1a371f2cad4a3f1c"
}