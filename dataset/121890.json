{
  "bug_id": "121890",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121890",
  "bug_type": "miscompilation",
  "base_commit": "7612dcc6e8d8e7f19b364084effbb01946294720",
  "knowledge_cutoff": "2025-01-07T06:21:54Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "9725595f3acc0c1aaa354e15ac4ee2b1f8ff4cc9",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        [
          834,
          841
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp": [
        "InstCombinerImpl::foldGEPICmp"
      ]
    }
  },
  "patch": "commit 9725595f3acc0c1aaa354e15ac4ee2b1f8ff4cc9\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sat Feb 1 20:41:15 2025 +0800\n\n    [InstCombine] Check nowrap flags when folding comparison of GEPs with the same base pointer (#121892)\n    \n    Alive2: https://alive2.llvm.org/ce/z/P5XbMx\n    Closes https://github.com/llvm/llvm-project/issues/121890\n    \n    TODO: It is still safe to perform this transform without nowrap flags if\n    the corresponding scale factor is 1 byte:\n    https://alive2.llvm.org/ce/z/J-JCJd\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\nindex 9e9739ac2440..a8a5cb2b20d7 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp\n@@ -834,8 +834,9 @@ Instruction *InstCombinerImpl::foldGEPICmp(GEPOperator *GEPLHS, Value *RHS,\n         return replaceInstUsesWith(\n             I, // No comparison is needed here.\n             ConstantInt::get(I.getType(), ICmpInst::isTrueWhenEqual(Cond)));\n-\n-      else if (NumDifferences == 1 && CanFold(NW)) {\n+      // If two GEPs only differ by an index, compare them.\n+      // Note that nowrap flags are always needed when comparing two indices.\n+      else if (NumDifferences == 1 && NW != GEPNoWrapFlags::none()) {\n         Value *LHSV = GEPLHS->getOperand(DiffOperand);\n         Value *RHSV = GEPRHS->getOperand(DiffOperand);\n         return NewICmp(NW, LHSV, RHSV);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/opaque-ptr.ll",
      "commands": [
        "opt -S -passes='instcombine<no-verify-fixpoint>' < %s"
      ],
      "tests": [
        {
          "test_name": "cmp_gep_same_base_same_type_nusw",
          "test_body": "define i1 @cmp_gep_same_base_same_type_nusw(ptr %ptr, i64 %idx1, i64 %idx2) {\n  %gep1 = getelementptr nusw i32, ptr %ptr, i64 %idx1\n  %gep2 = getelementptr nusw i32, ptr %ptr, i64 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "cmp_gep_same_base_same_type_maywrap",
          "test_body": "define i1 @cmp_gep_same_base_same_type_maywrap(ptr %ptr, i64 %idx1, i64 %idx2) {\n  %gep1 = getelementptr i32, ptr %ptr, i64 %idx1\n  %gep2 = getelementptr i32, ptr %ptr, i64 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "cmp_gep_same_base_same_type_nuw",
          "test_body": "define i1 @cmp_gep_same_base_same_type_nuw(ptr %ptr, i64 %idx1, i64 %idx2) {\n  %gep1 = getelementptr nuw i32, ptr %ptr, i64 %idx1\n  %gep2 = getelementptr nuw i32, ptr %ptr, i64 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "cmp_gep_same_base_different_type",
          "test_body": "define i1 @cmp_gep_same_base_different_type(ptr %ptr, i64 %idx1, i64 %idx2) {\n  %gep1 = getelementptr inbounds i32, ptr %ptr, i64 %idx1\n  %gep2 = getelementptr inbounds i64, ptr %ptr, i64 %idx2\n  %cmp = icmp ult ptr %gep1, %gep2\n  ret i1 %cmp\n}\n"
        },
        {
          "test_name": "cmp_gep_same_base_same_type",
          "test_body": "define i1 @cmp_gep_same_base_same_type(ptr %ptr, i64 %idx1, i64 %idx2) {\n  %gep1 = getelementptr inbounds i32, ptr %ptr, i64 %idx1\n  %gep2 = getelementptr inbounds i32, ptr %ptr, i64 %idx2\n  %cmp = icmp ult ptr %gep1, %gep2\n  ret i1 %cmp\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Missing flag check when folding comparison of geps with the same base pointer",
    "body": "Alive2: https://alive2.llvm.org/ce/z/P5XbMx\n```\n\n----------------------------------------\ndefine i1 @src(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %gep1 = gep ptr %ptr, 4 x i8 %idx1\n  %gep2 = gep ptr %ptr, 4 x i8 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2, offsetonly\n  ret i1 %cmp\n}\n=>\ndefine i1 @tgt(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %cmp = icmp eq i8 %idx1, %idx2\n  ret i1 %cmp\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\nptr %ptr = null\ni8 %idx1 = #x00 (0)\ni8 %idx2 = #x40 (64)\n\nSource:\nptr %gep1 = null\nptr %gep2 = null\ni1 %cmp = #x1 (1)\n\nSOURCE MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: 0\nBlock 1 >\tsize: 0\talign: 1\talloc type: 0\talive: true\taddress: 1\n\nTarget:\ni1 %cmp = #x0 (0)\nSource value: #x1 (1)\nTarget value: #x0 (0)\n\n\n----------------------------------------\ndefine i1 @src1(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %gep1 = gep nuw ptr %ptr, 4 x i8 %idx1\n  %gep2 = gep nuw ptr %ptr, 4 x i8 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2, offsetonly\n  ret i1 %cmp\n}\n=>\ndefine i1 @tgt1(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %cmp = icmp eq i8 %idx1, %idx2\n  ret i1 %cmp\n}\nTransformation seems to be correct!\n\n\n----------------------------------------\ndefine i1 @src2(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %gep1 = gep nusw ptr %ptr, 4 x i8 %idx1\n  %gep2 = gep nusw ptr %ptr, 4 x i8 %idx2\n  %cmp = icmp eq ptr %gep1, %gep2, offsetonly\n  ret i1 %cmp\n}\n=>\ndefine i1 @tgt2(ptr %ptr, i8 %idx1, i8 %idx2) {\n#0:\n  %cmp = icmp eq i8 %idx1, %idx2\n  ret i1 %cmp\n}\nTransformation seems to be correct!\n\nSummary:\n  2 correct transformations\n  1 incorrect transformations\n  0 failed-to-prove transformations\n  0 Alive2 errors\n```",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "generated by fuzzer"
    ],
    "comments": []
  }
}