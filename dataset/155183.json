{
  "bug_id": "155183",
  "issue_url": "https://github.com/llvm/llvm-project/issues/155183",
  "bug_type": "crash",
  "base_commit": "0a16d1a754c247199ee2a77feaea7a94a60f8dfd",
  "knowledge_cutoff": "2025-08-24T17:13:17Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "eb39605192d36806ec0d41c8c54b0817be5d80c5",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          10638,
          10645
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "findAndSetMainInstruction"
      ]
    }
  },
  "patch": "commit eb39605192d36806ec0d41c8c54b0817be5d80c5\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Sat Aug 30 17:37:26 2025 -0700\n\n    [SLP]Do not schedule terminate copyable from main op basic block\n    \n    If the copyable instruction is a terminate instruction from the same\n    block, as the potential main instruction, such instruction cannot be\n    copyable and the value list cannot be modeled as instructions with same\n    (and copyables) opcodes.\n    \n    Fixes #155183\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex dad0d1e9ef55..33418d86d51d 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -10638,8 +10638,19 @@ class InstructionsCompatibilityAnalysis {\n         }\n       }\n     }\n-    if (MainOp)\n+    if (MainOp) {\n+      // Do not match, if any copyable is a terminator from the same block as\n+      // the main operation.\n+      if (any_of(VL, [&](Value *V) {\n+            auto *I = dyn_cast<Instruction>(V);\n+            return I && I->getParent() == MainOp->getParent() &&\n+                   I->isTerminator();\n+          })) {\n+        MainOp = nullptr;\n+        return;\n+      }\n       MainOpcode = MainOp->getOpcode();\n+    }\n   }\n \n   /// Returns the idempotent value for the \\p MainOp with the detected \\p\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/no-schedule-terminate-inst.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test() gc \"statepoint-example\" personality ptr null {\n;\nbb:\n  %add = add i32 0, 0\n  %add1 = add i32 0, 0\n  %invoke = invoke i32 null(ptr addrspace(1) null, i32 0, i32 0, i32 0)\n  to label %bb2 unwind label %bb8\n\nbb2:\n  %add3 = add i32 %invoke, 0\n  br label %bb4\n\nbb4:\n  %phi = phi i32 [ %add3, %bb2 ]\n  %phi5 = phi i32 [ 0, %bb2 ]\n  %phi6 = phi i32 [ %add, %bb2 ]\n  %phi7 = phi i32 [ %add1, %bb2 ]\n  ret void\n\nbb8:\n  %landingpad = landingpad { ptr, i32 }\n  cleanup\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Assertion `ScheduleEnd && \"tried to vectorize a terminator?\"' failed.",
    "body": "To reproduce run opt with the test below, -passes=slp-vectorizer\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @wombat() gc \"statepoint-example\" personality ptr null {\nbb:\n  %add = add i32 0, 0\n  %add1 = add i32 0, 0\n  %invoke = invoke i32 null(ptr addrspace(1) null, i32 0, i32 0, i32 0)\n          to label %bb2 unwind label %bb8\n\nbb2:                                              ; preds = %bb\n  %add3 = add i32 %invoke, 0\n  br label %bb4\n\nbb4:                                              ; preds = %bb2\n  %phi = phi i32 [ %add3, %bb2 ]\n  %phi5 = phi i32 [ 0, %bb2 ]\n  %phi6 = phi i32 [ %add, %bb2 ]\n  %phi7 = phi i32 [ %add1, %bb2 ]\n  ret void\n\nbb8:                                              ; preds = %bb\n  %landingpad = landingpad { ptr, i32 }\n          cleanup\n  ret void\n}\n```\nReproducer: https://godbolt.org/z/njq5sde1d\n\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"wombat\"\n #0 0x00000000056fd7a8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x56fd7a8)\n #1 0x00000000056fa654 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x0000727df8242520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x0000727df82969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x0000727df8242476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x0000727df82287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x0000727df822871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x0000727df8239e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000035a390b llvm::slpvectorizer::BoUpSLP::BlockScheduling::tryScheduleBundle(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP*, (anonymous namespace)::InstructionsState const&, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) SLPVectorizer.cpp:0:0\n #9 0x00000000035e0d99 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35e0d99)\n#10 0x00000000035e1e58 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35e1e58)\n#11 0x00000000035e3601 llvm::slpvectorizer::BoUpSLP::buildTreeRec(llvm::ArrayRef<llvm::Value*>, unsigned int, llvm::slpvectorizer::BoUpSLP::EdgeInfo const&, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x35e3601)\n#12 0x00000000036119c1 llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x36119c1)\n#13 0x000000000361695d bool tryToVectorizeSequence<llvm::Value>(llvm::SmallVectorImpl<llvm::Value*>&, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::ArrayRef<llvm::Value*>, bool)>, bool, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\n#14 0x000000000361802a llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x361802a)\n#15 0x000000000361fec6 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#16 0x0000000003620a1b llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3620a1b)\n#17 0x0000000002e0752e llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e0752e)\n#18 0x00000000054eb8b1 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54eb8b1)\n#19 0x0000000000ed995e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xed995e)\n#20 0x00000000054ebefa llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54ebefa)\n#21 0x000000000096d8fe llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96d8fe)\n#22 0x00000000054e9941 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x54e9941)\n#23 0x0000000000977b9a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x977b9a)\n#24 0x000000000096bc67 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96bc67)\n#25 0x0000727df8229d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#26 0x0000727df8229e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#27 0x0000000000962d85 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x962d85)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "danilaml",
        "body": "Seems to be caused by 2d7b55a028139dde58a994a65895841190dfde96 (at least it doesn't reproduce after revert). ping @alexey-bataev "
      },
      {
        "author": "danilaml",
        "body": "Looks like `%invoke = invoke i32 null(ptr addrspace(1) null, i32 0, i32 0, i32 0)` is considered schedulable (`isNonSchedulable` returns `false` for it), which is wrong."
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "2d7b55a028139dde58a994a65895841190dfde96"
}