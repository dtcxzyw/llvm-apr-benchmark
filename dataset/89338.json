{
  "bug_id": "89338",
  "issue_url": "https://github.com/llvm/llvm-project/issues/89338",
  "bug_type": "miscompilation",
  "base_commit": "ab1d988e1483895a71dcd257bdcaf6fdb0a83d62",
  "knowledge_cutoff": "2024-04-19T01:55:15Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "46957a138dea339799059ea5bf032e40042ff185",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        [
          1988,
          1994
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp": [
        "InstCombinerImpl::visitCallInst"
      ]
    }
  },
  "patch": "commit 46957a138dea339799059ea5bf032e40042ff185\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Fri Apr 19 14:00:49 2024 +0900\n\n    [InstCombine] Fix incorrect fshr to fshl transform\n    \n    This transform is only valid if the (modular) shift amount is not\n    zero.\n    \n    Proof: https://alive2.llvm.org/ce/z/WBxn-x\n    \n    Fixes https://github.com/llvm/llvm-project/issues/89338.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\nindex aa547565bd08..e7a2f54f8680 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp\n@@ -1988,7 +1988,10 @@ Instruction *InstCombinerImpl::visitCallInst(CallInst &CI) {\n       // is not entirely arbitrary. For historical reasons, the backend may\n       // recognize rotate left patterns but miss rotate right patterns.\n       if (IID == Intrinsic::fshr) {\n-        // fshr X, Y, C --> fshl X, Y, (BitWidth - C)\n+        // fshr X, Y, C --> fshl X, Y, (BitWidth - C) if C is not zero.\n+        if (!isKnownNonZero(ShAmtC, SQ.getWithInstruction(II)))\n+          return nullptr;\n+\n         Constant *LeftShiftC = ConstantExpr::getSub(WidthC, ShAmtC);\n         Module *Mod = II->getModule();\n         Function *Fshl = Intrinsic::getDeclaration(Mod, Intrinsic::fshl, Ty);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/fsh.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "fsh_unary_shuffle_ops_partial_widening",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <2 x i32> @llvm.fshr.v2i32(<2 x i32>, <2 x i32>, <2 x i32>) #0\n\ndefine <2 x i32> @fsh_unary_shuffle_ops_partial_widening(<3 x i32> %x, <2 x i32> %y, <2 x i32> %z) {\n  %a = shufflevector <3 x i32> %x, <3 x i32> poison, <2 x i32> <i32 1, i32 0>\n  %b = shufflevector <2 x i32> %y, <2 x i32> poison, <2 x i32> <i32 1, i32 0>\n  %c = shufflevector <2 x i32> %z, <2 x i32> poison, <2 x i32> <i32 1, i32 0>\n  %r = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %a, <2 x i32> %b, <2 x i32> %c)\n  ret <2 x i32> %r\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "fshr_vec_zero_elem",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <2 x i32> @llvm.fshr.v2i32(<2 x i32>, <2 x i32>, <2 x i32>) #0\n\ndefine <2 x i32> @fshr_vec_zero_elem(<2 x i32> %x, <2 x i32> %y) {\n  %fsh = call <2 x i32> @llvm.fshr.v2i32(<2 x i32> %x, <2 x i32> %y, <2 x i32> <i32 2, i32 0>)\n  ret <2 x i32> %fsh\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "instcombine is wrong about a vector fshr->shl transformation",
    "body": "Instcombine seems to be mis-optimizing this function:\r\n```llvm\r\ndefine i32 @f(<4 x i8> %0) {\r\n  %2 = call <4 x i8> @llvm.fshr.v4i8(<4 x i8> %0, <4 x i8> zeroinitializer, <4 x i8> <i8 -12, i8 -80, i8 35, i8 1>)\r\n  %3 = bitcast <4 x i8> %2 to i32\r\n  ret i32 %3\r\n}\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare <4 x i8> @llvm.fshr.v4i8(<4 x i8>, <4 x i8>, <4 x i8>) #0\r\n\r\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\n```\r\nthe result is:\r\n```llvm\r\ndefine i32 @f(<4 x i8> %0) {\r\n  %2 = shl <4 x i8> %0, <i8 4, i8 0, i8 5, i8 7>\r\n  %3 = bitcast <4 x i8> %2 to i32\r\n  ret i32 %3\r\n}\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare <4 x i8> @llvm.fshr.v4i8(<4 x i8>, <4 x i8>, <4 x i8>) #0\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare <4 x i8> @llvm.fshl.v4i8(<4 x i8>, <4 x i8>, <4 x i8>) #0\r\n\r\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\n```\r\n\r\nAlive says:\r\n```\r\nERROR: Value mismatch\r\n\r\nExample:\r\n<4 x i8> %#0 = < #x00 (0), #x01 (1), #x00 (0), #x00 (0) >\r\n\r\nSource:\r\n<4 x i8> %#2 = < #x00 (0), #x00 (0), #x00 (0), #x00 (0) >\r\ni32 %#3 = #x00000000 (0)\r\n\r\nTarget:\r\n<4 x i8> %#2 = < #x00 (0), #x01 (1), #x00 (0), #x00 (0) >\r\ni32 %#3 = #x00000100 (256)\r\nSource value: #x00000000 (0)\r\nTarget value: #x00000100 (256)\r\n```\r\n\r\nhttps://alive2.llvm.org/ce/z/s4UpPe\r\n\r\ncc @hatsunespica\r\n\r\n",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Smaller test case: https://alive2.llvm.org/ce/z/hScyGk"
      },
      {
        "author": "nikic",
        "body": "I believe the root cause is the fshr to fshl canonicalization: https://alive2.llvm.org/ce/z/NQM3tR\r\n\r\nWe're performing this transform: https://alive2.llvm.org/ce/z/6UUEsS But we don't verify the pre-condition that the (modular) shift amount is not zero!\r\n\r\nFor non-vectors this is a non-issue because we'd fold a zero shift earlier, but for vectors it is an issue."
      }
    ]
  },
  "verified": true
}