{
  "bug_id": "135800",
  "issue_url": "https://github.com/llvm/llvm-project/issues/135800",
  "bug_type": "crash",
  "base_commit": "a1d52fcdca8bda4fe8c6652b2de83f408f4ad4f2",
  "knowledge_cutoff": "2025-04-15T15:58:08Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "2271f0bebd48c9ed8b16b500886a819c4f269a6a",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          9575,
          9580
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::canBuildSplitNode"
      ]
    }
  },
  "patch": "commit 2271f0bebd48c9ed8b16b500886a819c4f269a6a\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Apr 15 13:02:32 2025 -0700\n\n    [SLP]Check for perfect/shuffled match for the split node\n    \n    If the potential split node is a perfect/shuffled match of another split\n    node, need to skip creation of the another split node with the same\n    scalars, it should be a buildvector.\n    \n    Fixes #135800\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 253933a2438c..234cd340ebc1 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -9575,6 +9575,24 @@ bool BoUpSLP::canBuildSplitNode(ArrayRef<Value *> VL,\n       !SplitAlternateInstructions)\n     return false;\n \n+  // Check if this is a duplicate of another split entry.\n+  LLVM_DEBUG(dbgs() << \"SLP: \\tChecking bundle: \" << *LocalState.getMainOp()\n+                    << \".\\n\");\n+  for (TreeEntry *E : getSplitTreeEntries(LocalState.getMainOp())) {\n+    if (E->isSame(VL)) {\n+      LLVM_DEBUG(dbgs() << \"SLP: Perfect diamond merge at \"\n+                        << *LocalState.getMainOp() << \".\\n\");\n+      return false;\n+    }\n+    SmallPtrSet<Value *, 8> Values(llvm::from_range, E->Scalars);\n+    if (all_of(VL, [&](Value *V) {\n+          return isa<PoisonValue>(V) || Values.contains(V);\n+        })) {\n+      LLVM_DEBUG(dbgs() << \"SLP: Gathering due to full overlap.\\n\");\n+      return false;\n+    }\n+  }\n+\n   ReorderIndices.assign(VL.size(), VL.size());\n   SmallBitVector Op1Indices(VL.size());\n   for (auto [Idx, V] : enumerate(VL)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/split-node-full-match.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(double %0) {\n;\n.thread:\n  %1 = call double null(ptr null, ptr null, ptr null)\n  %2 = call double null(ptr null, ptr null, ptr null)\n  br i1 false, label %3, label %5\n\n3:\n  %4 = call double null(ptr null, ptr null, ptr null)\n  br label %5\n\n5:\n  %.1226 = phi double [ %4, %3 ], [ 0.000000e+00, %.thread ]\n  %.1222 = phi double [ 0.000000e+00, %3 ], [ 0.000000e+00, %.thread ]\n  %.1218 = phi double [ %0, %3 ], [ 0.000000e+00, %.thread ]\n  %.1216 = phi double [ 0.000000e+00, %3 ], [ 0.000000e+00, %.thread ]\n  br i1 false, label %.lr.ph272.preheader, label %._crit_edge\n\n.lr.ph272.preheader:\n  br i1 false, label %._crit_edge, label %6\n\n6:\n  %7 = fdiv double 0.000000e+00, 0.000000e+00\n  %8 = fsub double 0.000000e+00, %7\n  %9 = fdiv double 0.000000e+00, 0.000000e+00\n  %10 = fsub double 0.000000e+00, %9\n  br i1 false, label %11, label %._crit_edge\n\n11:\n  br label %._crit_edge\n\n._crit_edge:\n  %.2227.lcssa = phi double [ %.1226, %5 ], [ 0.000000e+00, %11 ], [ %.1226, %6 ], [ %.1226, %.lr.ph272.preheader ]\n  %.2223.lcssa = phi double [ %.1222, %5 ], [ 0.000000e+00, %11 ], [ %.1222, %6 ], [ %.1222, %.lr.ph272.preheader ]\n  %.2219.lcssa = phi double [ %.1218, %5 ], [ 0.000000e+00, %11 ], [ %.1218, %6 ], [ %.1218, %.lr.ph272.preheader ]\n  %.2.lcssa = phi double [ %.1216, %5 ], [ %0, %11 ], [ %.1216, %6 ], [ %.1216, %.lr.ph272.preheader ]\n  %.0213.lcssa = phi double [ %2, %5 ], [ 0.000000e+00, %11 ], [ %10, %6 ], [ %2, %.lr.ph272.preheader ]\n  %.0211.lcssa = phi double [ %1, %5 ], [ 0.000000e+00, %11 ], [ %8, %6 ], [ %1, %.lr.ph272.preheader ]\n  ret void\n}"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/split-node-no-reorder-copy.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-sie-ps5 -mcpu=znver2 < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i1 @test(ptr %0, ptr %1, <2 x float> %2, <2 x float> %3, <2 x float> %4) {\n  %6 = load float, ptr %1, align 4\n  %7 = load float, ptr %0, align 4\n  %8 = fmul float %6, %6\n  %9 = fmul float %7, %7\n  %10 = fmul float %7, %7\n  %11 = fmul float %7, %7\n  %12 = fmul float %7, %7\n  %13 = fmul float %7, %7\n  %14 = load float, ptr %0, align 4\n  %15 = fmul float %14, %14\n  %16 = fmul float %14, %14\n  %17 = extractelement <2 x float> %2, i64 0\n  %18 = extractelement <2 x float> %2, i64 0\n  %19 = fmul float %17, %17\n  %20 = fmul float %18, %18\n  %21 = extractelement <2 x float> %3, i64 0\n  %22 = extractelement <2 x float> %2, i64 0\n  %23 = fmul float %21, %21\n  %24 = fmul float %22, %22\n  %25 = extractelement <2 x float> %2, i64 0\n  %26 = extractelement <2 x float> %2, i64 0\n  %27 = fmul float %25, %25\n  %28 = fmul float %26, %26\n  %29 = extractelement <2 x float> %2, i64 0\n  %30 = extractelement <2 x float> %4, i64 0\n  %31 = fmul float %29, %29\n  %32 = fmul float %30, %30\n  %33 = fadd reassoc nsz float %8, %9\n  %34 = fadd reassoc nsz float %33, %10\n  %35 = fadd reassoc nsz float %34, %11\n  %36 = fadd reassoc nsz float %35, %12\n  %37 = fadd reassoc nsz float %36, %13\n  %38 = fadd reassoc nsz float %37, %15\n  %39 = fadd reassoc nsz float %38, %16\n  %40 = fadd reassoc nsz float %39, %19\n  %41 = fadd reassoc nsz float %40, %20\n  %42 = fadd reassoc nsz float %41, %23\n  %43 = fadd reassoc nsz float %42, %24\n  %44 = fadd reassoc nsz float %43, %27\n  %45 = fadd reassoc nsz float %44, %28\n  %46 = fadd reassoc nsz float %45, %31\n  %47 = fadd reassoc nsz float %46, %32\n  %48 = call float @foo(float %47)\n  ret i1 false\n}\n\ndeclare float @foo(float)\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[slp] ICE: Instruction does not dominate all uses!",
    "body": "First showed up in 04c38981a9ce3e6225669c0e41cab947e3e7989f, last known good commit was 0283bb3afcc5dc521f6b2e7d541a830a9546ed80.\n\nCommits in this range with SLP in the subject line:\n```\n$ g log 0283bb3afcc5dc521f6b2e7d541a830a9546ed80^1..04c38981a9ce3e6225669c0e41cab947e3e7989f|grep -i slp\n'61d04f1aac96 Thu Apr 10 16:05:01 2025 -0400  [SLP][NFC]Extract preliminary checks from buildTree_rec, NFC'\n'aaaa2a325bd1 Thu Apr 10 12:06:38 2025 -0400  [SLP]Support vectorization of previously vectorized scalars in split nodes'\n'4ea57b3481c0 Thu Apr 10 08:30:43 2025 -0700  [SLP]Fix detection of matching splat vector'\n'396e2ef3b7f4 Thu Apr 10 08:20:28 2025 -0700  [SLP][NFC]Add a test with incorrect identity match for less-defined splat'\n'a693f23ef2fc Thu Apr 10 23:07:45 2025 +0800  [SLP][REVEC] Fix CompressVectorize does not expand mask when REVEC is enabled. (#135174)'\n'd02a704ec952 Thu Apr 10 18:54:45 2025 +0800  [SLP][REVEC] Make getExtractWithExtendCost support FixedVectorType as Dst. (#134822)'\n```\n\n```\n$ opt -passes=slp-vectorizer reduced.ll -disable-output\nInstruction does not dominate all uses!\n  %15 = call <6 x double> @llvm.vector.insert.v6f64.v2f64(<6 x double> %14, <2 x double> %13, i64 4)\n  %9 = shufflevector <6 x double> %15, <6 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>\nInstruction does not dominate all uses!\n  %13 = insertelement <2 x double> %12, double %1, i32 1\n  %11 = call <6 x double> @llvm.vector.insert.v6f64.v2f64(<6 x double> %10, <2 x double> %13, i64 4)\nLLVM ERROR: Broken module found, compilation aborted!\n```\n\n```\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @foo(double %0) {\n.thread:\n  %1 = call double null(ptr null, ptr null, ptr null)\n  %2 = call double null(ptr null, ptr null, ptr null)\n  br i1 false, label %3, label %5\n\n3:                                                ; preds = %.thread\n  %4 = call double null(ptr null, ptr null, ptr null)\n  br label %5\n\n5:                                                ; preds = %3, %.thread\n  %.1226 = phi double [ %4, %3 ], [ 0.000000e+00, %.thread ]\n  %.1222 = phi double [ 0.000000e+00, %3 ], [ 0.000000e+00, %.thread ]\n  %.1218 = phi double [ %0, %3 ], [ 0.000000e+00, %.thread ]\n  %.1216 = phi double [ 0.000000e+00, %3 ], [ 0.000000e+00, %.thread ]\n  br i1 false, label %.lr.ph272.preheader, label %._crit_edge\n\n.lr.ph272.preheader:                              ; preds = %5\n  br i1 false, label %._crit_edge, label %6\n\n6:                                                ; preds = %.lr.ph272.preheader\n  %7 = fdiv double 0.000000e+00, 0.000000e+00\n  %8 = fsub double 0.000000e+00, %7\n  %9 = fdiv double 0.000000e+00, 0.000000e+00\n  %10 = fsub double 0.000000e+00, %9\n  br i1 false, label %11, label %._crit_edge\n\n11:                                               ; preds = %6\n  br label %._crit_edge\n\n._crit_edge:                                      ; preds = %11, %6, %.lr.ph272.preheader, %5\n  %.2227.lcssa = phi double [ %.1226, %5 ], [ 0.000000e+00, %11 ], [ %.1226, %6 ], [ %.1226, %.lr.ph272.preheader ]\n  %.2223.lcssa = phi double [ %.1222, %5 ], [ 0.000000e+00, %11 ], [ %.1222, %6 ], [ %.1222, %.lr.ph272.preheader ]\n  %.2219.lcssa = phi double [ %.1218, %5 ], [ 0.000000e+00, %11 ], [ %.1218, %6 ], [ %.1218, %.lr.ph272.preheader ]\n  %.2.lcssa = phi double [ %.1216, %5 ], [ %0, %11 ], [ %.1216, %6 ], [ %.1216, %.lr.ph272.preheader ]\n  %.0213.lcssa = phi double [ %2, %5 ], [ 0.000000e+00, %11 ], [ %10, %6 ], [ %2, %.lr.ph272.preheader ]\n  %.0211.lcssa = phi double [ %1, %5 ], [ 0.000000e+00, %11 ], [ %8, %6 ], [ %1, %.lr.ph272.preheader ]\n  ret void\n}\n```",
    "author": "ashermancinelli",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "aaaa2a325bd1abb8c87e0171384fd2c42da5e38a"
}