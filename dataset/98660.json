{
  "bug_id": "98660",
  "issue_url": "https://github.com/llvm/llvm-project/issues/98660",
  "bug_type": "crash",
  "base_commit": "efde640cdfede834fa79e0eea69f82fb769d6beb",
  "knowledge_cutoff": "2024-07-12T16:45:01Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "fc9cd3272b50f4ee9f18c4ab82c278bbb014d99f",
    "components": [
      "LoopVectorize"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          8693,
          8698
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "addUsersInExitBlock"
      ]
    }
  },
  "patch": "commit fc9cd3272b50f4ee9f18c4ab82c278bbb014d99f\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun Jul 14 20:49:03 2024 +0100\n\n    [VPlan] Don't add live-outs for IV phis.\n    \n    Resume and exit values for inductions are currently still created\n    outside of VPlan and independent of the induction recipes. Don't add\n    live-outs for now, as the additional unneeded users can pessimize other\n    anlysis.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/98660.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 7d37d67cde29..5520baef7152 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -8693,6 +8693,14 @@ static void addUsersInExitBlock(VPBasicBlock *HeaderVPBB, Loop *OrigLoop,\n     Value *IncomingValue =\n         ExitPhi.getIncomingValueForBlock(ExitingBB);\n     VPValue *V = Builder.getVPValueOrAddLiveIn(IncomingValue, Plan);\n+    // Exit values for inductions are computed and updated outside of VPlan and\n+    // independent of induction recipes.\n+    // TODO: Compute induction exit values in VPlan, use VPLiveOuts to update\n+    // live-outs.\n+    if ((isa<VPWidenIntOrFpInductionRecipe>(V) &&\n+         !cast<VPWidenIntOrFpInductionRecipe>(V)->getTruncInst()) ||\n+        isa<VPWidenPointerInductionRecipe>(V))\n+      continue;\n     Plan.addLiveOut(&ExitPhi, V);\n   }\n }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/sve-live-out-pointer-induction.ll",
      "commands": [
        "opt -passes=loop-vectorize -mtriple=aarch64-unknown -mattr=+sve -S %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define ptr @test(ptr %start.1, ptr %start.2, ptr %end) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv.1 = phi ptr [ %start.1, %entry ], [ %iv.1.next, %loop ]\n  %iv.2 = phi ptr [ %start.2, %entry ], [ %iv.2.next, %loop ]\n  store i64 0, ptr %iv.2, align 4\n  %iv.2.next = getelementptr inbounds ptr, ptr %iv.2, i64 1\n  %iv.1.next = getelementptr inbounds ptr, ptr %iv.1, i64 1\n  %cmp.i.i.not.i = icmp eq ptr %iv.2.next, %end\n  br i1 %cmp.i.i.not.i, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %res.lcssa = phi ptr [ %iv.1, %loop ]\n  ret ptr %res.lcssa\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/ephemeral-recipes.ll",
      "commands": [
        "opt -p loop-vectorize -S %s"
      ],
      "tests": [
        {
          "test_name": "ephemeral_load_and_compare_iv_used_outside",
          "test_body": "target datalayout = \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx\"\n\ndefine i32 @ephemeral_load_and_compare_iv_used_outside(ptr %start, ptr %end) #0 {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi ptr [ %start, %entry ], [ %iv.next, %loop ]\n  %iv.next = getelementptr nusw i8, ptr %iv, i64 -8\n  %l1 = load i32, ptr %iv, align 4\n  %cmp = icmp ne i32 %l1, 0\n  call void @llvm.assume(i1 %cmp)\n  %cmp.not = icmp eq ptr %iv, %end\n  br i1 %cmp.not, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %final.load = load i32, ptr %iv, align 4\n  ret i32 %final.load\n}\n\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #1\n\nattributes #0 = { \"target-cpu\"=\"skylake-avx512\" }\nattributes #1 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/iv-live-outs.ll",
      "commands": [
        "opt -p loop-vectorize -mcpu=skylake-avx512 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_pr98660",
          "test_body": "target triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i64 @test_pr98660(ptr %dst, i64 %N) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %or = or disjoint i64 %iv, 1\n  %gep = getelementptr i32, ptr %dst, i64 %or\n  %l = load i32, ptr %gep, align 4\n  %c = icmp eq i32 %l, 0\n  br i1 %c, label %then, label %loop.latch\n\nthen:                                             ; preds = %loop.header\n  store i32 0, ptr %gep, align 4\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %iv.next = add i64 %iv, 1\n  %ec = icmp ult i64 %iv, %N\n  br i1 %ec, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  %ret = phi i64 [ %iv, %loop.latch ]\n  ret i64 %ret\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/iv_outside_user.ll",
      "commands": [
        "opt -S -passes=loop-vectorize -force-vector-interleave=1 -force-vector-width=2 < %s",
        "opt -S -passes=loop-vectorize -force-vector-interleave=2 -force-vector-width=1 < %s"
      ],
      "tests": [
        {
          "test_name": "iv_2_dead_in_loop_only_used_outside",
          "test_body": "define i32 @iv_2_dead_in_loop_only_used_outside(ptr %ptr) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %iv.2 = phi i32 [ 0, %entry ], [ %iv.2.next, %loop ]\n  %iv.next = add nuw i64 %iv, 1\n  %iv.2.next = add nuw i32 %iv.2, 2\n  %gep.ptr = getelementptr inbounds i64, ptr %ptr, i64 %iv\n  store i64 %iv, ptr %gep.ptr, align 4\n  %exitcond = icmp ugt i64 %iv, 1000\n  br i1 %exitcond, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  %iv.2.lcssa = phi i32 [ %iv.2, %loop ]\n  ret i32 %iv.2.lcssa\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/no-fold-tail-by-masking-iv-external-uses.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test(ptr %arr, i64 %n) {\nentry:\n  %cmp1 = icmp ugt i64 %n, 1\n  br i1 %cmp1, label %preheader, label %done\n\npreheader:                                        ; preds = %entry\n  br label %loop\n\nloop:                                             ; preds = %loop, %preheader\n  %conv = phi i64 [ %conv2, %loop ], [ 1, %preheader ]\n  %i = phi i8 [ %inc, %loop ], [ 1, %preheader ]\n  %sub = add nsw i64 %conv, -1\n  %ptr = getelementptr inbounds i32, ptr %arr, i64 %sub\n  store i32 65, ptr %ptr, align 4\n  %inc = add i8 %i, 1\n  %conv2 = zext i8 %inc to i64\n  %cmp2 = icmp ult i64 %conv2, %n\n  br i1 %cmp2, label %loop, label %load_val, !llvm.loop !0\n\nload_val:                                         ; preds = %loop\n  %final = phi i64 [ %conv, %loop ]\n  %ptr2 = getelementptr inbounds i32, ptr %arr, i64 %final\n  %val = load i32, ptr %ptr2, align 4\n  br label %done\n\ndone:                                             ; preds = %load_val, %entry\n  %value = phi i32 [ %val, %load_val ], [ 0, %entry ]\n  ret i32 %value\n}\n\n!0 = distinct !{!0, !1, !2, !3}\n!1 = !{!\"llvm.loop.unroll.disable\"}\n!2 = !{!\"llvm.loop.vectorize.predicate.enable\", i1 true}\n!3 = !{!\"llvm.loop.vectorize.enable\", i1 true}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/pr58811-scev-expansion.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "test2_pr58811",
          "test_body": "define void @test2_pr58811() {\nentry:\n  br label %loop.1.header\n\nloop.1.header:                                    ; preds = %loop.4, %entry\n  %p.1 = phi i32 [ 0, %entry ], [ %sub93.2, %loop.4 ]\n  br label %loop.2\n\nloop.2:                                           ; preds = %loop.2, %loop.1.header\n  %iv.2 = phi i32 [ %p.1, %loop.1.header ], [ %add101, %loop.2 ]\n  %iv.3 = phi i32 [ 0, %loop.1.header ], [ %sub93, %loop.2 ]\n  %sub93 = add i32 %iv.3, 1\n  %add101 = add i32 %iv.3, %iv.2\n  br i1 false, label %loop.2, label %loop.3\n\nloop.3:                                           ; preds = %loop.3, %loop.2\n  %iv.4 = phi i16 [ 0, %loop.2 ], [ %inc.1, %loop.3 ]\n  %iv.5 = phi i32 [ 0, %loop.2 ], [ %sub93.1, %loop.3 ]\n  %sub93.1 = sub i32 %iv.5, %iv.2\n  %inc.1 = add i16 %iv.4, 1\n  %cmp88.1 = icmp ult i16 %iv.4, 198\n  br i1 %cmp88.1, label %loop.3, label %loop.4\n\nloop.4:                                           ; preds = %loop.4, %loop.3\n  %iv.6 = phi i32 [ 0, %loop.3 ], [ %sub93.2, %loop.4 ]\n  %sub93.2 = sub i32 %iv.6, %iv.5\n  br i1 false, label %loop.4, label %loop.1.header\n}\n"
        },
        {
          "test_name": "test3_pr58811",
          "test_body": "define void @test3_pr58811() {\nentry:\n  br label %loop.1.header\n\nloop.1.header:                                    ; preds = %loop.1.latch, %entry\n  %p.1 = phi i32 [ 0, %entry ], [ %sub93.2, %loop.1.latch ]\n  %rem85 = urem i32 1, %p.1\n  br label %loop.2\n\nloop.2:                                           ; preds = %loop.2, %loop.1.header\n  %p.2 = phi i32 [ 1, %loop.1.header ], [ 0, %loop.2 ]\n  %add101 = add i32 %rem85, %p.2\n  br i1 false, label %loop.2, label %loop.3\n\nloop.3:                                           ; preds = %loop.3, %loop.2\n  %iv.3 = phi i16 [ 0, %loop.2 ], [ %inc.1, %loop.3 ]\n  %iv.4 = phi i32 [ 0, %loop.2 ], [ %sub93.1, %loop.3 ]\n  %sub93.1 = sub i32 %iv.4, %add101\n  %inc.1 = add i16 %iv.3, 1\n  %cmp88.1 = icmp ult i16 %iv.3, 198\n  br i1 %cmp88.1, label %loop.3, label %loop.4\n\nloop.4:                                           ; preds = %loop.4, %loop.3\n  %iv.5 = phi i32 [ 0, %loop.3 ], [ %sub93.2, %loop.4 ]\n  %sub93.2 = sub i32 %iv.5, %iv.4\n  br label %loop.4\n\nloop.1.latch:                                     ; No predecessors!\n  br label %loop.1.header\n}\n"
        },
        {
          "test_name": "test1_pr58811",
          "test_body": "define void @test1_pr58811() {\nentry:\n  br label %loop.1.preheader\n\nloop.1.preheader:                                 ; preds = %unreachable.bb, %entry\n  %iv.1.ph = phi i32 [ %sub93.2, %unreachable.bb ], [ 0, %entry ]\n  br label %loop.1\n\nloop.1:                                           ; preds = %loop.1, %loop.1.preheader\n  %iv.1 = phi i32 [ %iv.1.next, %loop.1 ], [ %iv.1.ph, %loop.1.preheader ]\n  %iv.2 = phi i32 [ %iv.2.next, %loop.1 ], [ 0, %loop.1.preheader ]\n  %iv.2.next = add i32 %iv.2, 1\n  %iv.1.next = add i32 %iv.2, %iv.1\n  br i1 false, label %loop.1, label %loop.2.preheader\n\nloop.2.preheader:                                 ; preds = %loop.1\n  %iv.1.lcssa = phi i32 [ %iv.1, %loop.1 ]\n  br label %loop.2\n\nloop.2:                                           ; preds = %loop.2, %loop.2.preheader\n  %iv.3 = phi i16 [ %iv.3.next, %loop.2 ], [ 0, %loop.2.preheader ]\n  %iv.4 = phi i32 [ %iv.4.next, %loop.2 ], [ 0, %loop.2.preheader ]\n  %iv.4.next = sub i32 %iv.4, %iv.1.lcssa\n  %iv.3.next = add i16 %iv.3, 1\n  %cmp88.1 = icmp ult i16 %iv.3, 198\n  br i1 %cmp88.1, label %loop.2, label %loop.3.preheader\n\nloop.3.preheader:                                 ; preds = %loop.2\n  %iv.4.lcssa = phi i32 [ %iv.4, %loop.2 ]\n  br label %loop.3\n\nloop.3:                                           ; preds = %loop.3, %loop.3.preheader\n  %iv.5 = phi i32 [ %sub93.2, %loop.3 ], [ 0, %loop.3.preheader ]\n  %sub93.2 = sub i32 %iv.5, %iv.4.lcssa\n  br label %loop.3\n\nunreachable.bb:                                   ; No predecessors!\n  br label %loop.1.preheader\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/pr59319-loop-access-info-invalidation.ll",
      "commands": [
        "%s"
      ],
      "tests": [
        {
          "test_name": "reduced",
          "test_body": "define void @reduced(ptr %0, ptr %1, i64 %iv, ptr %2, i64 %iv76, i64 %iv93) {\nentry:\n  br label %loop.1\n\nloop.1:                                           ; preds = %loop.1, %entry\n  %iv761 = phi i64 [ 0, %entry ], [ %iv.next77, %loop.1 ]\n  %iv4 = phi i64 [ 0, %entry ], [ %iv.next, %loop.1 ]\n  %iv.next77 = add i64 %iv761, 1\n  %arrayidx.i.i50 = getelementptr i32, ptr %0, i64 %iv76\n  %iv.next = add i64 %iv4, 1\n  %exitcond.not = icmp eq i64 %iv4, %iv\n  br i1 %exitcond.not, label %loop.2.preheader, label %loop.1\n\nloop.2.preheader:                                 ; preds = %loop.1\n  br label %loop.2\n\nloop.3.lr.ph:                                     ; preds = %loop.2\n  %idxprom.i.i61 = and i64 %iv761, 1\n  %arrayidx.i.i62 = getelementptr i32, ptr %0, i64 %idxprom.i.i61\n  br label %loop.3\n\nloop.2:                                           ; preds = %loop.2, %loop.2.preheader\n  %iv846 = phi i64 [ %iv.next85, %loop.2 ], [ 0, %loop.2.preheader ]\n  %iv.next87 = add i64 0, 0\n  %arrayidx.i.i56 = getelementptr i32, ptr %0, i64 %iv761\n  %3 = load i32, ptr %arrayidx.i.i56, align 4\n  store i32 0, ptr %1, align 4\n  %iv.next85 = add i64 %iv846, 1\n  %exitcond92.not = icmp eq i64 %iv846, %iv\n  br i1 %exitcond92.not, label %loop.3.lr.ph, label %loop.2\n\nloop.3:                                           ; preds = %loop.3, %loop.3.lr.ph\n  %iv932 = phi i64 [ 0, %loop.3.lr.ph ], [ %iv.next94, %loop.3 ]\n  %4 = load i32, ptr %arrayidx.i.i62, align 4\n  %arrayidx.i.i653 = getelementptr i32, ptr %2, i64 %iv93\n  store i32 0, ptr %1, align 4\n  %iv.next94 = add i64 %iv932, 1\n  %exitcond97.not = icmp eq i64 %iv932, %iv\n  br i1 %exitcond97.not, label %loop.cleanup, label %loop.3\n\nloop.cleanup:                                     ; preds = %loop.3\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `(VF.isScalar() || Def->isLiveIn() || hasVectorValue(Def, Part) || (hasScalarValue(Def, VPIteration(Part, 0)) && Data.PerPartScalars[Def][Part].size() == 1)) && \"Trying to access a single scalar per part but has multiple scalars \" \"per part.\"' failed.",
    "body": "To reproduce run opt opt with -passes loop-vectorize with the following test:\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine void @wombat(i64 %arg) #0 gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb3, %bb\r\n  %phi = phi i64 [ 0, %bb ], [ %add, %bb3 ]\r\n  br i1 false, label %bb2, label %bb3\r\n\r\nbb2:                                              ; preds = %bb1\r\n  %or = or disjoint i64 %phi, 0\r\n  %getelementptr = getelementptr i32, ptr addrspace(1) null, i64 %or\r\n  store i32 0, ptr addrspace(1) %getelementptr, align 4\r\n  br label %bb3\r\n\r\nbb3:                                              ; preds = %bb2, %bb1\r\n  %add = add i64 %phi, 1\r\n  %icmp = icmp ult i64 %phi, %arg\r\n  br i1 %icmp, label %bb1, label %bb4\r\n\r\nbb4:                                              ; preds = %bb3\r\n  %phi5 = phi i64 [ %phi, %bb3 ]\r\n  ret void\r\n}\r\n\r\nattributes #0 = { \"target-features\"=\"+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx512ifma,+xsave,+sse4.2,-tsxldtrk,-sm3,-ptwrite,-widekl,+invpcid,+64bit,+xsavec,-avx10.1-512,-avx512vpopcntdq,+cmov,-avx512vp2intersect,+avx512cd,+movbe,-avxvnniint8,-ccmp,-amx-int8,-kl,-avx10.1-256,+evex512,-avxvnni,+rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-sha512,-vpclmulqdq,+avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-gfni,-avxvnniint16,-amx-fp16,-ndd,+xsaveopt,+rdrnd,+avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,+avx512bw,+sse3,+pku,+fsgsbase,-clzero,-mwaitx,-lwp,+lzcnt,-sha,-movdir64b,-ppx,-wbnoinvd,-enqcmd,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,+avx512dq,-sse4a,-avx512f\" }\r\n```\r\nReproducer:\r\nhttps://godbolt.org/z/Ghz3147nj\r\n\r\nStack dump:\r\n```\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes loop-vectorize <source>\r\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\r\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"wombat\"\r\n #0 0x0000000004e9b948 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4e9b948)\r\n #1 0x0000000004e990bc SignalHandler(int) Signals.cpp:0:0\r\n #2 0x000070edf8442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x000070edf84969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x000070edf8442476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x000070edf84287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x000070edf842871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x000070edf8439e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x00000000040395f7 llvm::VPTransformState::get(llvm::VPValue*, unsigned int, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40395f7)\r\n #9 0x0000000004056ece llvm::VPInstruction::generatePerPart(llvm::VPTransformState&, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4056ece)\r\n#10 0x00000000040595ee llvm::VPInstruction::execute(llvm::VPTransformState&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40595ee)\r\n#11 0x0000000004030a1f llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4030a1f)\r\n#12 0x00000000040320e8 llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x40320e8)\r\n#13 0x0000000004030612 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4030612)\r\n#14 0x0000000004039946 llvm::VPlan::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4039946)\r\n#15 0x0000000003f1d475 llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>> const*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f1d475)\r\n#16 0x0000000003f332ea llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f332ea)\r\n#17 0x0000000003f35a29 llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f35a29)\r\n#18 0x0000000003f3614b llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3f3614b)\r\n#19 0x0000000002e212be llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e212be)\r\n#20 0x0000000004c9f2d8 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c9f2d8)\r\n#21 0x0000000000dc9bee llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdc9bee)\r\n#22 0x0000000004c9dd46 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c9dd46)\r\n#23 0x0000000000dca1fe llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdca1fe)\r\n#24 0x0000000004c9bf10 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c9bf10)\r\n#25 0x00000000008db1d2 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8db1d2)\r\n#26 0x00000000008ce0fc optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8ce0fc)\r\n#27 0x000070edf8429d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#28 0x000070edf8429e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#29 0x00000000008c556e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8c556e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Interesting, let me take a look"
      }
    ]
  }
}
