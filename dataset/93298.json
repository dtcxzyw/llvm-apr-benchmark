{
  "bug_id": "93298",
  "issue_url": "https://github.com/llvm/llvm-project/issues/93298",
  "bug_type": "crash",
  "base_commit": "f31b197d9df141effd439de8be51ce24f3e8f200",
  "knowledge_cutoff": "2024-05-24T12:01:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/DeadStoreElimination"
  ],
  "hints": {
    "fix_commit": "243ffbdf8b25285d04ee4393e86094312cb7c64f",
    "components": [
      "DeadStoreElimination"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp": [
        [
          2109,
          2118
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp": [
        "isOverwrite",
        "getLocForWrite",
        "DSEState"
      ]
    }
  },
  "patch": "commit 243ffbdf8b25285d04ee4393e86094312cb7c64f\nAuthor: eaeltsin <109593613+eaeltsin@users.noreply.github.com>\nDate:   Mon May 27 09:26:44 2024 +0200\n\n    [DSE] Check write location in IsRedundantStore (#93400)\n    \n    Fix https://github.com/llvm/llvm-project/issues/93298.\n\ndiff --git a/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp b/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\nindex ed4212d29cef..172cce2cfa38 100644\n--- a/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\n+++ b/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\n@@ -2109,10 +2109,12 @@ struct DSEState {\n         if (auto *MemSetI = dyn_cast<MemSetInst>(UpperInst)) {\n           if (auto *SI = dyn_cast<StoreInst>(DefInst)) {\n             // MemSetInst must have a write location.\n-            MemoryLocation UpperLoc = *getLocForWrite(UpperInst);\n+            auto UpperLoc = getLocForWrite(UpperInst);\n+            if (!UpperLoc)\n+              return false;\n             int64_t InstWriteOffset = 0;\n             int64_t DepWriteOffset = 0;\n-            auto OR = isOverwrite(UpperInst, DefInst, UpperLoc, *MaybeDefLoc,\n+            auto OR = isOverwrite(UpperInst, DefInst, *UpperLoc, *MaybeDefLoc,\n                                   InstWriteOffset, DepWriteOffset);\n             Value *StoredByte = isBytewiseValue(SI->getValueOperand(), DL);\n             return StoredByte && StoredByte == MemSetI->getOperand(1) &&\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/DeadStoreElimination/simple.ll",
      "commands": [
        "opt < %s -passes=dse -S",
        "opt < %s -aa-pipeline=basic-aa -passes=dse -S"
      ],
      "tests": [
        {
          "test_name": "test48",
          "test_body": "target datalayout = \"E-p:64:64:64-a0:0:8-f32:32:32-f64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-v64:64:64-v128:128:128\"\n\ndefine i32 @test48(ptr %P, ptr noalias %Q, ptr %R) {\n  store i32 1, ptr %Q, align 4\n  store i32 2, ptr %P, align 4\n  store i32 3, ptr %Q, align 4\n  %l = load i32, ptr %R, align 4\n  ret i32 %l\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[DSE] crash on applying * to std::nullopt",
    "body": "[reduced5.zip](https://github.com/llvm/llvm-project/files/15433764/reduced5.zip)\r\n\r\nThe command\r\n```\r\nopt -passes=dse reduced5.ll\r\n```\r\nfails occasionally. Debug version reliably complains\r\n```\r\ninclude/c++/v1/optional:805: assertion this->has_value() failed: optional operator* called on a disengaged value\r\n```\r\nwith stack trace\r\n```\r\n    frame #3: 0x00005555663c6a43 opt`std::__u::optional<llvm::MemoryLocation>::operator*(this= Has Value=false ) && at optional:805:5\r\n    frame #4: 0x00005555663c4d58 opt`(anonymous namespace)::DSEState::eliminateRedundantStoresOfExistingValues(this=0x00007fffffff9130)::'lambda'()::operator()() const at DeadStoreElimination.cpp:2119:39\r\n    frame #5: 0x00005555663bf842 opt`(anonymous namespace)::DSEState::eliminateRedundantStoresOfExistingValues(this=0x00007fffffff9960) at DeadStoreElimination.cpp:2132:12\r\n    frame #6: 0x00005555663b8956 opt`(anonymous namespace)::eliminateDeadStores(F=0x000033187fe3e008, AA=0x000033187feaafc8, MSSA=0x000033187fe603f0, DT=0x000033187fef6d78, PDT=0x000033187fed18d0, TLI=0x000033187fe0cd18, LI=0x000033187fe11cc8) at DeadStoreElimination.cpp:2332:23\r\n    frame #7: 0x00005555663b6b3e opt`llvm::DSEPass::run(this=0x000033187fe08ad8, F=0x000033187fe3e008, AM=0x00007fffffffc1d8) at DeadStoreElimination.cpp:2355:18\r\n```\r\n\r\nThe local fix is\r\n```\r\n==== llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp#184\r\n# action=edit type=text\r\n--- llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\t2024-04-15 20:27:56.000000000 -0700\r\n+++ llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp\t2024-05-24 04:36:17.000000000 -0700\r\n@@ -2109,10 +2109,12 @@\r\n         if (auto *MemSetI = dyn_cast<MemSetInst>(UpperInst)) {\r\n           if (auto *SI = dyn_cast<StoreInst>(DefInst)) {\r\n             // MemSetInst must have a write location.\r\n-            MemoryLocation UpperLoc = *getLocForWrite(UpperInst);\r\n+            auto UpperLoc = getLocForWrite(UpperInst);\r\n+            if (!UpperLoc)\r\n+              return false;\r\n             int64_t InstWriteOffset = 0;\r\n             int64_t DepWriteOffset = 0;\r\n-            auto OR = isOverwrite(UpperInst, DefInst, UpperLoc, *MaybeDefLoc,\r\n+            auto OR = isOverwrite(UpperInst, DefInst, *UpperLoc, *MaybeDefLoc,\r\n                                   InstWriteOffset, DepWriteOffset);\r\n             Value *StoredByte = isBytewiseValue(SI->getValueOperand(), DL);\r\n             return StoredByte && StoredByte == MemSetI->getOperand(1) &&\r\n```\r\nwhich basically reverts a piece of https://github.com/llvm/llvm-project/commit/81d69e1bda9e4b6a83f29ba1f614e43ab4700972\r\n\r\nLooks like the actual problem happened earlier?\r\n\r\nPlease take a look, this is blocking us significantly.\r\n\r\n",
    "author": "eaeltsin",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "eaeltsin",
        "body": "@nikic @fhahn FYI\r\n\r\nthe reproducer was cooked by @alinas \r\n"
      }
    ]
  }
}