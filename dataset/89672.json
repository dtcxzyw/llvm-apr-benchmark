{
  "bug_id": "89672",
  "issue_url": "https://github.com/llvm/llvm-project/issues/89672",
  "bug_type": "miscompilation",
  "base_commit": "b64e483785bfef5ec4977988543ed5cfaf62f306",
  "knowledge_cutoff": "2024-04-22T21:35:16Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SimplifyCFG"
  ],
  "hints": {
    "fix_commit": "883887493c882d656d5da100ee637a348e81357c",
    "components": [
      "SimplifyCFG"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        [
          2888,
          2894
        ],
        [
          2896,
          2902
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyCFG.cpp": [
        "isSafeToSpeculateStore"
      ]
    }
  },
  "patch": "commit 883887493c882d656d5da100ee637a348e81357c\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Tue Apr 23 12:36:35 2024 +0900\n\n    [SimplifyCFG] Check alignment when speculating stores\n    \n    When speculating a store based on a preceding load/store, we need\n    to ensure that the speculated store does not have a higher\n    alignment (which might only be guaranteed by the branch condition).\n    \n    There are various ways in which this could be strengthened (we\n    could get or enforce the alignment), but for now just do the\n    simple check against the preceding load/store.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/89672.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\nindex da3eb229c041..0826d748ba0d 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyCFG.cpp\n@@ -2888,7 +2888,8 @@ static Value *isSafeToSpeculateStore(Instruction *I, BasicBlock *BrBB,\n       // simple, to avoid introducing a spurious non-atomic write after an\n       // atomic write.\n       if (SI->getPointerOperand() == StorePtr &&\n-          SI->getValueOperand()->getType() == StoreTy && SI->isSimple())\n+          SI->getValueOperand()->getType() == StoreTy && SI->isSimple() &&\n+          SI->getAlign() >= StoreToHoist->getAlign())\n         // Found the previous store, return its value operand.\n         return SI->getValueOperand();\n       return nullptr; // Unknown store.\n@@ -2896,7 +2897,7 @@ static Value *isSafeToSpeculateStore(Instruction *I, BasicBlock *BrBB,\n \n     if (auto *LI = dyn_cast<LoadInst>(&CurI)) {\n       if (LI->getPointerOperand() == StorePtr && LI->getType() == StoreTy &&\n-          LI->isSimple()) {\n+          LI->isSimple() && LI->getAlign() >= StoreToHoist->getAlign()) {\n         // Local objects (created by an `alloca` instruction) are always\n         // writable, so once we are past a read from a location it is valid to\n         // also write to that same location.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SimplifyCFG/speculate-store.ll",
      "commands": [
        "opt -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S < %s"
      ],
      "tests": [
        {
          "test_name": "wrong_align_store",
          "test_body": "define void @wrong_align_store(ptr %A, i32 %B, i32 %C, i32 %D) {\nentry:\n  store i32 %B, ptr %A, align 4\n  %cmp = icmp sgt i32 %D, 42\n  br i1 %cmp, label %if.then, label %ret.end\n\nif.then:                                          ; preds = %entry\n  store i32 %C, ptr %A, align 8\n  br label %ret.end\n\nret.end:                                          ; preds = %if.then, %entry\n  ret void\n}\n"
        },
        {
          "test_name": "wrong_align_load",
          "test_body": "define void @wrong_align_load(i32 %C, i32 %D) {\nentry:\n  %A = alloca i32, align 4\n  %0 = load i32, ptr %A, align 4\n  %cmp = icmp sgt i32 %D, 42\n  br i1 %cmp, label %if.then, label %ret.end\n\nif.then:                                          ; preds = %entry\n  store i32 %C, ptr %A, align 8\n  br label %ret.end\n\nret.end:                                          ; preds = %if.then, %entry\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "coalescing of redundant vector stores isn't preserving alignment correctly",
    "body": "https://alive2.llvm.org/ce/z/-qQphe\r\n\r\noptimizing this code:\r\n```llvm\r\ndefine i32 @f(ptr %0, i1 %1) {\r\n  store <2 x i64> zeroinitializer, ptr %0, align 8\r\n  br i1 %1, label %4, label %3\r\n\r\n3:                                                ; preds = %2\r\n  store <2 x i64> zeroinitializer, ptr %0, align 16\r\n  br label %4\r\n\r\n4:                                                ; preds = %3, %2\r\n  ret i32 0\r\n}\r\n```\r\n\r\nis mostly doing what we expect, but the coalesced store should retain the smaller alignnment value of the two, not the larger:\r\n```lllvm\r\ndefine noundef i32 @f(ptr nocapture writeonly %0, i1 %1) local_unnamed_addr #0 {\r\n  store <2 x i64> zeroinitializer, ptr %0, align 16\r\n  ret i32 0\r\n}\r\n\r\nattributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }\r\n```\r\n\r\ncc @nunoplopes @hatsunespica",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "The issue is introduced by SimplifyCFG: https://alive2.llvm.org/ce/z/zf-j74"
      },
      {
        "author": "nikic",
        "body": "Specifically this is isSafeToSpeculateStore(), which looks for a preceding store to check whether it is safe to speculate, but fails to check alignment."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}