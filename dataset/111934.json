{
  "bug_id": "111934",
  "issue_url": "https://github.com/llvm/llvm-project/issues/111934",
  "bug_type": "miscompilation",
  "base_commit": "f74f568b29885c3fa63c44e33f91f3bb7281138e",
  "knowledge_cutoff": "2024-10-11T03:29:55Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "6a65e98fa7901dc1de91172d065fafb16ce89d77",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          955,
          963
        ],
        [
          971,
          977
        ],
        [
          980,
          986
        ],
        [
          3375,
          3381
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "InstCombinerImpl::foldAndOrOfICmps",
        "foldIsPowerOf2"
      ]
    }
  },
  "patch": "commit 6a65e98fa7901dc1de91172d065fafb16ce89d77\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Fri Oct 11 18:19:21 2024 +0800\n\n    [InstCombine] Drop range attributes in `foldIsPowerOf2` (#111946)\n    \n    Fixes https://github.com/llvm/llvm-project/issues/111934.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex 688601a8ffa5..964616a4eb35 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -955,9 +955,11 @@ static Value *foldIsPowerOf2OrZero(ICmpInst *Cmp0, ICmpInst *Cmp1, bool IsAnd,\n }\n \n /// Reduce a pair of compares that check if a value has exactly 1 bit set.\n-/// Also used for logical and/or, must be poison safe.\n+/// Also used for logical and/or, must be poison safe if range attributes are\n+/// dropped.\n static Value *foldIsPowerOf2(ICmpInst *Cmp0, ICmpInst *Cmp1, bool JoinedByAnd,\n-                             InstCombiner::BuilderTy &Builder) {\n+                             InstCombiner::BuilderTy &Builder,\n+                             InstCombinerImpl &IC) {\n   // Handle 'and' / 'or' commutation: make the equality check the first operand.\n   if (JoinedByAnd && Cmp1->getPredicate() == ICmpInst::ICMP_NE)\n     std::swap(Cmp0, Cmp1);\n@@ -971,7 +973,10 @@ static Value *foldIsPowerOf2(ICmpInst *Cmp0, ICmpInst *Cmp1, bool JoinedByAnd,\n       match(Cmp1, m_SpecificICmp(ICmpInst::ICMP_ULT,\n                                  m_Intrinsic<Intrinsic::ctpop>(m_Specific(X)),\n                                  m_SpecificInt(2)))) {\n-    Value *CtPop = Cmp1->getOperand(0);\n+    auto *CtPop = cast<Instruction>(Cmp1->getOperand(0));\n+    // Drop range attributes and re-infer them in the next iteration.\n+    CtPop->dropPoisonGeneratingAnnotations();\n+    IC.addToWorklist(CtPop);\n     return Builder.CreateICmpEQ(CtPop, ConstantInt::get(CtPop->getType(), 1));\n   }\n   // (X == 0) || (ctpop(X) u> 1) --> ctpop(X) != 1\n@@ -980,7 +985,10 @@ static Value *foldIsPowerOf2(ICmpInst *Cmp0, ICmpInst *Cmp1, bool JoinedByAnd,\n       match(Cmp1, m_SpecificICmp(ICmpInst::ICMP_UGT,\n                                  m_Intrinsic<Intrinsic::ctpop>(m_Specific(X)),\n                                  m_SpecificInt(1)))) {\n-    Value *CtPop = Cmp1->getOperand(0);\n+    auto *CtPop = cast<Instruction>(Cmp1->getOperand(0));\n+    // Drop range attributes and re-infer them in the next iteration.\n+    CtPop->dropPoisonGeneratingAnnotations();\n+    IC.addToWorklist(CtPop);\n     return Builder.CreateICmpNE(CtPop, ConstantInt::get(CtPop->getType(), 1));\n   }\n   return nullptr;\n@@ -3375,7 +3383,7 @@ Value *InstCombinerImpl::foldAndOrOfICmps(ICmpInst *LHS, ICmpInst *RHS,\n     if (Value *V = foldSignedTruncationCheck(LHS, RHS, I, Builder))\n       return V;\n \n-  if (Value *V = foldIsPowerOf2(LHS, RHS, IsAnd, Builder))\n+  if (Value *V = foldIsPowerOf2(LHS, RHS, IsAnd, Builder, *this))\n     return V;\n \n   if (Value *V = foldPowerOf2AndShiftedMask(LHS, RHS, IsAnd, Builder))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/ispow2.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "not_pow2_or_z_known_bits_fail_wrong_cmp",
          "test_body": "define <2 x i1> @not_pow2_or_z_known_bits_fail_wrong_cmp(<2 x i32> %xin) {\n  %x = or <2 x i32> %xin, splat (i32 64)\n  %cnt = call <2 x i32> @llvm.ctpop.v2i32(<2 x i32> %x)\n  %r = icmp ugt <2 x i32> %cnt, splat (i32 2)\n  ret <2 x i1> %r\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare <2 x i32> @llvm.ctpop.v2i32(<2 x i32>) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] poison-generating attributes are not dropped when folding logical and/or of icmps",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/rSUfvo\r\n```\r\ndefine i1 @src(i32 noundef %Value) {\r\nentry:\r\n  %cmp.not = icmp eq i32 %Value, 0\r\n  %0 = call range(i32 1, 33) i32 @llvm.ctpop.i32(i32 %Value)\r\n  %cmp1 = icmp ult i32 %0, 2\r\n  %1 = select i1 %cmp.not, i1 false, i1 %cmp1\r\n  ret i1 %1\r\n}\r\n\r\ndefine i1 @tgt(i32 noundef %Value) {\r\nentry:\r\n  %0 = call range(i32 1, 33) i32 @llvm.ctpop.i32(i32 %Value)\r\n  %1 = icmp eq i32 %0, 1\r\n  ret i1 %1\r\n}\r\n```\r\nWhen `%Value == 0`, `@src` returns `false` but `@tgt` returns `poison`.\r\nThis miscompilation was triggered after https://github.com/llvm/llvm-project/pull/111284 was landed.\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}