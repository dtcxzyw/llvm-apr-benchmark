{
  "bug_id": "108698",
  "issue_url": "https://github.com/llvm/llvm-project/issues/108698",
  "bug_type": "miscompilation",
  "base_commit": "ba8e4246e2f17030788e8a4954bf5c290332206f",
  "knowledge_cutoff": "2024-09-14T13:16:53Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "87663fdab9d0e7bcc0b963ea078da9e2eb574908",
    "components": [
      "VectorCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          2597,
          2607
        ],
        [
          2628,
          2634
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "VectorCombine::shrinkType"
      ]
    }
  },
  "patch": "commit 87663fdab9d0e7bcc0b963ea078da9e2eb574908\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Sun Sep 15 18:38:06 2024 +0800\n\n     [VectorCombine] Don't shrink lshr if the shamt is not less than bitwidth (#108705)\n    \n    Consider the following case:\n    ```\n    define <2 x i32> @test(<2 x i64> %vec.ind16, <2 x i32> %broadcast.splat20) {\n      %19 = icmp eq <2 x i64> %vec.ind16, zeroinitializer\n      %20 = zext <2 x i1> %19 to <2 x i32>\n      %21 = lshr <2 x i32> %20, %broadcast.splat20\n      ret <2 x i32> %21\n    }\n    ```\n    After https://github.com/llvm/llvm-project/pull/104606, we shrink the\n    lshr into:\n    ```\n    define <2 x i32> @test(<2 x i64> %vec.ind16, <2 x i32> %broadcast.splat20) {\n      %1 = icmp eq <2 x i64> %vec.ind16, zeroinitializer\n      %2 = trunc <2 x i32> %broadcast.splat20 to <2 x i1>\n      %3 = lshr <2 x i1> %1, %2\n      %4 = zext <2 x i1> %3 to <2 x i32>\n      ret <2 x i32> %4\n    }\n    ```\n    It is incorrect since `lshr i1 X, 1` returns `poison`.\n    This patch adds additional check on the shamt operand. The lshr will get\n    shrunk iff we ensure that the shamt is less than bitwidth of the smaller\n    type. As `computeKnownBits(&I, *DL).countMaxActiveBits() > BW` always\n    evaluates to true for `lshr(zext(X), Y)`, this check will only apply to\n    bitwise logical instructions.\n    \n    Alive2: https://alive2.llvm.org/ce/z/j_RmTa\n    Fixes https://github.com/llvm/llvm-project/issues/108698.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex d7afe2f426d3..58701bfa60a3 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -2597,11 +2597,19 @@ bool VectorCombine::shrinkType(llvm::Instruction &I) {\n   auto *SmallTy = cast<FixedVectorType>(ZExted->getType());\n   unsigned BW = SmallTy->getElementType()->getPrimitiveSizeInBits();\n \n-  // Check that the expression overall uses at most the same number of bits as\n-  // ZExted\n-  KnownBits KB = computeKnownBits(&I, *DL);\n-  if (KB.countMaxActiveBits() > BW)\n-    return false;\n+  if (I.getOpcode() == Instruction::LShr) {\n+    // Check that the shift amount is less than the number of bits in the\n+    // smaller type. Otherwise, the smaller lshr will return a poison value.\n+    KnownBits ShAmtKB = computeKnownBits(I.getOperand(1), *DL);\n+    if (ShAmtKB.getMaxValue().uge(BW))\n+      return false;\n+  } else {\n+    // Check that the expression overall uses at most the same number of bits as\n+    // ZExted\n+    KnownBits KB = computeKnownBits(&I, *DL);\n+    if (KB.countMaxActiveBits() > BW)\n+      return false;\n+  }\n \n   // Calculate costs of leaving current IR as it is and moving ZExt operation\n   // later, along with adding truncates if needed\n@@ -2628,7 +2636,7 @@ bool VectorCombine::shrinkType(llvm::Instruction &I) {\n       return false;\n \n     // Check if we can propagate ZExt through its other users\n-    KB = computeKnownBits(UI, *DL);\n+    KnownBits KB = computeKnownBits(UI, *DL);\n     if (KB.countMaxActiveBits() > BW)\n       return false;\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/AArch64/shrink-types.ll",
      "commands": [
        "opt -passes=vector-combine -S %s"
      ],
      "tests": [
        {
          "test_name": "pr108698",
          "test_body": "target triple = \"aarch64\"\n\ndefine <2 x i32> @pr108698(<2 x i64> %x, <2 x i32> %y) {\n  %cmp = icmp eq <2 x i64> %x, zeroinitializer\n  %ext = zext <2 x i1> %cmp to <2 x i32>\n  %lshr = lshr <2 x i32> %ext, %y\n  ret <2 x i32> %lshr\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong code at -O{2,3} on x86_64-linux-gnu",
    "body": "It appears to be a recent regression as it doesn't reproduce with 18.1.0 and earlier. \r\n\r\nCompiler Explorer: https://godbolt.org/z/EGasYh8x1\r\n\r\n```\r\n[691] % clangtk -v\r\nclang version 20.0.0git (https://github.com/llvm/llvm-project.git 223e2efa5e886502a9467b7ef700ebce9b7886e8)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /local/suz-local/software/local/clang-trunk/bin\r\nBuild config: +assertions\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/10\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\r\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/9\r\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\r\nCandidate multilib: .;@m64\r\nSelected multilib: .;@m64\r\n[692] % \r\n[692] % clangtk -O1 small.c; ./a.out\r\n[693] % \r\n[693] % clangtk -O2 small.c\r\n[694] % ./a.out\r\nAborted\r\n[695] % \r\n[695] % cat small.c\r\nchar a[8];\r\nint b = 1, c;\r\nint main() {\r\n  for (; c < 8; c++)\r\n    a[c] = !c >> b;\r\n  if (a[0] != 0)\r\n    __builtin_abort();\r\n  return 0;\r\n}\r\n```",
    "author": "zhendongsu",
    "labels": [
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/5SkPZS\r\n```\r\n; bin/opt -passes=vector-combine test.ll -S\r\n\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine <2 x i32> @test(<2 x i64> %vec.ind16, <2 x i32> %broadcast.splat20) {\r\n  %19 = icmp eq <2 x i64> %vec.ind16, zeroinitializer\r\n  %20 = zext <2 x i1> %19 to <2 x i32>\r\n  %21 = lshr <2 x i32> %20, %broadcast.splat20\r\n  ret <2 x i32> %21\r\n}\r\n```\r\n```\r\ndefine <2 x i32> @test(<2 x i64> %vec.ind16, <2 x i32> %broadcast.splat20) {\r\n  %1 = icmp eq <2 x i64> %vec.ind16, zeroinitializer\r\n  %2 = trunc <2 x i32> %broadcast.splat20 to <2 x i1>\r\n  %3 = lshr <2 x i1> %1, %2\r\n  %4 = zext <2 x i1> %3 to <2 x i32>\r\n  ret <2 x i32> %4\r\n}\r\n```"
      },
      {
        "author": "dtcxzyw",
        "body": "Related PR: https://github.com/llvm/llvm-project/pull/104606\r\n"
      }
    ]
  },
  "verified": true
}