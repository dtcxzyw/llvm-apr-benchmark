{
  "bug_id": "126304",
  "issue_url": "https://github.com/llvm/llvm-project/issues/126304",
  "bug_type": "crash",
  "base_commit": "fcbf04e40e66014f455a38b59993be865bc6cdfd",
  "knowledge_cutoff": "2025-02-07T20:48:01Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "10844fb9b0b78695243391e091e17ec29295872a",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          5596,
          5601
        ],
        [
          5626,
          5632
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::getReorderingData"
      ]
    }
  },
  "patch": "commit 10844fb9b0b78695243391e091e17ec29295872a\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Feb 11 13:23:55 2025 -0800\n\n    [SLP]Fix attempt to build the reorder mask for non-adjusted reuse mask\n    \n    When building the reorder for non-single use reuse mask, need to check\n    if the size of the mask is multiple of the number of unique scalars.\n      Otherwise, the compiler may crash when trying to reorder nodes.\n    \n    Fixes #126304\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex e1c08077126d..fb1054ee30aa 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -5596,6 +5596,8 @@ BoUpSLP::getReorderingData(const TreeEntry &TE, bool TopToBottom) {\n         ::getNumberOfParts(*TTI, getWidenedType(TE.Scalars.front()->getType(),\n                                                 2 * TE.getVectorFactor())) == 1)\n       return std::nullopt;\n+    if (TE.ReuseShuffleIndices.size() % Sz != 0)\n+      return std::nullopt;\n     if (!ShuffleVectorInst::isOneUseSingleSourceMask(TE.ReuseShuffleIndices,\n                                                      Sz)) {\n       SmallVector<int> ReorderMask(Sz, PoisonMaskElem);\n@@ -5626,7 +5628,7 @@ BoUpSLP::getReorderingData(const TreeEntry &TE, bool TopToBottom) {\n         UsedVals.set(Val);\n         for (unsigned K = 0; K < NumParts; ++K) {\n           unsigned Idx = Val + Sz * K;\n-          if (Idx < VF)\n+          if (Idx < VF && I + K < VF)\n             ResOrder[Idx] = I + K;\n         }\n       }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/SystemZ/reuse-non-power-of-2-reorder.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=systemz -mcpu=z15 < %s -slp-threshold=-100"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(i32 %0, i64 %1, i32 %2, i32 %3, ptr %4) {\n;\n  %6 = trunc i64 %1 to i32\n  %7 = xor i32 %6, 1\n  %8 = xor i32 %6, 1\n  %9 = or i32 %7, %8\n  %10 = xor i32 %6, 1\n  %11 = or i32 %9, %10\n  %12 = xor i32 %6, 1\n  %13 = or i32 %11, %12\n  %14 = xor i32 %6, 1\n  %15 = or i32 %13, %14\n  %16 = xor i32 %6, 1\n  %17 = or i32 %15, %16\n  %18 = xor i32 %6, 1\n  %19 = or i32 %17, %18\n  %20 = xor i32 %6, 1\n  %21 = or i32 %19, %20\n  %22 = trunc i64 %1 to i32\n  %23 = xor i32 %22, 1\n  %24 = or i32 %23, %21\n  %25 = xor i32 %22, 1\n  %26 = or i32 %24, %25\n  %27 = xor i32 %22, 1\n  %28 = or i32 %26, %27\n  %29 = xor i32 %22, 1\n  %30 = or i32 %28, %29\n  %31 = xor i32 %22, 1\n  %32 = or i32 %30, %31\n  %33 = xor i32 %22, 1\n  %34 = or i32 %32, %33\n  %35 = xor i32 %22, 1\n  %36 = or i32 %34, %35\n  %37 = xor i32 %22, 1\n  %38 = or i32 %36, %37\n  %39 = trunc i64 %1 to i32\n  %40 = xor i32 %39, 1\n  %41 = or i32 %40, %38\n  %42 = xor i32 %39, 1\n  %43 = or i32 %41, %42\n  %44 = xor i32 %39, 1\n  %45 = or i32 %43, %44\n  %46 = xor i32 %39, 1\n  %47 = or i32 %45, %46\n  %48 = xor i32 %39, 1\n  %49 = or i32 %47, %48\n  %50 = xor i32 %39, 1\n  %51 = or i32 %49, %50\n  %52 = xor i32 %39, 1\n  %53 = or i32 %51, %52\n  %54 = xor i32 %39, 1\n  %55 = or i32 %53, %54\n  %56 = trunc i64 %1 to i32\n  %57 = xor i32 %56, 1\n  %58 = or i32 %57, %55\n  %59 = xor i32 %56, 1\n  %60 = or i32 %58, %59\n  %61 = xor i32 %56, 1\n  %62 = or i32 %60, %61\n  %63 = xor i32 %56, 1\n  %64 = or i32 %62, %63\n  %65 = xor i32 %56, 1\n  %66 = or i32 %64, %65\n  %67 = xor i32 %56, 1\n  %68 = or i32 %66, %67\n  %69 = xor i32 %56, 1\n  %70 = or i32 %68, %69\n  %71 = xor i32 %56, 1\n  %72 = or i32 %70, %71\n  %73 = trunc i64 %1 to i32\n  %74 = xor i32 %73, 1\n  %75 = or i32 %74, %72\n  %76 = xor i32 %73, 1\n  %77 = or i32 %75, %76\n  %78 = xor i32 %73, 1\n  %79 = or i32 %77, %78\n  %80 = xor i32 %73, 1\n  %81 = or i32 %79, %80\n  %82 = xor i32 %73, 1\n  %83 = or i32 %81, %82\n  %84 = xor i32 %73, 1\n  %85 = or i32 %83, %84\n  %86 = xor i32 %73, 1\n  %87 = or i32 %85, %86\n  %88 = xor i32 %0, %73\n  %89 = or i32 %87, %88\n  %90 = xor i32 %0, %2\n  %91 = or i32 %90, %89\n  %92 = xor i32 %0, %2\n  %93 = or i32 %91, %92\n  %94 = xor i32 %0, %2\n  %95 = or i32 %93, %94\n  %96 = xor i32 %0, %2\n  %97 = or i32 %95, %96\n  %98 = trunc i64 %1 to i32\n  %99 = xor i32 %98, 1\n  %100 = xor i32 %98, 1\n  %101 = or i32 %99, %100\n  %102 = xor i32 %98, 1\n  %103 = or i32 %101, %102\n  %104 = xor i32 %98, 1\n  %105 = or i32 %103, %104\n  %106 = xor i32 %98, 1\n  %107 = or i32 %105, %106\n  %108 = xor i32 %98, 1\n  %109 = or i32 %107, %108\n  %110 = xor i32 %98, 1\n  %111 = or i32 %109, %110\n  %112 = xor i32 %0, %98\n  %113 = or i32 %111, %112\n  %114 = xor i32 %0, %3\n  %115 = or i32 %113, %114\n  %116 = xor i32 %0, %3\n  %117 = or i32 %115, %116\n  %118 = xor i32 %0, %3\n  %119 = or i32 %117, %118\n  %120 = xor i32 %0, %3\n  %121 = or i32 %119, %120\n  %122 = xor i32 %0, %3\n  %123 = or i32 %121, %122\n  %124 = xor i32 %0, %3\n  %125 = or i32 %123, %124\n  %126 = xor i32 %0, %3\n  %127 = or i32 %125, %126\n  %128 = xor i32 %0, %3\n  %129 = or i32 %127, %128\n  %130 = or i32 %129, %97\n  store i32 %130, ptr %4, align 4\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP]  llvm::BitVector::set(unsigned int): Assertion `Idx < Size && \"access in bound\"' failed.",
    "body": "[crash41.tar.gz](https://github.com/user-attachments/files/18712696/crash41.tar.gz)\n\nclang -O3 -march=z15 crash41.i -o a.out -w -mllvm -inline-threshold=450\n\nllvm/include/llvm/ADT/BitVector.h:358: llvm::BitVector& llvm::BitVector::set(unsigned int): Assertion `Idx < Size && \"access in bound\"' failed.\n\n#11 0x000002aa03b45768 llvm::SLPVectorizerPass::vectorizeHorReduction\n\n@alexey-bataev \n",
    "author": "JonPsson1",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}