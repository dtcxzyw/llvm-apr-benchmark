{
  "bug_id": "77064",
  "issue_url": "https://github.com/llvm/llvm-project/issues/77064",
  "bug_type": "crash",
  "base_commit": "255f95a40377677dd762df5a1aa65bcbb4f75c79",
  "knowledge_cutoff": "2024-01-05T09:28:42Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a001e9718fd974859f2797a9f9ed7bf87d364e4f",
    "components": [
      "SimplifyLibCalls"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp": [
        [
          3735,
          3760
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp": [
        "LibCallSimplifier::optimizeCall"
      ]
    }
  },
  "patch": "commit a001e9718fd974859f2797a9f9ed7bf87d364e4f\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Fri Jan 5 10:41:44 2024 +0100\n\n    [SimplifyLibCalls] Don't try to manually reprocess calls\n    \n    The current code for reprocessing the result of fortified libcall\n    simplifications is not correct, because we might simplify to an\n    argument of the original call, and if that is again a libcall,\n    mistakenly think that this is actually the simplification result.\n    \n    Instead of trying to fix this, simply remove the code entirely,\n    because InstCombine nowadays correctly handles reprocessing of\n    SimplifyLibCall results.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/77064.\n\ndiff --git a/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp b/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\nindex 760a626c8b6f..a7cd68e860e4 100644\n--- a/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\n+++ b/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp\n@@ -3735,26 +3735,8 @@ Value *LibCallSimplifier::optimizeCall(CallInst *CI, IRBuilderBase &Builder) {\n \n   // Also try to simplify calls to fortified library functions.\n   if (Value *SimplifiedFortifiedCI =\n-          FortifiedSimplifier.optimizeCall(CI, Builder)) {\n-    // Try to further simplify the result.\n-    CallInst *SimplifiedCI = dyn_cast<CallInst>(SimplifiedFortifiedCI);\n-    if (SimplifiedCI && SimplifiedCI->getCalledFunction()) {\n-      // Ensure that SimplifiedCI's uses are complete, since some calls have\n-      // their uses analyzed.\n-      replaceAllUsesWith(CI, SimplifiedCI);\n-\n-      // Set insertion point to SimplifiedCI to guarantee we reach all uses\n-      // we might replace later on.\n-      IRBuilderBase::InsertPointGuard Guard(Builder);\n-      Builder.SetInsertPoint(SimplifiedCI);\n-      if (Value *V = optimizeStringMemoryLibCall(SimplifiedCI, Builder)) {\n-        // If we were able to further simplify, remove the now redundant call.\n-        substituteInParent(SimplifiedCI, V);\n-        return V;\n-      }\n-    }\n+          FortifiedSimplifier.optimizeCall(CI, Builder))\n     return SimplifiedFortifiedCI;\n-  }\n \n   // Then check for known library functions.\n   if (TLI->getLibFunc(*Callee, Func) && isLibFuncEmittable(M, TLI, Func)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/pr77064.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "main",
          "test_body": "define void @main(ptr %ptr) {\n  %opendir = call fastcc ptr @opendir(ptr %ptr)\n  %memset = call ptr @__memset_chk(ptr %opendir, i32 0, i64 596, i64 -1)\n  ret void\n}\n\ndeclare ptr @__memset_chk(ptr, i32, i64, i64)\n\ndeclare fastcc ptr @opendir(ptr)\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SimplifyLibCalls] Calling convention assertion fails",
    "body": "```llvm\r\n; RUN: opt -S -passes=instcombine\r\ndefine void @main(ptr %ptr) {\r\n  %opendir = call fastcc ptr @opendir(ptr %ptr)\r\n  %memset = call ptr @__memset_chk(ptr %opendir, i32 0, i64 596, i64 -1)\r\n  ret void\r\n}\r\n\r\ndeclare ptr @__memset_chk(ptr, i32, i64, i64)\r\n\r\ndeclare fastcc ptr @opendir(ptr)\r\n```\r\n\r\n> opt: /home/npopov/repos/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:3488: Value *llvm::LibCallSimplifier::optimizeStringMemoryLibCall(CallInst *, IRBuilderBase &): Assertion `(ignoreCallingConv(Func) || TargetLibraryInfoImpl::isCallingConvCCompatible(CI)) && \"Optimizing string/memory libcall would change the calling convention\"' failed.\r\n\r\nEncountered when building openjpeg2.",
    "author": "nikic",
    "labels": [
      "llvm:crash",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}