{
  "bug_id": "142286",
  "issue_url": "https://github.com/llvm/llvm-project/issues/142286",
  "bug_type": "miscompilation",
  "base_commit": "b9fa1dfd38ee75640402fdd0ca3640a51b95a8a3",
  "knowledge_cutoff": "2025-05-31T20:42:03Z",
  "lit_test_dir": [
    "llvm/test/Transforms/CorrelatedValuePropagation"
  ],
  "hints": {
    "fix_commit": "0f7cc4132b62e0ecdbd3193e954b745c5f492e90",
    "components": [
      "CorrelatedValuePropagation"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp": [
        [
          370,
          384
        ],
        [
          395,
          401
        ],
        [
          410,
          436
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp": [
        "processSwitch"
      ]
    }
  },
  "patch": "commit 0f7cc4132b62e0ecdbd3193e954b745c5f492e90\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Jun 2 17:42:02 2025 +0800\n\n    [CVP] Keep `ReachableCaseCount` in sync with range of condition (#142302)\n    \n    https://github.com/llvm/llvm-project/pull/79993 assumes that a reachable\n    case must be contained by `CR`. However, it doesn't hold for some edge\n    cases. This patch adds additional checks to ensure `ReachableCaseCount`\n    is correct.\n    \n    Note: Similar optimization in SCCP isn't affected by this bug because it\n    uses `CR` to compute `ReachableCaseCount`.\n    \n    Closes https://github.com/llvm/llvm-project/issues/142286.\n\ndiff --git a/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp b/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp\nindex 5226aeb66f65..b95a851c99b4 100644\n--- a/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp\n+++ b/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp\n@@ -370,15 +370,30 @@ static bool processSwitch(SwitchInst *I, LazyValueInfo *LVI,\n   { // Scope for SwitchInstProfUpdateWrapper. It must not live during\n     // ConstantFoldTerminator() as the underlying SwitchInst can be changed.\n     SwitchInstProfUpdateWrapper SI(*I);\n+    ConstantRange CR =\n+        LVI->getConstantRangeAtUse(I->getOperandUse(0), /*UndefAllowed=*/false);\n     unsigned ReachableCaseCount = 0;\n \n     for (auto CI = SI->case_begin(), CE = SI->case_end(); CI != CE;) {\n       ConstantInt *Case = CI->getCaseValue();\n-      auto *Res = dyn_cast_or_null<ConstantInt>(\n-          LVI->getPredicateAt(CmpInst::ICMP_EQ, Cond, Case, I,\n-                              /* UseBlockValue */ true));\n+      std::optional<bool> Predicate = std::nullopt;\n+      if (!CR.contains(Case->getValue()))\n+        Predicate = false;\n+      else if (CR.isSingleElement() &&\n+               *CR.getSingleElement() == Case->getValue())\n+        Predicate = true;\n+      if (!Predicate) {\n+        // Handle missing cases, e.g., the range has a hole.\n+        auto *Res = dyn_cast_or_null<ConstantInt>(\n+            LVI->getPredicateAt(CmpInst::ICMP_EQ, Cond, Case, I,\n+                                /* UseBlockValue=*/true));\n+        if (Res && Res->isZero())\n+          Predicate = false;\n+        else if (Res && Res->isOne())\n+          Predicate = true;\n+      }\n \n-      if (Res && Res->isZero()) {\n+      if (Predicate && !*Predicate) {\n         // This case never fires - remove it.\n         BasicBlock *Succ = CI->getCaseSuccessor();\n         Succ->removePredecessor(BB);\n@@ -395,7 +410,7 @@ static bool processSwitch(SwitchInst *I, LazyValueInfo *LVI,\n           DTU.applyUpdatesPermissive({{DominatorTree::Delete, BB, Succ}});\n         continue;\n       }\n-      if (Res && Res->isOne()) {\n+      if (Predicate && *Predicate) {\n         // This case always fires.  Arrange for the switch to be turned into an\n         // unconditional branch by replacing the switch condition with the case\n         // value.\n@@ -410,27 +425,24 @@ static bool processSwitch(SwitchInst *I, LazyValueInfo *LVI,\n       ++ReachableCaseCount;\n     }\n \n-    if (ReachableCaseCount > 1 && !SI->defaultDestUnreachable()) {\n+    // The default dest is unreachable if all cases are covered.\n+    if (!SI->defaultDestUnreachable() &&\n+        !CR.isSizeLargerThan(ReachableCaseCount)) {\n       BasicBlock *DefaultDest = SI->getDefaultDest();\n-      ConstantRange CR = LVI->getConstantRangeAtUse(I->getOperandUse(0),\n-                                                    /*UndefAllowed*/ false);\n-      // The default dest is unreachable if all cases are covered.\n-      if (!CR.isSizeLargerThan(ReachableCaseCount)) {\n-        BasicBlock *NewUnreachableBB =\n-            BasicBlock::Create(BB->getContext(), \"default.unreachable\",\n-                               BB->getParent(), DefaultDest);\n-        new UnreachableInst(BB->getContext(), NewUnreachableBB);\n+      BasicBlock *NewUnreachableBB =\n+          BasicBlock::Create(BB->getContext(), \"default.unreachable\",\n+                             BB->getParent(), DefaultDest);\n+      new UnreachableInst(BB->getContext(), NewUnreachableBB);\n \n-        DefaultDest->removePredecessor(BB);\n-        SI->setDefaultDest(NewUnreachableBB);\n+      DefaultDest->removePredecessor(BB);\n+      SI->setDefaultDest(NewUnreachableBB);\n \n-        if (SuccessorsCount[DefaultDest] == 1)\n-          DTU.applyUpdates({{DominatorTree::Delete, BB, DefaultDest}});\n-        DTU.applyUpdates({{DominatorTree::Insert, BB, NewUnreachableBB}});\n+      if (SuccessorsCount[DefaultDest] == 1)\n+        DTU.applyUpdates({{DominatorTree::Delete, BB, DefaultDest}});\n+      DTU.applyUpdates({{DominatorTree::Insert, BB, NewUnreachableBB}});\n \n-        ++NumDeadCases;\n-        Changed = true;\n-      }\n+      ++NumDeadCases;\n+      Changed = true;\n     }\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/CorrelatedValuePropagation/switch.ll",
      "commands": [
        "opt < %s -passes=correlated-propagation -S"
      ],
      "tests": [
        {
          "test_name": "pr142286",
          "test_body": "define void @pr142286() {\nstart:\n  br label %loop\n\nloop:                                             ; preds = %loop3, %start\n  %phi = phi i8 [ -1, %start ], [ 0, %loop3 ]\n  br label %loop2\n\nloop2:                                            ; preds = %loop3, %loop\n  br label %loop3\n\nloop3:                                            ; preds = %loop3, %loop2\n  switch i8 %phi, label %exit [\n    i8 0, label %loop3\n    i8 1, label %loop2\n    i8 2, label %loop\n  ]\n\nexit:                                             ; preds = %loop3\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "CorrelatedValuePropagation miscompilation",
    "body": "Like https://github.com/llvm/llvm-project/issues/139866 this is from a fuzzer that generates Rust MIR: https://github.com/cbeuw/rustlantis.\n\nThe Rust MIR reproducer is: https://godbolt.org/z/sb568G8r4\n\nWith this command line, the program runs:\n```\nrustc 9870897538617236803.rs -Copt-level=2 -Cllvm-args=-opt-bisect-limit=478\n```\nAny greater value of opt-bisect-limit runs CorrelatedValuePropagation on `main` and produces a program that just executes a `ud2`.",
    "author": "saethlin",
    "labels": [
      "miscompilation",
      "release:cherry-pick-failed",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "https://llvm.godbolt.org/z/s1sYaWbc3\n```llvm\n; RUN: opt -S -passes=correlated-propagation < %s\ndefine void @test() {\nstart:\n  br label %loop\n\nloop:\n  %phi = phi i8 [ -69, %start ], [ 0, %loop3 ]\n  br label %loop2\n\nloop2:\n  br label %loop3\n\nloop3:\n  switch i8 %phi, label %exit [\n    i8 0, label %loop3\n    i8 1, label %loop2\n    i8 2, label %loop\n  ]\n\nexit:\n  call void @foo()\n  ret void\n}\n\ndeclare void @foo()\n```"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}