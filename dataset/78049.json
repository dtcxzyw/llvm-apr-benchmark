{
  "bug_id": "78049",
  "issue_url": "https://github.com/llvm/llvm-project/issues/78049",
  "bug_type": "crash",
  "base_commit": "de8f782355842a5d3ad44ad8861c53e3ef6fa73a",
  "knowledge_cutoff": "2024-01-13T16:38:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/MoveAutoInit"
  ],
  "hints": {
    "fix_commit": "26d3cd1d07ae3fc8312feb2ab3a3a86414f28c70",
    "components": [
      "MoveAutoInit"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/MoveAutoInit.cpp": [
        [
          164,
          169
        ],
        [
          178,
          186
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/MoveAutoInit.cpp": [
        "runMoveAutoInit"
      ]
    }
  },
  "patch": "commit 26d3cd1d07ae3fc8312feb2ab3a3a86414f28c70\nAuthor: XChy <xxs_chy@outlook.com>\nDate:   Tue Jan 16 18:45:44 2024 +0800\n\n    [MoveAutoInit] Ignore unreachable basicblocks and handle catchswitch (#78232)\n    \n    Fixes #78049\n    This patch has done:\n    - Ignore unreachable predecessors when looking for nearest common\n    dominator.\n    - Check catchswitch with `getFirstNonPHI`, instead of\n    `getFirstInsertionPt`. The latter skips EHPad.\n\ndiff --git a/llvm/lib/Transforms/Utils/MoveAutoInit.cpp b/llvm/lib/Transforms/Utils/MoveAutoInit.cpp\nindex a977ad87b79f..9a5dba219cee 100644\n--- a/llvm/lib/Transforms/Utils/MoveAutoInit.cpp\n+++ b/llvm/lib/Transforms/Utils/MoveAutoInit.cpp\n@@ -164,6 +164,9 @@ static bool runMoveAutoInit(Function &F, DominatorTree &DT, MemorySSA &MSSA) {\n         if (TransitiveSuccessors.count(Pred))\n           continue;\n \n+        if (!DT.isReachableFromEntry(Pred))\n+          continue;\n+\n         DominatingPredecessor =\n             DominatingPredecessor\n                 ? DT.findNearestCommonDominator(DominatingPredecessor, Pred)\n@@ -178,9 +181,10 @@ static bool runMoveAutoInit(Function &F, DominatorTree &DT, MemorySSA &MSSA) {\n \n     // CatchSwitchInst blocks can only have one instruction, so they are not\n     // good candidates for insertion.\n-    while (isa<CatchSwitchInst>(UsersDominator->getFirstInsertionPt())) {\n+    while (isa<CatchSwitchInst>(UsersDominator->getFirstNonPHI())) {\n       for (BasicBlock *Pred : predecessors(UsersDominator))\n-        UsersDominator = DT.findNearestCommonDominator(UsersDominator, Pred);\n+        if (DT.isReachableFromEntry(Pred))\n+          UsersDominator = DT.findNearestCommonDominator(UsersDominator, Pred);\n     }\n \n     // We finally found a place where I can be moved while not introducing extra\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/MoveAutoInit/catchswitch.ll",
      "commands": [
        "opt < %s -S -passes='move-auto-init' -verify-memoryssa"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "declare void @dummy()\n\ndeclare void @dummy1()\n\ndefine void @test() personality ptr @dummy {\nentry:\n  %p = alloca [2 x i16], i32 0, align 2\n  store i32 0, ptr %p, align 2, !annotation !0\n  br label %middle\n\nmiddle:                                           ; preds = %entry\n  %call = invoke ptr @dummy()\n          to label %clean unwind label %catchbb\n\nclean:                                            ; preds = %middle\n  ret void\n\ncatchbb:                                          ; preds = %middle\n  %cs = catchswitch within none [label %pad, label %pad1] unwind to caller\n\npad:                                              ; preds = %catchbb\n  %c = catchpad within %cs [i32 0]\n  call void @dummy1()\n  ret void\n\npad1:                                             ; preds = %catchbb\n  %c1 = catchpad within %cs [i32 0]\n  call void @dummy1()\n  ret void\n}\n\n!0 = !{!\"auto-init\"}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/MoveAutoInit/loop.ll",
      "commands": [
        "opt < %s -S -passes='move-auto-init' -verify-memoryssa"
      ],
      "tests": [
        {
          "test_name": "foo",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n\ndefine void @foo(i32 %x) {\nentry:\n  %buffer = alloca [80 x i32], align 16\n  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 -86, i64 320, i1 false), !annotation !0\n  br label %do.body\n\ndo.body:                                          ; preds = %do.cond, %entry\n  %x.addr.0 = phi i32 [ %x, %entry ], [ %dec, %do.cond ]\n  %arrayidx = getelementptr inbounds [80 x i32], ptr %buffer, i64 0, i64 0\n  call void @dump(ptr %arrayidx)\n  br label %do.cond\n\ndo.cond:                                          ; preds = %do.body\n  %dec = add nsw i32 %x.addr.0, -1\n  %tobool = icmp ne i32 %x.addr.0, 0\n  br i1 %tobool, label %do.body, label %do.end\n\ndo.end:                                           ; preds = %do.cond\n  ret void\n}\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)\ndeclare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0\n\ndeclare void @dump(ptr)\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }\n\n!0 = !{!\"auto-init\"}\n"
        },
        {
          "test_name": "bar",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)\ndeclare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #0\n\ndeclare void @dump(ptr)\n\ndefine void @bar(i32 %x, i32 %y) {\nentry:\n  %buffer = alloca [80 x i32], align 16\n  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 -86, i64 320, i1 false), !annotation !0\n  %tobool = icmp ne i32 %y, 0\n  br i1 %tobool, label %if.then, label %if.end\n\nif.then:                                          ; preds = %entry\n  %add = add nsw i32 %x, %y\n  br label %do.body\n\ndo.body:                                          ; preds = %do.cond, %if.then\n  %x.addr.0 = phi i32 [ %add, %if.then ], [ %dec, %do.cond ]\n  %arrayidx = getelementptr inbounds [80 x i32], ptr %buffer, i64 0, i64 0\n  call void @dump(ptr %arrayidx)\n  br label %do.cond\n\ndo.cond:                                          ; preds = %do.body\n  %dec = add nsw i32 %x.addr.0, -1\n  %tobool1 = icmp ne i32 %x.addr.0, 0\n  br i1 %tobool1, label %do.body, label %do.end\n\ndo.end:                                           ; preds = %do.cond\n  br label %if.end\n\nif.end:                                           ; preds = %do.end, %entry\n  ret void\n}\n\nattributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }\n\n!0 = !{!\"auto-init\"}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[MoveAutoInit] Assertion `NodeB && \"B must be in the tree\"' failed.",
    "body": "opt -O3 -sroa-skip-mem2reg -enable-dfa-jump-thread tc_dt.ll\r\n[tc_dt.tar.gz](https://github.com/llvm/llvm-project/files/13928836/tc_dt.tar.gz)\r\n\r\nGenericDomTree.h:501: NodeT* llvm::DominatorTreeBase<NodeT, IsPostDom>::findNearestCommonDominator(NodeT*, NodeT*) const [with NodeT = llvm::BasicBlock; \r\nbool IsPostDom = false]: Assertion `NodeB && \"B must be in the tree\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\n\r\nReduced test case attached, but have not looked into it. Adding people high in the log...\r\n",
    "author": "JonPsson1",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "bjope",
        "body": "Reduced the test case and pipeline a bit more:\r\n\r\nopt -S -o - -passes='dfa-jump-threading,move-auto-init' reduced.ll \r\n\r\nWith reduced.ll being\r\n```\r\ndefine void @func_1() {\r\nentry:\r\n  %l_2586 = alloca [2 x i16], i32 0, align 2\r\n  store i32 0, ptr %l_2586, align 2, !annotation !0\r\n  br label %lbl_2844.preheader\r\n\r\nlbl_2844.preheader:                               ; preds = %entry\r\n  br label %lbl_2844\r\n\r\nlbl_2844:                                         ; preds = %cleanup1473, %lbl_2844.preheader\r\n  call void null()\r\n  br label %cleanup1473\r\n\r\nfor.end516:                                       ; No predecessors!\r\n  br label %cleanup1473\r\n\r\ncleanup1473:                                      ; preds = %for.end516, %lbl_2844\r\n  %cleanup.dest.slot.0 = phi i32 [ 0, %for.end516 ], [ 17, %lbl_2844 ]\r\n  switch i32 %cleanup.dest.slot.0, label %cleanup1829 [\r\n    i32 0, label %if.end1787\r\n    i32 17, label %lbl_2844\r\n  ]\r\n\r\nif.end1787:                                       ; preds = %cleanup1473\r\n  %cmp1789.not = icmp ult ptr null, %l_2586\r\n  unreachable\r\n\r\ncleanup1829:                                      ; preds = %cleanup1473\r\n  ret void\r\n}\r\n\r\n!0 = !{!\"auto-init\"}\r\n\r\n```"
      },
      {
        "author": "XChy",
        "body": "It seems that DFAJumpThreading broke the dominator tree analysis."
      },
      {
        "author": "XChy",
        "body": "> It seems that DFAJumpThreading broke the dominator tree analysis.\r\n\r\nIn fact, *MoveAutoInit* should be to blame. This pass doesn't handle unreachable predecessors correctly. A reduced version without `DFAJumpThreading`: \r\n```llvm\r\ndeclare void @dummy()\r\n\r\ndefine void @func_1() {\r\nentry:\r\n  %p = alloca [2 x i16], i32 0, align 2\r\n  store i32 0, ptr %p, align 2, !annotation !0\r\n  br i1 true, label %loop, label %usebb\r\n\r\nloop:\r\n  call void @dummy()\r\n  br label %loop\r\n\r\na:\r\n  br label %loop\r\n\r\nb:\r\n  br label %loop\r\n\r\nusebb:\r\n  %use_p = icmp ult ptr null, %p\r\n  ret void\r\n}\r\n\r\n!0 = !{!\"auto-init\"}\r\n```\r\n\r\nAnd after looking into the source, I found that this pass doesn't handle `catchswitch` well too. For example:\r\n```llvm\r\ndeclare void @dummy()\r\n\r\ndeclare void @dummy1()\r\n\r\ndefine void @func_1() personality ptr @dummy {\r\nentry:\r\n  %p = alloca [2 x i16], i32 0, align 2\r\n  store i32 0, ptr %p, align 2, !annotation !0\r\n  %call = invoke ptr @dummy() to label %clean unwind label %catchbb\r\n\r\nunreachable:\r\n  %call1 = invoke ptr @dummy() to label %clean unwind label %catchbb\r\n\r\nclean:\r\n  ret void\r\n\r\ncatchbb:\r\n  %cs = catchswitch within none [label %pad, label %pad1] unwind to caller\r\n\r\npad:\r\n  %c = catchpad within %cs [ptr null, i32 0, ptr null]\r\n  call void @dummy1()\r\n  ret void\r\n\r\npad1:\r\n  %c1 = catchpad within %cs [ptr null, i32 0, ptr null]\r\n  call void @dummy1()\r\n  ret void\r\n}\r\n\r\n!0 = !{!\"auto-init\"}\r\n```\r\n"
      }
    ]
  },
  "verified": true
}