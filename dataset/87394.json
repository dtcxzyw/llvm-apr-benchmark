{
  "bug_id": "87394",
  "issue_url": "https://github.com/llvm/llvm-project/issues/87394",
  "bug_type": "crash",
  "base_commit": "d5022d9ad4aec250f77d21c819a9810a97b8b6a8",
  "knowledge_cutoff": "2024-04-02T18:48:53Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "adb0126ef11b0083d5a78be1534ccefa53def1cf",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp": [
        [
          35,
          40
        ],
        [
          44,
          49
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp": [
        "VPTypeAnalysis::inferScalarTypeForRecipe"
      ]
    }
  },
  "patch": "commit adb0126ef11b0083d5a78be1534ccefa53def1cf\nAuthor: Patrick O'Neill <patrick@rivosinc.com>\nDate:   Tue Apr 23 07:48:43 2024 -0700\n\n    [VPlan] Add scalar inferencing support for Not and Or insns (#89160)\n    \n    Fixes #87394.\n    \n    PR: https://github.com/llvm/llvm-project/pull/89160\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp b/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp\nindex ad4ea648cd61..5f93339083f0 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp\n@@ -35,6 +35,7 @@ Type *VPTypeAnalysis::inferScalarTypeForRecipe(const VPInstruction *R) {\n     CachedTypes[OtherV] = ResTy;\n     return ResTy;\n   }\n+  case Instruction::Or:\n   case Instruction::ICmp:\n   case VPInstruction::FirstOrderRecurrenceSplice: {\n     Type *ResTy = inferScalarType(R->getOperand(0));\n@@ -44,6 +45,12 @@ Type *VPTypeAnalysis::inferScalarTypeForRecipe(const VPInstruction *R) {\n     CachedTypes[OtherV] = ResTy;\n     return ResTy;\n   }\n+  case VPInstruction::Not: {\n+    Type *ResTy = inferScalarType(R->getOperand(0));\n+    assert(IntegerType::get(Ctx, 1) == ResTy &&\n+           \"unexpected scalar type inferred for operand\");\n+    return ResTy;\n+  }\n   case VPInstruction::PtrAdd:\n     // Return the type based on the pointer argument (i.e. first operand).\n     return inferScalarType(R->getOperand(0));\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/vplan-infer-not-or-type.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -S"
      ],
      "tests": [
        {
          "test_name": "foo",
          "test_body": "define void @foo(i8 %arg.0, i8 %arg.1) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %latch, %entry\n  %incrementor = phi i8 [ %add, %latch ], [ 0, %entry ]\n  %and = and i8 %arg.0, %arg.1\n  %extract.t = trunc i8 %and to i1\n  br i1 %extract.t, label %latch, label %indirect.latch\n\nindirect.latch:                                   ; preds = %loop.header\n  br label %latch\n\nlatch:                                            ; preds = %indirect.latch, %loop.header\n  %add = add i8 %incrementor, 1\n  %conv = zext i8 %incrementor to i32\n  %cmp = icmp ult i32 %conv, 1\n  br i1 %cmp, label %loop.header, label %loop.exit\n\nloop.exit:                                        ; preds = %latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize][VPlan] Unreachable executed \"Unhandled opcode!\"",
    "body": "Reduced LLVM IR:\r\n```llvm ir\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\ndefine i32 @main() #0 {\r\nentry:\r\n  br label %for.body\r\n\r\nfor.cond.cleanup.loopexit:                        ; preds = %cond.end\r\n  ret i32 0\r\n\r\nfor.body:                                         ; preds = %cond.end, %entry\r\n  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %cond.end ]\r\n  %conv3 = zext i1 false to i64\r\n  %conv4 = trunc i64 %conv3 to i16\r\n  br i1 false, label %cond.false, label %cond.end\r\n\r\ncond.false:                                       ; preds = %for.body\r\n  br label %cond.end\r\n\r\ncond.end:                                         ; preds = %cond.false, %for.body\r\n  %indvars.iv.next = add i64 %indvars.iv, 1\r\n  %cmp = icmp ult i64 %indvars.iv, 1\r\n  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit\r\n}\r\n\r\nattributes #0 = { \"target-features\"=\"+64bit,+v\" }\r\n```\r\n\r\nBacktrace:\r\n```\r\nUnhandled opcode!\r\nUNREACHABLE executed at /scratch/tc-testing/tc-apr-2/llvm/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp:58!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt --passes=loop-vectorize reduced.ll\r\n #0 0x00005f05c836eb60 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2d84b60)\r\n #1 0x00005f05c836bf6f llvm::sys::RunSignalHandlers() (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2d81f6f)\r\n #2 0x00005f05c836c0c5 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x000071a702442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x000071a7024969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x000071a7024969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x000071a7024969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x000071a702442476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x000071a7024287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00005f05c82a2afe (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2cb8afe)\r\n#10 0x00005f05c74dfe67 llvm::VPTypeAnalysis::inferScalarTypeForRecipe(llvm::VPInstruction const*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1ef5e67)\r\n#11 0x00005f05c74dc88c llvm::VPTypeAnalysis::inferScalarType(llvm::VPValue const*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1ef288c)\r\n#12 0x00005f05c750790e simplifyRecipes(llvm::VPlan&, llvm::LLVMContext&) VPlanTransforms.cpp:0:0\r\n#13 0x00005f05c750e606 llvm::VPlanTransforms::optimize(llvm::VPlan&, llvm::ScalarEvolution&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1f24606)\r\n#14 0x00005f05c73ded66 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1df4d66)\r\n#15 0x00005f05c73e5319 llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1dfb319)\r\n#16 0x00005f05c73e88a9 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1dfe8a9)\r\n#17 0x00005f05c73eb73e llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1e0173e)\r\n#18 0x00005f05c73ec88d llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x1e0288d)\r\n#19 0x00005f05c62f3276 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd09276)\r\n#20 0x00005f05c8195141 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2bab141)\r\n#21 0x00005f05c62eabd6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd00bd6)\r\n#22 0x00005f05c8193e3b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2ba9e3b)\r\n#23 0x00005f05c62f2dc6 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0xd08dc6)\r\n#24 0x00005f05c8191cb1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x2ba7cb1)\r\n#25 0x00005f05c5b6cce5 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x582ce5)\r\n#26 0x00005f05c5b5f316 optMain (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x575316)\r\n#27 0x000071a702429d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#28 0x000071a702429e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#29 0x000071a702429e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#30 0x00005f05c5b54f95 _start (/scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt+0x56af95)\r\nzsh: IOT instruction (core dumped)  /scratch/tc-testing/tc-apr-2/build-rv64gcv/build-llvm-linux/bin/opt\r\n```\r\nGodbolt: https://godbolt.org/z/bvY138WfG\r\n\r\nTriggered assertion: https://github.com/llvm/llvm-project/blob/f5991161529511ca6ebc058da2a0507c2fc5283e/llvm/lib/Transforms/Vectorize/VPlanAnalysis.cpp#L58\r\n\r\nFound via fuzzer",
    "author": "patrick-rivos",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "N/A"
}