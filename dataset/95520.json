{
  "bug_id": "95520",
  "issue_url": "https://github.com/llvm/llvm-project/issues/95520",
  "bug_type": "crash",
  "base_commit": "e7acb3792b8ba971bda2c9564ed26c2a60a2ddbc",
  "knowledge_cutoff": "2024-06-14T09:26:34Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "40a72f8cc414726a8be234a260650fd62354da21",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        [
          231,
          236
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          577,
          583
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        "VPTransformState::get"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPInstruction::generatePerPart"
      ]
    }
  },
  "patch": "commit 40a72f8cc414726a8be234a260650fd62354da21\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Fri Jun 14 22:16:51 2024 +0100\n\n    [VPlan] Support extracting any lane of uniform value.\n    \n    If the value we are extracting a lane from is uniform, only the first\n    lane will be set. Return lane 0 for any requested lane.\n    \n    This fixes a crash when trying to extract the last lane for a\n    first-order recurrence resume value.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/95520.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.cpp b/llvm/lib/Transforms/Vectorize/VPlan.cpp\nindex f17be451e684..348a2be5072b 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.cpp\n@@ -231,6 +231,11 @@ Value *VPTransformState::get(VPValue *Def, const VPIteration &Instance) {\n     return Data\n         .PerPartScalars[Def][Instance.Part][Instance.Lane.mapToCacheIndex(VF)];\n   }\n+  if (!Instance.Lane.isFirstLane() &&\n+      vputils::isUniformAfterVectorization(Def) &&\n+      hasScalarValue(Def, {Instance.Part, VPLane::getFirstLane()})) {\n+    return Data.PerPartScalars[Def][Instance.Part][0];\n+  }\n \n   assert(hasVectorValue(Def, Instance.Part));\n   auto *VecPart = Data.PerPartOutput[Def][Instance.Part];\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 7a482455473e..a3ff6395bb39 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -577,7 +577,8 @@ Value *VPInstruction::generatePerPart(VPTransformState &State, unsigned Part) {\n       // When loop is unrolled without vectorizing, retrieve UF - Offset.\n       Res = State.get(getOperand(0), State.UF - Offset);\n     }\n-    Res->setName(Name);\n+    if (isa<ExtractElementInst>(Res))\n+      Res->setName(Name);\n     return Res;\n   }\n   case VPInstruction::LogicalAnd: {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/reduction-recurrence-costs-sve.ll",
      "commands": [
        "opt -p loop-vectorize -S %s",
        "opt -p loop-vectorize -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue -S %s"
      ],
      "tests": [
        {
          "test_name": "chained_recurrences",
          "test_body": "target datalayout = \"e-m:o-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"arm64-apple-macosx14.0.0\"\n\ndefine i32 @chained_recurrences(i32 %x, i64 %y, ptr %src.1, i32 %z, ptr %src.2) #0 {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %0 = phi i32 [ 0, %entry ], [ %3, %loop ]\n  %1 = phi i32 [ 0, %entry ], [ %0, %loop ]\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %sum.red = phi i32 [ 0, %entry ], [ %red.2, %loop ]\n  %2 = add i64 %y, 1\n  %gep.1 = getelementptr i32, ptr %src.1, i64 %2\n  %3 = load i32, ptr %gep.1, align 4\n  %or3 = or i32 %1, %x\n  %iv.next = add i64 %iv, 1\n  %shr = lshr i32 %x, 1\n  %4 = shl i32 %or3, 1\n  %5 = or i32 %4, 2\n  %shl19 = shl i32 %x, 1\n  %6 = or i32 %shr, %shl19\n  %7 = or i32 %6, %5\n  %8 = or i32 %7, %x\n  %or20 = or i32 %z, %x\n  %not = and i32 %or20, 1\n  %and = xor i32 %not, 1\n  %idx.ext.1 = zext i32 %and to i64\n  %gep.2 = getelementptr i32, ptr %src.2, i64 %idx.ext.1\n  %9 = load i32, ptr %gep.2, align 4\n  %shr24 = lshr i32 %8, 1\n  %idx.ext.2 = zext i32 %shr24 to i64\n  %gep.3 = getelementptr i32, ptr %src.2, i64 %idx.ext.2\n  %10 = load i32, ptr %gep.3, align 4\n  %red.1 = or i32 %9, %sum.red\n  %red.2 = or i32 %red.1, %10\n  %ec = icmp eq i64 %iv, %y\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret i32 %red.2\n}\n\nattributes #0 = { \"target-features\"=\"+sve\" }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence-chains.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_resinking_required",
          "test_body": "define double @test_resinking_required(ptr %p, ptr noalias %a, ptr noalias %b) {\nEntry:\n  br label %Loop\n\nLoop:                                             ; preds = %Loop, %Entry\n  %for.1 = phi double [ %l1, %Loop ], [ 0.000000e+00, %Entry ]\n  %for.2 = phi double [ %l2, %Loop ], [ 0.000000e+00, %Entry ]\n  %for.3 = phi double [ %for.2, %Loop ], [ 0.000000e+00, %Entry ]\n  %iv = phi i64 [ %iv.next, %Loop ], [ 0, %Entry ]\n  %USE_2_FORS = fdiv double %for.3, %for.1\n  %div = fdiv double 0.000000e+00, %for.1\n  %l1 = load double, ptr %a, align 8\n  %iv.next = add nuw nsw i64 %iv, 1\n  %l2 = load double, ptr %b, align 8\n  store double %div, ptr %p, align 8\n  %cond = icmp eq i64 %iv.next, 0\n  br i1 %cond, label %End, label %Loop\n\nEnd:                                              ; preds = %Loop\n  %res.1 = fadd double %for.1, %for.2\n  %res.2 = fadd double %res.1, %for.3\n  ret double %res.2\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence-complex.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s"
      ],
      "tests": [
        {
          "test_name": "instruction_with_2_FOR_operands_and_multiple_other_uses_chain",
          "test_body": "define void @instruction_with_2_FOR_operands_and_multiple_other_uses_chain(ptr noalias %dst.1, ptr noalias %dst.2, ptr noalias %dst.3, ptr noalias %for.ptr.1, ptr noalias %for.ptr.2) {\nbb:\n  br label %loop\n\nloop:                                             ; preds = %loop, %bb\n  %for.1 = phi float [ 0.000000e+00, %bb ], [ %for.1.next, %loop ]\n  %for.2 = phi float [ 0.000000e+00, %bb ], [ %for.2.next, %loop ]\n  %iv = phi i64 [ 0, %bb ], [ %iv.next, %loop ]\n  %for.1.use.1 = fmul fast float %for.1, 2.000000e+00\n  %for.1.use.c = fmul fast float %for.1.use.1, 2.000000e+00\n  %used.by.both = fmul fast float %for.1.use.c, %for.2\n  %for.2.next = load float, ptr %for.ptr.2, align 4\n  %for.1.use.3 = fadd fast float %for.1, 1.000000e+00\n  %iv.next = add nuw nsw i64 %iv, 1\n  %for.1.next = load float, ptr %for.ptr.1, align 4\n  %gep.dst.1 = getelementptr inbounds float, ptr %dst.1, i64 %iv\n  store float %used.by.both, ptr %gep.dst.1, align 4\n  %gep.dst.2 = getelementptr inbounds float, ptr %dst.2, i64 %iv\n  store float %for.1.use.1, ptr %gep.dst.2, align 4\n  %gep.dst.3 = getelementptr inbounds float, ptr %dst.3, i64 %iv\n  store float %for.1.use.3, ptr %gep.dst.3, align 4\n  %ec = icmp slt i64 %iv, 1000\n  br i1 %ec, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "instruction_with_2_FOR_operands_and_multiple_other_uses",
          "test_body": "define void @instruction_with_2_FOR_operands_and_multiple_other_uses(ptr noalias %dst.1, ptr noalias %dst.2, ptr noalias %dst.3, ptr noalias %for.ptr.1, ptr noalias %for.ptr.2) {\nbb:\n  br label %loop\n\nloop:                                             ; preds = %loop, %bb\n  %for.1 = phi float [ 0.000000e+00, %bb ], [ %for.1.next, %loop ]\n  %for.2 = phi float [ 0.000000e+00, %bb ], [ %for.2.next, %loop ]\n  %iv = phi i64 [ 0, %bb ], [ %iv.next, %loop ]\n  %for.1.use.1 = fmul fast float %for.1, 2.000000e+00\n  %used.by.both = fmul fast float %for.1, %for.2\n  %for.2.next = load float, ptr %for.ptr.2, align 4\n  %for.1.use.3 = fadd fast float %for.1, 1.000000e+00\n  %iv.next = add nuw nsw i64 %iv, 1\n  %for.1.next = load float, ptr %for.ptr.1, align 4\n  %gep.dst.1 = getelementptr inbounds float, ptr %dst.1, i64 %iv\n  store float %used.by.both, ptr %gep.dst.1, align 4\n  %gep.dst.2 = getelementptr inbounds float, ptr %dst.2, i64 %iv\n  store float %for.1.use.1, ptr %gep.dst.2, align 4\n  %gep.dst.3 = getelementptr inbounds float, ptr %dst.3, i64 %iv\n  store float %for.1.use.3, ptr %gep.dst.3, align 4\n  %ec = icmp slt i64 %iv, 1000\n  br i1 %ec, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "instruction_with_2_FOR_operands",
          "test_body": "define void @instruction_with_2_FOR_operands(ptr noalias %A, ptr noalias %B, ptr noalias %C) {\nbb:\n  br label %bb13\n\nbb13:                                             ; preds = %bb13, %bb\n  %tmp37 = phi float [ %tmp60, %bb13 ], [ 0.000000e+00, %bb ]\n  %tmp27 = phi float [ %tmp49, %bb13 ], [ 1.000000e+00, %bb ]\n  %iv = phi i64 [ %iv.next, %bb13 ], [ 0, %bb ]\n  %tmp38 = fmul fast float %tmp37, %tmp27\n  %iv.next = add nuw nsw i64 %iv, 1\n  %gep = getelementptr inbounds float, ptr %C, i64 %iv\n  %tmp49 = load float, ptr %A, align 4\n  %tmp60 = load float, ptr %B, align 4\n  store float %tmp38, ptr %gep, align 4\n  %tmp12 = icmp slt i64 %iv, 1000\n  br i1 %tmp12, label %bb13, label %bb74\n\nbb74:                                             ; preds = %bb13\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence-multiply-recurrences.ll",
      "commands": [],
      "tests": [
        {
          "test_name": "test_pr54233_for_depend_on_each_other",
          "test_body": "define void @test_pr54233_for_depend_on_each_other(ptr noalias %a, ptr noalias %b) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %for.1 = phi i32 [ 0, %entry ], [ %for.1.next, %loop ]\n  %for.2 = phi i32 [ 0, %entry ], [ %for.2.next, %loop ]\n  %or = or i32 %for.2, 10\n  %shl = shl i32 %for.2, %for.1\n  %xor = xor i32 %shl, 255\n  %and = and i32 %xor, %or\n  %for.1.next = xor i32 12, %for.2\n  %for.2.next = load i32, ptr %b, align 4\n  %a.gep = getelementptr inbounds i32, ptr %a, i64 %iv\n  store i32 %and, ptr %a.gep, align 4\n  %iv.next = add nuw i64 %iv, 1\n  %exitcond = icmp eq i64 %iv, 1000\n  br i1 %exitcond, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n"
        },
        {
          "test_name": "test_pr54223_sink_after_insertion_order",
          "test_body": "define void @test_pr54223_sink_after_insertion_order(ptr noalias %a, ptr noalias %b, ptr noalias %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]\n  %for.1 = phi float [ 0.000000e+00, %entry ], [ %for.1.next, %loop ]\n  %for.2 = phi float [ 0.000000e+00, %entry ], [ %for.2.next, %loop ]\n  %neg = fneg float %for.2\n  %muladd = call float @llvm.fmuladd.f32(float %for.1, float %neg, float 0.000000e+00)\n  %dst.gep = getelementptr inbounds float, ptr %dst, i64 %iv\n  %iv.next = add nuw nsw i64 %iv, 1\n  %for.1.next = load float, ptr %a, align 4\n  %for.2.next = load float, ptr %b, align 4\n  store float %muladd, ptr %dst.gep, align 4\n  %exitcond.not = icmp eq i64 %iv.next, 10000\n  br i1 %exitcond.not, label %exit, label %loop\n\nexit:                                             ; preds = %loop\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.fmuladd.f32(float, float, float) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/first-order-recurrence.ll",
      "commands": [
        "opt < %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -force-widen-divrem-via-safe-divisor=0 -S",
        "opt < %s -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=2 -force-widen-divrem-via-safe-divisor=0 -S",
        "opt < %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -force-widen-divrem-via-safe-divisor=0 -S"
      ],
      "tests": [
        {
          "test_name": "recurence_uniform_load",
          "test_body": "target datalayout = \"e-m:e-i64:64-i128:128-n32:64-S128\"\n\ndefine i32 @recurence_uniform_load(ptr %src, ptr noalias %dst) {\nentry:\n  br label %loop\n\nloop:                                             ; preds = %loop, %entry\n  %phi = phi i64 [ 0, %entry ], [ %add, %loop ]\n  %recur = phi i32 [ 0, %entry ], [ %load, %loop ]\n  %add = add i64 %phi, 1\n  %load = load i32, ptr %src, align 4\n  %icmp = icmp ult i64 %phi, 1\n  br i1 %icmp, label %loop, label %exit\n\nexit:                                             ; preds = %loop\n  ret i32 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Assertion `hasVectorValue(Def, Instance.Part)' failed.",
    "body": "To reproduce run the following test opt with -passes loop-vectorize:\r\n```\r\n; ModuleID = './reduced.ll'\r\nsource_filename = \"./reduced.ll\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\ndefine i32 @wombat() gc \"statepoint-example\" {\r\nbb:\r\n  br label %bb2\r\n\r\nbb1:                                              ; preds = %bb2\r\n  ret i32 0\r\n\r\nbb2:                                              ; preds = %bb2, %bb\r\n  %phi = phi i64 [ 0, %bb ], [ %add, %bb2 ]\r\n  %phi3 = phi i32 [ 0, %bb ], [ %load, %bb2 ]\r\n  %add = add i64 %phi, 1\r\n  %load = load i32, ptr addrspace(1) null, align 4\r\n  %icmp = icmp ult i64 %phi, 1\r\n  br i1 %icmp, label %bb2, label %bb1\r\n}\r\n```\r\nReproducer: https://godbolt.org/z/cv7Tf3vba\r\n\r\nStack dump:\r\n```\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes loop-vectorize <source>\r\n #0 0x0000000004e41688 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4e41688)\r\n #1 0x0000000004e3eddc SignalHandler(int) Signals.cpp:0:0\r\n #2 0x00007ec2abe42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x00007ec2abe969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x00007ec2abe42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x00007ec2abe287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00007ec2abe2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\r\n #7 0x00007ec2abe39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n #8 0x0000000003fecdce (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3fecdce)\r\n #9 0x0000000004008abe llvm::VPInstruction::generatePerPart(llvm::VPTransformState&, unsigned int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4008abe)\r\n#10 0x000000000400ae5e llvm::VPInstruction::execute(llvm::VPTransformState&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x400ae5e)\r\n#11 0x0000000003fe5fbf llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3fe5fbf)\r\n#12 0x0000000003fe9cb0 llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3fe9cb0)\r\n#13 0x0000000003feda3e llvm::VPlan::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3feda3e)\r\n#14 0x0000000003eda4e5 llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>> const*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3eda4e5)\r\n#15 0x0000000003eef18b llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3eef18b)\r\n#16 0x0000000003ef1a4d llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo*, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AssumptionCache&, llvm::LoopAccessInfoManager&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3ef1a4d)\r\n#17 0x0000000003ef2c5b llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x3ef2c5b)\r\n#18 0x0000000002e0679e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2e0679e)\r\n#19 0x0000000004c49a6c llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c49a6c)\r\n#20 0x0000000000dbabee llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdbabee)\r\n#21 0x0000000004c483ae llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c483ae)\r\n#22 0x0000000000dbc65e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xdbc65e)\r\n#23 0x0000000004c462bc llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4c462bc)\r\n#24 0x00000000008db912 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8db912)\r\n#25 0x00000000008ceabc optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8ceabc)\r\n#26 0x00007ec2abe29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#27 0x00007ec2abe29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#28 0x00000000008c5f0e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8c5f0e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```\r\n\r\n",
    "author": "TatyanaDoubts",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "cc @fhahn "
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": false,
    "is_single_func_fix": false
  },
  "bisect": "a43d999d1476c8ab549fb9039dccb03217ee1053"
}