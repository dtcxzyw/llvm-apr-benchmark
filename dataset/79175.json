{
  "bug_id": "79175",
  "issue_url": "https://github.com/llvm/llvm-project/issues/79175",
  "bug_type": "miscompilation",
  "base_commit": "e538486e90539096e7851d0deba4ea9ed94fced2",
  "knowledge_cutoff": "2024-01-23T17:34:28Z",
  "lit_test_dir": [
    "llvm/test/Transforms/JumpThreading"
  ],
  "hints": {
    "fix_commit": "4f32f5d5720fbef06672714a62376f236a36aef5",
    "components": [
      "JumpThreading",
      "BasicAliasAnalysis"
    ],
    "files": [
      "llvm/include/llvm/Analysis/AliasAnalysis.h",
      "llvm/include/llvm/Analysis/BasicAliasAnalysis.h",
      "llvm/lib/Analysis/BasicAliasAnalysis.cpp",
      "llvm/lib/Transforms/Scalar/JumpThreading.cpp"
    ],
    "bug_location_lineno": {
      "llvm/include/llvm/Analysis/AliasAnalysis.h": [
        [
          287,
          292
        ],
        [
          668,
          673
        ]
      ],
      "llvm/include/llvm/Analysis/BasicAliasAnalysis.h": [
        [
          43,
          62
        ]
      ],
      "llvm/lib/Analysis/BasicAliasAnalysis.cpp": [
        [
          89,
          95
        ],
        [
          1063,
          1068
        ],
        [
          1556,
          1561
        ],
        [
          1735,
          1741
        ]
      ],
      "llvm/lib/Transforms/Scalar/JumpThreading.cpp": [
        [
          1261,
          1266
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/include/llvm/Analysis/AliasAnalysis.h": [
        "alias",
        "AAQueryInfo",
        "enableCrossIterationMode",
        "AliasResult",
        "AAResultBase",
        "BatchAAResults"
      ],
      "llvm/include/llvm/Analysis/BasicAliasAnalysis.h": [
        "BasicAAResult"
      ],
      "llvm/lib/Analysis/BasicAliasAnalysis.cpp": [
        "BasicAAResult::aliasCheck",
        "isNotInCycle",
        "BasicAAResult::aliasGEP",
        "BasicAAResult::invalidate",
        "BasicAAResult::isValueEqualInPotentialCycles",
        "getParent"
      ],
      "llvm/lib/Transforms/Scalar/JumpThreading.cpp": [
        "JumpThreadingPass::simplifyPartiallyRedundantLoad"
      ]
    }
  },
  "patch": "commit 4f32f5d5720fbef06672714a62376f236a36aef5\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Jan 31 15:23:53 2024 +0100\n\n    [AA][JumpThreading] Don't use DomTree for AA in JumpThreading (#79294)\n    \n    JumpThreading may perform AA queries while the dominator tree is not up\n    to date, which may result in miscompilations.\n    \n    Fix this by adding a new AAQI option to disable the use of the dominator\n    tree in BasicAA.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/79175.\n\ndiff --git a/llvm/include/llvm/Analysis/AliasAnalysis.h b/llvm/include/llvm/Analysis/AliasAnalysis.h\nindex d6f732d35fd4..e8e4f491be5a 100644\n--- a/llvm/include/llvm/Analysis/AliasAnalysis.h\n+++ b/llvm/include/llvm/Analysis/AliasAnalysis.h\n@@ -287,6 +287,10 @@ public:\n   ///   store %l, ...\n   bool MayBeCrossIteration = false;\n \n+  /// Whether alias analysis is allowed to use the dominator tree, for use by\n+  /// passes that lazily update the DT while performing AA queries.\n+  bool UseDominatorTree = true;\n+\n   AAQueryInfo(AAResults &AAR, CaptureInfo *CI) : AAR(AAR), CI(CI) {}\n };\n \n@@ -668,6 +672,9 @@ public:\n   void enableCrossIterationMode() {\n     AAQI.MayBeCrossIteration = true;\n   }\n+\n+  /// Disable the use of the dominator tree during alias analysis queries.\n+  void disableDominatorTree() { AAQI.UseDominatorTree = false; }\n };\n \n /// Temporary typedef for legacy code that uses a generic \\c AliasAnalysis\ndiff --git a/llvm/include/llvm/Analysis/BasicAliasAnalysis.h b/llvm/include/llvm/Analysis/BasicAliasAnalysis.h\nindex afc1811239f2..7eca82729430 100644\n--- a/llvm/include/llvm/Analysis/BasicAliasAnalysis.h\n+++ b/llvm/include/llvm/Analysis/BasicAliasAnalysis.h\n@@ -43,20 +43,26 @@ class BasicAAResult : public AAResultBase {\n   const Function &F;\n   const TargetLibraryInfo &TLI;\n   AssumptionCache &AC;\n-  DominatorTree *DT;\n+  /// Use getDT() instead of accessing this member directly, in order to\n+  /// respect the AAQI.UseDominatorTree option.\n+  DominatorTree *DT_;\n+\n+  DominatorTree *getDT(const AAQueryInfo &AAQI) const {\n+    return AAQI.UseDominatorTree ? DT_ : nullptr;\n+  }\n \n public:\n   BasicAAResult(const DataLayout &DL, const Function &F,\n                 const TargetLibraryInfo &TLI, AssumptionCache &AC,\n                 DominatorTree *DT = nullptr)\n-      : DL(DL), F(F), TLI(TLI), AC(AC), DT(DT) {}\n+      : DL(DL), F(F), TLI(TLI), AC(AC), DT_(DT) {}\n \n   BasicAAResult(const BasicAAResult &Arg)\n       : AAResultBase(Arg), DL(Arg.DL), F(Arg.F), TLI(Arg.TLI), AC(Arg.AC),\n-        DT(Arg.DT) {}\n+        DT_(Arg.DT_) {}\n   BasicAAResult(BasicAAResult &&Arg)\n       : AAResultBase(std::move(Arg)), DL(Arg.DL), F(Arg.F), TLI(Arg.TLI),\n-        AC(Arg.AC), DT(Arg.DT) {}\n+        AC(Arg.AC), DT_(Arg.DT_) {}\n \n   /// Handle invalidation events in the new pass manager.\n   bool invalidate(Function &Fn, const PreservedAnalyses &PA,\ndiff --git a/llvm/lib/Analysis/BasicAliasAnalysis.cpp b/llvm/lib/Analysis/BasicAliasAnalysis.cpp\nindex 3178e2d27816..1028b52a7912 100644\n--- a/llvm/lib/Analysis/BasicAliasAnalysis.cpp\n+++ b/llvm/lib/Analysis/BasicAliasAnalysis.cpp\n@@ -89,7 +89,7 @@ bool BasicAAResult::invalidate(Function &Fn, const PreservedAnalyses &PA,\n   // may be created without handles to some analyses and in that case don't\n   // depend on them.\n   if (Inv.invalidate<AssumptionAnalysis>(Fn, PA) ||\n-      (DT && Inv.invalidate<DominatorTreeAnalysis>(Fn, PA)))\n+      (DT_ && Inv.invalidate<DominatorTreeAnalysis>(Fn, PA)))\n     return true;\n \n   // Otherwise this analysis result remains valid.\n@@ -1063,6 +1063,7 @@ AliasResult BasicAAResult::aliasGEP(\n                                              : AliasResult::MayAlias;\n   }\n \n+  DominatorTree *DT = getDT(AAQI);\n   DecomposedGEP DecompGEP1 = DecomposeGEPExpression(GEP1, DL, &AC, DT);\n   DecomposedGEP DecompGEP2 = DecomposeGEPExpression(V2, DL, &AC, DT);\n \n@@ -1556,6 +1557,7 @@ AliasResult BasicAAResult::aliasCheck(const Value *V1, LocationSize V1Size,\n         const Value *HintO1 = getUnderlyingObject(Hint1);\n         const Value *HintO2 = getUnderlyingObject(Hint2);\n \n+        DominatorTree *DT = getDT(AAQI);\n         auto ValidAssumeForPtrContext = [&](const Value *Ptr) {\n           if (const Instruction *PtrI = dyn_cast<Instruction>(Ptr)) {\n             return isValidAssumeForContext(Assume, PtrI, DT,\n@@ -1735,7 +1737,7 @@ bool BasicAAResult::isValueEqualInPotentialCycles(const Value *V,\n   if (!Inst || Inst->getParent()->isEntryBlock())\n     return true;\n \n-  return isNotInCycle(Inst, DT, /*LI*/ nullptr);\n+  return isNotInCycle(Inst, getDT(AAQI), /*LI*/ nullptr);\n }\n \n /// Computes the symbolic difference between two de-composed GEPs.\ndiff --git a/llvm/lib/Transforms/Scalar/JumpThreading.cpp b/llvm/lib/Transforms/Scalar/JumpThreading.cpp\nindex b7cf02489631..bb33a5da288c 100644\n--- a/llvm/lib/Transforms/Scalar/JumpThreading.cpp\n+++ b/llvm/lib/Transforms/Scalar/JumpThreading.cpp\n@@ -1261,6 +1261,8 @@ bool JumpThreadingPass::simplifyPartiallyRedundantLoad(LoadInst *LoadI) {\n   BasicBlock::iterator BBIt(LoadI);\n   bool IsLoadCSE;\n   BatchAAResults BatchAA(*AA);\n+  // The dominator tree is updated lazily and may not be valid at this point.\n+  BatchAA.disableDominatorTree();\n   if (Value *AvailableVal = FindAvailableLoadedValue(\n           LoadI, LoadBB, BBIt, DefMaxInstsToScan, &BatchAA, &IsLoadCSE)) {\n     // If the value of the load is locally available within the block, just use\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/JumpThreading/pr79175.ll",
      "commands": [
        "opt -S -passes=jump-threading < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "@f = external global i32\n\ndefine i32 @test(i64 %idx, i32 %val) {\nentry:\n  %cmp = icmp slt i64 %idx, 1\n  br i1 %cmp, label %for.body, label %return\n\nfor.body:                                         ; preds = %entry\n  %f = load i32, ptr @f, align 4\n  %cmp1 = icmp eq i32 %f, 0\n  br i1 %cmp1, label %cond.end, label %cond.false\n\ncond.false:                                       ; preds = %for.body\n  br label %cond.end\n\ncond.end:                                         ; preds = %cond.false, %for.body\n  %phi = phi i32 [ %val, %cond.false ], [ 1, %for.body ]\n  %cmp.i = icmp sgt i32 %phi, 0\n  %sel = select i1 %cmp.i, i32 0, i32 %phi\n  %f.idx = getelementptr inbounds i32, ptr @f, i64 %idx\n  store i32 %sel, ptr %f.idx, align 4\n  %f.reload = load i32, ptr @f, align 4\n  %cmp3 = icmp slt i32 %f.reload, 1\n  br i1 %cmp3, label %return2, label %return\n\nreturn:                                           ; preds = %cond.end, %entry\n  ret i32 0\n\nreturn2:                                          ; preds = %cond.end\n  ret i32 1\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "WRONG code, likely JumpThreadingPass",
    "body": "[wrong0.tar.gz](https://github.com/llvm/llvm-project/files/14027750/wrong0.tar.gz)\r\n(reduced c test case, should print 0)\r\n\r\nrunline:\r\nclang -O3 -march=arch13 wrong0.i -o a.out -w -mllvm -available-load-scan-limit=12\r\n\r\nThe function n() below is called two times in the reduced test case. The first time f[0] has a value of 0 at the start of the function, and a value of 1 at the end. The second time n() is called, f[0] has a value of 1 at the top, while it is then set to 0 by k().\r\n```\r\nlong k(long l, int m); // returns 0 \r\n\r\nconst int *n() {\r\n  for (; C <= 0;) {\r\n    A = (f[0] == 0 ? 1 : A % f[0]);\r\n    f[C] = k(A, 0);\r\n    g = &f[0];\r\n    f[C] = 1 > *g;\r\n    if (f[C])\r\n      return &e;\r\n    break;\r\n  }\r\n  return 0;\r\n}\r\n```\r\nThis is the transformation of jump threading:\r\n\r\n```\r\n                                                                          >     *** IR Dump After JumpThreadingPass on n ***\r\n                                                                          >     ; Function Attrs: nounwind\r\ndefine dso_local ptr @n() local_unnamed_addr #1 {                               define dso_local ptr @n() local_unnamed_addr #1 {\r\nentry:                                                                          entry:\r\n  %0 = load i64, ptr @C, align 8, !tbaa !4                                        %0 = load i64, ptr @C, align 8, !tbaa !4\r\n  %cmp = icmp slt i64 %0, 1                                                       %cmp = icmp slt i64 %0, 1\r\n  br i1 %cmp, label %for.body, label %for.end                                     br i1 %cmp, label %for.body, label %for.end\r\n\r\nfor.body:                                         ; preds = %entry              for.body:                                         ; preds = %entry\r\n  %1 = load i32, ptr @f, align 4, !tbaa !8                                        %1 = load i32, ptr @f, align 4, !tbaa !8\r\n  %cmp1 = icmp eq i32 %1, 0                                                       %cmp1 = icmp eq i32 %1, 0\r\n  br i1 %cmp1, label %cond.end, label %cond.false                         |       br i1 %cmp1, label %cond.end.thread, label %cond.end\r\n\r\ncond.false:                                       ; preds = %for.body     |     cond.end.thread:                                  ; preds = %for.body\r\n                                                                          >       store i64 1, ptr @A, align 8, !tbaa !4\r\n                                                                          >       br label %3\r\n                                                                          >\r\n                                                                          >     cond.end:                                         ; preds = %for.body\r\n  %2 = load i64, ptr @A, align 8, !tbaa !4                                        %2 = load i64, ptr @A, align 8, !tbaa !4\r\n  %conv = sext i32 %1 to i64                                                      %conv = sext i32 %1 to i64\r\n  %rem = srem i64 %2, %conv                                                       %rem = srem i64 %2, %conv\r\n  br label %cond.end                                                      |       store i64 %rem, ptr @A, align 8, !tbaa !4\r\n                                                                          >       %cmp.i = icmp sgt i64 %rem, 0\r\n                                                                          >       %cond.fr = freeze i1 %cmp.i\r\n                                                                          >       br i1 %cond.fr, label %3, label %4\r\n                                                                          >\r\n                                                                          >     3:                                                ; preds = %cond.end.\r\n                                                                          >       %.pr = load i32, ptr @f, align 4, !tbaa !8\r\n                                                                          >       br label %4\r\n\r\ncond.end:                                         ; preds = %for.body,    |     4:                                                ; preds = %cond.end,\r\n  %cond = phi i64 [ %rem, %cond.false ], [ 1, %for.body ]                 |       %5 = phi i32 [ %1, %cond.end ], [ %.pr, %3 ]\r\n  store i64 %cond, ptr @A, align 8, !tbaa !4                              |       %6 = phi i64 [ 0, %3 ], [ %rem, %cond.end ]\r\n  %cmp.i = icmp sgt i64 %cond, 0                                          |       %conv2 = trunc i64 %6 to i32\r\n  %cond.i = select i1 %cmp.i, i64 0, i64 %cond                            <\r\n  %conv2 = trunc i64 %cond.i to i32                                       <\r\n  %arrayidx = getelementptr inbounds [1 x i32], ptr @f, i64 0, i64 %0             %arrayidx = getelementptr inbounds [1 x i32], ptr @f, i64 0, i64 %0\r\n  store i32 %conv2, ptr %arrayidx, align 4, !tbaa !8                              store i32 %conv2, ptr %arrayidx, align 4, !tbaa !8\r\n  store ptr @f, ptr @g, align 8, !tbaa !10                                        store ptr @f, ptr @g, align 8, !tbaa !10\r\n  %3 = load i32, ptr @f, align 4, !tbaa !8                                |       %cmp3 = icmp slt i32 %5, 1\r\n  %cmp3 = icmp slt i32 %3, 1                                              <\r\n  %conv4 = zext i1 %cmp3 to i32                                                   %conv4 = zext i1 %cmp3 to i32\r\n  store i32 %conv4, ptr %arrayidx, align 4, !tbaa !8                              store i32 %conv4, ptr %arrayidx, align 4, !tbaa !8\r\n  br i1 %cmp3, label %return, label %for.end                                      br i1 %cmp3, label %return, label %for.end\r\n\r\nfor.end:                                          ; preds = %cond.end,    |     for.end:                                          ; preds = %4, %entry\r\n  br label %return                                                                br label %return\r\n\r\nreturn:                                           ; preds = %cond.end,    |     return:                                           ; preds = %4, %for.e\r\n  %retval.0 = phi ptr [ null, %for.end ], [ @e, %cond.end ]               |       %retval.0 = phi ptr [ null, %for.end ], [ @e, %4 ]\r\n  ret ptr %retval.0                                                               ret ptr %retval.0\r\n}                                                                               }\r\n~\r\n\r\n```\r\n\r\nBefore (left), `@f `is reloaded for the final icmp in cond.end (%3), which is necessary as the store to %conv2 just above goes to the same address. However, to the right JumpThreading has changed the final icmp to use the %5 value, which does not reflect the stored value of %conv2. This seems wrong and maybe JT has missed the fact that %arrayidx aliases `@f`?\r\n\r\n@jmorse @MatzeB @nikic \r\n",
    "author": "JonPsson1",
    "labels": [
      "miscompilation",
      "llvm:analysis",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "jmorse",
        "body": "Here's a godbolt link seemingly showing the same thing: https://godbolt.org/z/dMPaP7161 . I can't replicate this at 6a7abea47 with just `opt --passes=jump-threading`, but can if it's part of clang and inspected with `print-after-all`."
      },
      {
        "author": "jmorse",
        "body": "Ah -- because it's sensitive to the `-available-load-scan-limit=12`, which defaults to six and needs to be at least ten for this problem to appear. Stepping through bits of opt, the AA trace believes something that's wrong:\r\n\r\n```\r\nStart   %arrayidx = getelementptr inbounds [1 x i32], ptr @f, i64 0, i64 %0 @ LocationSize::precise(4), @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::precise(4)\r\n  Start @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::beforeOrAfterPointer, @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::beforeOrAfterPointer\r\n  End @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::beforeOrAfterPointer, @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::beforeOrAfterPointer = MustAlias\r\nEnd   %arrayidx = getelementptr inbounds [1 x i32], ptr @f, i64 0, i64 %0 @ LocationSize::precise(4), @f = dso_local global [1 x i32] zeroinitializer, align 4 @ LocationSize::precise(4) = NoAlias\r\n```\r\n\r\nWhich I think is saying that the GEP is believed to not-alias the \"f\" variable, wheras it might alias depending on the value of %0. Stepping through other things during the alias query, I see `isKnownNonNullFromDominatingCondition` returning true for %0, i.e. the load from \"C\". I would imagine this means there's something wrong with the dominator tree that makes this code think it's only executing on a path where %0 is always-zero. (EDIT: actually it means always-non-zero).\r\n\r\n(However this isn't my normal wheelhouse, so that might not be true!)."
      },
      {
        "author": "nikic",
        "body": "That sounds about right to me. JumpThreading performs lazy DT updates, so it's not legal to use DT during the transform.\r\n\r\nBasicAA in principle already supports working without DT, but it may be a bit tricky to avoid the DT use just in JumpThreading, given how this is all wired up in the pass manager."
      },
      {
        "author": "nikic",
        "body": "Somewhat reduced test case:\r\n```llvm\r\n; RUN: opt -S -passes=jump-threading < %s\r\n@f = external global i32\r\n\r\ndefine void @test(i64 %idx, i32 %val) {\r\nentry:\r\n  %cmp = icmp slt i64 %idx, 1\r\n  br i1 %cmp, label %for.body, label %return\r\n\r\nfor.body:\r\n  %f = load i32, ptr @f, align 4\r\n  %cmp1 = icmp eq i32 %f, 0\r\n  br i1 %cmp1, label %cond.end, label %cond.false\r\n\r\ncond.false:\r\n  br label %cond.end\r\n\r\ncond.end:\r\n  %phi = phi i32 [ %val, %cond.false ], [ 1, %for.body ]\r\n  %cmp.i = icmp sgt i32 %phi, 0\r\n  %sel = select i1 %cmp.i, i32 0, i32 %phi\r\n  %f.idx = getelementptr inbounds i32, ptr @f, i64 %idx\r\n  store i32 %sel, ptr %f.idx, align 4\r\n  %f.reload = load i32, ptr @f, align 4\r\n  %cmp3 = icmp slt i32 %f.reload, 1\r\n  br i1 %cmp3, label %return, label %return\r\n\r\nreturn:\r\n  ret void\r\n}\r\n```"
      },
      {
        "author": "EugeneZelenko",
        "body": "Not merged yet."
      },
      {
        "author": "tstellar",
        "body": "PR has been created, we will track the status there."
      }
    ]
  }
}
