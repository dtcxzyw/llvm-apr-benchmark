{
  "bug_id": "111887",
  "issue_url": "https://github.com/llvm/llvm-project/issues/111887",
  "bug_type": "crash",
  "base_commit": "195486950fa64938e62f6d85d31222fa41d0ee09",
  "knowledge_cutoff": "2024-10-10T18:31:43Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "4b5018d2311596778cade4db5177e2ab879cc218",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          1293,
          1300
        ],
        [
          6322,
          6328
        ],
        [
          18820,
          18826
        ],
        [
          18916,
          18921
        ],
        [
          18936,
          18941
        ],
        [
          19015,
          19031
        ],
        [
          19054,
          19074
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::buildExternalUses",
        "tryToReduce"
      ]
    }
  },
  "patch": "commit 4b5018d2311596778cade4db5177e2ab879cc218\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Oct 10 13:40:22 2024 -0700\n\n    [SLP]Track repeated reduced value as it might be vectorized\n    \n    Need to track changes with the repeated reduced value, since it might be\n    vectorized in the next attempt for reduction vectorization, to correctly\n    generate the code and avoid compiler crash.\n    \n    Fixes #111887\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 94de520a2715..e2958c49b8ca 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -1293,8 +1293,7 @@ public:\n   using InstrList = SmallVector<Instruction *, 16>;\n   using ValueSet = SmallPtrSet<Value *, 16>;\n   using StoreList = SmallVector<StoreInst *, 8>;\n-  using ExtraValueToDebugLocsMap =\n-      MapVector<Value *, SmallVector<Instruction *, 2>>;\n+  using ExtraValueToDebugLocsMap = SmallDenseSet<Value *, 4>;\n   using OrdersType = SmallVector<unsigned, 4>;\n \n   BoUpSLP(Function *Func, ScalarEvolution *Se, TargetTransformInfo *Tti,\n@@ -6322,7 +6321,7 @@ void BoUpSLP::buildExternalUses(\n         continue;\n \n       // Check if the scalar is externally used as an extra arg.\n-      const auto *ExtI = ExternallyUsedValues.find(Scalar);\n+      const auto ExtI = ExternallyUsedValues.find(Scalar);\n       if (ExtI != ExternallyUsedValues.end()) {\n         int FoundLane = Entry->findLaneForValue(Scalar);\n         LLVM_DEBUG(dbgs() << \"SLP: Need to extract: Extra arg from lane \"\n@@ -18820,7 +18819,7 @@ public:\n     // List of the values that were reduced in other trees as part of gather\n     // nodes and thus requiring extract if fully vectorized in other trees.\n     SmallPtrSet<Value *, 4> RequiredExtract;\n-    Value *VectorizedTree = nullptr;\n+    WeakTrackingVH VectorizedTree = nullptr;\n     bool CheckForReusedReductionOps = false;\n     // Try to vectorize elements based on their type.\n     SmallVector<InstructionsState> States;\n@@ -18916,6 +18915,7 @@ public:\n       bool SameScaleFactor = false;\n       bool OptReusedScalars = IsSupportedHorRdxIdentityOp &&\n                               SameValuesCounter.size() != Candidates.size();\n+      BoUpSLP::ExtraValueToDebugLocsMap ExternallyUsedValues;\n       if (OptReusedScalars) {\n         SameScaleFactor =\n             (RdxKind == RecurKind::Add || RdxKind == RecurKind::FAdd ||\n@@ -18936,6 +18936,7 @@ public:\n               emitScaleForReusedOps(Candidates.front(), Builder, Cnt);\n           VectorizedTree = GetNewVectorizedTree(VectorizedTree, RedVal);\n           VectorizedVals.try_emplace(OrigV, Cnt);\n+          ExternallyUsedValues.insert(OrigV);\n           continue;\n         }\n       }\n@@ -19015,17 +19016,18 @@ public:\n         V.reorderBottomToTop(/*IgnoreReorder=*/true);\n         // Keep extracted other reduction values, if they are used in the\n         // vectorization trees.\n-        BoUpSLP::ExtraValueToDebugLocsMap LocalExternallyUsedValues;\n+        BoUpSLP::ExtraValueToDebugLocsMap LocalExternallyUsedValues(\n+            ExternallyUsedValues);\n         // The reduction root is used as the insertion point for new\n         // instructions, so set it as externally used to prevent it from being\n         // deleted.\n-        LocalExternallyUsedValues[ReductionRoot];\n+        LocalExternallyUsedValues.insert(ReductionRoot);\n         for (unsigned Cnt = 0, Sz = ReducedVals.size(); Cnt < Sz; ++Cnt) {\n           if (Cnt == I || (ShuffledExtracts && Cnt == I - 1))\n             continue;\n           for (Value *V : ReducedVals[Cnt])\n             if (isa<Instruction>(V))\n-              LocalExternallyUsedValues[TrackedVals[V]];\n+              LocalExternallyUsedValues.insert(TrackedVals[V]);\n         }\n         if (!IsSupportedHorRdxIdentityOp) {\n           // Number of uses of the candidates in the vector of values.\n@@ -19054,21 +19056,21 @@ public:\n           // Check if the scalar was vectorized as part of the vectorization\n           // tree but not the top node.\n           if (!VLScalars.contains(RdxVal) && V.isVectorized(RdxVal)) {\n-            LocalExternallyUsedValues[RdxVal];\n+            LocalExternallyUsedValues.insert(RdxVal);\n             continue;\n           }\n           Value *OrigV = TrackedToOrig.at(RdxVal);\n           unsigned NumOps =\n               VectorizedVals.lookup(OrigV) + At(SameValuesCounter, OrigV);\n           if (NumOps != ReducedValsToOps.at(OrigV).size())\n-            LocalExternallyUsedValues[RdxVal];\n+            LocalExternallyUsedValues.insert(RdxVal);\n         }\n         // Do not need the list of reused scalars in regular mode anymore.\n         if (!IsSupportedHorRdxIdentityOp)\n           SameValuesCounter.clear();\n         for (Value *RdxVal : VL)\n           if (RequiredExtract.contains(RdxVal))\n-            LocalExternallyUsedValues[RdxVal];\n+            LocalExternallyUsedValues.insert(RdxVal);\n         V.buildExternalUses(LocalExternallyUsedValues);\n \n         V.computeMinimumValueSizes();\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/RISCV/reduced-value-repeated-and-vectorized.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=riscv64-unknown-linux-gnu -mattr=+v < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() {\nentry:\n  %0 = load i16, ptr null, align 2\n  %1 = xor i16 %0, 0\n  %2 = tail call i16 @llvm.smax.i16(i16 %1, i16 %0)\n  %3 = tail call i16 @llvm.smax.i16(i16 0, i16 %2)\n  %4 = load i16, ptr getelementptr inbounds (i8, ptr null, i64 6), align 2\n  %5 = xor i16 %4, 0\n  %6 = tail call i16 @llvm.smax.i16(i16 %5, i16 %0)\n  %7 = tail call i16 @llvm.smax.i16(i16 %3, i16 %6)\n  %8 = load i16, ptr getelementptr (i8, ptr null, i64 12), align 2\n  %9 = xor i16 %8, 0\n  %10 = tail call i16 @llvm.smax.i16(i16 %9, i16 %0)\n  %11 = tail call i16 @llvm.smax.i16(i16 %7, i16 %10)\n  %12 = load i16, ptr getelementptr (i8, ptr null, i64 18), align 2\n  %13 = xor i16 %12, 0\n  %14 = tail call i16 @llvm.smax.i16(i16 %13, i16 %0)\n  %15 = tail call i16 @llvm.smax.i16(i16 %11, i16 %14)\n  %16 = tail call i16 @llvm.smax.i16(i16 %15, i16 0)\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i16 @llvm.smax.i16(i16, i16) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP-Vectorizer] Segfault in `HorizontalReduction::matchAssociativeReduction`",
    "body": "Testcase:\r\n```llvm ir\r\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\r\ntarget triple = \"riscv64-unknown-linux-gnu\"\r\n\r\ndefine i32 @main() #0 {\r\nfor.body.preheader:\r\n  %0 = load i16, ptr null, align 2\r\n  %1 = xor i16 %0, 0\r\n  %2 = tail call i16 @llvm.smax.i16(i16 %1, i16 %0)\r\n  %3 = tail call i16 @llvm.smax.i16(i16 0, i16 %2)\r\n  %4 = load i16, ptr getelementptr inbounds (i8, ptr null, i64 6), align 2\r\n  %5 = xor i16 %4, 0\r\n  %6 = tail call i16 @llvm.smax.i16(i16 %5, i16 %0)\r\n  %7 = tail call i16 @llvm.smax.i16(i16 %3, i16 %6)\r\n  %8 = load i16, ptr getelementptr (i8, ptr null, i64 12), align 2\r\n  %9 = xor i16 %8, 0\r\n  %10 = tail call i16 @llvm.smax.i16(i16 %9, i16 %0)\r\n  %11 = tail call i16 @llvm.smax.i16(i16 %7, i16 %10)\r\n  %12 = load i16, ptr getelementptr (i8, ptr null, i64 18), align 2\r\n  %13 = xor i16 %12, 0\r\n  %14 = tail call i16 @llvm.smax.i16(i16 %13, i16 %0)\r\n  %15 = tail call i16 @llvm.smax.i16(i16 %11, i16 %14)\r\n  %16 = tail call i16 @llvm.smax.i16(i16 %15, i16 0)\r\n  ret i32 0\r\n}\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare i16 @llvm.smax.i16(i16, i16) #1\r\n\r\n; uselistorder directives\r\nuselistorder ptr null, { 3, 2, 1, 0 }\r\nuselistorder ptr @llvm.smax.i16, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }\r\n\r\nattributes #0 = { \"target-features\"=\"+64bit,+a,+c,+d,+f,+m,+relax,+v,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-b,-e,-experimental-smctr,-experimental-smmpm,-experimental-smnpm,-experimental-ssctr,-experimental-ssnpm,-experimental-sspm,-experimental-supm,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smepmp,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b\" }\r\nattributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\n```\r\n\r\nCommand/backtrace:\r\n```\r\n> /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt -passes=slp-vectorizer reduced.ll\r\nWARNING: You're attempting to print out a bitcode file.\r\nThis is inadvisable as it may cause display problems. If\r\nyou REALLY want to taste LLVM bitcode first-hand, you\r\ncan force output with the `-f' option.\r\n\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt -passes=slp-vectorizer reduced.ll\r\n1.      Running pass \"function(slp-vectorizer)\" on module \"reduced.ll\"\r\n2.      Running pass \"slp-vectorizer\" on function \"main\"\r\n #0 0x0000602da32b35e0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x30fe5e0)\r\n #1 0x0000602da32b09ef llvm::sys::RunSignalHandlers() (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x30fb9ef)\r\n #2 0x0000602da32b0b45 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007ea045842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x0000602da29cea64 llvm::getUnderlyingObject(llvm::Value const*, unsigned int) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2819a64)\r\n #5 0x0000602da22d706d (anonymous namespace)::HorizontalReduction::matchAssociativeReduction(llvm::slpvectorizer::BoUpSLP&, llvm::Instruction*, llvm::ScalarEvolution&, llvm::DataLayout const&, llvm::TargetLibraryInfo const&)::'lambda0'(unsigned long, llvm::LoadInst*)::operator()(unsigned long, llvm::LoadInst*) const SLPVectorizer.cpp:0:0\r\n #6 0x0000602da22d797e generateKeySubkey(llvm::Value*, llvm::TargetLibraryInfo const*, llvm::function_ref<llvm::hash_code (unsigned long, llvm::LoadInst*)>, bool) (.constprop.0) SLPVectorizer.cpp:0:0\r\n #7 0x0000602da230d085 (anonymous namespace)::HorizontalReduction::matchAssociativeReduction(llvm::slpvectorizer::BoUpSLP&, llvm::Instruction*, llvm::ScalarEvolution&, llvm::DataLayout const&, llvm::TargetLibraryInfo const&) SLPVectorizer.cpp:0:0\r\n #8 0x0000602da231f7cc llvm::SLPVectorizerPass::vectorizeHorReduction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::TargetTransformInfo*, llvm::SmallVectorImpl<llvm::WeakTrackingVH>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x216a7cc)\r\n #9 0x0000602da2323ec2 llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::TargetTransformInfo*) (.constprop.0) SLPVectorizer.cpp:0:0\r\n#10 0x0000602da2327dfb llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2172dfb)\r\n#11 0x0000602da232e400 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\r\n#12 0x0000602da232ef62 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2179f62)\r\n#13 0x0000602da1071366 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xebc366)\r\n#14 0x0000602da30bc88f llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2f0788f)\r\n#15 0x0000602da1073bb6 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xebebb6)\r\n#16 0x0000602da30bac1b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2f05c1b)\r\n#17 0x0000602da106fcc6 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0xebacc6)\r\n#18 0x0000602da30bb77d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x2f0677d)\r\n#19 0x0000602da088061b llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x6cb61b)\r\n#20 0x0000602da0872331 optMain (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x6bd331)\r\n#21 0x00007ea045829d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#22 0x00007ea045829e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#23 0x00007ea045829e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#24 0x0000602da0868855 _start (/scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt+0x6b3855)\r\nzsh: segmentation fault (core dumped)  /scratch/tc-testing/tc-compiler-fuzz-trunk/build-gcv/build-llvm-linux/bin/opt\r\n```\r\n\r\nGodbolt: https://godbolt.org/z/nbar8q6ej\r\n\r\nFound via fuzzer (C program before reduction).",
    "author": "patrick-rivos",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  }
}