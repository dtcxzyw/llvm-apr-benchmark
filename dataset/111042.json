{
  "bug_id": "111042",
  "issue_url": "https://github.com/llvm/llvm-project/issues/111042",
  "bug_type": "crash",
  "base_commit": "67c0846357bcd6faca713315380f9981a805a6e5",
  "knowledge_cutoff": "2024-10-03T18:44:33Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "68210c7c269b7b7325dedaea7cea9fe9d979fab5",
    "components": [
      "LoopVectorize"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        [
          2185,
          2190
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp": [
        "VPPredInstPHIRecipe::execute"
      ]
    }
  },
  "patch": "commit 68210c7c269b7b7325dedaea7cea9fe9d979fab5\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sat Oct 5 19:15:05 2024 +0100\n\n    [VPlan] Only generate first lane for VPPredInstPHI if no others used.\n    \n    IF only the first lane of the result is used, only generate the first\n    lane.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/111042.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\nindex 0d092b9c10ac..376b3d33be76 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp\n@@ -2185,6 +2185,9 @@ void VPPredInstPHIRecipe::execute(VPTransformState &State) {\n     // predicated iteration inserts its generated value in the correct vector.\n     State.reset(getOperand(0), VPhi);\n   } else {\n+    if (vputils::onlyFirstLaneUsed(this) && !State.Lane->isFirstLane())\n+      return;\n+\n     Type *PredInstType = getOperand(0)->getUnderlyingValue()->getType();\n     PHINode *Phi = State.Builder.CreatePHI(PredInstType, 2);\n     Phi->addIncoming(PoisonValue::get(ScalarPredInst->getType()),\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/divs-with-tail-folding.ll",
      "commands": [
        "opt -p loop-vectorize -mtriple x86_64 -prefer-predicate-over-epilogue=predicate-dont-vectorize -mcpu=skylake-avx512 -S %s"
      ],
      "tests": [
        {
          "test_name": "sdiv_feeding_gep_predicated",
          "test_body": "define void @sdiv_feeding_gep_predicated(ptr %dst, i32 %x, i64 %M, i64 %conv6, i64 %N) {\nentry:\n  %conv61 = zext i32 %x to i64\n  br label %loop\n\nloop:                                             ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %c = icmp ule i64 %iv, %M\n  br i1 %c, label %then, label %loop.latch\n\nthen:                                             ; preds = %loop\n  %div18 = sdiv i64 %M, %conv6\n  %conv20 = trunc i64 %div18 to i32\n  %mul30 = mul i64 %div18, %conv61\n  %sub31 = sub i64 %iv, %mul30\n  %conv34 = trunc i64 %sub31 to i32\n  %mul35 = mul i32 %x, %conv20\n  %add36 = add i32 %mul35, %conv34\n  %idxprom = sext i32 %add36 to i64\n  %gep = getelementptr double, ptr %dst, i64 %idxprom\n  store double 0.000000e+00, ptr %gep, align 8\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop\n  %iv.next = add i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, %N\n  br i1 %ec, label %exit, label %loop\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/drop-poison-generating-flags.ll",
      "commands": [
        "opt %s -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S"
      ],
      "tests": [
        {
          "test_name": "pr70590_recipe_without_underlying_instr",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@c = external global [5 x i8]\n\ndefine void @pr70590_recipe_without_underlying_instr(i64 %n, ptr noalias %dst) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %inc, %loop.latch ]\n  %cmp = icmp eq i64 %iv, %n\n  br i1 %cmp, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  %rem = srem i64 3, 0\n  %add3 = add i64 %rem, -3\n  %add5 = add i64 %iv, %add3\n  %gep = getelementptr [5 x i8], ptr @c, i64 0, i64 %add5\n  %l = load i8, ptr %gep, align 1\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %sr = phi i8 [ 0, %loop.header ], [ %l, %then ]\n  %gep.dst = getelementptr i8, ptr %dst, i64 %iv\n  store i8 %sr, ptr %gep.dst, align 4\n  %inc = add i64 %iv, 1\n  %exitcond.not = icmp eq i64 %inc, 4\n  br i1 %exitcond.not, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopVectorize/X86/replicate-recipe-with-only-first-lane-used.ll",
      "commands": [
        "opt -p loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -S %s"
      ],
      "tests": [
        {
          "test_name": "replicate_udiv_with_only_first_lane_used",
          "test_body": "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @replicate_udiv_with_only_first_lane_used(i32 %x, ptr %dst, i64 %d) {\nentry:\n  %c = icmp eq i32 %x, 10\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  br i1 true, label %loop.latch, label %else\n\nelse:                                             ; preds = %loop.header\n  %div.i = udiv i64 99, %d\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %else, %loop.header\n  %retval.0.i = phi i64 [ %div.i, %else ], [ 0, %loop.header ]\n  %gep = getelementptr i16, ptr %dst, i64 %retval.0.i\n  store i16 0, ptr %gep, align 2\n  %iv.next = add i64 %iv, 1\n  %cmp = icmp ult i64 %iv.next, 101\n  br i1 %cmp, label %loop.header, label %exit\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Assertion failed in VPlan.cpp:258",
    "body": "When I compiled the code with -O2 flag, it crashed:\r\n\r\n```c\r\n#include <stdint.h>\r\nstatic uint8_t c[] = {1};\r\nvoid a();\r\nlong b(int h) {\r\n  long d = 0;\r\n  if (h < 0)\r\n    return -1;\r\n  int e = 0;\r\n  for (int f = 0; f <= h; f++) {\r\n    e++;\r\n    d += f;\r\n  }\r\n  long a = d / e;\r\n  return a;\r\n}\r\nvoid g();\r\nuint8_t i() {\r\n  uint16_t k[4];\r\n  int f;\r\n  for (; g + f < 4; f++)\r\n    k[b(c[0] - 1)] = 5;\r\n  for (; f; a(k))\r\n    ;\r\n  uint8_t *l[3][3], j;\r\n  l[0][j] = c;\r\n}\r\n```\r\n\r\nThe crash is:\r\n```\r\nclang: /root/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.cpp:258: llvm::Value* llvm::VPTransformState::get(llvm::VPValue*, bool): Assertion `(VF.isScalar() || Def->isLiveIn() || hasVectorValue(Def) || !vputils::onlyFirstLaneUsed(Def) || (hasScalarValue(Def, VPLane(0)) && Data.VPV2Scalars[Def].size() == 1)) && \"Trying to access a single scalar per part but has multiple scalars \" \"per part.\"' failed.\r\n```\r\n\r\nDetails can be found here: https://godbolt.org/z/fTrKKha5E",
    "author": "cardigan1008",
    "labels": [
      "vectorizers",
      "crash",
      "regression:19"
    ],
    "comments": [
      {
        "author": "shafik",
        "body": "Looks like a clang-19 regression: https://godbolt.org/z/6d3edKn86"
      }
    ]
  }
}
