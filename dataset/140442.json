{
  "bug_id": "140442",
  "issue_url": "https://github.com/llvm/llvm-project/issues/140442",
  "bug_type": "crash",
  "base_commit": "b18ebd17b82db0bdf5bb8cae59c3208288fbef93",
  "knowledge_cutoff": "2025-05-18T08:07:12Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopUnroll"
  ],
  "hints": {
    "fix_commit": "7e14161f49b32387988cf9d937bbfaa27d0fbdd5",
    "components": [
      "LoopPeel"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/LoopPeel.cpp": [
        [
          1214,
          1220
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/LoopPeel.cpp": [
        "llvm::peelLoop"
      ]
    }
  },
  "patch": "commit 7e14161f49b32387988cf9d937bbfaa27d0fbdd5\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun May 18 10:17:20 2025 +0100\n\n    [LoopPeel] Handle constants when updating exit values when peeling last.\n    \n    Account for constant values when updating exit values after peeling an\n    iteration from the end. This can happen if the inner loop gets unrolled\n    and simplified.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/140442.\n\ndiff --git a/llvm/lib/Transforms/Utils/LoopPeel.cpp b/llvm/lib/Transforms/Utils/LoopPeel.cpp\nindex c5c637ab6e20..646354bba9df 100644\n--- a/llvm/lib/Transforms/Utils/LoopPeel.cpp\n+++ b/llvm/lib/Transforms/Utils/LoopPeel.cpp\n@@ -1214,7 +1214,7 @@ bool llvm::peelLoop(Loop *L, unsigned PeelCount, bool PeelLast, LoopInfo *LI,\n     // Now adjust users of the original exit values by replacing them with the\n     // exit value from the peeled iteration.\n     for (const auto &[P, E] : ExitValues)\n-      P->replaceAllUsesWith(VMap.lookup(E));\n+      P->replaceAllUsesWith(isa<Constant>(E) ? E : &*VMap.lookup(E));\n     formLCSSA(*L, DT, LI, SE);\n   } else {\n     // Now adjust the phi nodes in the loop header to get their initial values\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopUnroll/unroll-and-peel-last-iteration.ll",
      "commands": [
        "opt -p loop-unroll -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Test case for https://github.com/llvm/llvm-project/issues/140442.\ndefine i32 @peel_last_iter_of_outer_lcssa_phi_with_constant_after_unrolling_inner() {\n;\nentry:\n  br label %outer.header\n\nouter.header:\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %outer.latch ]\n  %0 = icmp eq i16 %iv, 999\n  br label %inner.header\n\ninner.header:\n  %inner.iv = phi i32 [ 0, %outer.header ], [ %inner.iv.next, %inner.latch ]\n  %1 = add i32 %inner.iv, 1\n  br i1 %0, label %then, label %inner.latch\n\nthen:\n  call void @foo(i32 %inner.iv)\n  br label %inner.latch\n\ninner.latch:\n  %inner.iv.next = add i32 %inner.iv, 1\n  %inner.ec = icmp eq i32 %inner.iv.next, 1\n  br i1 %inner.ec, label %outer.latch, label %inner.header\n\nouter.latch:\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv.next, 1000\n  br i1 %ec, label %exit, label %outer.header\n\nexit:\n  ret i32 %1\n}\n\ndeclare void @foo(i32)\n;.\n;."
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopUnroll] Assertion `New && \"Value::replaceAllUsesWith(<null>) is invalid!\"' failed.",
    "body": "Reproducer: https://godbolt.org/z/ahxqn68Mn\n```\n; bin/opt -passes=\"loop-unroll<O3>\" reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main() {\nentry:\n  br label %for.cond52.preheader.i.i\n\nfor.cond52.preheader.i.i:                         ; preds = %for.end213.i.i, %entry\n  %p_158.addr.0380.i.i1 = phi i16 [ 0, %entry ], [ %inc215.i.i, %for.end213.i.i ]\n  %0 = icmp eq i16 %p_158.addr.0380.i.i1, -1\n  br label %for.body136.i.i\n\nfor.body136.i.i:                                  ; preds = %for.end54.preheader.peel.i.i.i, %for.cond52.preheader.i.i\n  %1 = add i32 0, 0\n  br i1 %0, label %for.end54.preheader.peel.i.i.i, label %for.end54.preheader.peel.i.i.i\n\nfor.end54.preheader.peel.i.i.i:                   ; preds = %for.body136.i.i, %for.body136.i.i\n  br i1 true, label %for.end213.i.i, label %for.body136.i.i\n\nfor.end213.i.i:                                   ; preds = %for.end54.preheader.peel.i.i.i\n  %inc215.i.i = add i16 %p_158.addr.0380.i.i1, 1\n  %exitcond387.not.i.i = icmp eq i16 %inc215.i.i, 0\n  br i1 %exitcond387.not.i.i, label %for.end141.peel.i.i, label %for.cond52.preheader.i.i\n\nfor.end141.peel.i.i:                              ; preds = %for.end213.i.i\n  ret i32 %1\n}\n```\n```\nopt: /root/llvm-project/llvm/lib/IR/Value.cpp:516: void llvm::Value::doRAUW(llvm::Value*, llvm::Value::ReplaceMetadataUses): Assertion `New && \"Value::replaceAllUsesWith(<null>) is invalid!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-unroll<O3> <source>\n1.\tRunning pass \"function(loop-unroll<O3>)\" on module \"<source>\"\n2.\tRunning pass \"loop-unroll<O3>\" on function \"main\"\n #0 0x00000000055c5a48 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x55c5a48)\n #1 0x00000000055c33d4 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x000078c7a1842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x000078c7a18969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x000078c7a1842476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x000078c7a18287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x000078c7a182871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x000078c7a1839e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000053f248a (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53f248a)\n #9 0x0000000004830404 llvm::peelLoop(llvm::Loop*, unsigned int, bool, llvm::LoopInfo*, llvm::ScalarEvolution*, llvm::DominatorTree&, llvm::AssumptionCache*, bool, llvm::ValueMap<llvm::Value const*, llvm::WeakTrackingVH, llvm::ValueMapConfig<llvm::Value const*, llvm::sys::SmartMutex<false>>>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4830404)\n#10 0x0000000004424eb9 tryToUnrollLoop(llvm::Loop*, llvm::DominatorTree&, llvm::LoopInfo*, llvm::ScalarEvolution&, llvm::TargetTransformInfo const&, llvm::AssumptionCache&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, int, bool, bool, bool, std::optional<unsigned int>, std::optional<unsigned int>, std::optional<bool>, std::optional<bool>, std::optional<bool>, std::optional<bool>, std::optional<bool>, std::optional<unsigned int>, llvm::AAResults*) LoopUnrollPass.cpp:0:0\n#11 0x0000000004427b27 llvm::LoopUnrollPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4427b27)\n#12 0x0000000002d6a54e llvm::detail::PassModel<llvm::Function, llvm::LoopUnrollPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2d6a54e)\n#13 0x00000000053bcd00 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53bcd00)\n#14 0x0000000000e8bbee llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe8bbee)\n#15 0x00000000053bd213 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53bd213)\n#16 0x0000000000e8aa3e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe8aa3e)\n#17 0x00000000053bae30 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x53bae30)\n#18 0x000000000094c2aa llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x94c2aa)\n#19 0x000000000093fa7c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x93fa7c)\n#20 0x000078c7a1829d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#21 0x000078c7a1829e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#22 0x0000000000937695 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x937695)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\nllvm version: 3ccb15d6caf57f2a866d496ada2fb52d14b179d2",
    "author": "dtcxzyw",
    "labels": [
      "crash-on-valid",
      "llvm:transforms",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Probably related to 3fcfce4c5e5fd1c3072e8db1d692c93459e8cd74, taking a look"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "3fcfce4c5e5fd1c3072e8db1d692c93459e8cd74"
}