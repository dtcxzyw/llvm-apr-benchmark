{
  "bug_id": "93769",
  "issue_url": "https://github.com/llvm/llvm-project/issues/93769",
  "bug_type": "miscompilation",
  "base_commit": "d517f15e09e49e172387cb6deb76e4ee2d45d0e4",
  "knowledge_cutoff": "2024-05-30T04:55:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "971c49fbf361c22ccf20913f61a58c28b26c4e27",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp": [
        [
          2857,
          2864
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp": [
        "foldFNegIntoConstant"
      ]
    }
  },
  "patch": "commit 971c49fbf361c22ccf20913f61a58c28b26c4e27\nAuthor: SahilPatidar <patidarsahil2001@gmail.com>\nDate:   Thu Jun 12 16:01:43 2025 +0530\n\n    [InstCombine] Ensure Safe Handling of Flags in foldFNegIntoConstant (#94148)\n    \n    Fix #93769\n    \n    alive2: https://alive2.llvm.org/ce/z/MHShQY\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp\nindex fc7dd302b27a..f0f709bb16d8 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp\n@@ -2857,8 +2857,14 @@ static Instruction *foldFNegIntoConstant(Instruction &I, const DataLayout &DL) {\n   // Fold negation into constant operand.\n   // -(X * C) --> X * (-C)\n   if (match(FNegOp, m_FMul(m_Value(X), m_Constant(C))))\n-    if (Constant *NegC = ConstantFoldUnaryOpOperand(Instruction::FNeg, C, DL))\n-      return BinaryOperator::CreateFMulFMF(X, NegC, &I);\n+    if (Constant *NegC = ConstantFoldUnaryOpOperand(Instruction::FNeg, C, DL)) {\n+      FastMathFlags FNegF = I.getFastMathFlags();\n+      FastMathFlags OpF = FNegOp->getFastMathFlags();\n+      FastMathFlags FMF = FastMathFlags::unionValue(FNegF, OpF) |\n+                          FastMathFlags::intersectRewrite(FNegF, OpF);\n+      FMF.setNoInfs(FNegF.noInfs() && OpF.noInfs());\n+      return BinaryOperator::CreateFMulFMF(X, NegC, FMF);\n+    }\n   // -(X / C) --> X / (-C)\n   if (match(FNegOp, m_FDiv(m_Value(X), m_Constant(C))))\n     if (Constant *NegC = ConstantFoldUnaryOpOperand(Instruction::FNeg, C, DL))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/fneg.ll",
      "commands": [
        "opt < %s -passes=instcombine -S",
        "opt < %s -passes=instcombine -use-constant-fp-for-fixed-length-splat -S"
      ],
      "tests": [
        {
          "test_name": "test_fneg_mul_combine_nsz_ninf_with_vec_const",
          "test_body": "define <2 x float> @test_fneg_mul_combine_nsz_ninf_with_vec_const(<2 x float> %a) {\n  %f1 = fmul nsz <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_reassoc_ninf_with_vec_const1",
          "test_body": "define <2 x float> @test_fneg_mul_combine_reassoc_ninf_with_vec_const1(<2 x float> %a) {\n  %f1 = fmul <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_ninf_mul_with_anyzero",
          "test_body": "define float @test_fneg_ninf_mul_with_anyzero(float %a) {\n  %mul = fmul float %a, 0.000000e+00\n  %f = fneg ninf float %mul\n  ret float %f\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_contract_ninf_with_vec_const2",
          "test_body": "define <2 x float> @test_fneg_mul_combine_contract_ninf_with_vec_const2(<2 x float> %a) {\n  %f1 = fmul ninf <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "fmul_fneg",
          "test_body": "define float @fmul_fneg(float %x) {\n  %m = fmul float %x, 4.200000e+01\n  %r = fneg float %m\n  ret float %r\n}\n"
        },
        {
          "test_name": "fmul_fsub_fmf",
          "test_body": "define float @fmul_fsub_fmf(float %x) {\n  %m = fmul float %x, 4.200000e+01\n  %r = fsub nsz float -0.000000e+00, %m\n  ret float %r\n}\n"
        },
        {
          "test_name": "test_fneg_nnan_mul_with_anyzero",
          "test_body": "define float @test_fneg_nnan_mul_with_anyzero(float %a) {\n  %f1 = fmul ninf float %a, 0.000000e+00\n  %f2 = fneg nnan float %f1\n  ret float %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_nnan_ninf_with_vec_const2",
          "test_body": "define <2 x float> @test_fneg_mul_combine_nnan_ninf_with_vec_const2(<2 x float> %a) {\n  %f1 = fmul ninf <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg nnan ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fsub_ninf_mul_with_anyzero",
          "test_body": "define float @test_fsub_ninf_mul_with_anyzero(float %a) {\n  %f1 = fmul nsz float %a, 0.000000e+00\n  %f2 = fsub ninf float -0.000000e+00, %f1\n  ret float %f2\n}\n"
        },
        {
          "test_name": "test_fneg_nsz_mul_with_anyzero",
          "test_body": "define float @test_fneg_nsz_mul_with_anyzero(float %a) {\n  %f1 = fmul ninf float %a, 0.000000e+00\n  %f2 = fneg nsz float %f1\n  ret float %f2\n}\n"
        },
        {
          "test_name": "test_fneg_ninf_mul_nnan_with_const",
          "test_body": "define float @test_fneg_ninf_mul_nnan_with_const(float %a) {\n  %f1 = fmul nnan float %a, 0.000000e+00\n  %f2 = fneg ninf float %f1\n  ret float %f2\n}\n"
        },
        {
          "test_name": "test_fneg_ninf_nnan_mul_with_vec_const",
          "test_body": "define <2 x float> @test_fneg_ninf_nnan_mul_with_vec_const(<2 x float> %a) {\n  %f1 = fmul <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg nnan ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_reassoc_ninf_with_vec_const3",
          "test_body": "define <2 x float> @test_fneg_mul_combine_reassoc_ninf_with_vec_const3(<2 x float> %a) {\n  %f1 = fmul <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_contract_ninf_with_vec_const1",
          "test_body": "define <2 x float> @test_fneg_mul_combine_contract_ninf_with_vec_const1(<2 x float> %a) {\n  %f1 = fmul <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "fmul_fneg_fmf",
          "test_body": "define float @fmul_fneg_fmf(float %x) {\n  %m = fmul float %x, 4.200000e+01\n  %r = fneg nsz float %m\n  ret float %r\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_nnan_ninf_with_vec_const",
          "test_body": "define <2 x float> @test_fneg_mul_combine_nnan_ninf_with_vec_const(<2 x float> %a) {\n  %f1 = fmul nnan <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_reassoc_ninf_with_vec_const2",
          "test_body": "define <2 x float> @test_fneg_mul_combine_reassoc_ninf_with_vec_const2(<2 x float> %a) {\n  %f1 = fmul ninf <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_mul_combine_contract_ninf_with_vec_const3",
          "test_body": "define <2 x float> @test_fneg_mul_combine_contract_ninf_with_vec_const3(<2 x float> %a) {\n  %f1 = fmul <2 x float> %a, <float 0.000000e+00, float -0.000000e+00>\n  %f2 = fneg ninf <2 x float> %f1\n  ret <2 x float> %f2\n}\n"
        },
        {
          "test_name": "test_fneg_ninf_mul_nsz_with_const",
          "test_body": "define float @test_fneg_ninf_mul_nsz_with_const(float %a) {\n  %f1 = fmul nsz float %a, 0.000000e+00\n  %f2 = fneg ninf float %f1\n  ret float %f2\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "foldFNegIntoConstant incorrectly preserves fast math flags for 0 constants",
    "body": "> https://alive2.llvm.org/ce/z/MHShQY longer version\r\n\r\n_Originally posted by @arsenm in https://github.com/llvm/llvm-project/pull/92512#discussion_r1619895371_\r\n\r\n\r\nSome of the combines in foldFNegIntoConstant are unsafely taking the flags directly from the original fneg instruction, when the preservation logic requires dropping ninf in some cases. ",
    "author": "arsenm",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": [
      {
        "author": "SahilPatidar",
        "body": "@arsenm, could we use the same logic you shared in #92512 for dropping `ninf`?\r\n```cpp\r\n      FastMathFlags FMF = match(C, m_AnyZeroFP())? I.getFastMathFlags() &\r\n                          cast<FPMathOperator>(I.getOperand(0))->getFastMathFlags():\r\n                          I.getFastMathFlags();\r\n```\r\nHowever, this logic will also drop `nnan` and other flags. Should we check specifically for ninf instead?"
      },
      {
        "author": "arsenm",
        "body": "> However, this logic will also drop `nnan` and other flags. Should we check specifically for ninf instead?\r\n\r\nThat will be conservatively correct, but I think this can do better. For example, nnan on the fneg should be sufficient to preserve nnan on the final result, same with nsz "
      }
    ]
  },
  "verified": true
}