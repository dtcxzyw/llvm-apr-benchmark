{
  "bug_id": "117537",
  "issue_url": "https://github.com/llvm/llvm-project/issues/117537",
  "bug_type": "crash",
  "base_commit": "c979ec05642f292737d250c6682d85ed49bc7b6e",
  "knowledge_cutoff": "2024-11-25T10:47:02Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SimpleLoopUnswitch"
  ],
  "hints": {
    "fix_commit": "fc5c89900f2a4b50e0f3a88ef7c89115d93684f4",
    "components": [
      "SimpleLoopUnswitch"
    ],
    "files": [
      "llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp": [
        [
          1248,
          1255
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp": [
        "buildClonedLoopBlocks"
      ]
    }
  },
  "patch": "commit fc5c89900f2a4b50e0f3a88ef7c89115d93684f4\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Nov 27 11:47:22 2024 +0100\n\n    [SimpleLoopUnswitch] Fix LCSSA phi node invalidation\n    \n    Fixes https://github.com/llvm/llvm-project/issues/117537.\n\ndiff --git a/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp b/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp\nindex aa3cbc5e4bdd..d8ef450eeb9a 100644\n--- a/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp\n+++ b/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp\n@@ -1248,8 +1248,9 @@ static BasicBlock *buildClonedLoopBlocks(\n       assert(VMap.lookup(&I) == &ClonedI && \"Mismatch in the value map!\");\n \n       // Forget SCEVs based on exit phis in case SCEV looked through the phi.\n-      if (SE && isa<PHINode>(I))\n-        SE->forgetValue(&I);\n+      if (SE)\n+        if (auto *PN = dyn_cast<PHINode>(&I))\n+          SE->forgetLcssaPhiWithNewPredecessor(&L, PN);\n \n       BasicBlock::iterator InsertPt = MergeBB->getFirstInsertionPt();\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SimpleLoopUnswitch/pr117537.ll",
      "commands": [
        "opt -S -passes='print<scalar-evolution>,simple-loop-unswitch<nontrivial>,print<scalar-evolution>' -verify-scev < %s 2>/dev/null"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test(ptr %p) {\nentry:\n  %check = icmp eq ptr %p, null\n  br label %bb0\n\nbb0:                                              ; preds = %loop0, %entry\n  br i1 %check, label %loop0, label %latch\n\nlatch:                                            ; preds = %bb0\n  br i1 %check, label %exit0, label %loop0\n\nexit0:                                            ; preds = %latch\n  ret void\n\nloop0:                                            ; preds = %latch, %bb0\n  %v = load atomic i32, ptr %p unordered, align 8\n  %add = add i32 %v, 3\n  br i1 true, label %preheader, label %bb0\n\npreheader:                                        ; preds = %loop0\n  br label %loop1\n\nloop1:                                            ; preds = %backedge, %preheader\n  %iv1 = phi i32 [ %add, %preheader ], [ %iv1.next, %backedge ]\n  %iv1.next = add i32 %iv1, -33\n  br label %loop2\n\nbackedge:                                         ; preds = %loop2\n  br i1 true, label %exit1, label %loop1\n\nloop2:                                            ; preds = %loop2, %loop1\n  %iv0 = phi i32 [ %iv1, %loop1 ], [ %iv0.next, %loop2 ]\n  %iv0.next = add nsw i32 %iv0, 1\n  %cmp = icmp sgt i32 %iv0.next, 0\n  br i1 %cmp, label %backedge, label %loop2\n\nexit1:                                            ; preds = %backedge\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SCEV] Assertion `isAvailableAtLoopEntry(Op, L) && \"SCEVAddRecExpr operand is not available at loop entry!\"' failed.",
    "body": "Faulty IR:\n```\n; ModuleID = 'test.ll'\nsource_filename = \"/nfs/build-cache/zvm-dev-4598/jdk11/x86_64/fastdebug/lib/server/boilerplate.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @test(ptr addrspace(1) %p) {\nentry:\n  %check = icmp eq ptr addrspace(1) %p, null\n  br label %bb0\n\nbb0:                                              ; preds = %loop0, %entry\n  br i1 %check, label %loop0, label %latch\n\nlatch:                                            ; preds = %bb0\n  br i1 %check, label %exit0, label %loop0\n\nexit0:                                            ; preds = %latch\n  ret void\n\nloop0:                                            ; preds = %latch, %bb0\n  %0 = load atomic i32, ptr addrspace(1) %p unordered, align 8\n  %add = add i32 %0, 3\n  br i1 true, label %preheader, label %bb0\n\npreheader:                                        ; preds = %loop0\n  br label %loop1\n\nloop1:                                            ; preds = %backedge, %preheader\n  %iv1 = phi i32 [ %add, %preheader ], [ %1, %backedge ]\n  %1 = add i32 %iv1, -33\n  br label %loop2\n\nbackedge:                                         ; preds = %loop2\n  br i1 true, label %exit1, label %loop1\n\nloop2:                                            ; preds = %loop2, %loop1\n  %iv0 = phi i32 [ %iv1, %loop1 ], [ %2, %loop2 ]\n  %2 = add nsw i32 %iv0, 1\n  %3 = icmp sgt i32 %2, 0\n  br i1 %3, label %backedge, label %loop2\n\nexit1:                                            ; preds = %backedge\n  ret void\n}\n```\nfails when run with `opt -passes='print<scalar-evolution>,simple-loop-unswitch<nontrivial>,print<scalar-evolution>' `\nDemo of failure: https://godbolt.org/z/qhboK5r3j\n",
    "author": "Nirhar",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "Nirhar",
        "body": "Here is the IR after simple-loop-unswitch pass:\n![res](https://github.com/user-attachments/assets/8a35df98-54f4-45f6-9e96-626fd6814e7f)\n\n\nAt the point of crash, the SCEV for Exit Value of `%iv0`(which I assume, as we crashed while printing it) is `(-4 + (-1 * %1) + %.us-phi)`, which is incorrect. The crash happens because `%1` is in a block that does not properly dominate `%iv0`. Looks like, simple-loop-unswitch is either incorrectly updating the SCEV in the pass, or is incorrectly reporting SCEV to be preserved. As of now, I'm not sure which is the case. "
      },
      {
        "author": "Nirhar",
        "body": "@nikic @dtcxzyw @EugeneZelenko any thoughts? I'm inclined to having a patch that removes SCEV from simple-loop-unswitch 's list of preserved analyses."
      },
      {
        "author": "dtcxzyw",
        "body": "> I'm inclined to having a patch that removes SCEV from simple-loop-unswitch 's list of preserved analyses.\n\nSome SCEVs should be invalidated in `unswitchNontrivialInvariants`. Removing SCEV from the list of preserved analyses doesn't fix the issue.\n"
      }
    ]
  }
}
