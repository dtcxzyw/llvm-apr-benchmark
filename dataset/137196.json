{
  "bug_id": "137196",
  "issue_url": "https://github.com/llvm/llvm-project/issues/137196",
  "bug_type": "miscompilation",
  "base_commit": "be7cf63b4a402ebc5b1dacc6579a693c92e1328e",
  "knowledge_cutoff": "2025-04-24T15:32:53Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "1f69d6354a4b088bda5ee62c31411a75eead8b0c",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        [
          1959,
          1967
        ],
        [
          1985,
          1991
        ],
        [
          2013,
          2025
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp": [
        "InstCombinerImpl::SimplifyDemandedUseFPClass",
        "getFPClassConstant"
      ]
    }
  },
  "patch": "commit 1f69d6354a4b088bda5ee62c31411a75eead8b0c\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Apr 28 17:01:43 2025 +0800\n\n    [InstCombine] Preserve the sign bit of NaN in `SimplifyDemandedUseFPClass` (#137287)\n    \n    Alive2: https://alive2.llvm.org/ce/z/uiUzEf\n    \n    Closes https://github.com/llvm/llvm-project/issues/137196.\n    \n    Note: To avoid regression in\n    `ret_nofpclass_nopositives_copysign_nnan_flag`, the second commit takes\n    FMF into account.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\nindex 2c8939b5a051..a48854a191ca 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp\n@@ -1959,9 +1959,11 @@ static Constant *getFPClassConstant(Type *Ty, FPClassTest Mask) {\n   }\n }\n \n-Value *InstCombinerImpl::SimplifyDemandedUseFPClass(\n-    Value *V, const FPClassTest DemandedMask, KnownFPClass &Known,\n-    unsigned Depth, Instruction *CxtI) {\n+Value *InstCombinerImpl::SimplifyDemandedUseFPClass(Value *V,\n+                                                    FPClassTest DemandedMask,\n+                                                    KnownFPClass &Known,\n+                                                    unsigned Depth,\n+                                                    Instruction *CxtI) {\n   assert(Depth <= MaxAnalysisRecursionDepth && \"Limit Search Depth\");\n   Type *VTy = V->getType();\n \n@@ -1985,7 +1987,12 @@ Value *InstCombinerImpl::SimplifyDemandedUseFPClass(\n   if (!I->hasOneUse())\n     return nullptr;\n \n-  // TODO: Should account for nofpclass/FastMathFlags on current instruction\n+  if (auto *FPOp = dyn_cast<FPMathOperator>(I)) {\n+    if (FPOp->hasNoNaNs())\n+      DemandedMask &= ~fcNan;\n+    if (FPOp->hasNoInfs())\n+      DemandedMask &= ~fcInf;\n+  }\n   switch (I->getOpcode()) {\n   case Instruction::FNeg: {\n     if (SimplifyDemandedFPClass(I, 0, llvm::fneg(DemandedMask), Known,\n@@ -2013,13 +2020,13 @@ Value *InstCombinerImpl::SimplifyDemandedUseFPClass(\n       if (SimplifyDemandedFPClass(I, 0, DemandedMaskAnySign, Known, Depth + 1))\n         return I;\n \n-      if ((DemandedMask & fcPositive) == fcNone) {\n+      if ((DemandedMask & fcNegative) == DemandedMask) {\n         // Roundabout way of replacing with fneg(fabs)\n         I->setOperand(1, ConstantFP::get(VTy, -1.0));\n         return I;\n       }\n \n-      if ((DemandedMask & fcNegative) == fcNone) {\n+      if ((DemandedMask & fcPositive) == DemandedMask) {\n         // Roundabout way of replacing with fabs\n         I->setOperand(1, ConstantFP::getZero(VTy));\n         return I;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/simplify-demanded-fpclass.ll",
      "commands": [
        "opt -S -passes=instcombine < %s"
      ],
      "tests": [
        {
          "test_name": "ret_nofpclass_nopositives_copysign",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(pinf pzero psub pnorm) float @ret_nofpclass_nopositives_copysign(float %x, float %unknown.sign) {\n  %copysign = call float @llvm.copysign.f32(float %x, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_no_negatives__copysign_unknown_select_pinf_rhs",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(ninf nzero nsub nnorm) float @ret_nofpclass_no_negatives__copysign_unknown_select_pinf_rhs(i1 %cond, float %x, float %unknown.sign) {\n  %select = select i1 %cond, float %x, float 0x7FF0000000000000\n  %copysign = call float @llvm.copysign.f32(float %select, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_nonegatives_copysign",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(ninf nzero nsub nnorm) float @ret_nofpclass_nonegatives_copysign(float %x, float %unknown.sign) {\n  %copysign = call float @llvm.copysign.f32(float %x, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_no_negatives_noinf__copysign_unknown_select_pinf_rhs",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(inf nzero nsub nnorm) float @ret_nofpclass_no_negatives_noinf__copysign_unknown_select_pinf_rhs(i1 %cond, float %x, float %unknown.sign) {\n  %select = select i1 %cond, float %x, float 0x7FF0000000000000\n  %copysign = call float @llvm.copysign.f32(float %select, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_no_positives_noinf__copysign_unknown_select_pinf_rhs",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(inf pzero psub pnorm) float @ret_nofpclass_no_positives_noinf__copysign_unknown_select_pinf_rhs(i1 %cond, float %x, float %unknown.sign) {\n  %select = select i1 %cond, float %x, float 0x7FF0000000000000\n  %copysign = call float @llvm.copysign.f32(float %select, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_nopositives_nonan_copysign",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(nan pinf pzero psub pnorm) float @ret_nofpclass_nopositives_nonan_copysign(float %x, float %unknown.sign) {\n  %copysign = call float @llvm.copysign.f32(float %x, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_no_positives__copysign_unknown_select_pinf_rhs",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(pinf pzero psub pnorm) float @ret_nofpclass_no_positives__copysign_unknown_select_pinf_rhs(i1 %cond, float %x, float %unknown.sign) {\n  %select = select i1 %cond, float %x, float 0x7FF0000000000000\n  %copysign = call float @llvm.copysign.f32(float %select, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "ret_nofpclass_nopositive_finites_copysign_nnan_ninf_flag",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(pzero psub pnorm) float @ret_nofpclass_nopositive_finites_copysign_nnan_ninf_flag(float %x, float %unknown.sign) {\n  %copysign = call nnan ninf float @llvm.copysign.f32(float %x, float %unknown.sign)\n  ret float %copysign\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "copysign not preserving sign bit of a NaN",
    "body": "we're optimizing this:\n```llvm\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare float @llvm.copysign.f32(float, float) #0\n\ndefine nofpclass(ninf nzero nsub nnorm) float @f(float %0) {\n  %2 = call float @llvm.copysign.f32(float 0x7FF8000000000000, float %0)\n  ret float %2\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n```\n\nto:\n```llvm\n; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)\ndefine noundef nofpclass(ninf nzero nsub nnorm) float @f(float %0) local_unnamed_addr #0 {\n  ret float 0x7FF8000000000000\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }\n```\n\nAlive complains that the optimized code will flip the sign bit of a NaN, while the unoptimized code preserved it as required by LangRef's specification of the copysign semantics:\n> The returned value is completely identical to the first operand except for the sign bit; in particular, if the input is a NaN, then the quiet/signaling bit and payload are perfectly preserved.\n\nIf any of the individual flags in `nofpclass(ninf nzero nsub nnorm)` are removed, then we don't do this transformation. Am I missing something here where these flags, together, mean that it's legal to flip the sign of a NaN? Obviously the transformation is just fine when `nofpclass(nan)` is there\n\nhttps://alive2.llvm.org/ce/z/ja96Yf\n\ncc @dtcxzyw @nunoplopes ",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "bisect": "9dd2c59312bfae3526cee5e836a6b67b2e9b4989"
}