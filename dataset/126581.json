{
  "bug_id": "126581",
  "issue_url": "https://github.com/llvm/llvm-project/issues/126581",
  "bug_type": "crash",
  "base_commit": "c81139f417a209dbd2a4e06465483d4b0951a9ac",
  "knowledge_cutoff": "2025-02-10T19:26:42Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d18b1ebef5f5e355d6cee2b2f48789a159a5d616",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          18467,
          18474
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::computeMinimumValueSizes"
      ]
    }
  },
  "patch": "commit d18b1ebef5f5e355d6cee2b2f48789a159a5d616\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Thu Feb 13 09:39:56 2025 -0800\n\n    [SLP]Check if vector user exist before accessing it\n    \n    Need to check if vector user exist before accessing it to avoid compiler\n    crash.\n    Fixes #126581\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex a337ab7410f7..fb72a112b9ac 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -18467,8 +18467,8 @@ void BoUpSLP::computeMinimumValueSizes() {\n           any_of(\n               VectorizableTree[NodeIdx]->UserTreeIndices,\n               [&](const EdgeInfo &EI) {\n-                return (EI.UserTE->hasState() &&\n-                        EI.UserTE->getOpcode() == Instruction::ICmp) &&\n+                return EI.UserTE && EI.UserTE->hasState() &&\n+                       EI.UserTE->getOpcode() == Instruction::ICmp &&\n                        any_of(EI.UserTE->Scalars, [&](Value *V) {\n                          auto *IC = dyn_cast<ICmpInst>(V);\n                          return IC &&\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/RISCV/check-node-without-vector-user.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=riscv64-unknown-linux-gnu -mattr=+v < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n@r = external global [8 x i8]\n\ndefine void @test(i64 %0, ptr %1) {\n;\n  %3 = load i8, ptr @r, align 1\n  %4 = trunc i8 %3 to i1\n  %5 = select i1 %4, i64 %0, i64 0\n  %6 = getelementptr i8, ptr @r, i64 %5\n  %7 = load i8, ptr %6, align 1\n  %8 = icmp ule i8 %3, %7\n  %9 = sext i1 %8 to i32\n  %10 = load i8, ptr getelementptr (i8, ptr @r, i64 -8049), align 1\n  %11 = trunc i8 %10 to i1\n  %12 = select i1 %11, i64 %0, i64 0\n  %13 = getelementptr i8, ptr @r, i64 %12\n  %14 = load i8, ptr %13, align 1\n  %15 = icmp ule i8 %10, %14\n  %16 = sext i1 %15 to i32\n  %17 = add i32 %9, %16\n  %18 = load i8, ptr getelementptr (i8, ptr @r, i64 -16098), align 1\n  %19 = trunc i8 %18 to i1\n  %20 = select i1 %19, i64 %0, i64 0\n  %21 = getelementptr i8, ptr @r, i64 %20\n  %22 = load i8, ptr %21, align 1\n  %23 = icmp ule i8 %18, %22\n  %24 = sext i1 %23 to i32\n  %25 = add i32 %17, %24\n  %26 = load i8, ptr getelementptr (i8, ptr @r, i64 -24147), align 1\n  %27 = trunc i8 %26 to i1\n  %28 = select i1 %27, i64 %0, i64 0\n  %29 = getelementptr i8, ptr @r, i64 %28\n  %30 = load i8, ptr %29, align 1\n  %31 = icmp ule i8 %26, %30\n  %32 = sext i1 %31 to i32\n  %33 = add i32 %25, %32\n  store i32 %33, ptr %1, align 4\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Segmentation Fault using opt \"-passes=lto<O3>\"",
    "body": "Testcase:\n```llvm ir\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"riscv64-unknown-linux-gnu\"\n\n@a = external global i32\n@g = internal global i16 -8049\n@r = external global [8 x i8]\n\ndefine internal void @c(i16 %g, ptr %r) #0 {\nentry:\n  br label %for.cond16.preheader.us.us.us.us\n\nfor.cond16.preheader.us.us.us.us:                 ; preds = %for.cond.cleanup20.split.us.us.us.us.us, %entry\n  %indvars.iv133 = phi i64 [ %indvars.iv.next134, %for.cond.cleanup20.split.us.us.us.us.us ], [ 0, %entry ]\n  br label %for.body21.us.us.us.us.us\n\nfor.body21.us.us.us.us.us:                        ; preds = %for.body21.us.us.us.us.us, %for.cond16.preheader.us.us.us.us\n  %sub74.us.us.us.us124.us = phi i32 [ 0, %for.cond16.preheader.us.us.us.us ], [ %sub74.us.us.us.us.us, %for.body21.us.us.us.us.us ]\n  %w.0109.us.us.us.us.us = phi i16 [ 0, %for.cond16.preheader.us.us.us.us ], [ %add77.us.us.us.us.us, %for.body21.us.us.us.us.us ]\n  %idxprom38.us.us.us.us.us = sext i16 %w.0109.us.us.us.us.us to i64\n  %arrayidx48.us.us.us.us.us = getelementptr i8, ptr %r, i64 %idxprom38.us.us.us.us.us\n  %0 = load i8, ptr %arrayidx48.us.us.us.us.us, align 1\n  %loadedv49.us.us.us.us.us = trunc i8 %0 to i1\n  %cond71.in.in.v.us.us.us.us.us = select i1 %loadedv49.us.us.us.us.us, i64 %indvars.iv133, i64 0\n  %cond71.in.in.us.us.us.us.us = getelementptr i8, ptr %r, i64 %cond71.in.in.v.us.us.us.us.us\n  %cond71.in.us.us.us.us.us = load i8, ptr %cond71.in.in.us.us.us.us.us, align 1\n  %cmp72.us.us.us.us.us = icmp ule i8 %0, %cond71.in.us.us.us.us.us\n  %conv73.neg.us.us.us.us.us = sext i1 %cmp72.us.us.us.us.us to i32\n  %sub74.us.us.us.us.us = add i32 %sub74.us.us.us.us124.us, %conv73.neg.us.us.us.us.us\n  store i32 %sub74.us.us.us.us124.us, ptr @a, align 4\n  %add77.us.us.us.us.us = add i16 %w.0109.us.us.us.us.us, %g\n  %cmp18.us.us.us.us.us = icmp slt i16 %add77.us.us.us.us.us, 0\n  br i1 %cmp18.us.us.us.us.us, label %for.body21.us.us.us.us.us, label %for.cond.cleanup20.split.us.us.us.us.us\n\nfor.cond.cleanup20.split.us.us.us.us.us:          ; preds = %for.body21.us.us.us.us.us\n  %indvars.iv.next134 = add i64 %indvars.iv133, 1\n  %1 = and i64 %indvars.iv133, 2147483648\n  %cmp12.us.us.us.us = icmp eq i64 %1, 0\n  br i1 %cmp12.us.us.us.us, label %for.cond16.preheader.us.us.us.us, label %for.cond5.loopexit.split.us.us.us.us\n\nfor.cond5.loopexit.split.us.us.us.us:             ; preds = %for.cond.cleanup20.split.us.us.us.us.us\n  ret void\n}\n\ndefine i32 @main() {\nentry:\n  %0 = load i16, ptr @g, align 2\n  call void @c(i16 %0, ptr @r)\n  ret i32 0\n}\n\nattributes #0 = { \"target-features\"=\"+64bit,+a,+c,+d,+f,+m,+relax,+v,+zaamo,+zalrsc,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl256b,+zvl32b,+zvl64b,-b,-e,-experimental-sdext,-experimental-sdtrig,-experimental-smctr,-experimental-ssctr,-experimental-svukte,-experimental-xqcia,-experimental-xqciac,-experimental-xqcicli,-experimental-xqcicm,-experimental-xqcics,-experimental-xqcicsr,-experimental-xqciint,-experimental-xqcilo,-experimental-xqcilsm,-experimental-xqcisls,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-sha,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smdbltrp,-smepmp,-smmpm,-smnpm,-smrnmi,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssdbltrp,-ssnpm,-sspm,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-supm,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-svvptc,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xmipscmove,-xmipslsp,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zabha,-zacas,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b\" }\n```\n\n\nCommand/backtrace:\n```\n$ /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt \"-passes=lto<O3>\" reduced.ll\nWARNING: You're attempting to print out a bitcode file.\nThis is inadvisable as it may cause display problems. If\nyou REALLY want to taste LLVM bitcode first-hand, you\ncan force output with the `-f' option.\n\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: /scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt -passes=lto<O3> reduced.ll\n1.      Running pass \"function<eager-inv>(loop-mssa(licm<allowspeculation>),gvn<>,memcpyopt,dse,move-auto-init,mldst-motion<no-split-footer-bb>,loop(indvars,loop-deletion,loop-unroll-full),loop-distribute,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-unroll<O3>,transform-warning,sroa<preserve-cfg>,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,sccp,instcombine<max-iterations=1;no-verify-fixpoint>,bdce,slp-vectorizer,vector-combine,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,jump-threading)\" on module \"reduced.ll\"\n2.      Running pass \"slp-vectorizer\" on function \"c\"\n #0 0x000064a320d6dd02 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x34a8d02)\n #1 0x000064a320d6ad3f llvm::sys::RunSignalHandlers() (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x34a5d3f)\n #2 0x000064a320d6ae84 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007fe3fee45330 (/lib/x86_64-linux-gnu/libc.so.6+0x45330)\n #4 0x000064a31fc28b80 llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes()::'lambda1'(llvm::slpvectorizer::BoUpSLP::EdgeInfo const&)::operator()(llvm::slpvectorizer::BoUpSLP::EdgeInfo const&) const (.isra.0) SLPVectorizer.cpp:0:0\n #5 0x000064a31fcdc0bb llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes() (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x24170bb)\n #6 0x000064a31fcf9808 (anonymous namespace)::HorizontalReduction::tryToReduce(llvm::slpvectorizer::BoUpSLP&, llvm::DataLayout const&, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo const&, llvm::AssumptionCache*) SLPVectorizer.cpp:0:0\n #7 0x000064a31fcfc9ae llvm::SLPVectorizerPass::vectorizeHorReduction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::SmallVectorImpl<llvm::WeakTrackingVH>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x24379ae)\n #8 0x000064a31fd00c41 llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x243bc41)\n #9 0x000064a31fd04e32 llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x243fe32)\n#10 0x000064a31fd0c6e0 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x24476e0)\n#11 0x000064a31fd0d336 llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x2448336)\n#12 0x000064a31e87b285 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfb6285)\n#13 0x000064a320b5976a llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x329476a)\n#14 0x000064a31e87d0d5 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfb80d5)\n#15 0x000064a320b5807c llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x329307c)\n#16 0x000064a31e879675 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0xfb4675)\n#17 0x000064a320b5865d llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x329365d)\n#18 0x000064a31e01d465 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x758465)\n#19 0x000064a31e00d6ee optMain (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x7486ee)\n#20 0x00007fe3fee2a1ca __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#21 0x00007fe3fee2a28b call_init ./csu/../csu/libc-start.c:128:20\n#22 0x00007fe3fee2a28b __libc_start_main ./csu/../csu/libc-start.c:347:5\n#23 0x000064a31e003f45 _start (/scratch/ewlu/daily-upstream-build/build-gcv/build-llvm-linux/bin/opt+0x73ef45)\nSegmentation fault (core dumped)\n```\n\nGodbolt: https://godbolt.org/z/P3sGYsGYc\n\nFound via fuzzer (C program before reduction)",
    "author": "ewlu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}