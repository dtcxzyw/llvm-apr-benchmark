{
  "bug_id": "116691",
  "issue_url": "https://github.com/llvm/llvm-project/issues/116691",
  "bug_type": "crash",
  "base_commit": "a4e1a3dc8bc9bb971d8a38130254b4570f8b7a03",
  "knowledge_cutoff": "2024-11-18T20:36:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "ad9c0b369e86e75d56e229f294782a4eaf527226",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          6815,
          6830
        ],
        [
          6861,
          6866
        ],
        [
          6903,
          6909
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::tryToVectorizeGatheredLoads"
      ]
    }
  },
  "patch": "commit ad9c0b369e86e75d56e229f294782a4eaf527226\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Nov 18 13:49:04 2024 -0800\n\n    [SLP]Check if the gathered loads form full vector before attempting build it\n    \n    Need to check that the number of gathered loads in the slice forms the\n    build vector to avoid compiler crash.\n    \n    Fixes #116691\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 918d7663548f..dc0dffd9fcbf 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -6815,16 +6815,7 @@ void BoUpSLP::tryToVectorizeGatheredLoads(\n         // Check if it is profitable to try vectorizing gathered loads. It is\n         // profitable if we have more than 3 consecutive loads or if we have\n         // less but all users are vectorized or deleted.\n-        bool AllowToVectorize =\n-            NumElts >= 3 ||\n-            any_of(ValueToGatherNodes.at(Slice.front()),\n-                   [=](const TreeEntry *TE) {\n-                     return TE->Scalars.size() == 2 &&\n-                            ((TE->Scalars.front() == Slice.front() &&\n-                              TE->Scalars.back() == Slice.back()) ||\n-                             (TE->Scalars.front() == Slice.back() &&\n-                              TE->Scalars.back() == Slice.front()));\n-                   });\n+        bool AllowToVectorize = false;\n         // Check if it is profitable to vectorize 2-elements loads.\n         if (NumElts == 2) {\n           bool IsLegalBroadcastLoad = TTI->isLegalBroadcastLoad(\n@@ -6861,6 +6852,19 @@ void BoUpSLP::tryToVectorizeGatheredLoads(\n             return true;\n           };\n           AllowToVectorize = CheckIfAllowed(Slice);\n+        } else {\n+          AllowToVectorize =\n+              (NumElts >= 3 ||\n+               any_of(ValueToGatherNodes.at(Slice.front()),\n+                      [=](const TreeEntry *TE) {\n+                        return TE->Scalars.size() == 2 &&\n+                               ((TE->Scalars.front() == Slice.front() &&\n+                                 TE->Scalars.back() == Slice.back()) ||\n+                                (TE->Scalars.front() == Slice.back() &&\n+                                 TE->Scalars.back() == Slice.front()));\n+                      })) &&\n+              hasFullVectorsOrPowerOf2(*TTI, Slice.front()->getType(),\n+                                       Slice.size());\n         }\n         if (AllowToVectorize) {\n           SmallVector<Value *> PointerOps;\n@@ -6903,7 +6907,8 @@ void BoUpSLP::tryToVectorizeGatheredLoads(\n       }\n       // Mark masked gathers candidates as vectorized, if any.\n       for (unsigned Cnt : MaskedGatherVectorized) {\n-        ArrayRef<LoadInst *> Slice = ArrayRef(Loads).slice(Cnt, NumElts);\n+        ArrayRef<LoadInst *> Slice = ArrayRef(Loads).slice(\n+            Cnt, std::min<unsigned>(NumElts, Loads.size() - Cnt));\n         ArrayRef<Value *> Values(\n             reinterpret_cast<Value *const *>(Slice.begin()), Slice.size());\n         Results.emplace_back(Values, LoadsState::ScatterVectorize);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/gathered-loads-non-full-reg.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux -mcpu=cascadelake < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n@solid_ = external global [608 x i8]\n\ndefine void @test(ptr noalias %0) {\n;\n.lr.ph1019:\n  %1 = getelementptr i8, ptr %0, i64 8\n  %2 = getelementptr i8, ptr %0, i64 32\n  %3 = getelementptr i8, ptr %0, i64 128\n  %4 = getelementptr i8, ptr %0, i64 200\n  %5 = getelementptr i8, ptr %0, i64 208\n  %6 = getelementptr i8, ptr %0, i64 232\n  %7 = getelementptr i8, ptr %0, i64 288\n  %8 = getelementptr i8, ptr %0, i64 320\n  %9 = getelementptr i8, ptr %0, i64 304\n  %10 = getelementptr i8, ptr %0, i64 424\n  %11 = getelementptr i8, ptr %0, i64 480\n  %12 = getelementptr i8, ptr %0, i64 504\n  %13 = getelementptr i8, ptr %0, i64 632\n  %14 = getelementptr i8, ptr %0, i64 720\n  %15 = load double, ptr %1, align 8\n  %16 = load double, ptr %2, align 8\n  %17 = fadd double %16, %15\n  %18 = load double, ptr %3, align 8\n  %19 = load double, ptr %4, align 8\n  %20 = load double, ptr %5, align 8\n  %21 = load double, ptr %6, align 8\n  %22 = fadd double %21, %20\n  %23 = load double, ptr %7, align 8\n  %24 = load double, ptr %8, align 8\n  %25 = load double, ptr %9, align 8\n  %26 = load double, ptr %10, align 8\n  %27 = load double, ptr %11, align 8\n  %28 = load double, ptr %12, align 8\n  %29 = fadd double %28, %27\n  %30 = fmul double %22, %18\n  %31 = fmul double %30, 0.000000e+00\n  %32 = fsub double 0.000000e+00, %25\n  %33 = fmul double %32, 0.000000e+00\n  %34 = fadd double %33, 0.000000e+00\n  %35 = fmul double %34, 0.000000e+00\n  %36 = fmul double %29, %26\n  %37 = fmul double %36, 0.000000e+00\n  %38 = fadd double %37, 0.000000e+00\n  %39 = fsub double %17, %19\n  %40 = fmul double %39, %23\n  %41 = fmul double %40, 0.000000e+00\n  %42 = load double, ptr %0, align 8\n  %43 = load double, ptr %13, align 8\n  %44 = fmul double %43, %31\n  %45 = load double, ptr %14, align 8\n  %46 = fmul double %35, 0.000000e+00\n  %47 = fadd double %44, 0.000000e+00\n  %48 = fmul double %45, %38\n  %49 = fmul double %45, %41\n  store double %46, ptr getelementptr inbounds (i8, ptr @solid_, i64 384), align 8\n  store double %47, ptr getelementptr inbounds (i8, ptr @solid_, i64 408), align 8\n  store double %48, ptr getelementptr inbounds (i8, ptr @solid_, i64 392), align 8\n  store double %49, ptr getelementptr inbounds (i8, ptr @solid_, i64 400), align 8\n  %.neg965 = fmul double %48, %24\n  %reass.add993 = fadd double %.neg965, 0.000000e+00\n  %50 = fadd double %42, %reass.add993\n  %51 = fsub double 0.000000e+00, %50\n  store double %51, ptr getelementptr inbounds (i8, ptr @solid_, i64 296), align 8\n  %.neg969 = fmul double %49, 0.000000e+00\n  %reass.add996 = fadd double %.neg969, 0.000000e+00\n  %52 = fadd double %45, %reass.add996\n  %53 = fsub double 0.000000e+00, %52\n  store double %53, ptr getelementptr inbounds (i8, ptr @solid_, i64 304), align 8\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "Crash in SLPVectorizer.cpp",
    "body": "I'm seeing a problem that shows up in the flang compiler when compiling a large, proprietary benchmark. Since the benchmark is proprietary, I can't include the source code in this bug report.\r\n\r\nThe problem happens in in the file `.../llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp` in the function `BoUpSLP::tryToVectorizeGatheredLoads`.\r\n\r\nIn the code around line 6906, is the statement:\r\n\r\n```\r\nArrayRef<LoadInst *> Slice = ArrayRef(Loads).slice(Cnt, NumElts);\r\n```\r\n\r\nThe code for `slice()` is in `llvm-project/llvm/include/llvm/ADT/ArrayRef.h`. It contains the line:\r\n\r\n```\r\nassert(N+M <= size() && \"Invalid specifier\");\r\n```\r\n\r\nThis assertion fails, and the compiler crashes.\r\n\r\nI added debug code to `SLPVectorizer.cpp` to trace how the variables `Cnt` and `NumElts` got their values leading up to the point of failure. I've included the output of running the compiler on the test case in the file `log` along with the source code of the modified version of `SLPVectorizer.cpp` in the attached zip file.\r\n\r\nAt the point of failure, the value of `N` (which corresponds to `Cnt`) is 8. The value of `M` (passed from `NumElts`) is also 8. The call to `size()` returns 14. Since 8 + 8 is not less than or equal to 14, the assert fails and the compiler crashes.\r\n\r\nI captured the LLVM IR of the original test case and included it below in the file `x13.f90.ll` in the attached zip file.\r\n\r\nIf you run this command after downloading `x13.f90.ll`, you'll see the error:\r\n\r\n```\r\n#!/bin/bash\r\n../bin/clang -c -O3 -march=native -mllvm -locally-hot-callsite-threshold=4500 x13.f90.ll\r\n```\r\n\r\nI also ran the `x13.f90.ll` file through `llvm-reduce` using the following command:\r\n\r\n```\r\nllvm-reduce --test pcrash.sh x13.f90.ll\r\n```\r\n\r\nThis produced a file called `reduced.ll` that I've included in the attached zip file. I've also included the log file `reduced.log` that shows what happend when you run the command:\r\n\r\n```\r\n#!/bin/bash\r\n../bin/clang -c -O3 -march=native -mllvm -locally-hot-callsite-threshold=4500 reduced.ll\r\n```\r\n\r\n@alexey-bataev, please let me know if someone else should look at this or if I can help out by adding additional debug information.\r\n\r\n[Archive.zip](https://github.com/user-attachments/files/17805978/Archive.zip)\r\n",
    "author": "psteinfeld",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "verified": true
}