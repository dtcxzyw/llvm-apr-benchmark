{
  "bug_id": "122913",
  "issue_url": "https://github.com/llvm/llvm-project/issues/122913",
  "bug_type": "crash",
  "base_commit": "195a1fc5b05d7a42b2e3fa383edb9a7e8b34a9c5",
  "knowledge_cutoff": "2025-01-14T15:11:18Z",
  "lit_test_dir": [
    "llvm/test/Analysis/ScalarEvolution"
  ],
  "hints": {
    "fix_commit": "137d706739653304294adef84ed758e3e498d975",
    "components": [
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        [
          15328,
          15333
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        "ScalarEvolution::LoopGuards::collect"
      ]
    }
  },
  "patch": "commit 137d706739653304294adef84ed758e3e498d975\nAuthor: Julian Nagele <j.nagele@apple.com>\nDate:   Wed Jan 22 18:36:37 2025 +0000\n\n    [SCEV] Do not attempt to collect loop guards for loops without predecessor. (#123662)\n    \n    Attempting to collect loop guards for loops without a predecessor can\n    lead to non-terminating recursion trying to construct a SCEV.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/122913.\n\ndiff --git a/llvm/lib/Analysis/ScalarEvolution.cpp b/llvm/lib/Analysis/ScalarEvolution.cpp\nindex 7673c3548175..210c7cab965e 100644\n--- a/llvm/lib/Analysis/ScalarEvolution.cpp\n+++ b/llvm/lib/Analysis/ScalarEvolution.cpp\n@@ -15328,6 +15328,8 @@ ScalarEvolution::LoopGuards::collect(const Loop *L, ScalarEvolution &SE) {\n   BasicBlock *Header = L->getHeader();\n   BasicBlock *Pred = L->getLoopPredecessor();\n   LoopGuards Guards(SE);\n+  if (!Pred)\n+    return Guards;\n   SmallPtrSet<const BasicBlock *, 8> VisitedBlocks;\n   collectFromBlock(SE, Guards, Header, Pred, VisitedBlocks);\n   return Guards;\n",
  "tests": [
    {
      "file": "llvm/test/Analysis/ScalarEvolution/backedge-taken-count-guard-info-with-multiple-predecessors.ll",
      "commands": [
        "opt < %s -disable-output -passes=nary-reassociate --scalar-evolution-use-expensive-range-sharpening 2>&1"
      ],
      "tests": [
        {
          "test_name": "pr122913",
          "test_body": "target triple = \"x86_64-unknown-linux-gnu\"\n\ndefine ptr @f(i32 %0) {\n  switch i32 0, label %bb4 [\n    i32 1, label %bb4\n    i32 2, label %bb4\n    i32 3, label %bb4\n    i32 4, label %bb1\n    i32 5, label %bb4\n    i32 6, label %bb4\n  ]\n\nbb:                                               ; No predecessors!\n  switch i32 0, label %bb4 [\n    i32 0, label %bb4\n    i32 1, label %bb1\n  ]\n\nbb1:                                              ; preds = %bb2, %bb, %1\n  %2 = phi i32 [ %3, %bb2 ], [ 0, %bb ], [ 0, %1 ]\n  switch i32 %0, label %bb3 [\n    i32 0, label %bb2\n    i32 1, label %bb2\n    i32 2, label %bb2\n  ]\n\nbb2:                                              ; preds = %bb1, %bb1, %bb1\n  %3 = add i32 %2, 1\n  %4 = icmp ult i32 %0, 0\n  br i1 %4, label %bb1, label %bb4\n\nbb3:                                              ; preds = %bb1\n  unreachable\n\nbb4:                                              ; preds = %bb2, %bb, %bb, %1, %1, %1, %1, %1, %1\n  ret ptr null\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SCEV] Another SEGV/stack overflow in LoopGuards",
    "body": "Similar to https://github.com/llvm/llvm-project/issues/120615. Looks like the fix wasn't a complete one. Here is an example:\n\n```llvm\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine ptr @f(i32 %0) {\n  switch i32 0, label %bb4 [\n    i32 1, label %bb4\n    i32 2, label %bb4\n    i32 3, label %bb4\n    i32 4, label %bb1\n    i32 5, label %bb4\n    i32 6, label %bb4\n  ]\n\nbb:                                               ; No predecessors!\n  switch i32 0, label %bb4 [\n    i32 0, label %bb4\n    i32 1, label %bb1\n  ]\n\nbb1:                                              ; preds = %bb2, %bb, %1\n  %2 = phi i32 [ %3, %bb2 ], [ 0, %bb ], [ 0, %1 ]\n  switch i32 %0, label %bb3 [\n    i32 0, label %bb2\n    i32 1, label %bb2\n    i32 2, label %bb2\n  ]\n\nbb2:                                              ; preds = %bb1, %bb1, %bb1\n  %3 = add i32 %2, 1\n  %4 = icmp ult i32 %0, 0\n  br i1 %4, label %bb1, label %bb4\n\nbb3:                                              ; preds = %bb1\n  unreachable\n\nbb4:                                              ; preds = %bb2, %bb, %bb, %1, %1, %1, %1, %1, %1\n  ret ptr null\n}\n```\nCrashes with the same command line `opt -passes=nary-reassociate --scalar-evolution-use-expensive-range-sharpening`\ngodbolt: https://godbolt.org/z/4d3jo8jTz",
    "author": "danilaml",
    "labels": [
      "llvm:SCEV",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "juliannagele",
        "body": "Thanks, checking!"
      },
      {
        "author": "danilaml",
        "body": "@juliannagele Thanks for looking into it! Do you need any additional info?"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "7c8e05aa45f006401b71b37127537c4682fe16ee"
}