{
  "bug_id": "119393",
  "issue_url": "https://github.com/llvm/llvm-project/issues/119393",
  "bug_type": "crash",
  "base_commit": "13539c219c49c581d6ba5270d09b19da9b1e3975",
  "knowledge_cutoff": "2024-12-10T15:25:03Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "a42aa8f265372a15d31a2af10b548fc239ed4b51",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          13222,
          13230
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::isGatherShuffledSingleRegisterEntry"
      ]
    }
  },
  "patch": "commit a42aa8f265372a15d31a2af10b548fc239ed4b51\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Dec 10 09:19:48 2024 -0800\n\n    [SLP]Fix adjusting of the mask for the fully matched nodes.\n    \n    When checking for the poison elements in the matches node, need to\n    consider the register number, when clearing the corresponding mask\n    element.\n    \n    Fixes #119393\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex c729c6cc9195..d90d7cc8f29e 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -13222,9 +13222,9 @@ BoUpSLP::isGatherShuffledSingleRegisterEntry(\n         copy(CommonMask, Mask.begin());\n       }\n       // Clear undef scalars.\n-      for (int I = 0, Sz = VL.size(); I < Sz; ++I)\n+      for (unsigned I : seq<unsigned>(VL.size()))\n         if (isa<PoisonValue>(VL[I]))\n-          Mask[I] = PoisonMaskElem;\n+          Mask[Part * VL.size() + I] = PoisonMaskElem;\n       return TargetTransformInfo::SK_PermuteSingleSrc;\n     }\n     // No perfect match, just shuffle, so choose the first tree node from the\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/full-match-with-poison-scalar.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-threshold=-200 -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i32 @test() {\nentry:\n  br label %func_135.exit.i\n\nfunc_135.exit.i:                                  ; preds = %entry\n  %g_228.promoted166.i1105.i = phi i32 [ 0, %entry ]\n  %cmp55.i.i1199.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.1.i.i1200.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.2.i.i1201.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.3.i.i1202.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %0 = xor i1 %cmp55.2.i.i1201.i, %cmp55.3.i.i1202.i\n  %1 = xor i1 %cmp55.1.i.i1200.i, %0\n  %2 = xor i1 %cmp55.i.i1199.i, %1\n  %dec.i.i1204.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.1.i.i1200.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.2.i.i1201.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.3.i.i1202.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %3 = xor i1 %cmp55.2.i.i1201.1.i, %cmp55.3.i.i1202.1.i\n  %4 = xor i1 %cmp55.1.i.i1200.1.i, %3\n  %5 = xor i1 %cmp55.i.i1199.1.i, %4\n  %6 = xor i1 %2, %5\n  %dec.i.i1204.1.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.1.i.i1200.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.2.i.i1201.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.3.i.i1202.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %7 = add i32 0, 0\n  %8 = icmp ult i32 %7, 0\n  %9 = xor i1 %cmp55.3.i.i1202.2.i, %8\n  %10 = xor i1 %cmp55.2.i.i1201.2.i, %9\n  %11 = xor i1 %cmp55.1.i.i1200.2.i, %10\n  %12 = xor i1 %cmp55.i.i1199.2.i, %11\n  %13 = xor i1 %12, %6\n  %dec.i.i1204.2.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %cmp55.1.i.i1200.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %cmp55.2.i.i1201.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %14 = xor i1 %cmp55.1.i.i1200.3.i, %cmp55.2.i.i1201.3.i\n  %15 = xor i1 %cmp55.i.i1199.3.i, %14\n  %16 = xor i1 %15, %13\n  %17 = zext i1 %16 to i16\n  br label %if.then.sink.split.i\n\nfor.cond7.preheader.i1132.1.i:                    ; No predecessors!\n  br label %if.then.sink.split.i\n\nif.then.sink.split.i:                             ; preds = %for.cond7.preheader.i1132.1.i, %func_135.exit.i\n  %xor58.5.i.i1203.3.3.sink.i = phi i16 [ 0, %for.cond7.preheader.i1132.1.i ], [ %17, %func_135.exit.i ]\n  ret i32 0\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Assertion `I1 == PoisonMaskElem && \"Expected unused subvectors mask\"' failed.",
    "body": "Reproducer: https://godbolt.org/z/3dahr6Mb4\n```\n; bin/opt -passes=slp-vectorizer reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main() {\nentry:\n  br label %func_135.exit.i\n\nfunc_135.exit.i:\n  %g_228.promoted166.i1105.i = phi i32 [ 0, %entry ]\n  %cmp55.i.i1199.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.1.i.i1200.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.2.i.i1201.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.3.i.i1202.i = icmp ugt i32 %g_228.promoted166.i1105.i, 0\n  %0 = xor i1 %cmp55.2.i.i1201.i, %cmp55.3.i.i1202.i\n  %1 = xor i1 %cmp55.1.i.i1200.i, %0\n  %2 = xor i1 %cmp55.i.i1199.i, %1\n  %dec.i.i1204.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.1.i.i1200.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.2.i.i1201.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %cmp55.3.i.i1202.1.i = icmp ugt i32 %dec.i.i1204.i, 0\n  %3 = xor i1 %cmp55.2.i.i1201.1.i, %cmp55.3.i.i1202.1.i\n  %4 = xor i1 %cmp55.1.i.i1200.1.i, %3\n  %5 = xor i1 %cmp55.i.i1199.1.i, %4\n  %6 = xor i1 %2, %5\n  %dec.i.i1204.1.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.1.i.i1200.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.2.i.i1201.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %cmp55.3.i.i1202.2.i = icmp ugt i32 %dec.i.i1204.1.i, 0\n  %7 = add i32 0, 0\n  %8 = icmp ult i32 %7, 0\n  %9 = xor i1 %cmp55.3.i.i1202.2.i, %8\n  %10 = xor i1 %cmp55.2.i.i1201.2.i, %9\n  %11 = xor i1 %cmp55.1.i.i1200.2.i, %10\n  %12 = xor i1 %cmp55.i.i1199.2.i, %11\n  %13 = xor i1 %12, %6\n  %dec.i.i1204.2.i = add i32 %g_228.promoted166.i1105.i, 0\n  %cmp55.i.i1199.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %cmp55.1.i.i1200.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %cmp55.2.i.i1201.3.i = icmp ugt i32 %dec.i.i1204.2.i, 0\n  %14 = xor i1 %cmp55.1.i.i1200.3.i, %cmp55.2.i.i1201.3.i\n  %15 = xor i1 %cmp55.i.i1199.3.i, %14\n  %16 = xor i1 %15, %13\n  %17 = zext i1 %16 to i16\n  br label %if.then.sink.split.i\n\nfor.cond7.preheader.i1132.1.i:                    ; No predecessors!\n  br label %if.then.sink.split.i\n\nif.then.sink.split.i:                             ; preds = %for.cond7.preheader.i1132.1.i, %func_135.exit.i\n  %xor58.5.i.i1203.3.3.sink.i = phi i16 [ 0, %for.cond7.preheader.i1132.1.i ], [ %17, %func_135.exit.i ]\n  ret i32 0\n}\n```\n```\nopt: /root/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:10913: llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::finalize(llvm::ArrayRef<int>, llvm::ArrayRef<std::pair<const llvm::slpvectorizer::BoUpSLP::TreeEntry*, unsigned int> >, llvm::ArrayRef<int>, unsigned int, llvm::function_ref<void(llvm::Value*&, llvm::SmallVectorImpl<int>&)>): Assertion `I1 == PoisonMaskElem && \"Expected unused subvectors mask\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer <source>\n1.\tRunning pass \"function(slp-vectorizer)\" on module \"<source>\"\n2.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x00000000051c9e58 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x51c9e58)\n #1 0x00000000051c785c SignalHandler(int) Signals.cpp:0:0\n #2 0x000078cea7e42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x000078cea7e969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x000078cea7e42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x000078cea7e287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x000078cea7e2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x000078cea7e39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x00000000041fda54 llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator::finalize(llvm::ArrayRef<int>, llvm::ArrayRef<std::pair<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, unsigned int>>, llvm::ArrayRef<int>, unsigned int, llvm::function_ref<void (llvm::Value*&, llvm::SmallVectorImpl<int>&)>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x41fda54)\n #9 0x00000000042390b0 llvm::InstructionCost llvm::slpvectorizer::BoUpSLP::processBuildVector<llvm::slpvectorizer::BoUpSLP::ShuffleCostEstimator, llvm::InstructionCost, llvm::TargetTransformInfo, llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP, llvm::SmallPtrSetImpl<llvm::Value*>>(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::Type*, llvm::TargetTransformInfo&, llvm::ArrayRef<llvm::Value*>&, llvm::slpvectorizer::BoUpSLP&, llvm::SmallPtrSetImpl<llvm::Value*>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x42390b0)\n#10 0x0000000004243fa7 llvm::slpvectorizer::BoUpSLP::getEntryCost(llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::ArrayRef<llvm::Value*>, llvm::SmallPtrSetImpl<llvm::Value*>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4243fa7)\n#11 0x0000000004277f91 llvm::slpvectorizer::BoUpSLP::getTreeCost(llvm::ArrayRef<llvm::Value*>) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4277f91)\n#12 0x000000000427da60 (anonymous namespace)::HorizontalReduction::tryToReduce(llvm::slpvectorizer::BoUpSLP&, llvm::DataLayout const&, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo const&) SLPVectorizer.cpp:0:0\n#13 0x0000000004280ea9 llvm::SLPVectorizerPass::vectorizeHorReduction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&, llvm::SmallVectorImpl<llvm::WeakTrackingVH>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4280ea9)\n#14 0x000000000428563b llvm::SLPVectorizerPass::vectorizeRootInstruction(llvm::PHINode*, llvm::Instruction*, llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\n#15 0x0000000004289c9f llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4289c9f)\n#16 0x0000000004290786 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#17 0x00000000042912cb llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x42912cb)\n#18 0x0000000002fdbfee llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x2fdbfee)\n#19 0x0000000004fc8d00 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4fc8d00)\n#20 0x0000000000e3b51e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe3b51e)\n#21 0x0000000004fc761b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4fc761b)\n#22 0x0000000000e3abae llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe3abae)\n#23 0x0000000004fc7020 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4fc7020)\n#24 0x00000000009177ca llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9177ca)\n#25 0x0000000000909e49 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x909e49)\n#26 0x000078cea7e29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#27 0x000078cea7e29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#28 0x0000000000901705 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x901705)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "dtcxzyw",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "b8703369daf777706196ff914c0376c27adde3cf"
}