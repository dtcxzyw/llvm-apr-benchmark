{
  "bug_id": "119002",
  "issue_url": "https://github.com/llvm/llvm-project/issues/119002",
  "bug_type": "crash",
  "base_commit": "6797b0f0c002c9f3dda7a2b502ddf33e2c8f6777",
  "knowledge_cutoff": "2024-12-06T17:29:17Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "376dad72abb4960cd93e37e3e98de3950b5c3dfe",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          16215,
          16220
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit 376dad72abb4960cd93e37e3e98de3950b5c3dfe\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Dec 6 13:39:05 2024 -0800\n\n    [SLP]Move resulting vector before inert point, if the late generated buildvector fully matched\n    \n    If the perfect diamond match was detected for the postponed buildvectors\n    and the vector for the previous node comes after the current node, need\n    to move the vector register before the current inserting point to\n    prevent compiler crash.\n    \n    Fixes #119002\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 51841a842ce0..50590e51ae0e 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -16215,6 +16215,11 @@ BoUpSLP::vectorizeTree(const ExtraValueToDebugLocsMap &ExternallyUsedValues,\n     }\n     Builder.SetCurrentDebugLocation(UserI->getDebugLoc());\n     Value *Vec = vectorizeTree(TE, /*PostponedPHIs=*/false);\n+    if (auto *VecI = dyn_cast<Instruction>(Vec);\n+        VecI && VecI->getParent() == Builder.GetInsertBlock() &&\n+        Builder.GetInsertPoint()->comesBefore(VecI))\n+      VecI->moveBeforePreserving(*Builder.GetInsertBlock(),\n+                                 Builder.GetInsertPoint());\n     if (Vec->getType() != PrevVec->getType()) {\n       assert(Vec->getType()->isIntOrIntVectorTy() &&\n              PrevVec->getType()->isIntOrIntVectorTy() &&\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/perfect-matched-reused-bv.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mattr=+avx512f < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb4, %bb\n  %phi = phi i32 [ 0, %bb ], [ %add6, %bb4 ]\n  %phi2 = phi i32 [ 0, %bb ], [ %add, %bb4 ]\n  %or = or i32 %phi2, 0\n  %or3 = or i32 %phi, 0\n  br i1 false, label %bb7, label %bb4\n\nbb4:                                              ; preds = %bb1\n  %add = add i32 0, 0\n  %add5 = add i32 0, 0\n  %add6 = add i32 %phi, 0\n  br i1 false, label %bb7, label %bb1\n\nbb7:                                              ; preds = %bb4, %bb1\n  %phi8 = phi i32 [ %or, %bb1 ], [ %add5, %bb4 ]\n  %phi9 = phi i32 [ %or3, %bb1 ], [ %add6, %bb4 ]\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Instruction does not dominate all uses! LLVM ERROR: Broken module found, compilation aborted! (yet another)",
    "body": "To reproduce run the test below with -passes slp-vectorizer\n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @wombat() #0 gc \"statepoint-example\" {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb4, %bb\n  %phi = phi i32 [ 0, %bb ], [ %add6, %bb4 ]\n  %phi2 = phi i32 [ 0, %bb ], [ %add, %bb4 ]\n  %or = or i32 %phi2, 0\n  %or3 = or i32 %phi, 0\n  br i1 false, label %bb7, label %bb4\n\nbb4:                                              ; preds = %bb1\n  %add = add i32 0, 0\n  %add5 = add i32 0, 0\n  %add6 = add i32 %phi, 0\n  br i1 false, label %bb7, label %bb1\n\nbb7:                                              ; preds = %bb4, %bb1\n  %phi8 = phi i32 [ %or, %bb1 ], [ %add5, %bb4 ]\n  %phi9 = phi i32 [ %or3, %bb1 ], [ %add6, %bb4 ]\n  ret void\n}\n\nattributes #0 = { \"target-features\"=\"+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,-amx-fp8,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx512ifma,+xsave,+sse4.2,-tsxldtrk,-sm3,-ptwrite,-widekl,-movrs,+invpcid,+64bit,+xsavec,-avx10.1-512,-avx512vpopcntdq,+cmov,-avx512vp2intersect,+avx512cd,+movbe,-avxvnniint8,-ccmp,-amx-int8,-kl,-avx10.1-256,+evex512,-avxvnni,+rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-sha512,-vpclmulqdq,+avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-avx10.2-256,-gfni,-avxvnniint16,-amx-fp16,-zu,-ndd,+xsaveopt,+rdrnd,+avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,+avx512bw,+sse3,+pku,-nf,-amx-tf32,-amx-avx512,+fsgsbase,-clzero,-mwaitx,-lwp,+lzcnt,-sha,-movdir64b,-ppx,-wbnoinvd,-enqcmd,-amx-transpose,-avx10.2-512,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-amx-movrs,-rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,+avx512dq,-sse4a,-avx512f\" }\n```\nReproducer: https://godbolt.org/z/Kqddzds1c\n\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes slp-vectorizer <source>\n1.\tRunning pass \"verify\" on module \"<source>\"\n #0 0x00000000051b4a48 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x51b4a48)\n #1 0x00000000051b243c SignalHandler(int) Signals.cpp:0:0\n #2 0x00007c6fb5442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007c6fb54969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007c6fb5442476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007c6fb54287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00000000007e2469 llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\n #7 0x00000000050f32d8 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x50f32d8)\n #8 0x0000000004ff2498 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4ff2498)\n #9 0x00000000009057ae llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9057ae)\n#10 0x0000000004fb1d10 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4fb1d10)\n#11 0x0000000000910d7a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x910d7a)\n#12 0x00000000009033f9 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9033f9)\n#13 0x00007c6fb5429d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#14 0x00007c6fb5429e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#15 0x00000000008facde _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8facde)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  }
}