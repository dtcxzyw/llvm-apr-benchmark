{
  "bug_id": "126085",
  "issue_url": "https://github.com/llvm/llvm-project/issues/126085",
  "bug_type": "crash",
  "base_commit": "6575154b6eca80097d77db69ce1ee60c72854ee6",
  "knowledge_cutoff": "2025-02-06T15:41:55Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "eb2b453eb73dfe0b8cf516dfb4d568c0b858d1fa",
    "components": [
      "VectorCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          3210,
          3216
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "VectorCombine::foldInsExtVectorToShuffle"
      ]
    }
  },
  "patch": "commit eb2b453eb73dfe0b8cf516dfb4d568c0b858d1fa\nAuthor: Simon Pilgrim <llvm-dev@redking.me.uk>\nDate:   Thu Feb 6 16:40:48 2025 +0000\n\n    [VectorCombine] foldInsExtVectorToShuffle - ensure we call getShuffleCost with the input operand type, not the result\n    \n    Typo in #121216\n    \n    Fixes #126085\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex 4f46b621c8a7..746742e14d08 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -3210,7 +3210,7 @@ bool VectorCombine::foldInsExtVectorToShuffle(Instruction &I) {\n       ExtToVecMask[0] = ExtIdx;\n     // Add cost for expanding or narrowing\n     NewCost = TTI.getShuffleCost(TargetTransformInfo::SK_PermuteSingleSrc,\n-                                 DstVecTy, ExtToVecMask, CostKind);\n+                                 SrcVecTy, ExtToVecMask, CostKind);\n     NewCost += TTI.getShuffleCost(SK, DstVecTy, Mask, CostKind);\n   }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/X86/pr126085.ll",
      "commands": [
        "opt < %s -passes=vector-combine -S -mtriple=x86_64--"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(ptr %a0) {\n;\n  %load = load <16 x i8>, ptr %a0, align 1\n  %shuf = shufflevector <16 x i8> %load, <16 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>\n  %elt = extractelement <16 x i8> %load, i64 11\n  %ins = insertelement <4 x i8> %shuf, i8 %elt, i64 1\n  %res = bitcast <4 x i8> %ins to i32\n  ret i32 %res\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[VectorCombine] Assertion `I >= 0 && I < (NumOpElts * 2) && \"Out-of-bounds shuffle mask element\"' failed.",
    "body": "Reproducer:\n```\n; bin/opt -passes=vector-combine reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @test(ptr readonly captures(none) dereferenceable(16) %0) {\n  %2 = load <16 x i8>, ptr %0, align 1\n  %.sroa.01.2.vec.insert = shufflevector <16 x i8> %2, <16 x i8> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>\n  %3 = extractelement <16 x i8> %2, i64 11\n  %.sroa.01.3.vec.insert = insertelement <4 x i8> %.sroa.01.2.vec.insert, i8 %3, i64 1\n  %4 = bitcast <4 x i8> %.sroa.01.3.vec.insert to i32\n  ret i32 %4\n}\n```\n```\nopt: /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/lib/IR/Instructions.cpp:1890: bool isSingleSourceMaskImpl(llvm::ArrayRef<int>, int): Assertion `I >= 0 && I < (NumOpElts * 2) && \"Out-of-bounds shuffle mask element\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.      Program arguments: bin/opt -passes=vector-combine reduced.ll -S\n1.      Running pass \"function(vector-combine)\" on module \"reduced.ll\"\n2.      Running pass \"vector-combine\" on function \"test\"\n #0 0x00007f4379a17152 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x217152)\n #1 0x00007f4379a1403f llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.21.0git+0x21403f)\n #2 0x00007f4379a1417c SignalHandler(int) Signals.cpp:0:0\n #3 0x00007f4379442520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f43794969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f43794969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f43794969fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f4379442476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f43794287f3 abort ./stdlib/abort.c:81:7\n #9 0x00007f437942871b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f4379439e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x00007f4370e71a16 isSingleSourceMaskImpl(llvm::ArrayRef<int>, int) Instructions.cpp:0:0\n#12 0x00007f4370e7c3dc llvm::ShuffleVectorInst::isReverseMask(llvm::ArrayRef<int>, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x27c3dc)\n#13 0x00007f43788933f2 llvm::X86TTIImpl::getShuffleCost(llvm::TargetTransformInfo::ShuffleKind, llvm::VectorType*, llvm::ArrayRef<int>, llvm::TargetTransformInfo::TargetCostKind, int, llvm::VectorType*, llvm::ArrayRef<llvm::Value const*>, llvm::Instruction const*) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0x4933f2)\n#14 0x00007f43716ddf0c llvm::TargetTransformInfo::getShuffleCost(llvm::TargetTransformInfo::ShuffleKind, llvm::VectorType*, llvm::ArrayRef<int>, llvm::TargetTransformInfo::TargetCostKind, int, llvm::VectorType*, llvm::ArrayRef<llvm::Value const*>, llvm::Instruction const*) const (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMAnalysis.so.21.0git+0x4ddf0c)\n#15 0x00007f437224f6e7 (anonymous namespace)::VectorCombine::foldInsExtVectorToShuffle(llvm::Instruction&) VectorCombine.cpp:0:0\n#16 0x00007f4372256116 (anonymous namespace)::VectorCombine::run()::'lambda'(llvm::Instruction&)::operator()(llvm::Instruction&) const VectorCombine.cpp:0:0\n#17 0x00007f437225787f llvm::VectorCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMVectorize.so.21.0git+0x25787f)\n#18 0x00007f4373f225c5 llvm::detail::PassModel<llvm::Function, llvm::VectorCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMPasses.so.21.0git+0x1225c5)\n#19 0x00007f4370f10cad llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x310cad)\n#20 0x00007f43784dc235 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdc235)\n#21 0x00007f4370f0ee75 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x30ee75)\n#22 0x00007f43784dcbf5 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.21.0git+0xdcbf5)\n#23 0x00007f4370f0fb2a llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.21.0git+0x30fb2a)\n#24 0x00007f4379ba3dc6 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x2fdc6)\n#25 0x00007f4379baf5c2 optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.21.0git+0x3b5c2)\n#26 0x00007f4379429d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#27 0x00007f4379429e40 call_init ./csu/../csu/libc-start.c:128:20\n#28 0x00007f4379429e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#29 0x00006293bc5a5095 _start (bin/opt+0x1095)\nAborted (core dumped)\n```\n\nTriggered by https://github.com/llvm/llvm-project/pull/121216. cc @ParkHanbum @RKSimon \nReported by https://github.com/dtcxzyw/llvm-opt-benchmark/issues/2093\n\n",
    "author": "dtcxzyw",
    "labels": [
      "crash-on-valid",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "RKSimon",
        "body": "Found the problem - fix incoming"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}