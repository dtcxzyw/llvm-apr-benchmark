{
  "bug_id": "82884",
  "issue_url": "https://github.com/llvm/llvm-project/issues/82884",
  "bug_type": "miscompilation",
  "base_commit": "0c7a605ada6cb392e6e8c16dbccf2b7e59017399",
  "knowledge_cutoff": "2024-02-24T15:15:12Z",
  "lit_test_dir": [
    "llvm/test/Transforms/GVN"
  ],
  "hints": {
    "fix_commit": "892b4beeac50920e630f10905b2916295e2eb6d8",
    "components": [
      "Local"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/Local.cpp": [
        [
          3369,
          3379
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/Local.cpp": [
        "llvm::patchReplacementInstruction"
      ]
    }
  },
  "patch": "commit 892b4beeac50920e630f10905b2916295e2eb6d8\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Feb 26 15:55:56 2024 +0800\n\n    [GVN] Drop nsw/nuw flags when replacing the result of a with.overflow intrinsic with a overflowing binary operator (#82935)\n    \n    Alive2: https://alive2.llvm.org/ce/z/gyL7mn\n    Fixes https://github.com/llvm/llvm-project/issues/82884.\n\ndiff --git a/llvm/lib/Transforms/Utils/Local.cpp b/llvm/lib/Transforms/Utils/Local.cpp\nindex 1373f5f7f449..075eeb5b19fd 100644\n--- a/llvm/lib/Transforms/Utils/Local.cpp\n+++ b/llvm/lib/Transforms/Utils/Local.cpp\n@@ -3369,11 +3369,17 @@ void llvm::patchReplacementInstruction(Instruction *I, Value *Repl) {\n \n   // Patch the replacement so that it is not more restrictive than the value\n   // being replaced.\n+  WithOverflowInst *UnusedWO;\n+  // When replacing the result of a llvm.*.with.overflow intrinsic with a\n+  // overflowing binary operator, nuw/nsw flags may no longer hold.\n+  if (isa<OverflowingBinaryOperator>(ReplInst) &&\n+      match(I, m_ExtractValue<0>(m_WithOverflowInst(UnusedWO))))\n+    ReplInst->dropPoisonGeneratingFlags();\n   // Note that if 'I' is a load being replaced by some operation,\n   // for example, by an arithmetic operation, then andIRFlags()\n   // would just erase all math flags from the original arithmetic\n   // operation, which is clearly not wanted and not needed.\n-  if (!isa<LoadInst>(I))\n+  else if (!isa<LoadInst>(I))\n     ReplInst->andIRFlags(I);\n \n   // FIXME: If both the original and replacement value are part of the\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/GVN/pr82884.ll",
      "commands": [
        "opt -S -passes=gvn < %s"
      ],
      "tests": [
        {
          "test_name": "pr82884",
          "test_body": "define i32 @pr82884(i32 %x) {\n  %mul = mul nuw nsw i32 %x, %x\n  call void @use(i32 %mul)\n  %mul2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %x, i32 %x)\n  %ret = extractvalue { i32, i1 } %mul2, 0\n  ret i32 %ret\n}\n\ndeclare void @use(i32)\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[GVN] GVNPass forgets to remove poison generating flags",
    "body": "```llvm\r\n; ModuleID = '1851685_debug_2.e4807e3094afc004-cgu.0'\r\nsource_filename = \"1851685_debug_2.e4807e3094afc004-cgu.0\"\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-unknown-linux-gnu\"\r\n\r\n%Adt58 = type { %Adt50 }\r\n%Adt50 = type { { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, { i16, i8, [5 x i8], i64 }, [8 x i32], { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr, [7 x i32], [3 x i32] }\r\n%Adt53 = type { { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] } }\r\n%Adt51 = type { { i64, i8, [7 x i8] }, { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, %Adt50, [8 x i32], i64, i64, [6 x i8], [10 x i8] }\r\n%Adt59 = type { { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, i64, ptr, i32, i16, [1 x i8], [1 x i8] }\r\n\r\n@vtable.0 = private unnamed_addr constant <{ ptr, [16 x i8], ptr, ptr, ptr }> <{ ptr @\"_ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17he9a486ff76ea726fE\", [16 x i8] c\"\\08\\00\\00\\00\\00\\00\\00\\00\\08\\00\\00\\00\\00\\00\\00\\00\", ptr @\"_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h91c73705548d2f78E\", ptr @\"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1cb78ba075200b22E\", ptr @\"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1cb78ba075200b22E\" }>, align 8\r\n@alloc_2cdd8ac758b4c372b56d8683306290e0 = private unnamed_addr constant <{ [15 x i8] }> <{ [15 x i8] c\"hi:%ld lo:%ld\\0A\\00\" }>, align 1\r\n\r\n; std::sys_common::backtrace::__rust_begin_short_backtrace\r\n; Function Attrs: noinline nonlazybind uwtable\r\ndefine internal void @_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h176fc8086015470dE(ptr %f) unnamed_addr #0 {\r\nstart:\r\n; call core::ops::function::FnOnce::call_once\r\n  call void @_ZN4core3ops8function6FnOnce9call_once17h23c7757b8dc992b5E(ptr %f)\r\n  call void asm sideeffect \"\", \"~{memory}\"(), !srcloc !4\r\n  ret void\r\n}\r\n\r\n; std::rt::lang_start::{{closure}}\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal i32 @\"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1cb78ba075200b22E\"(ptr align 8 %_1) unnamed_addr #2 {\r\nstart:\r\n  %self = alloca i8, align 1\r\n  %_4 = load ptr, ptr %_1, align 8, !nonnull !5, !noundef !5\r\n; call std::sys_common::backtrace::__rust_begin_short_backtrace\r\n  call void @_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h176fc8086015470dE(ptr %_4)\r\n; call <() as std::process::Termination>::report\r\n  %0 = call i8 @\"_ZN54_$LT$$LP$$RP$$u20$as$u20$std..process..Termination$GT$6report17hb8b4bfb25c4e0e48E\"()\r\n  store i8 %0, ptr %self, align 1\r\n  %_6 = load i8, ptr %self, align 1, !noundef !5\r\n  %_0 = zext i8 %_6 to i32\r\n  ret i32 %_0\r\n}\r\n\r\n; core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal i32 @\"_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h91c73705548d2f78E\"(ptr %_1) unnamed_addr #2 {\r\nstart:\r\n  %_2 = alloca {}, align 1\r\n  %0 = load ptr, ptr %_1, align 8, !nonnull !5, !noundef !5\r\n; call core::ops::function::FnOnce::call_once\r\n  %_0 = call i32 @_ZN4core3ops8function6FnOnce9call_once17ha42f99eeb4429a31E(ptr %0)\r\n  ret i32 %_0\r\n}\r\n\r\n; core::ops::function::FnOnce::call_once\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal void @_ZN4core3ops8function6FnOnce9call_once17h23c7757b8dc992b5E(ptr %_1) unnamed_addr #2 {\r\nstart:\r\n  %_2 = alloca {}, align 1\r\n  call void %_1()\r\n  ret void\r\n}\r\n\r\n; core::ops::function::FnOnce::call_once\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal i32 @_ZN4core3ops8function6FnOnce9call_once17ha42f99eeb4429a31E(ptr %0) unnamed_addr #2 personality ptr @rust_eh_personality {\r\nstart:\r\n  %1 = alloca { ptr, i32, [1 x i32] }, align 8\r\n  %_2 = alloca {}, align 1\r\n  %_1 = alloca ptr, align 8\r\n  store ptr %0, ptr %_1, align 8\r\n; invoke std::rt::lang_start::{{closure}}\r\n  %_0 = invoke i32 @\"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h1cb78ba075200b22E\"(ptr align 8 %_1)\r\n          to label %bb1 unwind label %cleanup\r\n\r\nbb3:                                              ; preds = %cleanup\r\n  %2 = load ptr, ptr %1, align 8, !noundef !5\r\n  %3 = getelementptr inbounds i8, ptr %1, i64 8\r\n  %4 = load i32, ptr %3, align 8, !noundef !5\r\n  %5 = insertvalue { ptr, i32 } poison, ptr %2, 0\r\n  %6 = insertvalue { ptr, i32 } %5, i32 %4, 1\r\n  resume { ptr, i32 } %6\r\n\r\ncleanup:                                          ; preds = %start\r\n  %7 = landingpad { ptr, i32 }\r\n          cleanup\r\n  %8 = extractvalue { ptr, i32 } %7, 0\r\n  %9 = extractvalue { ptr, i32 } %7, 1\r\n  store ptr %8, ptr %1, align 8\r\n  %10 = getelementptr inbounds i8, ptr %1, i64 8\r\n  store i32 %9, ptr %10, align 8\r\n  br label %bb3\r\n\r\nbb1:                                              ; preds = %start\r\n  ret i32 %_0\r\n}\r\n\r\n; core::ptr::drop_in_place<std::rt::lang_start<()>::{{closure}}>\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal void @\"_ZN4core3ptr85drop_in_place$LT$std..rt..lang_start$LT$$LP$$RP$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$17he9a486ff76ea726fE\"(ptr align 8 %_1) unnamed_addr #2 {\r\nstart:\r\n  ret void\r\n}\r\n\r\n; core::hint::black_box\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal void @_ZN4core4hint9black_box17h7d48bc7feb0af96eE(ptr sret({ i16, i8, [5 x i8], i64 }) align 8 %_0, ptr align 8 %dummy) unnamed_addr #2 {\r\nstart:\r\n  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_0, ptr align 8 %dummy, i64 16, i1 false)\r\n  call void asm sideeffect \"\", \"r,~{memory}\"(ptr %_0), !srcloc !4\r\n  ret void\r\n}\r\n\r\n; core::hint::black_box\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal void @_ZN4core4hint9black_box17ha89c3f9cb79c398cE() unnamed_addr #2 {\r\nstart:\r\n  call void asm sideeffect \"\", \"~{memory}\"(), !srcloc !4\r\n  ret void\r\n}\r\n\r\n; <() as std::process::Termination>::report\r\n; Function Attrs: inlinehint nonlazybind uwtable\r\ndefine internal i8 @\"_ZN54_$LT$$LP$$RP$$u20$as$u20$std..process..Termination$GT$6report17hb8b4bfb25c4e0e48E\"() unnamed_addr #2 {\r\nstart:\r\n  ret i8 0\r\n}\r\n\r\n; _1851685_debug_2::enter\r\n; Function Attrs: nonlazybind uwtable\r\ndefine internal void @_ZN16_1851685_debug_25enter17h7e9cae7a334c5019E() unnamed_addr #1 {\r\nstart:\r\n  %_3 = alloca [6 x i32], align 4\r\n  %_2 = alloca { i16, i8, [5 x i8], i64 }, align 8\r\n  %0 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_2, i32 0, i32 1\r\n  store i8 0, ptr %0, align 2\r\n  store i16 0, ptr %_2, align 8\r\n  %1 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_2, i32 0, i32 3\r\n  store i64 0, ptr %1, align 8\r\n  %2 = getelementptr inbounds [6 x i32], ptr %_3, i64 0, i64 0\r\n  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 24, i1 false)\r\n; call _1851685_debug_2::fn14\r\n  call void @_ZN16_1851685_debug_24fn1417h1fc74d4c311bb23aE(ptr align 8 %_2, ptr align 4 %_3)\r\n  ret void\r\n}\r\n\r\n; _1851685_debug_2::fn14\r\n; Function Attrs: nonlazybind uwtable\r\ndefine internal void @_ZN16_1851685_debug_24fn1417h1fc74d4c311bb23aE(ptr align 8 %_1, ptr align 4 %_2) unnamed_addr #1 {\r\nstart:\r\n  %_16 = alloca i8, align 1\r\n  %_15 = alloca %Adt58, align 16\r\n  %_14 = alloca { i16, i8, [5 x i8], i64 }, align 8\r\n  %_13 = alloca { { i16, i8, [5 x i8], i64 }, [6 x i32], i32, [1 x i32], [4 x i64] }, align 8\r\n  %_12 = alloca %Adt53, align 16\r\n  %_10 = alloca %Adt51, align 16\r\n  %_7 = alloca %Adt59, align 8\r\n  %_5 = alloca i128, align 16\r\n  %0 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  store i8 84, ptr %0, align 2\r\n  store i16 -25440, ptr %_1, align 8\r\n  %1 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  store i64 -9223372036854775808, ptr %1, align 8\r\n  br label %bb1\r\n\r\nbb1:                                              ; preds = %bb4, %start\r\n  store double 0x41A15ED4AE000000, ptr %_7, align 8\r\n  %2 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 4\r\n  %3 = load i16, ptr %_1, align 8, !noundef !5\r\n  %4 = urem i16 %3, -3470\r\n  store i16 %4, ptr %2, align 4\r\n  %5 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 3029947793098001587, i64 -3638983068927244405)\r\n  %6 = extractvalue { i64, i1 } %5, 0\r\n  %7 = extractvalue { i64, i1 } %5, 1\r\n  store i64 %6, ptr %_10, align 16\r\n  %8 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %9 = zext i1 %7 to i8\r\n  store i8 %9, ptr %8, align 8\r\n  %10 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %11 = load i8, ptr %10, align 8, !range !6, !noundef !5\r\n  %12 = trunc i8 %11 to i1\r\n  %13 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %14 = load i8, ptr %13, align 8, !range !6, !noundef !5\r\n  %15 = trunc i8 %14 to i1\r\n  %_9 = xor i1 %12, %15\r\n  %16 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 2\r\n  store ptr %_10, ptr %16, align 8\r\n  %17 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 1\r\n  store i64 -1498547728408969452, ptr %17, align 8\r\n  %18 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %19 = getelementptr inbounds %Adt50, ptr %18, i32 0, i32 2\r\n  %20 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 0\r\n  store i32 168516996, ptr %20, align 16\r\n  %21 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 1\r\n  store i32 245529160, ptr %21, align 4\r\n  %22 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 2\r\n  store i32 1223136339, ptr %22, align 8\r\n  %23 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 3\r\n  store i32 1622354325, ptr %23, align 4\r\n  %24 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 4\r\n  store i32 -1002348909, ptr %24, align 16\r\n  %25 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 5\r\n  store i32 1976405017, ptr %25, align 4\r\n  %26 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 6\r\n  store i32 -1442509311, ptr %26, align 8\r\n  %27 = getelementptr inbounds [8 x i32], ptr %19, i64 0, i64 7\r\n  store i32 1165829790, ptr %27, align 4\r\n  %28 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %29 = getelementptr inbounds %Adt50, ptr %28, i32 0, i32 3\r\n  %30 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %29, i32 0, i32 2\r\n  %31 = load double, ptr %_7, align 8, !noundef !5\r\n  %32 = fneg double %31\r\n  store double %32, ptr %30, align 16\r\n  %33 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  %34 = load i64, ptr %33, align 8, !noundef !5\r\n  %_8 = xor i64 %34, -1\r\n  store i64 7564290096487423208, ptr %_10, align 16\r\n  %35 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %36 = zext i1 %_9 to i8\r\n  store i8 %36, ptr %35, align 8\r\n  %37 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %38 = getelementptr inbounds %Adt50, ptr %37, i32 0, i32 3\r\n  %39 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %38, i32 0, i32 1\r\n  store i64 %_8, ptr %39, align 16\r\n  %40 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %41 = load i64, ptr %_10, align 16, !noundef !5\r\n  store i64 %41, ptr %40, align 8\r\n  %42 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %43 = getelementptr inbounds %Adt50, ptr %42, i32 0, i32 3\r\n  %44 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %43, i32 0, i32 1\r\n  %45 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %44, i32 0, i32 5\r\n; call _1851685_debug_2::fn15\r\n  %46 = call i128 @_ZN16_1851685_debug_24fn1517hfe3f07cbb5faefb0E()\r\n  store i128 %46, ptr %45, align 16\r\n  %47 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %48 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %47, i32 0, i32 1\r\n  %49 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %50 = load i64, ptr %49, align 8, !noundef !5\r\n  %51 = trunc i64 %50 to i16\r\n  store i16 %51, ptr %48, align 16\r\n  %52 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 4\r\n  %53 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 1\r\n  %54 = load i64, ptr %53, align 8, !noundef !5\r\n  store i64 %54, ptr %52, align 16\r\n  %55 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %56 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %57 = getelementptr inbounds %Adt50, ptr %56, i32 0, i32 3\r\n  %58 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %57, i32 0, i32 1\r\n  %59 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %58, i32 0, i32 5\r\n  %60 = load i128, ptr %59, align 16, !noundef !5\r\n  %61 = ashr i128 %60, 0\r\n  store i128 %61, ptr %55, align 16\r\n  %62 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %63 = getelementptr inbounds %Adt50, ptr %62, i32 0, i32 3\r\n  %64 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %63, i32 0, i32 2\r\n  %65 = load double, ptr %64, align 16, !noundef !5\r\n  %66 = fneg double %65\r\n  store double %66, ptr %_7, align 8\r\n  %67 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %68 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %67, i32 0, i32 2\r\n  %69 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %70 = load i8, ptr %69, align 8, !range !6, !noundef !5\r\n  %71 = trunc i8 %70 to i1\r\n  %72 = xor i1 %71, true\r\n  %73 = zext i1 %72 to i8\r\n  store i8 %73, ptr %68, align 2\r\n  %74 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %75 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %74, i32 0, i32 4\r\n  %76 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %77 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %76, i32 0, i32 1\r\n  %78 = load i16, ptr %77, align 16, !noundef !5\r\n  %79 = getelementptr inbounds [1 x i16], ptr %75, i64 0, i64 0\r\n  store i16 %78, ptr %79, align 4\r\n  %80 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %81 = getelementptr inbounds %Adt50, ptr %80, i32 0, i32 1\r\n  %82 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %81, i32 0, i32 1\r\n  %83 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  %84 = load i8, ptr %83, align 2, !noundef !5\r\n  store i8 %84, ptr %82, align 2\r\n  %85 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 0\r\n  store i32 -154507050, ptr %85, align 4\r\n  %86 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 1\r\n  store i32 2086635898, ptr %86, align 4\r\n  %87 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 2\r\n  store i32 468582002, ptr %87, align 4\r\n  %88 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 3\r\n  store i32 -21184342, ptr %88, align 4\r\n  %89 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 4\r\n  store i32 -1173629817, ptr %89, align 4\r\n  %90 = getelementptr inbounds [6 x i32], ptr %_2, i64 0, i64 5\r\n  store i32 -2078649110, ptr %90, align 4\r\n  %91 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  store i128 0, ptr %91, align 16\r\n  %92 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %_12, i32 0, i32 2\r\n  %93 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %94 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %93, i32 0, i32 2\r\n  %95 = load i8, ptr %94, align 2, !range !6, !noundef !5\r\n  %96 = trunc i8 %95 to i1\r\n  %97 = zext i1 %96 to i8\r\n  store i8 %97, ptr %92, align 2\r\n  %98 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %99 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %98, i32 0, i32 1\r\n  %100 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %101 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %100, i32 0, i32 1\r\n  %102 = load i16, ptr %101, align 16, !noundef !5\r\n  %103 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %104 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %103, i32 0, i32 1\r\n  %105 = load i16, ptr %104, align 16, !noundef !5\r\n  %106 = mul i16 %102, %105\r\n  store i16 %106, ptr %99, align 16\r\n  %107 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 3\r\n  store i32 630181660, ptr %107, align 8\r\n  %108 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 3\r\n  %109 = load i32, ptr %108, align 8, !noundef !5\r\n  %110 = uitofp i32 %109 to double\r\n  store double %110, ptr %_7, align 8\r\n  %_11 = sub i64 0, %_8\r\n  %111 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %112 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %113 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %112, i32 0, i32 1\r\n  %114 = load i16, ptr %113, align 16, !noundef !5\r\n  %115 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %111, i32 0, i32 1\r\n  store i16 %114, ptr %115, align 16\r\n  %116 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %117 = load i128, ptr %116, align 16, !noundef !5\r\n  store i128 %117, ptr %111, align 16\r\n  %118 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %111, i32 0, i32 2\r\n  %119 = zext i1 %_9 to i8\r\n  store i8 %119, ptr %118, align 2\r\n  %120 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %121 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %120, i32 0, i32 4\r\n  %122 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %111, i32 0, i32 4\r\n  %123 = load i16, ptr %121, align 4\r\n  store i16 %123, ptr %122, align 4\r\n  %124 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %125 = load i64, ptr %124, align 8, !noundef !5\r\n  %126 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %127 = load i64, ptr %126, align 8, !noundef !5\r\n  %128 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %125, i64 %127)\r\n  %129 = extractvalue { i64, i1 } %128, 0\r\n  %130 = extractvalue { i64, i1 } %128, 1\r\n  store i64 %129, ptr %_10, align 16\r\n  %131 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %132 = zext i1 %130 to i8\r\n  store i8 %132, ptr %131, align 8\r\n  br label %bb3\r\n\r\nbb3:                                              ; preds = %bb6, %bb1\r\n  %133 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %134 = getelementptr inbounds %Adt50, ptr %133, i32 0, i32 3\r\n  %135 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %134, i32 0, i32 2\r\n  %136 = load double, ptr %_7, align 8, !noundef !5\r\n  %137 = fdiv double %136, 0x92917F04BFA33\r\n  store double %137, ptr %135, align 16\r\n  %138 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 5\r\n  store i64 -6496701646011298800, ptr %138, align 8\r\n  %139 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %140 = getelementptr inbounds %Adt50, ptr %139, i32 0, i32 1\r\n  %141 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %140, i32 0, i32 1\r\n  %142 = load i8, ptr %141, align 2, !noundef !5\r\n  %143 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  store i8 %142, ptr %143, align 2\r\n  %144 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 4\r\n  %145 = load i16, ptr %144, align 4, !noundef !5\r\n  store i16 %145, ptr %_1, align 8\r\n  %146 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  store i64 %_11, ptr %146, align 8\r\n  %147 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %148 = getelementptr inbounds %Adt50, ptr %147, i32 0, i32 3\r\n  %149 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %148, i32 0, i32 1\r\n  %150 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %149, i32 0, i32 2\r\n  %151 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 3\r\n  %152 = load i32, ptr %151, align 8, !noundef !5\r\n  store i32 %152, ptr %150, align 16\r\n  %153 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %154 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %153, i32 0, i32 2\r\n  %155 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %156 = load i128, ptr %155, align 16, !noundef !5\r\n  %157 = icmp sge i128 %156, 0\r\n  %158 = zext i1 %157 to i8\r\n  store i8 %158, ptr %154, align 2\r\n  %159 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %160 = getelementptr inbounds %Adt50, ptr %159, i32 0, i32 1\r\n  %161 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %160, i32 0, i32 3\r\n  %162 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  %163 = load i64, ptr %162, align 8, !noundef !5\r\n  %164 = and i64 %163, %_8\r\n  store i64 %164, ptr %161, align 8\r\n  %165 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 6\r\n  %166 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %167 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %166, i32 0, i32 2\r\n  %168 = load i8, ptr %167, align 2, !range !6, !noundef !5\r\n  %169 = trunc i8 %168 to i1\r\n  %170 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 0\r\n  %171 = zext i1 %169 to i8\r\n  store i8 %171, ptr %170, align 16\r\n  %172 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %173 = load i8, ptr %172, align 8, !range !6, !noundef !5\r\n  %174 = trunc i8 %173 to i1\r\n  %175 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 1\r\n  %176 = zext i1 %174 to i8\r\n  store i8 %176, ptr %175, align 1\r\n  %177 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %_12, i32 0, i32 2\r\n  %178 = load i8, ptr %177, align 2, !range !6, !noundef !5\r\n  %179 = trunc i8 %178 to i1\r\n  %180 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 2\r\n  %181 = zext i1 %179 to i8\r\n  store i8 %181, ptr %180, align 2\r\n  %182 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %_12, i32 0, i32 2\r\n  %183 = load i8, ptr %182, align 2, !range !6, !noundef !5\r\n  %184 = trunc i8 %183 to i1\r\n  %185 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 3\r\n  %186 = zext i1 %184 to i8\r\n  store i8 %186, ptr %185, align 1\r\n  %187 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %188 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %187, i32 0, i32 2\r\n  %189 = load i8, ptr %188, align 2, !range !6, !noundef !5\r\n  %190 = trunc i8 %189 to i1\r\n  %191 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 4\r\n  %192 = zext i1 %190 to i8\r\n  store i8 %192, ptr %191, align 4\r\n  %193 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %194 = load i8, ptr %193, align 8, !range !6, !noundef !5\r\n  %195 = trunc i8 %194 to i1\r\n  %196 = getelementptr inbounds [6 x i8], ptr %165, i64 0, i64 5\r\n  %197 = zext i1 %195 to i8\r\n  store i8 %197, ptr %196, align 1\r\n  %198 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %199 = getelementptr inbounds %Adt50, ptr %198, i32 0, i32 3\r\n  %200 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %199, i32 0, i32 1\r\n  %201 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %200, i32 0, i32 5\r\n  %202 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %203 = load i128, ptr %202, align 16, !noundef !5\r\n  store i128 %203, ptr %201, align 16\r\n  %204 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 2\r\n  %205 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %206 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %205, i32 0, i32 1\r\n  %207 = load i16, ptr %206, align 16, !noundef !5\r\n  %208 = sub i16 0, %207\r\n  store i16 %208, ptr %204, align 8\r\n  %209 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %210 = getelementptr inbounds %Adt50, ptr %209, i32 0, i32 4\r\n  %211 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 1\r\n  store ptr %211, ptr %210, align 16\r\n  %212 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 5\r\n  %213 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  %214 = load i8, ptr %213, align 2, !noundef !5\r\n  %215 = getelementptr inbounds [1 x i8], ptr %212, i64 0, i64 0\r\n  store i8 %214, ptr %215, align 2\r\n  %216 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 3\r\n  %217 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %218 = getelementptr inbounds %Adt50, ptr %217, i32 0, i32 2\r\n  %219 = load <8 x i32>, ptr %218, align 16\r\n  store <8 x i32> %219, ptr %216, align 16\r\n  %220 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %221 = getelementptr inbounds %Adt50, ptr %220, i32 0, i32 3\r\n  %222 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %221, i32 0, i32 1\r\n  %223 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %222, i32 0, i32 3\r\n  %224 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 5\r\n  %225 = load i64, ptr %224, align 8, !noundef !5\r\n  %226 = trunc i64 %225 to i32\r\n  store i32 %226, ptr %223, align 4\r\n  %227 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  %228 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %229 = getelementptr inbounds %Adt50, ptr %228, i32 0, i32 1\r\n  %230 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %229, i32 0, i32 3\r\n  %231 = load i64, ptr %230, align 8, !noundef !5\r\n  %232 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %233 = getelementptr inbounds %Adt50, ptr %232, i32 0, i32 3\r\n  %234 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %233, i32 0, i32 1\r\n  %235 = load i64, ptr %234, align 16, !noundef !5\r\n  %236 = xor i64 %231, %235\r\n  store i64 %236, ptr %227, align 8\r\n  %237 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %238 = getelementptr inbounds %Adt50, ptr %237, i32 0, i32 3\r\n  %239 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %238, i32 0, i32 2\r\n  %240 = load double, ptr %_7, align 8, !noundef !5\r\n  store double %240, ptr %239, align 16\r\n  %241 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 1\r\n  %242 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  %243 = load i8, ptr %242, align 2, !noundef !5\r\n  %244 = xor i8 %243, -1\r\n  store i8 %244, ptr %241, align 2\r\n  %245 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %246 = getelementptr inbounds %Adt50, ptr %245, i32 0, i32 1\r\n  %247 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %248 = load i8, ptr %247, align 8, !range !6, !noundef !5\r\n  %249 = trunc i8 %248 to i1\r\n  %250 = zext i1 %249 to i16\r\n  store i16 %250, ptr %246, align 16\r\n  %251 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %252 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %253 = getelementptr inbounds %Adt50, ptr %252, i32 0, i32 3\r\n  %254 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %253, i32 0, i32 1\r\n  %255 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %254, i32 0, i32 3\r\n  %256 = load i32, ptr %255, align 4, !noundef !5\r\n  %257 = sext i32 %256 to i128\r\n  store i128 %257, ptr %251, align 16\r\n  %258 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %259 = getelementptr inbounds %Adt50, ptr %258, i32 0, i32 3\r\n  %260 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %259, i32 0, i32 1\r\n  %261 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %260, i32 0, i32 3\r\n  %262 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %263 = getelementptr inbounds %Adt50, ptr %262, i32 0, i32 1\r\n  %264 = load i16, ptr %263, align 16, !noundef !5\r\n  %265 = zext i16 %264 to i32\r\n  store i32 %265, ptr %261, align 4\r\n  br label %bb4\r\n\r\nbb4:                                              ; preds = %bb4, %bb3\r\n  %266 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 1\r\n  %267 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %268 = getelementptr inbounds %Adt50, ptr %267, i32 0, i32 3\r\n  %269 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %268, i32 0, i32 1\r\n  %270 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %269, i32 0, i32 3\r\n  %271 = load i32, ptr %270, align 4, !noundef !5\r\n  %272 = trunc i32 %271 to i8\r\n  store i8 %272, ptr %266, align 2\r\n  %273 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 1\r\n  %274 = load i8, ptr %273, align 2, !noundef !5\r\n  %275 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_13, i32 0, i32 1\r\n  store i8 %274, ptr %275, align 2\r\n  %276 = load i16, ptr %_1, align 8, !noundef !5\r\n  store i16 %276, ptr %_13, align 8\r\n  %277 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %278 = getelementptr inbounds %Adt50, ptr %277, i32 0, i32 1\r\n  %279 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %278, i32 0, i32 3\r\n  %280 = load i64, ptr %279, align 8, !noundef !5\r\n  %281 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_13, i32 0, i32 3\r\n  store i64 %280, ptr %281, align 8\r\n  %282 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 3\r\n  %283 = getelementptr inbounds %Adt59, ptr %_7, i32 0, i32 4\r\n  %284 = load i16, ptr %283, align 4, !noundef !5\r\n  %285 = zext i16 %284 to i64\r\n  store i64 %285, ptr %282, align 8\r\n  %286 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %287 = getelementptr inbounds %Adt50, ptr %286, i32 0, i32 3\r\n  %288 = load i64, ptr %_10, align 16, !noundef !5\r\n  %289 = sext i64 %288 to i128\r\n  store i128 %289, ptr %287, align 16\r\n  %290 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 1\r\n  %291 = getelementptr inbounds { i128, i16, i8, [1 x i8], [1 x i16], [5 x i16] }, ptr %290, i32 0, i32 2\r\n  %292 = load i8, ptr %291, align 2, !range !6, !noundef !5\r\n  %293 = trunc i8 %292 to i1\r\n  %294 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %295 = load i8, ptr %294, align 8, !range !6, !noundef !5\r\n  %296 = trunc i8 %295 to i1\r\n  %297 = and i1 %293, %296\r\n  %298 = zext i1 %297 to i8\r\n  store i8 %298, ptr %_16, align 1\r\n  %299 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %300 = getelementptr inbounds { i64, i64, i64 }, ptr %299, i32 0, i32 2\r\n  %301 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 3\r\n  %302 = load i64, ptr %301, align 8, !noundef !5\r\n  %303 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 3\r\n  %304 = load i64, ptr %303, align 8, !noundef !5\r\n  %305 = xor i64 %302, %304\r\n  store i64 %305, ptr %300, align 8\r\n  %306 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_13, i32 0, i32 1\r\n  %307 = load i8, ptr %306, align 2, !noundef !5\r\n  %308 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 1\r\n  store i8 %307, ptr %308, align 2\r\n  %309 = load i16, ptr %_1, align 8, !noundef !5\r\n  store i16 %309, ptr %_14, align 8\r\n  %310 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %311 = getelementptr inbounds { i64, i64, i64 }, ptr %310, i32 0, i32 2\r\n  %312 = load i64, ptr %311, align 8, !noundef !5\r\n  %313 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_14, i32 0, i32 3\r\n  store i64 %312, ptr %313, align 8\r\n  %314 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %315 = getelementptr inbounds %Adt50, ptr %314, i32 0, i32 5\r\n  %316 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %317 = getelementptr inbounds %Adt50, ptr %316, i32 0, i32 3\r\n  %318 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %317, i32 0, i32 1\r\n  %319 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %318, i32 0, i32 3\r\n  %320 = load i32, ptr %319, align 4, !noundef !5\r\n  %321 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 0\r\n  store i32 %320, ptr %321, align 8\r\n  %322 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %323 = getelementptr inbounds %Adt50, ptr %322, i32 0, i32 3\r\n  %324 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %323, i32 0, i32 1\r\n  %325 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %324, i32 0, i32 3\r\n  %326 = load i32, ptr %325, align 4, !noundef !5\r\n  %327 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 1\r\n  store i32 %326, ptr %327, align 4\r\n  %328 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %329 = getelementptr inbounds %Adt50, ptr %328, i32 0, i32 3\r\n  %330 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %329, i32 0, i32 1\r\n  %331 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %330, i32 0, i32 3\r\n  %332 = load i32, ptr %331, align 4, !noundef !5\r\n  %333 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 2\r\n  store i32 %332, ptr %333, align 8\r\n  %334 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %335 = getelementptr inbounds %Adt50, ptr %334, i32 0, i32 3\r\n  %336 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %335, i32 0, i32 1\r\n  %337 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %336, i32 0, i32 3\r\n  %338 = load i32, ptr %337, align 4, !noundef !5\r\n  %339 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 3\r\n  store i32 %338, ptr %339, align 4\r\n  %340 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %341 = getelementptr inbounds %Adt50, ptr %340, i32 0, i32 3\r\n  %342 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %341, i32 0, i32 1\r\n  %343 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %342, i32 0, i32 3\r\n  %344 = load i32, ptr %343, align 4, !noundef !5\r\n  %345 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 4\r\n  store i32 %344, ptr %345, align 8\r\n  %346 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %347 = getelementptr inbounds %Adt50, ptr %346, i32 0, i32 3\r\n  %348 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %347, i32 0, i32 1\r\n  %349 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %348, i32 0, i32 3\r\n  %350 = load i32, ptr %349, align 4, !noundef !5\r\n  %351 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 5\r\n  store i32 %350, ptr %351, align 4\r\n  %352 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %353 = getelementptr inbounds %Adt50, ptr %352, i32 0, i32 3\r\n  %354 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %353, i32 0, i32 1\r\n  %355 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %354, i32 0, i32 3\r\n  %356 = load i32, ptr %355, align 4, !noundef !5\r\n  %357 = getelementptr inbounds [7 x i32], ptr %315, i64 0, i64 6\r\n  store i32 %356, ptr %357, align 8\r\n  %358 = getelementptr inbounds %Adt50, ptr %_15, i32 0, i32 3\r\n  %359 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %358, i32 0, i32 1\r\n  %360 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %359, i32 0, i32 5\r\n  %361 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %362 = getelementptr inbounds %Adt50, ptr %361, i32 0, i32 3\r\n  %363 = load i128, ptr %362, align 16, !noundef !5\r\n  store i128 %363, ptr %360, align 16\r\n  %364 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %365 = getelementptr inbounds %Adt50, ptr %364, i32 0, i32 3\r\n  %366 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %365, i32 0, i32 1\r\n  %367 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %366, i32 0, i32 1\r\n  %368 = load double, ptr %_7, align 8, !noundef !5\r\n  store double %368, ptr %367, align 8\r\n  %369 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %370 = getelementptr inbounds %Adt50, ptr %369, i32 0, i32 3\r\n  %371 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %370, i32 0, i32 2\r\n  %372 = load double, ptr %371, align 16, !noundef !5\r\n  store double %372, ptr %_7, align 8\r\n  %373 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  %374 = load i8, ptr %373, align 2, !noundef !5\r\n  switch i8 %374, label %bb4 [\r\n    i8 0, label %bb1\r\n    i8 84, label %bb5\r\n  ]\r\n\r\nbb5:                                              ; preds = %bb4\r\n  %375 = getelementptr inbounds %Adt50, ptr %_15, i32 0, i32 3\r\n  %376 = getelementptr inbounds { i128, { i64, double, i32, i32, [2 x i32], i128 }, double, [6 x i32] }, ptr %375, i32 0, i32 1\r\n  %377 = getelementptr inbounds { i64, double, i32, i32, [2 x i32], i128 }, ptr %376, i32 0, i32 5\r\n  %378 = load i128, ptr %377, align 16, !noundef !5\r\n  store i128 %378, ptr %_5, align 16\r\n  %379 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %380 = load i64, ptr %379, align 8, !noundef !5\r\n  store i64 %380, ptr %_10, align 16\r\n  %381 = load i8, ptr %_16, align 1, !range !6, !noundef !5\r\n  %382 = trunc i8 %381 to i1\r\n  %383 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %384 = zext i1 %382 to i8\r\n  store i8 %384, ptr %383, align 8\r\n  %385 = load i64, ptr %_10, align 16, !noundef !5\r\n  switch i64 %385, label %bb8 [\r\n    i64 2, label %bb6\r\n    i64 7564290096487423208, label %bb7\r\n  ]\r\n\r\nbb8:                                              ; preds = %bb7, %bb5\r\n  ret void\r\n\r\nbb6:                                              ; preds = %bb5\r\n  %386 = getelementptr inbounds %Adt51, ptr %_10, i32 0, i32 2\r\n  %387 = getelementptr inbounds %Adt50, ptr %386, i32 0, i32 1\r\n  %388 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %387, i32 0, i32 1\r\n  %389 = getelementptr inbounds { i16, i8, [5 x i8], i64 }, ptr %_1, i32 0, i32 1\r\n  %390 = load i8, ptr %389, align 2, !noundef !5\r\n  store i8 %390, ptr %388, align 2\r\n  %391 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %392 = load i64, ptr %391, align 8, !noundef !5\r\n  %393 = getelementptr inbounds { double, { i64, i64, i64 }, i16, i8, [5 x i8] }, ptr %_7, i32 0, i32 1\r\n  %394 = load i64, ptr %393, align 8, !noundef !5\r\n  %395 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %392, i64 %394)\r\n  %396 = extractvalue { i64, i1 } %395, 0\r\n  %397 = extractvalue { i64, i1 } %395, 1\r\n  store i64 %396, ptr %_10, align 16\r\n  %398 = getelementptr inbounds i8, ptr %_10, i64 8\r\n  %399 = zext i1 %397 to i8\r\n  store i8 %399, ptr %398, align 8\r\n  br label %bb3\r\n\r\nbb7:                                              ; preds = %bb5\r\n  %400 = load i128, ptr %_5, align 16, !noundef !5\r\n; call _1851685_debug_2::bbox2\r\n  call void @_ZN16_1851685_debug_25bbox217he0199f2e11de3e04E(i128 %400, ptr align 8 %_14)\r\n  br label %bb8\r\n}\r\n\r\n; _1851685_debug_2::fn15\r\n; Function Attrs: nonlazybind uwtable\r\ndefine internal i128 @_ZN16_1851685_debug_24fn1517hfe3f07cbb5faefb0E() unnamed_addr #1 {\r\nstart:\r\n  %_0 = alloca i128, align 16\r\n  store i128 0, ptr %_0, align 16\r\n; call core::hint::black_box\r\n  call void @_ZN4core4hint9black_box17ha89c3f9cb79c398cE()\r\n  %0 = load i128, ptr %_0, align 16, !noundef !5\r\n  ret i128 %0\r\n}\r\n\r\n; _1851685_debug_2::main\r\n; Function Attrs: nonlazybind uwtable\r\ndefine internal void @_ZN16_1851685_debug_24main17he76cece459490d8aE() unnamed_addr #1 {\r\nstart:\r\n; call _1851685_debug_2::enter\r\n  call void @_ZN16_1851685_debug_25enter17h7e9cae7a334c5019E()\r\n  ret void\r\n}\r\n\r\n; _1851685_debug_2::bbox2\r\n; Function Attrs: noinline nonlazybind uwtable\r\ndefine internal void @_ZN16_1851685_debug_25bbox217he0199f2e11de3e04E(i128 %val1, ptr align 8 %val2) unnamed_addr #0 {\r\nstart:\r\n  %_6 = alloca { i16, i8, [5 x i8], i64 }, align 8\r\n  %_5 = alloca { i16, i8, [5 x i8], i64 }, align 8\r\n; call _1851685_debug_2::print_i128\r\n  call void @_ZN16_1851685_debug_210print_i12817h036b4f930abaf46cE(i128 %val1)\r\n  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %_6, ptr align 8 %val2, i64 16, i1 false)\r\n; call core::hint::black_box\r\n  call void @_ZN4core4hint9black_box17h7d48bc7feb0af96eE(ptr sret({ i16, i8, [5 x i8], i64 }) align 8 %_5, ptr align 8 %_6)\r\n  ret void\r\n}\r\n\r\n; _1851685_debug_2::print_i128\r\n; Function Attrs: nonlazybind uwtable\r\ndefine internal void @_ZN16_1851685_debug_210print_i12817h036b4f930abaf46cE(i128 %x) unnamed_addr #1 {\r\nstart:\r\n  %_9 = lshr i128 %x, 64\r\n  %_8 = trunc i128 %_9 to i64\r\n  %_14 = trunc i128 %x to i64\r\n  %_2 = call i32 (ptr, ...) @printf(ptr @alloc_2cdd8ac758b4c372b56d8683306290e0, i64 %_8, i64 %_14)\r\n  ret void\r\n}\r\n\r\n; Function Attrs: nonlazybind uwtable\r\ndefine i32 @rust_eh_personality(i32, i32, i64, ptr, ptr) unnamed_addr #1 {\r\nstart:\r\n  ret i32 0\r\n}\r\n\r\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)\r\ndeclare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3\r\n\r\n; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)\r\ndeclare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #5\r\n\r\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\r\ndeclare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #5\r\n\r\n; Function Attrs: nonlazybind uwtable\r\ndeclare i32 @printf(ptr, ...) unnamed_addr #1\r\n\r\n; Function Attrs: nonlazybind\r\ndefine i32 @main(i32 %0, ptr %1) unnamed_addr #6 {\r\ntop:\r\n  call void @_ZN16_1851685_debug_25enter17h7e9cae7a334c5019E()\r\n  ret i32 0\r\n}\r\n\r\nattributes #0 = { noinline nonlazybind uwtable \"probe-stack\"=\"inline-asm\" \"target-cpu\"=\"x86-64\" }\r\nattributes #1 = { nonlazybind uwtable \"probe-stack\"=\"inline-asm\" \"target-cpu\"=\"x86-64\" }\r\nattributes #2 = { inlinehint nonlazybind uwtable \"probe-stack\"=\"inline-asm\" \"target-cpu\"=\"x86-64\" }\r\nattributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }\r\nattributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }\r\nattributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\r\nattributes #6 = { nonlazybind \"target-cpu\"=\"x86-64\" }\r\n\r\n!llvm.module.flags = !{!0, !1, !2}\r\n!llvm.ident = !{!3}\r\n\r\n!0 = !{i32 8, !\"PIC Level\", i32 2}\r\n!1 = !{i32 7, !\"PIE Level\", i32 2}\r\n!2 = !{i32 2, !\"RtLibUseGOT\", i32 1}\r\n!3 = !{!\"rustc version 1.78.0-dev\"}\r\n!4 = !{i32 753499}\r\n!5 = !{}\r\n!6 = !{i8 0, i8 2}\r\n\r\n```\r\n\r\nRight:\r\n```console\r\n$ clang -O1 1851685_debug_2.ll && ./a.out\r\nhi:-1 lo:-2580139605333929408\r\n```\r\n\r\nWrong:\r\n```console\r\n$ clang -O2 1851685_debug_2.ll && ./a.out\r\nhi:0 lo:-2580139605333929408\r\n```\r\n\r\nBisects down to \r\n```\r\nBISECT: running pass (504) InstCombinePass on _ZN16_1851685_debug_25enter17h7e9cae7a334c5019E\r\n```\r\n\r\nVersion:\r\n```\r\nclang version 19.0.0git (https://github.com/llvm/llvm-project.git cd1d4d8dd31f527615de26f5b62d687c6b2982a6)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /opt/compiler-explorer/clang-trunk/bin\r\nCompiler returned: 0\r\n```\r\n\r\n\r\n<details>\r\n<summary>From Rust custom MIR</summary>\r\n\r\n```rust\r\n#![feature(custom_mir, core_intrinsics)]\r\nextern crate core;\r\nuse core::intrinsics::mir::*;\r\n\r\npub fn enter() {\r\n    fn14((0, 0, 0), [0; 6]);\r\n}\r\n\r\n#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\r\npub fn fn14(mut _3: (i8, u16, isize), mut _6: [i32; 6]) {\r\n    mir! {\r\n    let _1: u128;\r\n    let _2: i128;\r\n    let _4: (i128,);\r\n    let _5: i128;\r\n    let _9: Adt59;\r\n    let _11: isize;\r\n    let _12: bool;\r\n    let _13: Adt51;\r\n    let _15: isize;\r\n    let _16: Adt53;\r\n    let _21: (i32, [i32; 6], (i8, u16, isize), [usize; 4]);\r\n    let _23: (i8, u16, isize);\r\n    let _25: Adt58;\r\n    let _26: Adt52;\r\n    let _44: ();\r\n    {\r\n    _2 = 0;\r\n    _5 = 0;\r\n    _3 = (84_i8, 40096_u16, (-9223372036854775808_isize));\r\n    Goto(bb2)\r\n    }\r\n    bb1 = {\r\n    Return()\r\n    }\r\n    bb2 = {\r\n    _9.fld3.1.0.0 = 145713751_u32 as f64;\r\n    _9.fld5 = _3.1 % 62066_u16;\r\n    _13.fld1 = Checked(3029947793098001587_i64 - (-3638983068927244405_i64));\r\n    _12 = _13.fld1.1 ^ _13.fld1.1;\r\n    _9.fld6 = core::ptr::addr_of!(_13.fld1);\r\n    _9.fld4 = (16948196345300582164_u64,);\r\n    _13.fld3.fld4 = [168516996_i32,245529160_i32,1223136339_i32,1622354325_i32,(-1002348909_i32),1976405017_i32,(-1442509311_i32),1165829790_i32];\r\n    _13.fld3.fld6.1 = -_9.fld3.1.0.0;\r\n    _11 = !_3.2;\r\n    _13.fld1 = (7564290096487423208_i64, _12);\r\n    _13.fld3.fld6.2.0 = _11;\r\n    _9.fld3.2.0 = _13.fld1.0;\r\n    Call(_13.fld3.fld6.2.4 = fn15(), ReturnTo(bb3), UnwindUnreachable())\r\n    }\r\n    bb3 = {\r\n    _13.fld0.0 = _9.fld3.2.0 as i16;\r\n    _13.fld2 = _9.fld4.0 as isize;\r\n    _13.fld3.fld5.1.0 = _13.fld3.fld6.2.4.0 >> _2;\r\n    _9.fld3.1.0.0 = -_13.fld3.fld6.1;\r\n    _13.fld0.2 = !_13.fld1.1;\r\n    _13.fld3.fld5.3 = [_13.fld0.0];\r\n    Goto(bb4)\r\n    }\r\n    bb4 = {\r\n    _13.fld3.fld3.0 = _3.0;\r\n    _6 = [(-154507050_i32),2086635898_i32,468582002_i32,(-21184342_i32),(-1173629817_i32),(-2078649110_i32)];\r\n    _13.fld3.fld5.1.0 = _5;\r\n    _16.fld0.2 = _13.fld0.2;\r\n    _13.fld3.fld5.0 = _13.fld0.0 * _13.fld0.0;\r\n    _9.fld2 = 2797771210_u32 + 2127377746_u32;\r\n    _9.fld3.1.0.0 = _9.fld2 as f64;\r\n    _15 = -_11;\r\n    _13.fld0 = (_13.fld3.fld5.0, _13.fld3.fld5.1, _12, _13.fld3.fld5.3);\r\n    _13.fld1 = Checked(_9.fld3.2.0 * _9.fld3.2.0);\r\n    Goto(bb5)\r\n    }\r\n    bb5 = {\r\n    _13.fld3.fld6.1 = _9.fld3.1.0.0 / 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012739273109665954_f64;\r\n    _13.fld4 = !6496701646011298799_usize;\r\n    _3 = (_13.fld3.fld3.0, _9.fld5, _15);\r\n    _13.fld3.fld6.2.1 = _9.fld2;\r\n    _13.fld0.2 = _13.fld0.1.0 >= _5;\r\n    _13.fld3.fld3.2 = _3.2 & _11;\r\n    _13.fld6 = [_13.fld0.2,_13.fld1.1,_16.fld0.2,_16.fld0.2,_13.fld0.2,_13.fld1.1];\r\n    _13.fld3.fld6.2.4 = _13.fld3.fld5.1;\r\n    _9.fld3.0 = -_13.fld0.0;\r\n    _13.fld3.fld0 = core::ptr::addr_of!(_9.fld4.0);\r\n    _9.fld0 = [_3.0];\r\n    _13.fld5 = _13.fld3.fld4;\r\n    _13.fld3.fld6.2.3 = _13.fld4 as i32;\r\n    _3.2 = _13.fld3.fld3.2 ^ _13.fld3.fld6.2.0;\r\n    _13.fld3.fld6.1 = _9.fld3.1.0.0;\r\n    _23.0 = !_3.0;\r\n    _13.fld3.fld3.1 = _13.fld1.1 as u16;\r\n    _13.fld3.fld5.1.0 = _13.fld3.fld6.2.3 as i128;\r\n    _13.fld3.fld6.2.3 = _13.fld3.fld3.1 as i32;\r\n    Goto(bb7)\r\n    }\r\n    bb7 = {\r\n    _23.0 = _13.fld3.fld6.2.3 as i8;\r\n    _21.2 = (_23.0, _3.1, _13.fld3.fld3.2);\r\n    _23.2 = _9.fld5 as isize;\r\n    _13.fld3.fld6.0 = _13.fld1.0 as i128;\r\n    _26.fld0 = _13.fld0.2 & _13.fld1.1;\r\n    _9.fld3.2.2 = _3.2 ^ _23.2;\r\n    _23 = (_21.2.0, _3.1, _9.fld3.2.2);\r\n    _13.fld3.fld2 = [_13.fld3.fld6.2.3,_13.fld3.fld6.2.3,_13.fld3.fld6.2.3,_13.fld3.fld6.2.3,_13.fld3.fld6.2.3,_13.fld3.fld6.2.3,_13.fld3.fld6.2.3];\r\n    _25.fld3.fld6.2.4 = (_13.fld3.fld6.0,);\r\n    _13.fld3.fld6.2.2 = _9.fld3.1.0.0;\r\n    _9.fld3.1.0.0 = _13.fld3.fld6.1;\r\n    match _3.0 {\r\n    0 => bb2,\r\n    84 => bb10,\r\n    _ => bb7\r\n    }\r\n    }\r\n    bb10 = {\r\n    _4 = (_25.fld3.fld6.2.4.0,);\r\n    _13.fld1 = (_9.fld3.2.0, _26.fld0);\r\n    match _13.fld1.0 {\r\n    2 => bb14,\r\n    7564290096487423208 => bb18,\r\n    _ => bb19\r\n    }\r\n    }\r\n    bb14 = {\r\n    _13.fld3.fld3.0 = _3.0;\r\n    _13.fld1 = Checked(_9.fld3.2.0 * _9.fld3.2.0);\r\n    Goto(bb5)\r\n    }\r\n    bb18 = {\r\n    Call(_44 = bbox2(_4, Move(_23)), ReturnTo(bb19), UnwindUnreachable())\r\n    }\r\n    bb19 = {\r\n    Return()\r\n    }\r\n\r\n    }\r\n}\r\n\r\n#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\r\nfn fn15() -> (i128,) {\r\n    mir! {\r\n    let unit:();\r\n    let _37: ();\r\n    {\r\n    RET = (0,);\r\n    Call(_37 = core::hint::black_box(unit), ReturnTo(bb16), UnwindUnreachable())\r\n    }\r\n    bb16 = {\r\n    Return()\r\n    }\r\n\r\n    }\r\n}\r\npub fn main() {\r\n    enter();\r\n}\r\n\r\n#[derive(Debug)]\r\npub struct Adt49 {}\r\n#[derive(Debug)]\r\npub struct Adt50 {\r\n    fld0: *const u64,\r\n    fld2: [i32; 7],\r\n    fld3: (i8, u16, isize),\r\n    fld4: [i32; 8],\r\n    fld5: (i16, (i128,), bool, [i16; 1]),\r\n    fld6: (i128, f64, (isize, u32, f64, i32, (i128,)), [i32; 6]),\r\n}\r\n#[derive(Debug)]\r\npub struct Adt51 {\r\n    fld0: (i16, (i128,), bool, [i16; 1]),\r\n    fld1: (i64, bool),\r\n    fld2: isize,\r\n    fld3: Adt50,\r\n    fld4: usize,\r\n    fld5: [i32; 8],\r\n    fld6: [bool; 6],\r\n}\r\n#[derive(Debug)]\r\npub struct Adt52 {\r\n    fld0: bool,\r\n}\r\n#[derive(Debug)]\r\npub struct Adt53 {\r\n    fld0: (i16, (i128,), bool, [i16; 1]),\r\n}\r\n#[derive(Debug)]\r\npub struct Adt58 {\r\n    fld3: Adt50,\r\n}\r\n#[derive(Debug, Copy, Clone)]\r\npub struct Adt59 {\r\n    fld0: [i8; 1],\r\n    fld2: u32,\r\n    fld3: (i16, ((f64,),), (i64, isize, isize), u8),\r\n    fld4: (u64,),\r\n    fld5: u16,\r\n    fld6: *const (i64, bool),\r\n}\r\n\r\n#[inline(never)]\r\npub fn bbox2(val1: (i128,), val2: (i8, u16, isize)) {\r\n    use core::hint::black_box;\r\n    print_i128(val1.0);\r\n    black_box(val2);\r\n}\r\n\r\n#[cfg(not(miri))]\r\nfn print_i128(x: i128) {\r\n    extern \"C\" {\r\n        fn printf(fmt: *const core::ffi::c_char, ...) -> core::ffi::c_int;\r\n    }\r\n    unsafe {\r\n        printf(\r\n            b\"hi:%ld lo:%ld\\n\\0\".as_ptr().cast(),\r\n            (x as u128 >> 64) as i64,\r\n            x as i64,\r\n        );\r\n    }\r\n}\r\n\r\n#[cfg(miri)]\r\nfn print_i128(x: i128) {\r\n    println!(\"hi:{} lo:{}\", (x as u128 >> 64) as i64, x as i64);\r\n}\r\n\r\n```\r\n\r\n</details>\r\n",
    "author": "cbeuw",
    "labels": [
      "miscompilation",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://godbolt.org/z/xs1rhnMvb\r\nAlive2: https://alive2.llvm.org/ce/z/gyL7mn\r\n\r\nI will post a fix later.\r\n"
      }
    ]
  }
}