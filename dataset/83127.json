{
  "bug_id": "83127",
  "issue_url": "https://github.com/llvm/llvm-project/issues/83127",
  "bug_type": "hang",
  "base_commit": "7a0acccd81df268dc7ad4c0358c42552789f19b4",
  "knowledge_cutoff": "2024-02-27T12:20:45Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "9f45c5e1a65a1abf4920b617d36ed05e73c04bea",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          1285,
          1291
        ],
        [
          1303,
          1309
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::foldSelectValueEquivalence"
      ]
    }
  },
  "patch": "commit 9f45c5e1a65a1abf4920b617d36ed05e73c04bea\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Mar 6 09:33:51 2024 +0100\n\n    [InstCombine] Fix infinite loop in select equivalence fold (#84036)\n    \n    When replacing with a non-constant, it's possible that the result of the\n    simplification is actually more complicated than the original, and may\n    result in an infinite combine loop.\n    \n    Mitigate the issue by requiring that either the replacement or\n    simplification result is constant, which should ensure that it's\n    simpler. While this check is crude, it does not appear to cause\n    optimization regressions in real-world code in practice.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/83127.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex c47bc33df070..aee18d770f72 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -1285,7 +1285,11 @@ Instruction *InstCombinerImpl::foldSelectValueEquivalence(SelectInst &Sel,\n       isGuaranteedNotToBeUndefOrPoison(CmpRHS, SQ.AC, &Sel, &DT)) {\n     if (Value *V = simplifyWithOpReplaced(TrueVal, CmpLHS, CmpRHS, SQ,\n                                           /* AllowRefinement */ true))\n-      return replaceOperand(Sel, Swapped ? 2 : 1, V);\n+      // Require either the replacement or the simplification result to be a\n+      // constant to avoid infinite loops.\n+      // FIXME: Make this check more precise.\n+      if (isa<Constant>(CmpRHS) || isa<Constant>(V))\n+        return replaceOperand(Sel, Swapped ? 2 : 1, V);\n \n     // Even if TrueVal does not simplify, we can directly replace a use of\n     // CmpLHS with CmpRHS, as long as the instruction is not used anywhere\n@@ -1303,7 +1307,8 @@ Instruction *InstCombinerImpl::foldSelectValueEquivalence(SelectInst &Sel,\n       isGuaranteedNotToBeUndefOrPoison(CmpLHS, SQ.AC, &Sel, &DT))\n     if (Value *V = simplifyWithOpReplaced(TrueVal, CmpRHS, CmpLHS, SQ,\n                                           /* AllowRefinement */ true))\n-      return replaceOperand(Sel, Swapped ? 2 : 1, V);\n+      if (isa<Constant>(CmpLHS) || isa<Constant>(V))\n+        return replaceOperand(Sel, Swapped ? 2 : 1, V);\n \n   auto *FalseInst = dyn_cast<Instruction>(FalseVal);\n   if (!FalseInst)\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/select.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "select_replacement_shift_noundef",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i8 @select_replacement_shift_noundef(i8 %x, i8 %y, i8 %z) {\n  %shr = lshr exact i8 %x, 1\n  call void @use_i8(i8 noundef %shr)\n  %cmp = icmp eq i8 %shr, %y\n  %shl = shl i8 %y, 1\n  %sel = select i1 %cmp, i8 %shl, i8 %z\n  ret i8 %sel\n}\n\ndeclare void @use_i8(i8)\n"
        },
        {
          "test_name": "select_replacement_loop4",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i16 @select_replacement_loop4(i16 noundef %p_12) {\n  %cmp1 = icmp ult i16 %p_12, 2\n  %and1 = and i16 %p_12, 1\n  %and2 = select i1 %cmp1, i16 %and1, i16 0\n  %cmp2 = icmp eq i16 %and2, %p_12\n  %and3 = select i1 %cmp2, i16 %and1, i16 0\n  ret i16 %and3\n}\n"
        },
        {
          "test_name": "select_replacement_loop3",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i8 @select_replacement_loop3(i32 noundef %x) {\n  %trunc = trunc i32 %x to i8\n  %rev = call i8 @llvm.bitreverse.i8(i8 %trunc)\n  %ext = zext i8 %rev to i32\n  %cmp = icmp eq i32 %ext, %x\n  %sel = select i1 %cmp, i8 %trunc, i8 0\n  ret i8 %sel\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i8 @llvm.bitreverse.i8(i8) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "select_replacement_sub",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i8 @select_replacement_sub(i8 %x, i8 %y, i8 %z) {\n  %cmp = icmp eq i8 %x, %y\n  %sub = sub i8 %x, %y\n  %sel = select i1 %cmp, i8 %sub, i8 %z\n  ret i8 %sel\n}\n"
        },
        {
          "test_name": "select_replacement_gep_inbounds",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine ptr @select_replacement_gep_inbounds(ptr %base, i64 %offset) {\n  %cmp = icmp eq i64 %offset, 0\n  %gep = getelementptr inbounds i8, ptr %base, i64 %offset\n  %sel = select i1 %cmp, ptr %base, ptr %gep\n  ret ptr %sel\n}\n"
        },
        {
          "test_name": "select_replacement_loop2",
          "test_body": "target datalayout = \"e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64\"\n\ndefine i32 @select_replacement_loop2(i32 %arg, i32 %arg2) {\n  %div = udiv i32 %arg, %arg2\n  %mul = mul nsw i32 %div, %arg2\n  %cmp = icmp eq i32 %mul, %arg\n  %sel = select i1 %cmp, i32 %div, i32 undef\n  ret i32 %sel\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] InstCombine gets stuck when simplifying selects",
    "body": "Reduced test case: https://godbolt.org/z/ds9eq96db\r\n```\r\ndefine i16 @func(i16 noundef %p_12) {\r\nentry:\r\n  %cmp1 = icmp ult i16 %p_12, 2\r\n  %and1 = and i16 %p_12, 1\r\n  %and2 = select i1 %cmp1, i16 %and1, i16 0\r\n  %cmp2 = icmp eq i16 %and2, %p_12\r\n  %and3 = select i1 %cmp2, i16 %and1, i16 0\r\n  ret i16 %and3\r\n}\r\n```\r\n```\r\nADD:   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\nADD:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nADD:   %and1 = and i16 %p_12, 1\r\nIC: Visiting:   %and1 = and i16 %p_12, 1\r\nIC: Visiting:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\nADD DEFERRED:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nADD DEFERRED:   %cmp2 = icmp eq i16 %and2, %p_12\r\nIC: Mod =   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\n    New =   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD:   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD:   %cmp2 = icmp eq i16 %and2, %p_12\r\nADD:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %cmp2 = icmp eq i16 %and2, %p_12\r\nIC: Visiting:   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD DEFERRED:   %and1 = and i16 %p_12, 1\r\nADD DEFERRED:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Mod =   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\n    New =   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\n\r\n\r\nADD:   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\nADD:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nADD:   %and1 = and i16 %p_12, 1\r\nIC: Visiting:   %and1 = and i16 %p_12, 1\r\nIC: Visiting:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\nADD DEFERRED:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nADD DEFERRED:   %cmp2 = icmp eq i16 %and2, %p_12\r\nIC: Mod =   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\n    New =   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD:   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD:   %cmp2 = icmp eq i16 %and2, %p_12\r\nADD:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Visiting:   %cmp2 = icmp eq i16 %and2, %p_12\r\nIC: Visiting:   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\nADD DEFERRED:   %and1 = and i16 %p_12, 1\r\nADD DEFERRED:   %and2 = select i1 %cmp1, i16 %and1, i16 0\r\nIC: Mod =   %and3 = select i1 %cmp2, i16 %and1, i16 0\r\n    New =   %and3 = select i1 %cmp2, i16 %and2, i16 0\r\n\r\n...\r\n```",
    "author": "dtcxzyw",
    "labels": [
      "llvm:instcombine",
      "llvm:hang"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Another reproducer:  https://godbolt.org/z/7MEYTe9cq\r\n```\r\ndeclare void @use(i32,i32)\r\n\r\ndefine void @func(ptr %p) {\r\n  %1 = load i32, ptr %p, align 4\r\n  %2 = sext i32 %1 to i64\r\n  %3 = icmp slt i64 %2, 2\r\n  %4 = zext i1 %3 to i32\r\n  %5 = and i32 %4, %1\r\n  %6 = icmp eq i32 %5, %1\r\n  %7 = zext i1 %6 to i32\r\n  %8 = and i32 %7, %1\r\n  call void @use(i32 %8, i32 noundef %1)\r\n  ret void\r\n}\r\n```\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "Third reproducer: https://godbolt.org/z/8f8b4xved\r\n```\r\ndefine i8 @func(i32 noundef %p_38) {\r\nentry:\r\n  %conv393 = trunc i32 %p_38 to i8\r\n  %0 = call i8 @llvm.bitreverse.i8(i8 %conv393)\r\n  %conv394 = zext i8 %0 to i32\r\n  %cmp395 = icmp eq i32 %conv394, %p_38\r\n  %conv397 = zext i1 %cmp395 to i8\r\n  %mul.i = mul i8 %conv393, %conv397\r\n  ret i8 %mul.i\r\n}\r\n```"
      },
      {
        "author": "dtcxzyw",
        "body": "> Third reproducer: https://godbolt.org/z/8f8b4xved\r\n> \r\n> ```\r\n> define i8 @func(i32 noundef %p_38) {\r\n> entry:\r\n>   %conv393 = trunc i32 %p_38 to i8\r\n>   %0 = call i8 @llvm.bitreverse.i8(i8 %conv393)\r\n>   %conv394 = zext i8 %0 to i32\r\n>   %cmp395 = icmp eq i32 %conv394, %p_38\r\n>   %conv397 = zext i1 %cmp395 to i8\r\n>   %mul.i = mul i8 %conv393, %conv397\r\n>   ret i8 %mul.i\r\n> }\r\n> ```\r\n\r\nA simpler testcase:\r\n```\r\ndefine i8 @func(i32 noundef %x) {\r\nentry:\r\n  %trunc = trunc i32 %x to i8\r\n  %rev = call i8 @llvm.bitreverse.i8(i8 %trunc)\r\n  %ext = zext i8 %rev to i32\r\n  %cmp = icmp eq i32 %ext, %x\r\n  %sel = select i1 %cmp, i8 %trunc, i8 0\r\n  ret i8 %sel\r\n}\r\n```\r\n\r\n@nikic I have no idea how to fix it in `foldSelectValueEquivalence`/`simplifyWithOpReplaced`. `simplifyWithOpReplaced` may replace the input `x` with a more complicated value `f(x)`.\r\n"
      },
      {
        "author": "dtcxzyw",
        "body": "@nikic Ping."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}