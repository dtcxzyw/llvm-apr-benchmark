{
  "bug_id": "88849",
  "issue_url": "https://github.com/llvm/llvm-project/issues/88849",
  "bug_type": "crash",
  "base_commit": "6b98ab95f0d36705b5a1fc1e755c992ba2329c89",
  "knowledge_cutoff": "2024-04-16T07:36:13Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "b8741cc185e89a95c9161218084f7c8b5578cf96",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        [
          254,
          259
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        "VPTransformState::get"
      ]
    }
  },
  "patch": "commit b8741cc185e89a95c9161218084f7c8b5578cf96\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Fri Jul 19 10:33:07 2024 +0100\n\n    [VPlan] Relax assertion retrieving a scalar from VPTransformState::get.\n    \n    The current assertion VPTransformState::get when retrieving a single\n    scalar only does not account for cases where a def has multiple users,\n    some demanding all scalar lanes, some demanding only a single scalar.\n    \n    For an example, see the modified test case. Relax the assertion by also\n    allowing requesting scalar lanes only when the Def doesn't have only its\n    first lane used.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/88849.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.cpp b/llvm/lib/Transforms/Vectorize/VPlan.cpp\nindex 83a035fb4df8..58de6256900f 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.cpp\n@@ -254,6 +254,7 @@ Value *VPTransformState::get(VPValue *Def, const VPIteration &Instance) {\n Value *VPTransformState::get(VPValue *Def, unsigned Part, bool NeedsScalar) {\n   if (NeedsScalar) {\n     assert((VF.isScalar() || Def->isLiveIn() || hasVectorValue(Def, Part) ||\n+            !vputils::onlyFirstLaneUsed(Def) ||\n             (hasScalarValue(Def, VPIteration(Part, 0)) &&\n              Data.PerPartScalars[Def][Part].size() == 1)) &&\n            \"Trying to access a single scalar per part but has multiple scalars \"\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/SystemZ/scalar-steps-with-users-demanding-all-lanes-and-first-lane-only.ll",
      "commands": [
        "opt -p loop-vectorize -mtriple=s390x-unknown-linux -mcpu=z16 -S %s"
      ],
      "tests": [
        {
          "test_name": "test_scalar_iv_steps_used_by_replicate_and_first_lane_only_vpinst",
          "test_body": "target datalayout = \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-v128:64-a:8:16-n32:64\"\n\n@src = external global [8 x i32], align 4\n\ndefine void @test_scalar_iv_steps_used_by_replicate_and_first_lane_only_vpinst(ptr noalias %dst, ptr noalias %src.1) {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %mul.iv = mul nsw i64 %iv, 4\n  %gep.src.1 = getelementptr inbounds i8, ptr %src.1, i64 %mul.iv\n  %l.1 = load i8, ptr %gep.src.1, align 1\n  %c = icmp eq i8 %l.1, 0\n  br i1 %c, label %then, label %loop.latch\n\nthen:                                             ; preds = %loop.header\n  %iv.or = or disjoint i64 %iv, 4\n  %gep.src = getelementptr inbounds [8 x i32], ptr @src, i64 0, i64 %iv.or\n  %l.2 = load i32, ptr %gep.src, align 4\n  store i32 %l.2, ptr %dst, align 4\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  %iv.next = add nuw nsw i64 %iv, 1\n  %ec = icmp eq i64 %iv.next, 4\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "LoopVectorizer asserts:  Assertion `(VF.isScalar() || Def->isLiveIn() || (hasScalarValue(Def, VPIteration(Part, 0)) && Data.PerPartScalars[Def][Part].size() == 1)) && \"Trying to access a single scalar per part but has multiple scalars \" \"per part.",
    "body": "[tc_crash35_aftercreduce.ll.tar.gz](https://github.com/llvm/llvm-project/files/14988465/tc_crash35_aftercreduce.ll.tar.gz)\r\n\r\nopt -mtriple=s390x-unknown-linux -mcpu=z16 -O3 tc_crash35_aftercreduce.ll -o /dev/null\r\n\r\nVPlan.cpp:253: llvm::Value* llvm::VPTransformState::get(llvm::VPValue*, unsigned int, bool): Assertion `(VF.isScalar() || Def->isLiveIn() || (hasScalarValue(Def, VPIteration(Part, 0)) && Data.PerPartScalars[Def][Part].size() == 1)) && \"Trying to access a single scalar per part but has multiple scalars \" \"per part.\"' failed.\r\n\r\n@fhahn ",
    "author": "JonPsson1",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "Should be fixed now, sorry for the delay @JonPsson1 !"
      }
    ]
  }
}