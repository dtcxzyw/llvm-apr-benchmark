{
  "bug_id": "89390",
  "issue_url": "https://github.com/llvm/llvm-project/issues/89390",
  "bug_type": "miscompilation",
  "base_commit": "3fbaad5a0c67d0a04739ccf51c180c7d829200a7",
  "knowledge_cutoff": "2024-04-19T14:44:07Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "4cc9c6d98dfef90d1ffa69977d13ffa2894a10f7",
    "components": [
      "VectorCombine"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          1405,
          1410
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "VectorCombine::foldShuffleOfBinops"
      ]
    }
  },
  "patch": "commit 4cc9c6d98dfef90d1ffa69977d13ffa2894a10f7\nAuthor: Simon Pilgrim <llvm-dev@redking.me.uk>\nDate:   Mon Apr 22 09:00:20 2024 +0100\n\n    [VectorCombine] foldShuffleOfBinops - don't fold shuffle(divrem(x,y),divrem(z,w)) if mask contains poison\n    \n    Fixes #89390\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex 4918cee1fa82..f23b10540338 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -1405,6 +1405,11 @@ bool VectorCombine::foldShuffleOfBinops(Instruction &I) {\n       B0->getOpcode() != B1->getOpcode() || B0->getType() != VecTy)\n     return false;\n \n+  // Don't introduce poison into div/rem.\n+  if (any_of(Mask, [](int M) { return M == PoisonMaskElem; }) &&\n+      B0->isIntDivRem())\n+    return false;\n+\n   // Try to replace a binop with a shuffle if the shuffle is not costly.\n   // The new shuffle will choose from a single, common operand, so it may be\n   // cheaper than the existing two-operand shuffle.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/X86/shuffle-of-binops.ll",
      "commands": [
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=SSE2",
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=AVX2"
      ],
      "tests": [
        {
          "test_name": "shuf_and_v16i16_yy_expensive_shuf",
          "test_body": "define <16 x i16> @shuf_and_v16i16_yy_expensive_shuf(<16 x i16> %x, <16 x i16> %y, <16 x i16> %z) {\n  %b0 = and <16 x i16> %x, %y\n  %b1 = and <16 x i16> %y, %z\n  %r = shufflevector <16 x i16> %b0, <16 x i16> %b1, <16 x i32> <i32 15, i32 22, i32 25, i32 13, i32 28, i32 0, i32 poison, i32 3, i32 0, i32 30, i32 3, i32 7, i32 9, i32 19, i32 2, i32 22>\n  ret <16 x i16> %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "VectorCombine transform leading to srem by poison",
    "body": "https://alive2.llvm.org/ce/z/HRAkAK\r\n\r\nthis:\r\n```llvm\r\ndefine <4 x i32> @f(<4 x i32> %0, <4 x i32> %1) {\r\n  %3 = srem <4 x i32> %1, %0\r\n  %4 = srem <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %0\r\n  %5 = shufflevector <4 x i32> %3, <4 x i32> %4, <4 x i32> <i32 0, i32 poison, i32 6, i32 3>\r\n  ret <4 x i32> %5\r\n}\r\n```\r\nis getting vector-combined to this:\r\n```llvm\r\ndefine <4 x i32> @f(<4 x i32> %0, <4 x i32> %1) {\r\n  %3 = shufflevector <4 x i32> %1, <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32> <i32 0, i32 poison, i32 6, i32 3>\r\n  %4 = shufflevector <4 x i32> %0, <4 x i32> poison, <4 x i32> <i32 0, i32 poison, i32 2, i32 3>\r\n  %5 = srem <4 x i32> %3, %4\r\n  ret <4 x i32> %5\r\n}\r\n```\r\n\r\nbut that poison in lane 1 is now problematic, this gives us full UB when it hits the srem\r\n\r\ncc @nunoplopes @hatsunespica\r\n",
    "author": "regehr",
    "labels": [
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "RKSimon",
        "body": "I'll take a look at this"
      }
    ]
  }
}