{
  "bug_id": "142462",
  "issue_url": "https://github.com/llvm/llvm-project/issues/142462",
  "bug_type": "crash",
  "base_commit": "4c6449044a943441adf160cb77010c855dcee73c",
  "knowledge_cutoff": "2025-06-02T19:36:30Z",
  "lit_test_dir": [
    "llvm/test/Transforms/EarlyCSE"
  ],
  "hints": {
    "fix_commit": "9a0197c3a443caf275a9b1b86669b398ea615c9f",
    "components": [
      "EarlyCSE"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/EarlyCSE.cpp": [
        [
          400,
          406
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/EarlyCSE.cpp": [
        "isEqualImpl"
      ]
    }
  },
  "patch": "commit 9a0197c3a443caf275a9b1b86669b398ea615c9f\nAuthor: Nikita Popov <npopov@redhat.com>\nDate:   Wed Jun 4 09:04:27 2025 +0200\n\n    [EarlyCSE] Check attributes for commutative intrinsics (#142610)\n    \n    Commutative intrinsics go through a separate code path, which did not\n    check for attribute compatibility, resulting in a later assertion\n    failure.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/142462.\n\ndiff --git a/llvm/lib/Transforms/Scalar/EarlyCSE.cpp b/llvm/lib/Transforms/Scalar/EarlyCSE.cpp\nindex 09cb2f4cb010..5c62a2cf526e 100644\n--- a/llvm/lib/Transforms/Scalar/EarlyCSE.cpp\n+++ b/llvm/lib/Transforms/Scalar/EarlyCSE.cpp\n@@ -400,7 +400,9 @@ static bool isEqualImpl(SimpleValue LHS, SimpleValue RHS) {\n     return LII->getArgOperand(0) == RII->getArgOperand(1) &&\n            LII->getArgOperand(1) == RII->getArgOperand(0) &&\n            std::equal(LII->arg_begin() + 2, LII->arg_end(),\n-                      RII->arg_begin() + 2, RII->arg_end());\n+                      RII->arg_begin() + 2, RII->arg_end()) &&\n+           LII->hasSameSpecialState(RII, /*IgnoreAlignment=*/false,\n+                                    /*IntersectAttrs=*/true);\n   }\n \n   // See comment above in `getHashValue()`.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/EarlyCSE/replace-calls-def-attrs.ll",
      "commands": [
        "opt -S -passes=early-cse  < %s"
      ],
      "tests": [
        {
          "test_name": "same_parent_combine_diff_attrs_needs_intersect2",
          "test_body": "declare ptr @baz.ptr(i8, i8)\n\ndeclare i8 @buz.ptr(ptr, ptr)\n\ndefine i8 @same_parent_combine_diff_attrs_needs_intersect2(i8 %x, i8 %y) {\n  %c1 = call nonnull ptr @baz.ptr(i8 noundef %x, i8 noundef %y) #0\n  %c0 = call ptr @baz.ptr(i8 %x, i8 noundef %y) #0\n  %r = call i8 @buz.ptr(ptr %c0, ptr %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(read) }\n"
        },
        {
          "test_name": "diff_parent_combine_diff_attrs_todo",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @diff_parent_combine_diff_attrs_todo(i1 %c, i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  br i1 %c, label %T, label %F\n\nT:                                                ; preds = %0\n  %c0 = call i8 @baz(i8 noundef %x, i8 noundef %y) #1\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n\nF:                                                ; preds = %0\n  %r2 = add i8 %c1, 4\n  ret i8 %r2\n}\n\nattributes #0 = { memory(none) }\nattributes #1 = { noinline optnone memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @same_parent_combine_diff_attrs(i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 noundef %x, i8 noundef %y) #0\n  %c0 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_needs_intersect",
          "test_body": "declare ptr @baz.ptr(i8, i8)\n\ndeclare i8 @buz.ptr(ptr, ptr)\n\ndefine i8 @same_parent_combine_diff_attrs_needs_intersect(i8 %x, i8 %y) {\n  %c1 = call nonnull ptr @baz.ptr(i8 noundef %x, i8 noundef %y) #0\n  %c0 = call ptr @baz.ptr(i8 %x, i8 noundef %y) #0\n  %r = call i8 @buz.ptr(ptr %c0, ptr %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\n"
        },
        {
          "test_name": "diff_parent_combine_diff_attrs",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @diff_parent_combine_diff_attrs(i1 %c, i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  br i1 %c, label %T, label %F\n\nT:                                                ; preds = %0\n  %c0 = call i8 @baz(i8 noundef %x, i8 noundef %y) #1\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n\nF:                                                ; preds = %0\n  %r2 = add i8 %c1, 4\n  ret i8 %r2\n}\n\nattributes #0 = { memory(none) }\nattributes #1 = { memory(read) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_fail_side_effects",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @same_parent_combine_diff_attrs_fail_side_effects(i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 noundef %x, i8 noundef %y)\n  %c0 = call i8 @baz(i8 %x, i8 noundef %y)\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n}\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_todo",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @same_parent_combine_diff_attrs_todo(i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  %c0 = call i8 @baz(i8 noundef %x, i8 noundef %y) #1\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\nattributes #1 = { alwaysinline memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_fmf2",
          "test_body": "declare float @baz.fp(float, float)\n\ndeclare i8 @buz.fp(float, float)\n\ndefine i8 @same_parent_combine_diff_attrs_fmf2(float %x, float %y) {\n  %c1 = call nnan float @baz.fp(float noundef %x, float noundef %y) #0\n  %c0 = call nnan nsz float @baz.fp(float %x, float noundef %y) #0\n  %r = call i8 @buz.fp(float %c0, float %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_fmf",
          "test_body": "declare float @baz.fp(float, float)\n\ndeclare i8 @buz.fp(float, float)\n\ndefine i8 @same_parent_combine_diff_attrs_fmf(float %x, float %y) {\n  %c1 = call nnan nsz float @baz.fp(float noundef %x, float noundef %y) #0\n  %c0 = call nnan float @baz.fp(float %x, float noundef %y) #0\n  %r = call i8 @buz.fp(float %c0, float %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(read) }\n"
        },
        {
          "test_name": "commutative_intrinsic_intersection_failure",
          "test_body": "define i32 @commutative_intrinsic_intersection_failure(i32 %arg, i32 %arg1) {\n  %call = call i32 @llvm.smin.i32(i32 %arg, i32 %arg1) #1\n  %call2 = call i32 @llvm.smin.i32(i32 %arg1, i32 %arg)\n  %or = or i32 %call2, %call\n  ret i32 %or\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.smin.i32(i32, i32) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\nattributes #1 = { strictfp }\n"
        },
        {
          "test_name": "diff_parent_combine_diff_attrs_fail",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @diff_parent_combine_diff_attrs_fail(i1 %c, i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  br i1 %c, label %T, label %F\n\nT:                                                ; preds = %0\n  %c0 = call i8 @baz(i8 noundef %x, i8 noundef %y) #1\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n\nF:                                                ; preds = %0\n  %r2 = add i8 %c1, 4\n  ret i8 %r2\n}\n\nattributes #0 = { memory(none) }\nattributes #1 = { strictfp memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_really_needs_intersect",
          "test_body": "declare ptr @baz.ptr(i8, i8)\n\ndeclare i8 @buz.ptr(ptr, ptr)\n\ndefine i8 @same_parent_combine_diff_attrs_really_needs_intersect(i8 %x, i8 %y) {\n  %c1 = call nonnull ptr @baz.ptr(i8 noundef %x, i8 noundef %y) #0\n  %c0 = call ptr @baz.ptr(i8 %x, i8 noundef %y) #0\n  %r = call i8 @buz.ptr(ptr %c0, ptr noundef %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(read) }\n"
        },
        {
          "test_name": "diff_parent_combine_diff_attrs_preserves_return_attrs",
          "test_body": "declare ptr @baz.ptr(i8, i8)\n\ndeclare i8 @buz.ptr(ptr, ptr)\n\ndefine i8 @diff_parent_combine_diff_attrs_preserves_return_attrs(i1 %c, i8 %x, i8 %y) {\n  %c1 = call nonnull ptr @baz.ptr(i8 %x, i8 noundef %y) #0\n  br i1 %c, label %T, label %F\n\nT:                                                ; preds = %0\n  %c0 = call nonnull ptr @baz.ptr(i8 noundef %x, i8 noundef %y) #0\n  %r = call i8 @buz.ptr(ptr %c0, ptr noundef %c1)\n  ret i8 %r\n\nF:                                                ; preds = %0\n  ret i8 9\n}\n\nattributes #0 = { memory(read) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_fail",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @same_parent_combine_diff_attrs_fail(i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 %x, i8 noundef %y) #0\n  %c0 = call i8 @baz(i8 noundef %x, i8 noundef %y) #1\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\nattributes #1 = { strictfp memory(none) }\n"
        },
        {
          "test_name": "same_parent_combine_diff_attrs_quasi_side_effects2",
          "test_body": "declare i8 @baz(i8, i8)\n\ndeclare i8 @buz(i8, i8)\n\ndefine i8 @same_parent_combine_diff_attrs_quasi_side_effects2(i8 %x, i8 %y) {\n  %c1 = call i8 @baz(i8 noundef %x, i8 noundef %y) #0\n  %c0 = call i8 @baz(i8 %x, i8 noundef %y)\n  %r = call i8 @buz(i8 %c0, i8 %c1)\n  ret i8 %r\n}\n\nattributes #0 = { memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Compiler asserts running pass \"early-cse<memssa>\"",
    "body": "Consider a testcase like that:\n```\n; ModuleID = 'test.bc'\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-sie-ps5\"\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.smin.i32(i32, i32) #0\n\n; Function Attrs: strictfp\ndefine i32 @baz(i32 %arg, i32 %arg1) local_unnamed_addr #1 {\nbb:\n  %call = call i32 @llvm.smin.i32(i32 %arg, i32 %arg1) #1\n  %call2 = call i32 @llvm.smin.i32(i32 %arg1, i32 %arg)\n  %or = or i32 %call2, %call\n  ret i32 %or\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\nattributes #1 = { strictfp }\n```\n\nIf you run early-cse test, it triggers the assertion (note: make sure to reproduce with version of the compiler with assertions enabled):\n```\nopt.exe -f test.ll --passes=early-cse\n```\n\n```\nopt.exe -f test.ll --passes=early-cse                                                                                                 \nAssertion failed: Success && \"Failed to intersect attributes in callsites that \" \"passed identical check\", file D:\\Dev\\UPSTREAM\\llvm-project\\llvm\\lib\\Transforms\\Scalar\\EarlyCSE.cpp, line 1312                                                                                                                                           PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.                                                          Stack dump:                                                                                                                                                          0.      Program arguments: opt.exe -f test.ll --passes=early-cse                                                                                                     1.      Running pass \"function(early-cse<>)\" on module \"test.ll\"                                                                                                     2.      Running pass \"early-cse<>\" on function \"baz\"                                                                                                                 Exception Code: 0x80000003                                                                                                                                           0x00007FF77F8639BC, D:\\Dev\\Testing\\TOOLCHAIN-19080\\opt.exe(0x00007FF778600000) + 0x72639BC byte(s)\n```\n\nHere is the analysis why the failure happens.\n\nFunction EarlyCSE::processNode determines that these two instructions are common subexpression and one of them could be replaced with another.\n\n```\n %call = call i32 @llvm.smin.i32(i32 %arg, i32 %arg1) #1\n  %call2 = call i32 @llvm.smin.i32(i32 %arg1, i32 %arg)\n\n  attributes #1 ={ strictfp }\n```\nThe piece of code below determines that these two instructions have the same value.\n\n```\n// See if the instruction has an available value.  If so, use it.\nif (Value *V = AvailableValues.lookup(&Inst))\n```\nHowever, one of these instructions has 'strictfp' attribute, which signifies that optimizations to libm function calls should be prevented. \nI think that because of this attribute is present, these two instructions should have had different values. Hence the bug. \n\nThe actual failure happens later in the function combineIRFlags(Inst, V) that is trying to combine attributes for these two function calls. \nFunction tryIntersectAttributes determines the intersection of attributes for these two function calls. This intersection is empty, so it returns false.\nLater, the assertion is triggered.\n\n```\nbool Success =\n        cast<CallBase>(To)->tryIntersectAttributes(cast<CallBase>(&From));\n    assert(Success && \"Failed to intersect attributes in callsites that \"\n                      \"passed identical check\"); \n```\n",
    "author": "romanova-ekaterina",
    "labels": [
      "crash",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "nikic",
        "body": "Using strictfp at a call-site should probably be a verifier error."
      },
      {
        "author": "gregbedwell",
        "body": "Just to add some extra context to this, the original reproducer here is a large C++ project compiled with clang, and encountering this crash during ThinLTO (and in terms of that project the crash is a recent regression from the last week or two).  Let us know if this example is over-reduced and the bug is actually an earlier pass allowing this state to occur in the first place, and I'll work on another small reproducer."
      },
      {
        "author": "nikic",
        "body": "> Using strictfp at a call-site should probably be a verifier error.\n\nLooks like I'm wrong about that. Apparently clang places strictfp on all call-sites in a strictfp function.\n\nIn any case, I think the problem here is that we have some special handling for commutative intrinsics, which does not use the usual attribute comparison logic."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}