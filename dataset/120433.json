{
  "bug_id": "120433",
  "issue_url": "https://github.com/llvm/llvm-project/issues/120433",
  "bug_type": "crash",
  "base_commit": "ac8a9f8fffb605514056f53f12f1fba94ee933e9",
  "knowledge_cutoff": "2024-12-18T15:02:42Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "e7a4d78ad328d02bf515b2fa4af8b2c188a6a636",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          21148,
          21155
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "SLPVectorizerPass::vectorizeCmpInsts"
      ]
    }
  },
  "patch": "commit e7a4d78ad328d02bf515b2fa4af8b2c188a6a636\nAuthor: DianQK <dianqk@dianqk.net>\nDate:   Thu Dec 19 06:21:57 2024 +0800\n\n    [SLP] Check if instructions exist after vectorization (#120434)\n    \n    Fixes #120433.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex d967813075bb..88049897b29a 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -21148,8 +21148,11 @@ bool SLPVectorizerPass::vectorizeCmpInsts(iterator_range<ItT> CmpInsts,\n     if (R.isDeleted(I))\n       continue;\n     for (Value *Op : I->operands())\n-      if (auto *RootOp = dyn_cast<Instruction>(Op))\n+      if (auto *RootOp = dyn_cast<Instruction>(Op)) {\n         Changed |= vectorizeRootInstruction(nullptr, RootOp, BB, R);\n+        if (R.isDeleted(I))\n+          break;\n+      }\n   }\n   // Try to vectorize operands as vector bundles.\n   for (CmpInst *I : CmpInsts) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/slp-deleted-inst.ll",
      "commands": [
        "opt -S -passes=slp-vectorizer < %s"
      ],
      "tests": [
        {
          "test_name": "foo",
          "test_body": "define void @foo() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb3, %bb\n  %i = phi i32 [ %i26, %bb3 ], [ 0, %bb ]\n  %i2 = phi i32 [ %i24, %bb3 ], [ 0, %bb ]\n  br label %bb3\n\nbb3:                                              ; preds = %bb1\n  %i4 = zext i32 %i2 to i64\n  %i5 = mul i64 %i4, 0\n  %i10 = or i64 0, %i5\n  %i11 = trunc i64 %i10 to i32\n  %i12 = and i32 %i11, 0\n  %i13 = zext i32 %i to i64\n  %i14 = mul i64 %i13, 0\n  %i19 = or i64 0, %i14\n  %i20 = trunc i64 %i19 to i32\n  %i21 = and i32 %i20, 0\n  %i22 = or i32 %i12, %i21\n  %i23 = icmp ult i32 %i22, 0\n  %i24 = select i1 %i23, i32 0, i32 0\n  %i25 = icmp ult i32 0, 0\n  %i26 = select i1 %i25, i32 0, i32 0\n  br label %bb1\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLP] Assertion `detail::isPresent(Val) && \"dyn_cast on a non-existent value\"' failed.",
    "body": "This IR crashes on SLP: https://llvm.godbolt.org/z/8oar4o4d1\n\n```llvm\ndefine void @foo() {\nbb:\n  br label %bb1\n\nbb1:                                              ; preds = %bb3, %bb\n  %i = phi i32 [ %i26, %bb3 ], [ 0, %bb ]\n  %i2 = phi i32 [ %i24, %bb3 ], [ 0, %bb ]\n  br label %bb3\n\nbb3:                                              ; preds = %bb1\n  %i4 = zext i32 %i2 to i64\n  %i5 = mul i64 %i4, 0\n  %i10 = or i64 0, %i5\n  %i11 = trunc i64 %i10 to i32\n  %i12 = and i32 %i11, 0\n  %i13 = zext i32 %i to i64\n  %i14 = mul i64 %i13, 0\n  %i19 = or i64 0, %i14\n  %i20 = trunc i64 %i19 to i32\n  %i21 = and i32 %i20, 0\n  %i22 = or i32 %i12, %i21\n  %i23 = icmp ult i32 %i22, 0\n  %i24 = select i1 %i23, i32 0, i32 0\n  %i25 = icmp ult i32 0, 0\n  %i26 = select i1 %i25, i32 0, i32 0\n  br label %bb1\n}\n```",
    "author": "DianQK",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}