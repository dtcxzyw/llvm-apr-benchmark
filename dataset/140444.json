{
  "bug_id": "140444",
  "issue_url": "https://github.com/llvm/llvm-project/issues/140444",
  "bug_type": "miscompilation",
  "base_commit": "0b553e055ad01ca6a2c88f7da92157df29e42fd0",
  "knowledge_cutoff": "2025-05-18T09:13:07Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopUnroll"
  ],
  "hints": {
    "fix_commit": "a0a2a1e095ddd092e668b0b3f9a7dfa9655255e1",
    "components": [
      "LoopPeel"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Utils/LoopPeel.cpp": [
        [
          343,
          354
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Utils/LoopPeel.cpp": [
        "llvm::canPeelLastIteration"
      ]
    }
  },
  "patch": "commit a0a2a1e095ddd092e668b0b3f9a7dfa9655255e1\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sun May 18 11:47:03 2025 +0100\n\n    [LoopPeel] Make sure exit condition has a single use when peeling last.\n    \n    Update the check in canPeelLastIteration to make sure the exiting\n    condition has a single use. When peeling the last iteration, we adjust\n    the condition in the loop body to be true one iteration early, which\n    would be incorrect for other users.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/140444.\n\ndiff --git a/llvm/lib/Transforms/Utils/LoopPeel.cpp b/llvm/lib/Transforms/Utils/LoopPeel.cpp\nindex 646354bba9df..4eaa3c971437 100644\n--- a/llvm/lib/Transforms/Utils/LoopPeel.cpp\n+++ b/llvm/lib/Transforms/Utils/LoopPeel.cpp\n@@ -343,12 +343,12 @@ bool llvm::canPeelLastIteration(const Loop &L, ScalarEvolution &SE) {\n   // codegen. For now, it must\n   // * exit via the latch,\n   // * the exit condition must be a NE/EQ compare of an induction with step\n-  // of 1.\n+  // of 1 and must only be used by the exiting branch.\n   BasicBlock *Latch = L.getLoopLatch();\n   return Latch && Latch == L.getExitingBlock() &&\n          match(Latch->getTerminator(),\n-               m_Br(m_ICmp(Pred, m_Value(Inc), m_Value()), m_BasicBlock(Succ1),\n-                    m_BasicBlock(Succ2))) &&\n+               m_Br(m_OneUse(m_ICmp(Pred, m_Value(Inc), m_Value())),\n+                    m_BasicBlock(Succ1), m_BasicBlock(Succ2))) &&\n          ((Pred == CmpInst::ICMP_EQ && Succ2 == L.getHeader()) ||\n           (Pred == CmpInst::ICMP_NE && Succ1 == L.getHeader())) &&\n          isa<SCEVAddRecExpr>(SE.getSCEV(Inc)) &&\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopUnroll/peel-last-iteration.ll",
      "commands": [
        "opt -p loop-unroll -unroll-full-max-count=0 -S %s"
      ],
      "tests": [
        {
          "test_name": "exit_condition_has_other_loop_users",
          "test_body": "define void @exit_condition_has_other_loop_users() {\nentry:\n  br label %loop.header\n\nloop.header:                                      ; preds = %loop.latch, %entry\n  %iv = phi i16 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %iv.next = add i16 %iv, 1\n  %ec = icmp eq i16 %iv, 100\n  br i1 %ec, label %loop.latch, label %then\n\nthen:                                             ; preds = %loop.header\n  call void @foo(i32 10)\n  br label %loop.latch\n\nloop.latch:                                       ; preds = %then, %loop.header\n  call void @foo(i32 20)\n  br i1 %ec, label %exit, label %loop.header\n\nexit:                                             ; preds = %loop.latch\n  ret void\n}\n\ndeclare void @foo(i32)\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopFullUnroll] Miscompilation at O3",
    "body": "Reproducer:\n```\n; bin/opt -passes=loop-unroll-full reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@g_479 = global i8 -1\n@crc32_tab = global [256 x i32] zeroinitializer\n@.str.8 = constant [15 x i8] c\"checksum = %X\\0A\\00\"\n\ndefine i32 @main() {\nentry:\n  br label %for.cond1.preheader.i\n\nfor.cond1.preheader.i:                            ; preds = %for.cond1.preheader.i, %entry\n  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.cond1.preheader.i ]\n  %0 = and i64 %indvars.iv.i, 20\n  %tobool.not.4.not.i = icmp eq i64 %0, 16\n  %xor.5.i = select i1 %tobool.not.4.not.i, i32 0, i32 1\n  %arrayidx.i = getelementptr [256 x i32], ptr @crc32_tab, i64 0, i64 %indvars.iv.i\n  store i32 %xor.5.i, ptr %arrayidx.i, align 4\n  %indvars.iv.next.i = add i64 %indvars.iv.i, 1\n  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 256\n  br i1 %exitcond.not.i, label %lbl_1516.us.us.i.i, label %for.cond1.preheader.i\n\nlbl_1516.us.us.i.i:                               ; preds = %lbl_1587.us.us.i.i, %for.cond1.preheader.i\n  %conv134690.us.us.i.i = phi i8 [ %spec.select.i.i, %lbl_1587.us.us.i.i ], [ 0, %for.cond1.preheader.i ]\n  %l_1485.0.us.us.i.i = phi i16 [ %inc130.us.us.i.i, %lbl_1587.us.us.i.i ], [ -14340, %for.cond1.preheader.i ]\n  %inc130.us.us.i.i = add i16 %l_1485.0.us.us.i.i, 1\n  %tobool132.not.us.us.i.i = icmp eq i8 %conv134690.us.us.i.i, 0\n  br i1 %tobool132.not.us.us.i.i, label %lbl_1587.us.us.i.i, label %land.rhs133.us.us.i.i\n\nland.rhs133.us.us.i.i:                            ; preds = %lbl_1516.us.us.i.i\n  store i8 25, ptr @g_479, align 1\n  br label %lbl_1587.us.us.i.i\n\nlbl_1587.us.us.i.i:                               ; preds = %land.rhs133.us.us.i.i, %lbl_1516.us.us.i.i\n  %tobool293.not.not.us.us.i.i = icmp eq i16 %l_1485.0.us.us.i.i, 0\n  %spec.select.i.i = select i1 %tobool293.not.not.us.us.i.i, i8 1, i8 0\n  br i1 %tobool293.not.not.us.us.i.i, label %func_134.exit, label %lbl_1516.us.us.i.i\n\nfunc_134.exit:                                    ; preds = %lbl_1587.us.us.i.i\n  %1 = load i8, ptr @g_479, align 1\n  %idxprom.i.i.i = zext i8 %1 to i64\n  %arrayidx.i.i.i = getelementptr [256 x i32], ptr @crc32_tab, i64 0, i64 %idxprom.i.i.i\n  %2 = load i32, ptr %arrayidx.i.i.i, align 4\n  %call.i = call i32 (ptr, ...) @printf(ptr @.str.8, i32 %2)\n  ret i32 0\n}\n\ndeclare i32 @printf(ptr, ...)\n```\n```\n; ModuleID = 'reduced.ll'\nsource_filename = \"reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@g_479 = global i8 -1\n@crc32_tab = global [256 x i32] zeroinitializer\n@.str.8 = constant [15 x i8] c\"checksum = %X\\0A\\00\"\n\ndefine i32 @main() {\nentry:\n  br label %for.cond1.preheader.i\n\nfor.cond1.preheader.i:                            ; preds = %for.cond1.preheader.i, %entry\n  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.cond1.preheader.i ]\n  %0 = and i64 %indvars.iv.i, 20\n  %tobool.not.4.not.i = icmp eq i64 %0, 16\n  %xor.5.i = select i1 %tobool.not.4.not.i, i32 0, i32 1\n  %arrayidx.i = getelementptr [256 x i32], ptr @crc32_tab, i64 0, i64 %indvars.iv.i\n  store i32 %xor.5.i, ptr %arrayidx.i, align 4\n  %indvars.iv.next.i = add i64 %indvars.iv.i, 1\n  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 256\n  br i1 %exitcond.not.i, label %lbl_1516.us.us.i.i.preheader, label %for.cond1.preheader.i\n\nlbl_1516.us.us.i.i.preheader:                     ; preds = %for.cond1.preheader.i\n  br label %lbl_1516.us.us.i.i\n\nlbl_1516.us.us.i.i:                               ; preds = %lbl_1516.us.us.i.i.preheader, %lbl_1587.us.us.i.i\n  %conv134690.us.us.i.i = phi i8 [ %spec.select.i.i, %lbl_1587.us.us.i.i ], [ 0, %lbl_1516.us.us.i.i.preheader ]\n  %l_1485.0.us.us.i.i = phi i16 [ %inc130.us.us.i.i, %lbl_1587.us.us.i.i ], [ -14340, %lbl_1516.us.us.i.i.preheader ]\n  %inc130.us.us.i.i = add nsw i16 %l_1485.0.us.us.i.i, 1\n  %tobool132.not.us.us.i.i = icmp eq i8 %conv134690.us.us.i.i, 0\n  br i1 %tobool132.not.us.us.i.i, label %lbl_1587.us.us.i.i, label %land.rhs133.us.us.i.i\n\nland.rhs133.us.us.i.i:                            ; preds = %lbl_1516.us.us.i.i\n  store i8 25, ptr @g_479, align 1\n  br label %lbl_1587.us.us.i.i\n\nlbl_1587.us.us.i.i:                               ; preds = %land.rhs133.us.us.i.i, %lbl_1516.us.us.i.i\n  %tobool293.not.not.us.us.i.i = icmp eq i16 %l_1485.0.us.us.i.i, -1\n  %spec.select.i.i = select i1 %tobool293.not.not.us.us.i.i, i8 1, i8 0\n  br i1 %tobool293.not.not.us.us.i.i, label %func_134.exit.peel.begin, label %lbl_1516.us.us.i.i, !llvm.loop !0\n\nfunc_134.exit.peel.begin:                         ; preds = %lbl_1587.us.us.i.i\n  %spec.select.i.i.lcssa = phi i8 [ %spec.select.i.i, %lbl_1587.us.us.i.i ]\n  %inc130.us.us.i.i.lcssa = phi i16 [ %inc130.us.us.i.i, %lbl_1587.us.us.i.i ]\n  br label %lbl_1516.us.us.i.i.peel\n\nlbl_1516.us.us.i.i.peel:                          ; preds = %func_134.exit.peel.begin\n  %inc130.us.us.i.i.peel = add i16 %inc130.us.us.i.i.lcssa, 1\n  %tobool132.not.us.us.i.i.peel = icmp eq i8 %spec.select.i.i.lcssa, 0\n  br i1 %tobool132.not.us.us.i.i.peel, label %lbl_1587.us.us.i.i.peel, label %land.rhs133.us.us.i.i.peel\n\nland.rhs133.us.us.i.i.peel:                       ; preds = %lbl_1516.us.us.i.i.peel\n  store i8 25, ptr @g_479, align 1\n  br label %lbl_1587.us.us.i.i.peel\n\nlbl_1587.us.us.i.i.peel:                          ; preds = %land.rhs133.us.us.i.i.peel, %lbl_1516.us.us.i.i.peel\n  %tobool293.not.not.us.us.i.i.peel = icmp eq i16 %inc130.us.us.i.i.lcssa, 0\n  %spec.select.i.i.peel = select i1 %tobool293.not.not.us.us.i.i.peel, i8 1, i8 0\n  br i1 %tobool293.not.not.us.us.i.i.peel, label %func_134.exit.peel.next, label %func_134.exit.peel.next\n\nfunc_134.exit.peel.next:                          ; preds = %lbl_1587.us.us.i.i.peel, %lbl_1587.us.us.i.i.peel\n  br label %lbl_1516.us.us.i.i.peel.next\n\nlbl_1516.us.us.i.i.peel.next:                     ; preds = %func_134.exit.peel.next\n  br label %func_134.exit\n\nfunc_134.exit:                                    ; preds = %lbl_1516.us.us.i.i.peel.next\n  %1 = load i8, ptr @g_479, align 1\n  %idxprom.i.i.i = zext i8 %1 to i64\n  %arrayidx.i.i.i = getelementptr [256 x i32], ptr @crc32_tab, i64 0, i64 %idxprom.i.i.i\n  %2 = load i32, ptr %arrayidx.i.i.i, align 4\n  %call.i = call i32 (ptr, ...) @printf(ptr @.str.8, i32 %2)\n  ret i32 0\n}\n\ndeclare i32 @printf(ptr, ...)\n\n!0 = distinct !{!0, !1}\n!1 = !{!\"llvm.loop.peeled.count\", i32 1}\n```\nBefore:\n```\nchecksum = 1\n```\nAfter:\n```\nchecksum = 0\n```\nllvm version: 3ccb15d6caf57f2a866d496ada2fb52d14b179d2\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:transforms",
      "generated by fuzzer"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reverting https://github.com/llvm/llvm-project/commit/3fcfce4c5e5fd1c3072e8db1d692c93459e8cd74 fixes this miscompilation. And https://github.com/llvm/llvm-project/commit/7e14161f49b32387988cf9d937bbfaa27d0fbdd5 doesn't fix this problem. cc @fhahn \n\n"
      },
      {
        "author": "fhahn",
        "body": "Issue is that we modify the exit condition w/o checking for other users."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}