{
  "bug_id": "131071",
  "issue_url": "https://github.com/llvm/llvm-project/issues/131071",
  "bug_type": "crash",
  "base_commit": "fecd937910f640663885e0434bfed80cf4574072",
  "knowledge_cutoff": "2025-03-13T04:07:59Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "2e13ec561c8139951e3f0815c35c758a7a3011db",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h": [
        [
          494,
          501
        ]
      ],
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        [
          7121,
          7126
        ],
        [
          9620,
          9626
        ],
        [
          9640,
          9649
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        [
          1532,
          1543
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        [
          32,
          38
        ],
        [
          83,
          88
        ],
        [
          106,
          111
        ]
      ],
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.h": [
        [
          68,
          79
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/LoopVectorize.cpp": [
        "LoopVectorizationPlanner::buildVPlan",
        "LoopVectorizationPlanner::planInVPlanNativePath",
        "LoopVectorizationPlanner::tryToBuildVPlanWithVPRecipes"
      ],
      "llvm/lib/Transforms/Vectorize/VPlan.cpp": [
        "LoopVectorizationPlanner::buildVPlans"
      ],
      "llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp": [
        "VPlanTransforms::VPInstructionsToVPRecipes",
        "sinkScalarOperands"
      ]
    }
  },
  "patch": "commit 2e13ec561c8139951e3f0815c35c758a7a3011db\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Wed Mar 19 21:35:15 2025 +0000\n\n    [VPlan] Bail out on non-intrinsic calls in VPlanNativePath.\n    \n    Update initial VPlan-construction in VPlanNativePath in line with the\n    inner loop path, in that it bails out when encountering constructs it\n    cannot handle, like non-intrinsic calls.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/131071.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h b/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h\nindex ed3e45dd2c6c..7bbe8669cef6 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h\n@@ -494,8 +494,10 @@ protected:\n private:\n   /// Build a VPlan according to the information gathered by Legal. \\return a\n   /// VPlan for vectorization factors \\p Range.Start and up to \\p Range.End\n-  /// exclusive, possibly decreasing \\p Range.End.\n-  VPlanPtr buildVPlan(VFRange &Range);\n+  /// exclusive, possibly decreasing \\p Range.End. If no VPlan can be built for\n+  /// the input range, set the largest included VF to the maximum VF for which\n+  /// no plan could be built.\n+  VPlanPtr tryToBuildVPlan(VFRange &Range);\n \n   /// Build a VPlan using VPRecipes according to the information gather by\n   /// Legal. This method is only used for the legacy inner loop vectorizer.\ndiff --git a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\nindex 89337dc38535..61e0d18445b6 100644\n--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n+++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp\n@@ -7121,6 +7121,9 @@ LoopVectorizationPlanner::planInVPlanNativePath(ElementCount UserVF) {\n                       << \"VF \" << VF << \" to build VPlans.\\n\");\n     buildVPlans(VF, VF);\n \n+    if (VPlans.empty())\n+      return VectorizationFactor::Disabled();\n+\n     // For VPlan build stress testing, we bail out after VPlan construction.\n     if (VPlanBuildStressTest)\n       return VectorizationFactor::Disabled();\n@@ -9620,7 +9623,7 @@ LoopVectorizationPlanner::tryToBuildVPlanWithVPRecipes(VFRange &Range) {\n   return Plan;\n }\n \n-VPlanPtr LoopVectorizationPlanner::buildVPlan(VFRange &Range) {\n+VPlanPtr LoopVectorizationPlanner::tryToBuildVPlan(VFRange &Range) {\n   // Outer loop handling: They may require CFG and instruction level\n   // transformations before even evaluating whether vectorization is profitable.\n   // Since we cannot modify the incoming IR, we need to build VPlan upfront in\n@@ -9640,10 +9643,13 @@ VPlanPtr LoopVectorizationPlanner::buildVPlan(VFRange &Range) {\n   for (ElementCount VF : Range)\n     Plan->addVF(VF);\n \n-  VPlanTransforms::VPInstructionsToVPRecipes(\n-      Plan,\n-      [this](PHINode *P) { return Legal->getIntOrFpInductionDescriptor(P); },\n-      *PSE.getSE(), *TLI);\n+  if (!VPlanTransforms::tryToConvertVPInstructionsToVPRecipes(\n+          Plan,\n+          [this](PHINode *P) {\n+            return Legal->getIntOrFpInductionDescriptor(P);\n+          },\n+          *PSE.getSE(), *TLI))\n+    return nullptr;\n \n   // Tail folding is not supported for outer loops, so the induction increment\n   // is guaranteed to not wrap.\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.cpp b/llvm/lib/Transforms/Vectorize/VPlan.cpp\nindex b63cdd04530a..ef82734840ed 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.cpp\n@@ -1532,12 +1532,13 @@ void LoopVectorizationPlanner::buildVPlans(ElementCount MinVF,\n   auto MaxVFTimes2 = MaxVF * 2;\n   for (ElementCount VF = MinVF; ElementCount::isKnownLT(VF, MaxVFTimes2);) {\n     VFRange SubRange = {VF, MaxVFTimes2};\n-    auto Plan = buildVPlan(SubRange);\n-    VPlanTransforms::optimize(*Plan);\n-    // Update the name of the latch of the top-level vector loop region region\n-    // after optimizations which includes block folding.\n-    Plan->getVectorLoopRegion()->getExiting()->setName(\"vector.latch\");\n-    VPlans.push_back(std::move(Plan));\n+    if (auto Plan = tryToBuildVPlan(SubRange)) {\n+      VPlanTransforms::optimize(*Plan);\n+      // Update the name of the latch of the top-level vector loop region region\n+      // after optimizations which includes block folding.\n+      Plan->getVectorLoopRegion()->getExiting()->setName(\"vector.latch\");\n+      VPlans.push_back(std::move(Plan));\n+    }\n     VF = SubRange.End;\n   }\n }\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\nindex e6f788a18805..6c8680ac9661 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp\n@@ -32,7 +32,7 @@\n \n using namespace llvm;\n \n-void VPlanTransforms::VPInstructionsToVPRecipes(\n+bool VPlanTransforms::tryToConvertVPInstructionsToVPRecipes(\n     VPlanPtr &Plan,\n     function_ref<const InductionDescriptor *(PHINode *)>\n         GetIntOrFpInductionDescriptor,\n@@ -83,6 +83,9 @@ void VPlanTransforms::VPInstructionsToVPRecipes(\n         } else if (GetElementPtrInst *GEP = dyn_cast<GetElementPtrInst>(Inst)) {\n           NewRecipe = new VPWidenGEPRecipe(GEP, Ingredient.operands());\n         } else if (CallInst *CI = dyn_cast<CallInst>(Inst)) {\n+          Intrinsic::ID VectorID = getVectorIntrinsicIDForCall(CI, &TLI);\n+          if (VectorID == Intrinsic::not_intrinsic)\n+            return false;\n           NewRecipe = new VPWidenIntrinsicRecipe(\n               *CI, getVectorIntrinsicIDForCall(CI, &TLI),\n               {Ingredient.op_begin(), Ingredient.op_end() - 1}, CI->getType(),\n@@ -106,6 +109,7 @@ void VPlanTransforms::VPInstructionsToVPRecipes(\n       Ingredient.eraseFromParent();\n     }\n   }\n+  return true;\n }\n \n static bool sinkScalarOperands(VPlan &Plan) {\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlanTransforms.h b/llvm/lib/Transforms/Vectorize/VPlanTransforms.h\nindex 2ec07eea1ecc..fe93637ab723 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlanTransforms.h\n+++ b/llvm/lib/Transforms/Vectorize/VPlanTransforms.h\n@@ -68,12 +68,13 @@ struct VPlanTransforms {\n       bool RequiresScalarEpilogueCheck, bool TailFolded, Loop *TheLoop);\n \n   /// Replaces the VPInstructions in \\p Plan with corresponding\n-  /// widen recipes.\n-  static void\n-  VPInstructionsToVPRecipes(VPlanPtr &Plan,\n-                            function_ref<const InductionDescriptor *(PHINode *)>\n-                                GetIntOrFpInductionDescriptor,\n-                            ScalarEvolution &SE, const TargetLibraryInfo &TLI);\n+  /// widen recipes. Returns false if any VPInstructions could not be converted\n+  /// to a wide recipe if needed.\n+  static bool tryToConvertVPInstructionsToVPRecipes(\n+      VPlanPtr &Plan,\n+      function_ref<const InductionDescriptor *(PHINode *)>\n+          GetIntOrFpInductionDescriptor,\n+      ScalarEvolution &SE, const TargetLibraryInfo &TLI);\n \n   /// Try to have all users of fixed-order recurrences appear after the recipe\n   /// defining their previous value, by either sinking users or hoisting recipes\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/vplan-widen-call-instruction.ll",
      "commands": [
        "opt -passes=loop-vectorize -force-vector-width=4 -enable-vplan-native-path -S %s"
      ],
      "tests": [
        {
          "test_name": "call_to_non_intrinsic",
          "test_body": "define void @call_to_non_intrinsic() {\nentry:\n  br label %outer.header\n\nouter.header:                                     ; preds = %outer.latch, %entry\n  %outer.iv = phi i64 [ 0, %entry ], [ %outer.iv.next, %outer.latch ]\n  br label %inner.header\n\ninner.header:                                     ; preds = %inner.header, %outer.header\n  %inner.iv = phi i64 [ 0, %outer.header ], [ %inner.iv.next, %inner.header ]\n  call void @use()\n  %inner.iv.next = add i64 %inner.iv, 1\n  %inner.ec = icmp eq i64 %inner.iv.next, 100\n  br i1 %inner.ec, label %outer.latch, label %inner.header\n\nouter.latch:                                      ; preds = %inner.header\n  %outer.iv.next = add i64 %outer.iv, 1\n  %outer.ec = icmp eq i64 %outer.iv.next, 100\n  br i1 %outer.ec, label %exit, label %outer.header, !llvm.loop !0\n\nexit:                                             ; preds = %outer.latch\n  ret void\n}\n\ndeclare void @use()\n\n!0 = distinct !{!0, !1}\n!1 = !{!\"llvm.loop.vectorize.enable\", i1 true}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[LoopVectorize] Assertion `ID != Intrinsic::not_intrinsic && \"Not an intrinsic!\"' failed.",
    "body": "Reproducer: https://godbolt.org/z/n7E1TjTv5\n```\n; bin/opt -passes=loop-vectorize -enable-vplan-native-path reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main() {\nentry:\n  br label %for.cond2.preheader.i815\n\nfor.cond2.preheader.i815:                         ; preds = %for.cond.cleanup8.i835.split.us, %entry\n  %I.03.i816 = phi i64 [ %inc20.i839, %for.cond.cleanup8.i835.split.us ], [ 0, %entry ]\n  br label %cont.i830.us\n\ncont.i830.us:                                     ; preds = %cont.i830.us, %for.cond2.preheader.i815\n  %K.01.i824.us = phi i64 [ 0, %for.cond2.preheader.i815 ], [ %inc.i833.us, %cont.i830.us ]\n  call void @use(ptr null, i64 0)\n  %inc.i833.us = add i64 %K.01.i824.us, 1\n  %exitcond.not.i834.us = icmp eq i64 %inc.i833.us, 0\n  br i1 %exitcond.not.i834.us, label %for.cond.cleanup8.i835.split.us, label %cont.i830.us\n\nfor.cond.cleanup8.i835.split.us:                  ; preds = %cont.i830.us\n  %inc20.i839 = add i64 %I.03.i816, 1\n  %exitcond5.not.i840 = icmp eq i64 %inc20.i839, 0\n  br i1 %exitcond5.not.i840, label %\"_ZZ4mainENK3$_7clEmmmPi.exit.loopexit1081\", label %for.cond2.preheader.i815, !llvm.loop !0\n\n\"_ZZ4mainENK3$_7clEmmmPi.exit.loopexit1081\":      ; preds = %for.cond.cleanup8.i835.split.us\n  ret i32 0\n}\n\ndeclare void @use(ptr, i64)\n\n!0 = distinct !{!0, !1, !2}\n!1 = !{!\"llvm.loop.mustprogress\"}\n!2 = !{!\"llvm.loop.vectorize.enable\", i1 true}\n```\n```\nopt: /root/llvm-project/llvm/lib/Analysis/VectorUtils.cpp:175: bool llvm::isVectorIntrinsicWithOverloadTypeAtArg(llvm::Intrinsic::ID, int, const llvm::TargetTransformInfo*): Assertion `ID != Intrinsic::not_intrinsic && \"Not an intrinsic!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=loop-vectorize -enable-vplan-native-path <source>\n1.\tRunning pass \"function(loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>)\" on module \"<source>\"\n2.\tRunning pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"main\"\n #0 0x0000000005475858 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5475858)\n #1 0x0000000005473214 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x00007024fda42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x00007024fda969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x00007024fda42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x00007024fda287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00007024fda2871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)\n #7 0x00007024fda39e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n #8 0x0000000004bea5d7 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4bea5d7)\n #9 0x00000000045582f0 llvm::VPWidenIntrinsicRecipe::execute(llvm::VPTransformState&) (.part.0) VPlanRecipes.cpp:0:0\n#10 0x0000000004513ea7 llvm::VPBasicBlock::executeRecipes(llvm::VPTransformState*, llvm::BasicBlock*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4513ea7)\n#11 0x000000000451e4cf llvm::VPBasicBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x451e4cf)\n#12 0x000000000451f5c0 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x451f5c0)\n#13 0x000000000451f5c0 llvm::VPRegionBlock::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x451f5c0)\n#14 0x000000000452b451 llvm::VPlan::execute(llvm::VPTransformState*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x452b451)\n#15 0x00000000043ddd2f llvm::LoopVectorizationPlanner::executePlan(llvm::ElementCount, unsigned int, llvm::VPlan&, llvm::InnerLoopVectorizer&, llvm::DominatorTree*, bool, llvm::DenseMap<llvm::SCEV const*, llvm::Value*, llvm::DenseMapInfo<llvm::SCEV const*, void>, llvm::detail::DenseMapPair<llvm::SCEV const*, llvm::Value*>> const*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x43ddd2f)\n#16 0x00000000043f0e36 llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x43f0e36)\n#17 0x00000000043f45e9 llvm::LoopVectorizePass::runImpl(llvm::Function&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x43f45e9)\n#18 0x00000000043f4c63 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x43f4c63)\n#19 0x000000000319510e llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x319510e)\n#20 0x0000000005270840 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5270840)\n#21 0x0000000000e79f8e llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe79f8e)\n#22 0x000000000526f15b llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x526f15b)\n#23 0x0000000000e7910e llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0xe7910e)\n#24 0x000000000526eb60 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x526eb60)\n#25 0x000000000094151a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x94151a)\n#26 0x0000000000934c6c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x934c6c)\n#27 0x00007024fda29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#28 0x00007024fda29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#29 0x000000000092c755 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x92c755)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n```\nReduced from llvm-test-suite/SingleSource/UnitTests/Vectorizer/VPlanNativePath/outer-loop-vect.cpp with ubsan+https://github.com/llvm/llvm-project/pull/130990 enabled\n\n\n",
    "author": "dtcxzyw",
    "labels": [
      "vectorizers",
      "crash-on-valid"
    ],
    "comments": [
      {
        "author": "zhangjunphy",
        "body": "It seems for vplan vectorization, `LoopVectorizationLegality::canVectorize` only checks the loop structure and then skips the check of individual instructions. So the pass later tries to rewirte that call to `@use` and failed."
      },
      {
        "author": "zhangjunphy",
        "body": "From the description of `isExplicitVecOuterLoop`. This does not seem to a problem of the LoopVectorization pass.\nWhen `-enable-vplan-native-path` is provided, LLVM only attempts to vectorize outer loops marked with a pragma.\nAnd the programmer is expected to ensure vectorization must be legal for those loops.\nhttps://github.com/llvm/llvm-project/blob/125553a6779ba179a9b4b5212c531da2474258fd/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp#L2183-L2192\n\n=============\nEdited for clarity."
      },
      {
        "author": "dtcxzyw",
        "body": "Does ubsan instrumentation break this assumption?\n"
      },
      {
        "author": "zhangjunphy",
        "body": "Well, I'm far from familiar with the design of vectorization and this is just my conclusion from reading the code.\n\nFrom what I understand, if the flag `-enable-vplan-native-path` is specified, the IR producer is required to be certain that the loop marked with \"llvm.loop.vectorize.enable\" is actually vectorizable. Otherwise this will cause problems as that flag will cause vectorization to bypass some legality checks and to directly attempt vectorizing the loop. \n\nIn this case,  the instrumentation added the \"llvm.loop.vectorize.enable\" metadata to the loop. But there is the call to `@use` which is not vectorizable. And this check is bypassed with  `-enable-vplan-native-path`, thus caused the problem."
      },
      {
        "author": "fhahn",
        "body": "It is true that the native path somewhat relies on the loops being marked safe for vectorization by the user, we still shouldn't crash. In this particular case we can easily detect that we cannot create a valid VPlan, and bail out. I will prepare a fix."
      }
    ]
  },
  "verified": true
}