{
  "bug_id": "102187",
  "issue_url": "https://github.com/llvm/llvm-project/issues/102187",
  "bug_type": "crash",
  "base_commit": "4b6e3e38c46f8fedb92a30b29cc9654450244e2d",
  "knowledge_cutoff": "2024-08-06T17:31:46Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "2601d6f189cf1d4e4e77a7cba83e5d32c87bf079",
    "components": [
      "SLPVectorizer"
    ],
    "files": [
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          14049,
          14060
        ],
        [
          14080,
          14090
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "getWidenedType",
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit 2601d6f189cf1d4e4e77a7cba83e5d32c87bf079\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Tue Aug 6 12:27:36 2024 -0700\n\n    [SLP]Fix PR102187: do not insert extractelement before landingpad instruction.\n    \n    Landingpad instruction must be the very first instruction after the phi\n    nodes, so need to inser extractelement/shuffles after this instruction.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/102187\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 9589d306581e..5c8873853a73 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -14049,12 +14049,19 @@ Value *BoUpSLP::vectorizeTree(\n              \"ExternallyUsedValues map or remain as scalar in vectorized \"\n              \"instructions\");\n       if (auto *VecI = dyn_cast<Instruction>(Vec)) {\n-        if (auto *PHI = dyn_cast<PHINode>(VecI))\n-          Builder.SetInsertPoint(PHI->getParent(),\n-                                 PHI->getParent()->getFirstNonPHIIt());\n-        else\n+        if (auto *PHI = dyn_cast<PHINode>(VecI)) {\n+          if (PHI->getParent()->isLandingPad())\n+            Builder.SetInsertPoint(\n+                PHI->getParent(),\n+                std::next(\n+                    PHI->getParent()->getLandingPadInst()->getIterator()));\n+          else\n+            Builder.SetInsertPoint(PHI->getParent(),\n+                                   PHI->getParent()->getFirstNonPHIIt());\n+        } else {\n           Builder.SetInsertPoint(VecI->getParent(),\n                                  std::next(VecI->getIterator()));\n+        }\n       } else {\n         Builder.SetInsertPoint(&F->getEntryBlock(), F->getEntryBlock().begin());\n       }\n@@ -14080,11 +14087,18 @@ Value *BoUpSLP::vectorizeTree(\n             auto VecIt = VectorCasts.find(Key);\n             if (VecIt == VectorCasts.end()) {\n               IRBuilderBase::InsertPointGuard Guard(Builder);\n-              if (auto *IVec = dyn_cast<PHINode>(Vec))\n-                Builder.SetInsertPoint(\n-                    IVec->getParent()->getFirstNonPHIOrDbgOrLifetime());\n-              else if (auto *IVec = dyn_cast<Instruction>(Vec))\n+              if (auto *IVec = dyn_cast<PHINode>(Vec)) {\n+                if (IVec->getParent()->isLandingPad())\n+                  Builder.SetInsertPoint(IVec->getParent(),\n+                                         std::next(IVec->getParent()\n+                                                       ->getLandingPadInst()\n+                                                       ->getIterator()));\n+                else\n+                  Builder.SetInsertPoint(\n+                      IVec->getParent()->getFirstNonPHIOrDbgOrLifetime());\n+              } else if (auto *IVec = dyn_cast<Instruction>(Vec)) {\n                 Builder.SetInsertPoint(IVec->getNextNonDebugInstruction());\n+              }\n               Vec = Builder.CreateIntCast(\n                   Vec,\n                   getWidenedType(\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/extractelement-phi-in-landingpad.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -slp-threshold=-99999 -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test() personality ptr null {\nbb:\n  invoke void null()\n          to label %bb65 unwind label %bb4\n\nbb2:                                              ; No predecessors!\n  invoke void null()\n          to label %bb65 unwind label %bb4\n\nbb4:                                              ; preds = %bb2, %bb\n  %phi5 = phi i32 [ 0, %bb ], [ 0, %bb2 ]\n  %phi6 = phi i32 [ 0, %bb ], [ 0, %bb2 ]\n  %landingpad = landingpad { ptr, i32 }\n          cleanup\n  call void null(i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5, i32 %phi5)\n  ret void\n\nbb65:                                             ; preds = %bb2, %bb\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "LLVM ERROR: Broken module found, compilation aborted!",
    "body": "To reproduce run opt with  \r\n[Test.ll.tgz](https://github.com/user-attachments/files/16513795/Test.ll.tgz)\r\nusing `-passes slp-vectorizer -slp-threshold=-99999` \r\n\r\nReproducer https://godbolt.org/z/f4szGsMYd\r\n\r\n```\r\nThe unwind destination does not have an exception handling instruction!\r\n  %invoke = invoke i64 null(ptr addrspace(1) null, i32 0, i64 0, i32 0)\r\n          to label %bb65 unwind label %bb4\r\nThe unwind destination does not have an exception handling instruction!\r\n  %invoke3 = invoke i64 null(ptr addrspace(1) null, i32 0, i64 0, i32 0)\r\n          to label %bb65 unwind label %bb4\r\nLandingPadInst not the first non-PHI instruction in the block.\r\n  %landingpad = landingpad { ptr, i32 }\r\n          cleanup\r\nLLVM ERROR: Broken module found, compilation aborted!\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes slp-vectorizer -slp-threshold=-99999 <source>\r\n1.\tRunning pass \"verify\" on module \"<source>\"\r\n #0 0x0000000004f1d2d8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4f1d2d8)\r\n #1 0x0000000004f1aa4c SignalHandler(int) Signals.cpp:0:0\r\n #2 0x0000788c1ca42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #3 0x0000788c1ca969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\r\n #4 0x0000788c1ca42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\r\n #5 0x0000788c1ca287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\r\n #6 0x00000000007b40fd llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\r\n #7 0x0000000004e571e8 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4e571e8)\r\n #8 0x0000000004d53550 llvm::VerifierPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d53550)\r\n #9 0x00000000008d8a7e llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d8a7e)\r\n#10 0x0000000004d17270 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x4d17270)\r\n#11 0x00000000008e37f2 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8e37f2)\r\n#12 0x00000000008d671c optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8d671c)\r\n#13 0x0000788c1ca29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\r\n#14 0x0000788c1ca29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\r\n#15 0x00000000008cdb7e _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x8cdb7e)\r\nProgram terminated with signal: SIGSEGV\r\nCompiler returned: 139\r\n```",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash-on-valid"
    ],
    "comments": []
  }
}
