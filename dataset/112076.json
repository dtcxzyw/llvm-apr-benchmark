{
  "bug_id": "112076",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112076",
  "bug_type": "miscompilation",
  "base_commit": "8c56dd3040f295874e3d5742b5dfc109adf1f728",
  "knowledge_cutoff": "2024-10-12T03:31:00Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "2c094ac761912eea0d7e8ccb140bc647b5378bdf",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        [
          3466,
          3472
        ],
        [
          3501,
          3506
        ],
        [
          4148,
          4154
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp": [
        "InstCombinerImpl::visitSelectInst",
        "foldBitCeil"
      ]
    }
  },
  "patch": "commit 2c094ac761912eea0d7e8ccb140bc647b5378bdf\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Nov 20 21:15:26 2024 +0800\n\n    [InstCombine] Drop range attributes in `foldBitCeil` (#116641)\n    \n    Closes https://github.com/llvm/llvm-project/issues/112076\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\nindex 28dbca027037..2526ce7704ab 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp\n@@ -3466,7 +3466,8 @@ static bool isSafeToRemoveBitCeilSelect(ICmpInst::Predicate Pred, Value *Cond0,\n // Note that the select is optimized away while the shift count is masked with\n // 31.  We handle some variations of the input operand like std::bit_ceil(X +\n // 1).\n-static Instruction *foldBitCeil(SelectInst &SI, IRBuilderBase &Builder) {\n+static Instruction *foldBitCeil(SelectInst &SI, IRBuilderBase &Builder,\n+                                InstCombinerImpl &IC) {\n   Type *SelType = SI.getType();\n   unsigned BitWidth = SelType->getScalarSizeInBits();\n \n@@ -3501,6 +3502,10 @@ static Instruction *foldBitCeil(SelectInst &SI, IRBuilderBase &Builder) {\n   // single hardware instruction as opposed to BitWidth - CTLZ, where BitWidth\n   // is an integer constant.  Masking with BitWidth-1 comes free on some\n   // hardware as part of the shift instruction.\n+\n+  // Drop range attributes and re-infer them in the next iteration.\n+  cast<Instruction>(Ctlz)->dropPoisonGeneratingAnnotations();\n+  IC.addToWorklist(cast<Instruction>(Ctlz));\n   Value *Neg = Builder.CreateNeg(Ctlz);\n   Value *Masked =\n       Builder.CreateAnd(Neg, ConstantInt::get(SelType, BitWidth - 1));\n@@ -4148,7 +4153,7 @@ Instruction *InstCombinerImpl::visitSelectInst(SelectInst &SI) {\n   if (sinkNotIntoOtherHandOfLogicalOp(SI))\n     return &SI;\n \n-  if (Instruction *I = foldBitCeil(SI, Builder))\n+  if (Instruction *I = foldBitCeil(SI, Builder, *this))\n     return I;\n \n   if (Instruction *I = foldSelectToCmp(SI))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/bit_ceil.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_drop_range_attr",
          "test_body": "define i32 @test_drop_range_attr(i32 %x) {\n  %ctlz = call range(i32 1, 33) i32 @llvm.ctlz.i32(i32 %x, i1 false)\n  %sub = sub i32 32, %ctlz\n  %shl = shl i32 1, %sub\n  %dec = add i32 %x, -1\n  %ult = icmp ult i32 %dec, -2\n  %sel = select i1 %ult, i32 %shl, i32 1\n  ret i32 %sel\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctlz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        },
        {
          "test_name": "pr91691_keep_nsw",
          "test_body": "define i32 @pr91691_keep_nsw(i32 %0) {\n  %2 = sub nsw i32 -2, %0\n  %3 = tail call i32 @llvm.ctlz.i32(i32 %2, i1 false)\n  %4 = sub i32 32, %3\n  %5 = shl i32 1, %4\n  %6 = icmp ult i32 %0, -2\n  %7 = select i1 %6, i32 %5, i32 1\n  ret i32 %7\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare i32 @llvm.ctlz.i32(i32, i1 immarg) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `range` attribute should be dropped in `foldBitCeil`",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/NQTmkh (Please use latest alive2 with https://github.com/AliveToolkit/alive2/pull/1097)\r\n```\r\ndefine i32 @src(i32 %x) {\r\n  %ctlz = call range(i32 1, 33) i32 @llvm.ctlz.i32(i32 %x, i1 false)\r\n  %sub = sub i32 32, %ctlz\r\n  %shl = shl i32 1, %sub\r\n  %dec = add i32 %x, -1\r\n  %ult = icmp ult i32 %dec, -2\r\n  %sel = select i1 %ult, i32 %shl, i32 1\r\n  ret i32 %sel\r\n}\r\n\r\ndefine i32 @tgt(i32 %x) {\r\n  %ctlz = call range(i32 1, 33) i32 @llvm.ctlz.i32(i32 %x, i1 false)\r\n  %1 = sub nsw i32 0, %ctlz\r\n  %2 = and i32 %1, 31\r\n  %sel = shl nuw i32 1, %2\r\n  ret i32 %sel\r\n}\r\n```\r\n```\r\n----------------------------------------\r\ndefine i32 @src(i32 %x) {\r\n#0:\r\n  %ctlz = ctlz i32 %x, 0\r\n  %#range_0_%ctlz = !range i32 %ctlz, i32 1, i32 33\r\n  %sub = sub i32 32, %#range_0_%ctlz\r\n  %shl = shl i32 1, %sub\r\n  %dec = add i32 %x, 4294967295\r\n  %ult = icmp ult i32 %dec, 4294967294\r\n  %sel = select i1 %ult, i32 %shl, i32 1\r\n  ret i32 %sel\r\n}\r\n=>\r\ndefine i32 @tgt(i32 %x) {\r\n#0:\r\n  %ctlz = ctlz i32 %x, 0\r\n  %#range_0_%ctlz = !range i32 %ctlz, i32 1, i32 33\r\n  %#1 = sub nsw i32 0, %#range_0_%ctlz\r\n  %#2 = and i32 %#1, 31\r\n  %sel = shl nuw i32 1, %#2\r\n  ret i32 %sel\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\ni32 %x = #xffffffff (4294967295, -1)\r\n\r\nSource:\r\ni32 %ctlz = #x00000000 (0)\r\ni32 %#range_0_%ctlz = poison\r\ni32 %sub = poison\r\ni32 %shl = poison\r\ni32 %dec = #xfffffffe (4294967294, -2)\r\ni1 %ult = #x0 (0)\r\ni32 %sel = #x00000001 (1)\r\n\r\nTarget:\r\ni32 %ctlz = #x00000000 (0)\r\ni32 %#range_0_%ctlz = poison\r\ni32 %#1 = poison\r\ni32 %#2 = poison\r\ni32 %sel = poison\r\nSource value: #x00000001 (1)\r\nTarget value: poison\r\n```\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": false
  },
  "bisect": "N/A"
}