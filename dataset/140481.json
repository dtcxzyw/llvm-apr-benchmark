{
  "bug_id": "140481",
  "issue_url": "https://github.com/llvm/llvm-project/issues/140481",
  "bug_type": "miscompilation",
  "base_commit": "f72a8ee489368dd20c1392b122b0736aa7c8ada1",
  "knowledge_cutoff": "2025-05-18T21:41:49Z",
  "lit_test_dir": [
    "llvm/test/Transforms/ConstraintElimination"
  ],
  "hints": {
    "fix_commit": "287294d54d7a806e70b0061cf5ccc1fc2bd03eea",
    "components": [
      "ConstraintElimination"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Scalar/ConstraintElimination.cpp": [
        [
          64,
          83
        ],
        [
          366,
          391
        ],
        [
          467,
          474
        ],
        [
          488,
          498
        ],
        [
          533,
          553
        ],
        [
          557,
          564
        ],
        [
          593,
          600
        ],
        [
          603,
          609
        ],
        [
          611,
          643
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Scalar/ConstraintElimination.cpp": [
        "Decomposition",
        "addWithOverflow",
        "decomposeGEP",
        "getContextInstForUse",
        "multiplyWithOverflow",
        "sub"
      ]
    }
  },
  "patch": "commit 287294d54d7a806e70b0061cf5ccc1fc2bd03eea\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Thu May 22 11:31:04 2025 +0800\n\n    [ConstraintElim] Do not allow overflows in `Decomposition` (#140541)\n    \n    Consider the following case:\n    ```\n    define i1 @pr140481(i32 %x) {\n      %cond = icmp slt i32 %x, 0\n      call void @llvm.assume(i1 %cond)\n      %add = add nsw i32 %x, 5001000\n      %mul1 = mul nsw i32 %add, -5001000\n      %mul2 = mul nsw i32 %mul1, 5001000\n      %cmp2 = icmp sgt i32 %mul2, 0\n      ret i1 %cmp2\n    }\n    ```\n    Before this patch, `decompose(%mul2)` returns `-25010001000000 * %x +\n    4052193514966861312`.\n    Therefore, `%cmp2` will be simplified into true because `%x s< 0 &&\n    -25010001000000 * %x + 4052193514966861312 s<= 0` is unsat.\n    \n    It is incorrect since the offset `-25010001000000 * 5001000 ->\n    4052193514966861312` signed wraps.\n    This patch treats a decomposition as invalid if overflows occur when\n    computing coefficients.\n    \n    Closes https://github.com/llvm/llvm-project/issues/140481.\n\ndiff --git a/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp b/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\nindex da5be383df15..cbad5dd35768 100644\n--- a/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\n+++ b/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp\n@@ -64,20 +64,6 @@ static cl::opt<bool> DumpReproducers(\n static int64_t MaxConstraintValue = std::numeric_limits<int64_t>::max();\n static int64_t MinSignedConstraintValue = std::numeric_limits<int64_t>::min();\n \n-// A helper to multiply 2 signed integers where overflowing is allowed.\n-static int64_t multiplyWithOverflow(int64_t A, int64_t B) {\n-  int64_t Result;\n-  MulOverflow(A, B, Result);\n-  return Result;\n-}\n-\n-// A helper to add 2 signed integers where overflowing is allowed.\n-static int64_t addWithOverflow(int64_t A, int64_t B) {\n-  int64_t Result;\n-  AddOverflow(A, B, Result);\n-  return Result;\n-}\n-\n static Instruction *getContextInstForUse(Use &U) {\n   Instruction *UserI = cast<Instruction>(U.getUser());\n   if (auto *Phi = dyn_cast<PHINode>(UserI))\n@@ -366,26 +352,42 @@ struct Decomposition {\n   Decomposition(int64_t Offset, ArrayRef<DecompEntry> Vars)\n       : Offset(Offset), Vars(Vars) {}\n \n-  void add(int64_t OtherOffset) {\n-    Offset = addWithOverflow(Offset, OtherOffset);\n+  /// Add \\p OtherOffset and return true if the operation overflows, i.e. the\n+  /// new decomposition is invalid.\n+  [[nodiscard]] bool add(int64_t OtherOffset) {\n+    return AddOverflow(Offset, OtherOffset, Offset);\n   }\n \n-  void add(const Decomposition &Other) {\n-    add(Other.Offset);\n+  /// Add \\p Other and return true if the operation overflows, i.e. the new\n+  /// decomposition is invalid.\n+  [[nodiscard]] bool add(const Decomposition &Other) {\n+    if (add(Other.Offset))\n+      return true;\n     append_range(Vars, Other.Vars);\n+    return false;\n   }\n \n-  void sub(const Decomposition &Other) {\n+  /// Subtract \\p Other and return true if the operation overflows, i.e. the new\n+  /// decomposition is invalid.\n+  [[nodiscard]] bool sub(const Decomposition &Other) {\n     Decomposition Tmp = Other;\n-    Tmp.mul(-1);\n-    add(Tmp.Offset);\n+    if (Tmp.mul(-1))\n+      return true;\n+    if (add(Tmp.Offset))\n+      return true;\n     append_range(Vars, Tmp.Vars);\n+    return false;\n   }\n \n-  void mul(int64_t Factor) {\n-    Offset = multiplyWithOverflow(Offset, Factor);\n+  /// Multiply all coefficients by \\p Factor and return true if the operation\n+  /// overflows, i.e. the new decomposition is invalid.\n+  [[nodiscard]] bool mul(int64_t Factor) {\n+    if (MulOverflow(Offset, Factor, Offset))\n+      return true;\n     for (auto &Var : Vars)\n-      Var.Coefficient = multiplyWithOverflow(Var.Coefficient, Factor);\n+      if (MulOverflow(Var.Coefficient, Factor, Var.Coefficient))\n+        return true;\n+    return false;\n   }\n };\n \n@@ -467,8 +469,10 @@ static Decomposition decomposeGEP(GEPOperator &GEP,\n   Decomposition Result(ConstantOffset.getSExtValue(), DecompEntry(1, BasePtr));\n   for (auto [Index, Scale] : VariableOffsets) {\n     auto IdxResult = decompose(Index, Preconditions, IsSigned, DL);\n-    IdxResult.mul(Scale.getSExtValue());\n-    Result.add(IdxResult);\n+    if (IdxResult.mul(Scale.getSExtValue()))\n+      return &GEP;\n+    if (Result.add(IdxResult))\n+      return &GEP;\n \n     if (!NW.hasNoUnsignedWrap()) {\n       // Try to prove nuw from nusw and nneg.\n@@ -488,11 +492,13 @@ static Decomposition decompose(Value *V,\n                                SmallVectorImpl<ConditionTy> &Preconditions,\n                                bool IsSigned, const DataLayout &DL) {\n \n-  auto MergeResults = [&Preconditions, IsSigned, &DL](Value *A, Value *B,\n-                                                      bool IsSignedB) {\n+  auto MergeResults = [&Preconditions, IsSigned,\n+                       &DL](Value *A, Value *B,\n+                            bool IsSignedB) -> std::optional<Decomposition> {\n     auto ResA = decompose(A, Preconditions, IsSigned, DL);\n     auto ResB = decompose(B, Preconditions, IsSignedB, DL);\n-    ResA.add(ResB);\n+    if (ResA.add(ResB))\n+      return std::nullopt;\n     return ResA;\n   };\n \n@@ -533,21 +539,26 @@ static Decomposition decompose(Value *V,\n         V = Op0;\n     }\n \n-    if (match(V, m_NSWAdd(m_Value(Op0), m_Value(Op1))))\n-      return MergeResults(Op0, Op1, IsSigned);\n+    if (match(V, m_NSWAdd(m_Value(Op0), m_Value(Op1)))) {\n+      if (auto Decomp = MergeResults(Op0, Op1, IsSigned))\n+        return *Decomp;\n+      return {V, IsKnownNonNegative};\n+    }\n \n     if (match(V, m_NSWSub(m_Value(Op0), m_Value(Op1)))) {\n       auto ResA = decompose(Op0, Preconditions, IsSigned, DL);\n       auto ResB = decompose(Op1, Preconditions, IsSigned, DL);\n-      ResA.sub(ResB);\n-      return ResA;\n+      if (!ResA.sub(ResB))\n+        return ResA;\n+      return {V, IsKnownNonNegative};\n     }\n \n     ConstantInt *CI;\n     if (match(V, m_NSWMul(m_Value(Op0), m_ConstantInt(CI))) && canUseSExt(CI)) {\n       auto Result = decompose(Op0, Preconditions, IsSigned, DL);\n-      Result.mul(CI->getSExtValue());\n-      return Result;\n+      if (!Result.mul(CI->getSExtValue()))\n+        return Result;\n+      return {V, IsKnownNonNegative};\n     }\n \n     // (shl nsw x, shift) is (mul nsw x, (1<<shift)), with the exception of\n@@ -557,8 +568,9 @@ static Decomposition decompose(Value *V,\n       if (Shift < Ty->getIntegerBitWidth() - 1) {\n         assert(Shift < 64 && \"Would overflow\");\n         auto Result = decompose(Op0, Preconditions, IsSigned, DL);\n-        Result.mul(int64_t(1) << Shift);\n-        return Result;\n+        if (!Result.mul(int64_t(1) << Shift))\n+          return Result;\n+        return {V, IsKnownNonNegative};\n       }\n     }\n \n@@ -593,8 +605,11 @@ static Decomposition decompose(Value *V,\n   Value *Op1;\n   ConstantInt *CI;\n   if (match(V, m_NUWAdd(m_Value(Op0), m_Value(Op1)))) {\n-    return MergeResults(Op0, Op1, IsSigned);\n+    if (auto Decomp = MergeResults(Op0, Op1, IsSigned))\n+      return *Decomp;\n+    return {V, IsKnownNonNegative};\n   }\n+\n   if (match(V, m_NSWAdd(m_Value(Op0), m_Value(Op1)))) {\n     if (!isKnownNonNegative(Op0, DL))\n       Preconditions.emplace_back(CmpInst::ICMP_SGE, Op0,\n@@ -603,7 +618,9 @@ static Decomposition decompose(Value *V,\n       Preconditions.emplace_back(CmpInst::ICMP_SGE, Op1,\n                                  ConstantInt::get(Op1->getType(), 0));\n \n-    return MergeResults(Op0, Op1, IsSigned);\n+    if (auto Decomp = MergeResults(Op0, Op1, IsSigned))\n+      return *Decomp;\n+    return {V, IsKnownNonNegative};\n   }\n \n   if (match(V, m_Add(m_Value(Op0), m_ConstantInt(CI))) && CI->isNegative() &&\n@@ -611,33 +628,41 @@ static Decomposition decompose(Value *V,\n     Preconditions.emplace_back(\n         CmpInst::ICMP_UGE, Op0,\n         ConstantInt::get(Op0->getType(), CI->getSExtValue() * -1));\n-    return MergeResults(Op0, CI, true);\n+    if (auto Decomp = MergeResults(Op0, CI, true))\n+      return *Decomp;\n+    return {V, IsKnownNonNegative};\n   }\n \n   // Decompose or as an add if there are no common bits between the operands.\n-  if (match(V, m_DisjointOr(m_Value(Op0), m_ConstantInt(CI))))\n-    return MergeResults(Op0, CI, IsSigned);\n+  if (match(V, m_DisjointOr(m_Value(Op0), m_ConstantInt(CI)))) {\n+    if (auto Decomp = MergeResults(Op0, CI, IsSigned))\n+      return *Decomp;\n+    return {V, IsKnownNonNegative};\n+  }\n \n   if (match(V, m_NUWShl(m_Value(Op1), m_ConstantInt(CI))) && canUseSExt(CI)) {\n     if (CI->getSExtValue() < 0 || CI->getSExtValue() >= 64)\n       return {V, IsKnownNonNegative};\n     auto Result = decompose(Op1, Preconditions, IsSigned, DL);\n-    Result.mul(int64_t{1} << CI->getSExtValue());\n-    return Result;\n+    if (!Result.mul(int64_t{1} << CI->getSExtValue()))\n+      return Result;\n+    return {V, IsKnownNonNegative};\n   }\n \n   if (match(V, m_NUWMul(m_Value(Op1), m_ConstantInt(CI))) && canUseSExt(CI) &&\n       (!CI->isNegative())) {\n     auto Result = decompose(Op1, Preconditions, IsSigned, DL);\n-    Result.mul(CI->getSExtValue());\n-    return Result;\n+    if (!Result.mul(CI->getSExtValue()))\n+      return Result;\n+    return {V, IsKnownNonNegative};\n   }\n \n   if (match(V, m_NUWSub(m_Value(Op0), m_Value(Op1)))) {\n     auto ResA = decompose(Op0, Preconditions, IsSigned, DL);\n     auto ResB = decompose(Op1, Preconditions, IsSigned, DL);\n-    ResA.sub(ResB);\n-    return ResA;\n+    if (!ResA.sub(ResB))\n+      return ResA;\n+    return {V, IsKnownNonNegative};\n   }\n \n   return {V, IsKnownNonNegative};\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/ConstraintElimination/constraint-overflow.ll",
      "commands": [
        "opt -passes=constraint-elimination -S %s"
      ],
      "tests": [
        {
          "test_name": "pr140481",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #0\n\ndefine i1 @pr140481(i32 %x) {\nentry:\n  %cond = icmp slt i32 %x, 0\n  call void @llvm.assume(i1 %cond)\n  %add = add nsw i32 %x, 5001000\n  %mul1 = mul nsw i32 %add, -5001000\n  %mul2 = mul nsw i32 %mul1, 5001000\n  %cmp2 = icmp sgt i32 %mul2, 0\n  ret i1 %cmp2\n}\n\nattributes #0 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "wrong code at -O{s,2,3} on x86_64-linux-gnu",
    "body": "Compiler Explorer: https://godbolt.org/z/KGW6a53xf\n\nIt appears to be a regression from 16.0.0, and affects 17.0.1 and later. \n\n```\n[590] % clangtk -v\nclang version 21.0.0git (https://github.com/llvm/llvm-project.git fb86b3d96b73f4e628288b180ef4e038da8b7bc1)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[591] % \n[591] % clangtk -O1 small.c; ./a.out\n[592] % \n[592] % clangtk -O3 small.c\n[593] % ./a.out\nAborted\n[594] % \n[594] % cat small.c\nint a = 1, b, c;\nint main() {\n  b = -5001001 * a + 5001000;\n  while (b >= 5001001)\n    b = a + 5001000;\n  c = -5001000 * b - 5001001;\n  if (5001000 * c >= b)\n    __builtin_abort();\n  return 0;\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "miscompilation",
      "llvm:transforms"
    ],
    "comments": [
      {
        "author": "hstk30-hw",
        "body": "https://godbolt.org/z/noce5aa3Y CC @nikic take a look"
      },
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/JVTQCY\n"
      },
      {
        "author": "dtcxzyw",
        "body": "Further reduced version: https://alive2.llvm.org/ce/z/3_XCwc"
      }
    ]
  },
  "verified": true
}