{
  "bug_id": "113123",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113123",
  "bug_type": "miscompilation",
  "base_commit": "67ff5ba9af9754261abe11d762af11532a816126",
  "knowledge_cutoff": "2024-10-21T02:18:29Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "a2ba438f3e5635e368333213914c7452a6a6a2da",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          1531,
          1538
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "InstCombinerImpl::foldLogicOfFCmps"
      ]
    }
  },
  "patch": "commit a2ba438f3e5635e368333213914c7452a6a6a2da\nAuthor: XChy <xxs_chy@outlook.com>\nDate:   Mon Oct 21 22:30:31 2024 +0800\n\n    [InstCombine] Preserve the flag from RHS only if the `and` is bitwise (#113164)\n    \n    Fixes #113123\n    Alive proof: https://alive2.llvm.org/ce/z/hnqeLC\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex d72013ba223d..835eae9f5725 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -1531,8 +1531,10 @@ Value *InstCombinerImpl::foldLogicOfFCmps(FCmpInst *LHS, FCmpInst *RHS,\n     }\n     if (IsLessThanOrLessEqual(IsAnd ? PredL : PredR)) {\n       BuilderTy::FastMathFlagGuard Guard(Builder);\n-      Builder.setFastMathFlags(LHS->getFastMathFlags() |\n-                               RHS->getFastMathFlags());\n+      FastMathFlags NewFlag = LHS->getFastMathFlags();\n+      if (!IsLogicalSelect)\n+        NewFlag |= RHS->getFastMathFlags();\n+      Builder.setFastMathFlags(NewFlag);\n \n       Value *FAbs = Builder.CreateUnaryIntrinsic(Intrinsic::fabs, LHS0);\n       return Builder.CreateFCmp(PredL, FAbs,\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/fcmp-range-check-idiom.ll",
      "commands": [
        "opt -S -passes=instcombine %s"
      ],
      "tests": [
        {
          "test_name": "test_and_olt_fmf_propagation_union",
          "test_body": "define i1 @test_and_olt_fmf_propagation_union(float %x) {\n  %cmp1 = fcmp nnan ninf olt float %x, 0x3C00000000000000\n  %cmp2 = fcmp nnan nsz ogt float %x, 0xBC00000000000000\n  %cond = and i1 %cmp1, %cmp2\n  ret i1 %cond\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Wrong canonicalization of a range check idiom",
    "body": "https://github.com/llvm/llvm-project/blob/11dad2fa5138a50d60a5a34a2c7e074b976820e2/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp#L1511-L1527\r\n\r\n\r\nAlive2 report: https://alive2.llvm.org/ce/z/qBHAmS\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine i1 @test_and_olt_fmf_propagation_union.2(float %x) {\r\n#0:\r\n  %cmp1 = fcmp nnan ninf olt float %x, 0.000000\r\n  %cmp2 = fcmp nnan nsz ogt float %x, -0.000000\r\n  %#1 = select i1 %cmp2, i1 %cmp1, i1 %cmp2\r\n  %cond = and i1 %#1, %cmp2\r\n  ret i1 %cond\r\n}\r\n=>\r\ndefine i1 @test_and_olt_fmf_propagation_union.2(float %x) {\r\n#0:\r\n  %#1 = fabs nnan ninf nsz float %x\r\n  %#2 = fcmp nnan ninf nsz olt float %#1, 0.000000\r\n  ret i1 %#2\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\nfloat %x = #xff800000 (-oo)\r\n\r\nSource:\r\ni1 %cmp1 = poison\r\ni1 %cmp2 = #x0 (0)\r\ni1 %#1 = #x0 (0)\r\ni1 %cond = #x0 (0)\r\n\r\nTarget:\r\nfloat %#1 = poison\r\ni1 %#2 = poison\r\nSource value: #x0 (0)\r\nTarget value: poison\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "floating-point"
    ],
    "comments": [
      {
        "author": "XChy",
        "body": "Thanks for the report.\r\n\r\nWe preserve `ninf` flag from `cmp1` when folding logical and `select cmp2, cmp1, false` into `fcmp ninf (fabs(x))`. But if `cmp2` equals to `false`, the select won't be poison whatever `cmp1` is. Thus, such fold makes it more poisonous. See https://alive2.llvm.org/ce/z/hnqeLC"
      },
      {
        "author": "XChy",
        "body": "And it looks like you are mutating the unit tests to fuzz LLVM. Looks interesting to me. If OK, could you provide some information about it?"
      },
      {
        "author": "bongjunj",
        "body": "> And it looks like you are mutating the unit tests to fuzz LLVM. Looks interesting to me. If OK, could you provide some information about it?\r\n\r\n@XChy Yes we are designing a fuzzer on top of LLVM to test the compiler. We can't disclose the full detail at this time. Thank you."
      }
    ]
  }
}