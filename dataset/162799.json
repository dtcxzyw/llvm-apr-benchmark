{
  "bug_id": "162799",
  "issue_url": "https://github.com/llvm/llvm-project/issues/162799",
  "bug_type": "crash",
  "base_commit": "5e3ac2a6f22aa4d1d055c2d430913a960b9bb60b",
  "knowledge_cutoff": "2025-10-10T08:07:13Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d81ffd4ebb45235b4d106f6a0d5e5032bad41018",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          20076,
          20082
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::vectorizeTree"
      ]
    }
  },
  "patch": "commit d81ffd4ebb45235b4d106f6a0d5e5032bad41018\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Sun Oct 12 13:15:15 2025 -0700\n\n    [SLP]INsert postponed vector value after all uses, if the parent node is PHI\n    \n    Need to insert the vector value for the postponed gather/buildvector\n    node after all uses non only if the vector value of the user node is\n    phi, but also if the user node itself is PHI node, which may produce\n    vector phi + shuffle.\n    \n    Fixes #162799\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 96f05fc82f29..a6f4beca8805 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -20076,7 +20076,9 @@ Value *BoUpSLP::vectorizeTree(\n     // The is because source vector that supposed to feed this gather node was\n     // inserted at the end of the block [after stab instruction]. So we need\n     // to adjust insertion point again to the end of block.\n-    if (isa<PHINode>(UserI)) {\n+    if (isa<PHINode>(UserI) ||\n+        (TE->UserTreeIndex.UserTE->hasState() &&\n+         TE->UserTreeIndex.UserTE->getOpcode() == Instruction::PHI)) {\n       // Insert before all users.\n       Instruction *InsertPt = PrevVec->getParent()->getTerminator();\n       for (User *U : PrevVec->users()) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/parent-phi-node-reordered.ll",
      "commands": [
        "opt -passes=slp-vectorizer -S -slp-threshold=-99999 -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine void @test(i32 %arg, i32 %arg1) {\n;\nbb:\n  br label %bb6\n\nbb2:\n  %phi = phi i32 [ %phi21, %bb19 ]\n  %phi3 = phi i32 [ %phi22, %bb19 ]\n  %phi4 = phi i32 [ %phi23, %bb19 ]\n  %phi5 = phi i32 [ %phi24, %bb19 ]\n  ret void\n\nbb6:\n  %phi7 = phi i32 [ 0, %bb ], [ %phi24, %bb26 ], [ %phi24, %bb27 ], [ 0, %bb25 ]\n  %phi8 = phi i32 [ 0, %bb ], [ %arg1, %bb26 ], [ %phi23, %bb27 ], [ 0, %bb25 ]\n  %phi9 = phi i32 [ 0, %bb ], [ %phi22, %bb26 ], [ %phi20, %bb27 ], [ 0, %bb25 ]\n  %phi10 = phi i32 [ 0, %bb ], [ %phi21, %bb26 ], [ %phi21, %bb27 ], [ 0, %bb25 ]\n  switch i8 0, label %bb11 [\n  i8 0, label %bb28\n  ]\n\nbb11:\n  %phi12 = phi i32 [ 0, %bb28 ], [ 0, %bb6 ]\n  %phi13 = phi i32 [ %phi10, %bb28 ], [ 0, %bb6 ]\n  %phi14 = phi i32 [ %phi9, %bb28 ], [ 0, %bb6 ]\n  %phi15 = phi i32 [ %phi8, %bb28 ], [ 0, %bb6 ]\n  %phi16 = phi i32 [ %phi7, %bb28 ], [ 0, %bb6 ]\n  switch i8 0, label %bb19 [\n  i8 1, label %bb17\n  i8 0, label %bb18\n  ]\n\nbb17:\n  %add = add i32 %phi16, 0\n  br label %bb19\n\nbb18:\n  br label %bb19\n\nbb19:\n  %phi20 = phi i32 [ 0, %bb17 ], [ %arg, %bb18 ], [ %phi12, %bb11 ]\n  %phi21 = phi i32 [ %phi13, %bb17 ], [ %phi12, %bb18 ], [ 0, %bb11 ]\n  %phi22 = phi i32 [ %phi14, %bb17 ], [ 0, %bb18 ], [ 0, %bb11 ]\n  %phi23 = phi i32 [ %phi15, %bb17 ], [ %arg, %bb18 ], [ %arg, %bb11 ]\n  %phi24 = phi i32 [ %add, %bb17 ], [ %phi16, %bb18 ], [ %phi16, %bb11 ]\n  br i1 false, label %bb2, label %bb25\n\nbb25:\n  switch i8 0, label %bb6 [\n  i8 0, label %bb26\n  i8 1, label %bb27\n  i8 6, label %bb27\n  ]\n\nbb26:\n  br label %bb6\n\nbb27:\n  br label %bb6\n\nbb28:\n  br label %bb11\n}"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/phi-nodes-incoming-same-blocks.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=cascadelake < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define void @test(ptr %0, i1 %1, i1 %2) {\n  br label %4\n\n4:                                                ; preds = %7, %3\n  %5 = phi i32 [ %14, %7 ], [ 0, %3 ]\n  %6 = phi i32 [ 1, %7 ], [ 0, %3 ]\n  br i1 %1, label %7, label %15\n\n7:                                                ; preds = %4\n  %8 = load ptr, ptr %0, align 8\n  %9 = getelementptr i8, ptr %8, i64 16\n  %10 = load i32, ptr %9, align 1\n  %11 = or i32 %10, 1\n  %12 = getelementptr i8, ptr %8, i64 20\n  %13 = load i32, ptr %12, align 1\n  %14 = or i32 %13, 1\n  br i1 %2, label %16, label %4\n\n15:                                               ; preds = %4\n  br label %16\n\n16:                                               ; preds = %15, %7\n  %17 = phi i32 [ %6, %15 ], [ 0, %7 ]\n  %18 = phi i32 [ %6, %15 ], [ %11, %7 ]\n  %19 = phi i32 [ %5, %15 ], [ %14, %7 ]\n  %20 = load volatile ptr, ptr null, align 8\n  %21 = getelementptr i8, ptr %20, i64 176\n  store i32 %17, ptr %21, align 8\n  %22 = getelementptr i8, ptr %20, i64 180\n  store i32 %17, ptr %22, align 4\n  %23 = getelementptr i8, ptr %20, i64 184\n  store i32 %18, ptr %23, align 8\n  %24 = getelementptr i8, ptr %20, i64 188\n  store i32 %19, ptr %24, align 4\n  ret void\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "Instruction does not dominate all uses, LLVM ERROR: Broken module found, compilation aborted! Yet another",
    "body": "To reproduce run opt with the following test, using -passes=slp-vectorizer -slp-threshold=-99999 \n```\n; ModuleID = './reduced.ll'\nsource_filename = \"./reduced.ll\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128-ni:1-p2:32:8:8:32-ni:2\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine void @wombat(i32 %arg, i32 %arg1) #0 gc \"statepoint-example\" {\nbb:\n  br label %bb6\n\nbb2:                                              ; preds = %bb19\n  %phi = phi i32 [ %phi21, %bb19 ]\n  %phi3 = phi i32 [ %phi22, %bb19 ]\n  %phi4 = phi i32 [ %phi23, %bb19 ]\n  %phi5 = phi i32 [ %phi24, %bb19 ]\n  ret void\n\nbb6:                                              ; preds = %bb27, %bb26, %bb25, %bb\n  %phi7 = phi i32 [ 0, %bb ], [ %phi24, %bb26 ], [ %phi24, %bb27 ], [ 0, %bb25 ]\n  %phi8 = phi i32 [ 0, %bb ], [ %arg1, %bb26 ], [ %phi23, %bb27 ], [ 0, %bb25 ]\n  %phi9 = phi i32 [ 0, %bb ], [ %phi22, %bb26 ], [ %phi20, %bb27 ], [ 0, %bb25 ]\n  %phi10 = phi i32 [ 0, %bb ], [ %phi21, %bb26 ], [ %phi21, %bb27 ], [ 0, %bb25 ]\n  switch i8 0, label %bb11 [\n    i8 0, label %bb28\n  ]\n\nbb11:                                             ; preds = %bb28, %bb6\n  %phi12 = phi i32 [ 0, %bb28 ], [ 0, %bb6 ]\n  %phi13 = phi i32 [ %phi10, %bb28 ], [ 0, %bb6 ]\n  %phi14 = phi i32 [ %phi9, %bb28 ], [ 0, %bb6 ]\n  %phi15 = phi i32 [ %phi8, %bb28 ], [ 0, %bb6 ]\n  %phi16 = phi i32 [ %phi7, %bb28 ], [ 0, %bb6 ]\n  switch i8 0, label %bb19 [\n    i8 1, label %bb17\n    i8 0, label %bb18\n  ]\n\nbb17:                                             ; preds = %bb11\n  %add = add i32 %phi16, 0\n  br label %bb19\n\nbb18:                                             ; preds = %bb11\n  br label %bb19\n\nbb19:                                             ; preds = %bb18, %bb17, %bb11\n  %phi20 = phi i32 [ 0, %bb17 ], [ %arg, %bb18 ], [ %phi12, %bb11 ]\n  %phi21 = phi i32 [ %phi13, %bb17 ], [ %phi12, %bb18 ], [ 0, %bb11 ]\n  %phi22 = phi i32 [ %phi14, %bb17 ], [ 0, %bb18 ], [ 0, %bb11 ]\n  %phi23 = phi i32 [ %phi15, %bb17 ], [ %arg, %bb18 ], [ %arg, %bb11 ]\n  %phi24 = phi i32 [ %add, %bb17 ], [ %phi16, %bb18 ], [ %phi16, %bb11 ]\n  br i1 false, label %bb2, label %bb25\n\nbb25:                                             ; preds = %bb19\n  switch i8 0, label %bb6 [\n    i8 0, label %bb26\n    i8 1, label %bb27\n    i8 6, label %bb27\n  ]\n\nbb26:                                             ; preds = %bb25\n  br label %bb6\n\nbb27:                                             ; preds = %bb25, %bb25\n  br label %bb6\n\nbb28:                                             ; preds = %bb6\n  br label %bb11\n}\n\nattributes #0 = { \"target-features\"=\"+prfchw,-cldemote,+avx,+aes,+sahf,+pclmul,-xop,+crc32,-amx-fp8,+xsaves,-avx512fp16,-usermsr,-sm4,-egpr,+sse4.1,-avx10.1,-avx512ifma,+xsave,+sse4.2,-tsxldtrk,-sm3,-ptwrite,-widekl,-movrs,-invpcid,+64bit,+xsavec,-avx512vpopcntdq,+cmov,-avx512vp2intersect,-avx512cd,+movbe,-avxvnniint8,-ccmp,-amx-int8,-kl,-sha512,-avxvnni,-rtm,+adx,+avx2,-hreset,-movdiri,-serialize,-vpclmulqdq,-avx512vl,-uintr,-cf,+clflushopt,-raoint,-cmpccxadd,+bmi,-amx-tile,+sse,-gfni,-avxvnniint16,-amx-fp16,-zu,-ndd,+xsaveopt,+rdrnd,-avx512f,-amx-bf16,-avx512bf16,-avx512vnni,-push2pop2,+cx8,-avx512bw,+sse3,-pku,-nf,-amx-tf32,-amx-avx512,+fsgsbase,+clzero,-mwaitx,-lwp,+lzcnt,+sha,-movdir64b,-ppx,+wbnoinvd,-enqcmd,-amx-transpose,-avxneconvert,-tbm,-pconfig,-amx-complex,+ssse3,+cx16,-avx10.2,+bmi2,+fma,+popcnt,-avxifma,+f16c,-avx512bitalg,-rdpru,+clwb,+mmx,+sse2,+rdseed,-avx512vbmi2,-prefetchi,-amx-movrs,+rdpid,-fma4,-avx512vbmi,-shstk,-vaes,-waitpkg,-sgx,+fxsr,-avx512dq,+sse4a\" }\n```\n\nReproducer: https://godbolt.org/z/axM4e97rq\n\nStack dump:\n```\n0.\tProgram arguments: /opt/compiler-explorer/clang-assertions-trunk/bin/opt -o /app/output.s -S -passes=slp-vectorizer -slp-threshold=-99999 <source>\n1.\tRunning pass \"verify\" on module \"<source>\"\n #0 0x0000000005915ae8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x5915ae8)\n #1 0x0000000005912994 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #2 0x0000761e7ee42520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #3 0x0000761e7ee969fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)\n #4 0x0000761e7ee42476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)\n #5 0x0000761e7ee287f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)\n #6 0x00000000008322ef llvm::json::operator==(llvm::json::Value const&, llvm::json::Value const&) (.cold) JSON.cpp:0:0\n #7 0x000000000584be91 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x584be91)\n #8 0x000000000573c998 (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x573c998)\n #9 0x00000000009766ce llvm::detail::PassModel<llvm::Module, llvm::VerifierPass, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x9766ce)\n#10 0x00000000056f9da1 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x56f9da1)\n#11 0x000000000098080a llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool, bool) (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x98080a)\n#12 0x0000000000974a57 optMain (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x974a57)\n#13 0x0000761e7ee29d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)\n#14 0x0000761e7ee29e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)\n#15 0x000000000096bb65 _start (/opt/compiler-explorer/clang-assertions-trunk/bin/opt+0x96bb65)\nProgram terminated with signal: SIGSEGV\nCompiler returned: 139\n",
    "author": "TatyanaDoubts",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Bisected to 2d7b55a028139dde58a994a65895841190dfde96"
      }
    ]
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "8da1ce559e63a16ad05c22787d01112859cf4d89"
}