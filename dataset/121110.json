{
  "bug_id": "121110",
  "issue_url": "https://github.com/llvm/llvm-project/issues/121110",
  "bug_type": "miscompilation",
  "base_commit": "f68dbbbd57dd0947730300d1e827ad16c2dfffb5",
  "knowledge_cutoff": "2024-12-25T13:57:11Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "f2f02b21cd581057e3c9b4a7a27e0014eeb9ba15",
    "components": [
      "VectorCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          1669,
          1675
        ],
        [
          1677,
          1684
        ],
        [
          1727,
          1740
        ],
        [
          1750,
          1759
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "VectorCombine::foldShuffleOfBinops"
      ]
    }
  },
  "patch": "commit f2f02b21cd581057e3c9b4a7a27e0014eeb9ba15\nAuthor: Simon Pilgrim <llvm-dev@redking.me.uk>\nDate:   Sat Dec 28 09:21:22 2024 +0000\n\n    [VectorCombine] foldShuffleOfBinops - only accept exact matching cmp predicates\n    \n    m_SpecificCmp allowed equivalent predicate+flags which don't necessarily work after being folded from \"shuffle (cmpop), (cmpop)\" into \"cmpop (shuffle), (shuffle)\"\n    \n    Fixes #121110\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex ecbc13d489eb..2460ccc61d84 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -1669,7 +1669,8 @@ bool VectorCombine::foldShuffleOfBinops(Instruction &I) {\n \n   Value *X, *Y, *Z, *W;\n   bool IsCommutative = false;\n-  CmpPredicate Pred = CmpInst::BAD_ICMP_PREDICATE;\n+  CmpPredicate PredLHS = CmpInst::BAD_ICMP_PREDICATE;\n+  CmpPredicate PredRHS = CmpInst::BAD_ICMP_PREDICATE;\n   if (match(LHS, m_BinOp(m_Value(X), m_Value(Y))) &&\n       match(RHS, m_BinOp(m_Value(Z), m_Value(W)))) {\n     auto *BO = cast<BinaryOperator>(LHS);\n@@ -1677,8 +1678,9 @@ bool VectorCombine::foldShuffleOfBinops(Instruction &I) {\n     if (llvm::is_contained(OldMask, PoisonMaskElem) && BO->isIntDivRem())\n       return false;\n     IsCommutative = BinaryOperator::isCommutative(BO->getOpcode());\n-  } else if (match(LHS, m_Cmp(Pred, m_Value(X), m_Value(Y))) &&\n-             match(RHS, m_SpecificCmp(Pred, m_Value(Z), m_Value(W)))) {\n+  } else if (match(LHS, m_Cmp(PredLHS, m_Value(X), m_Value(Y))) &&\n+             match(RHS, m_Cmp(PredRHS, m_Value(Z), m_Value(W))) &&\n+             (CmpInst::Predicate)PredLHS == (CmpInst::Predicate)PredRHS) {\n     IsCommutative = cast<CmpInst>(LHS)->isCommutative();\n   } else\n     return false;\n@@ -1727,14 +1729,14 @@ bool VectorCombine::foldShuffleOfBinops(Instruction &I) {\n       TTI.getShuffleCost(SK0, BinOpTy, NewMask0, CostKind, 0, nullptr, {X, Z}) +\n       TTI.getShuffleCost(SK1, BinOpTy, NewMask1, CostKind, 0, nullptr, {Y, W});\n \n-  if (Pred == CmpInst::BAD_ICMP_PREDICATE) {\n+  if (PredLHS == CmpInst::BAD_ICMP_PREDICATE) {\n     NewCost +=\n         TTI.getArithmeticInstrCost(LHS->getOpcode(), ShuffleDstTy, CostKind);\n   } else {\n     auto *ShuffleCmpTy =\n         FixedVectorType::get(BinOpTy->getElementType(), ShuffleDstTy);\n     NewCost += TTI.getCmpSelInstrCost(LHS->getOpcode(), ShuffleCmpTy,\n-                                      ShuffleDstTy, Pred, CostKind);\n+                                      ShuffleDstTy, PredLHS, CostKind);\n   }\n \n   LLVM_DEBUG(dbgs() << \"Found a shuffle feeding two binops: \" << I\n@@ -1750,10 +1752,10 @@ bool VectorCombine::foldShuffleOfBinops(Instruction &I) {\n \n   Value *Shuf0 = Builder.CreateShuffleVector(X, Z, NewMask0);\n   Value *Shuf1 = Builder.CreateShuffleVector(Y, W, NewMask1);\n-  Value *NewBO = Pred == CmpInst::BAD_ICMP_PREDICATE\n+  Value *NewBO = PredLHS == CmpInst::BAD_ICMP_PREDICATE\n                      ? Builder.CreateBinOp(\n                            cast<BinaryOperator>(LHS)->getOpcode(), Shuf0, Shuf1)\n-                     : Builder.CreateCmp(Pred, Shuf0, Shuf1);\n+                     : Builder.CreateCmp(PredLHS, Shuf0, Shuf1);\n \n   // Intersect flags from the old binops.\n   if (auto *NewInst = dyn_cast<Instruction>(NewBO)) {\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/X86/shuffle-of-cmps.ll",
      "commands": [
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=sse2",
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=sse4.2",
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=avx2",
        "opt < %s -passes=vector-combine -S -mtriple=x86_64-- -mattr=avx512vl"
      ],
      "tests": [
        {
          "test_name": "shuf_icmp_ugt_v4i32_use",
          "test_body": "declare void @use(<4 x i1>)\n\ndefine <4 x i32> @shuf_icmp_ugt_v4i32_use(<4 x i32> %x, <4 x i32> %y, <4 x i32> %z, <4 x i32> %w) {\n  %c0 = icmp ugt <4 x i32> %x, %y\n  %c1 = icmp ugt <4 x i32> %z, %w\n  call void @use(<4 x i1> %c0)\n  %s = shufflevector <4 x i1> %c0, <4 x i1> %c1, <4 x i32> <i32 1, i32 3, i32 5, i32 7>\n  %r = sext <4 x i1> %s to <4 x i32>\n  ret <4 x i32> %r\n}\n"
        },
        {
          "test_name": "PR121110",
          "test_body": "define <2 x i1> @PR121110() {\n  %ugt = icmp samesign ugt <2 x i32> zeroinitializer, zeroinitializer\n  %sgt = icmp sgt <2 x i32> zeroinitializer, <i32 6, i32 -4>\n  %res = shufflevector <2 x i1> %ugt, <2 x i1> %sgt, <2 x i32> <i32 0, i32 3>\n  ret <2 x i1> %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Miscompilation at -Os",
    "body": "This code prints 9 at `-Os` and 0 at `-O0/1/2/3`:\n\n```c\nint printf(const char *, ...);\nchar a = 9, c, d;\nint b, e;\nunsigned short f;\nchar *g = &a;\nvoid h(int i) {\n  for (; b; b++)\n    c &= 0 <= i;\n}\nstatic short j(unsigned long i) {\n  int k;\n  for (; e + d + 4 > 0;) {\n    k = i + 49;\n    h(k + i - 52 + i);\n    *g = 0;\n    return 0;\n  }\n  return 0;\n}\nint main() {\n  j(6 < (unsigned short)(f - 7) + f);\n  printf(\"%d\\n\", a);\n}\n```\n\nCompiler Explorer: https://godbolt.org/z/Mo5TEKh8r\n\nBisected to https://github.com/llvm/llvm-project/commit/5287299f8809ae927a0acafb179c4b37ce9ff21d, which was committed by @RKSimon ",
    "author": "cardigan1008",
    "labels": [
      "miscompilation",
      "vectorizers"
    ],
    "comments": [
      {
        "author": "RKSimon",
        "body": "I'm not convinced the patch is responsible, it's more likely exposed something else.  I'll take a look after the Christmas break."
      },
      {
        "author": "dtcxzyw",
        "body": "Reproducer: https://alive2.llvm.org/ce/z/jdkwFh\n```\n; bin/opt -passes=vector-combine test.ll -S\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine <2 x i1> @src() {\nentry:\n  %0 = icmp samesign ugt <2 x i32> zeroinitializer, zeroinitializer\n  %1 = icmp sgt <2 x i32> zeroinitializer, <i32 6, i32 -4>\n  %2 = shufflevector <2 x i1> %0, <2 x i1> %1, <2 x i32> <i32 0, i32 3>\n  ret <2 x i1> %2\n}\n```\n```\ndefine <2 x i1> @tgt() {\nentry:\n  ret <2 x i1> zeroinitializer\n}\n```\n```\n\n----------------------------------------\ndefine <2 x i1> @src() {\nentry:\n  %#0 = icmp samesign ugt <2 x i32> { 0, 0 }, { 0, 0 }\n  %#1 = icmp sgt <2 x i32> { 0, 0 }, { 6, 4294967292 }\n  %#2 = shufflevector <2 x i1> %#0, <2 x i1> %#1, 0, 3\n  ret <2 x i1> %#2\n}\n=>\ndefine <2 x i1> @tgt() {\nentry:\n  ret <2 x i1> { 0, 0 }\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\n\nSource:\n<2 x i1> %#0 = < #x0 (0), #x0 (0) >\n<2 x i1> %#1 = < #x0 (0), #x1 (1) >\n<2 x i1> %#2 = < #x0 (0), #x1 (1) >\n\nTarget:\nSource value: < #x0 (0), #x1 (1) >\nTarget value: < #x0 (0), #x0 (0) >\n```\n"
      }
    ]
  }
}