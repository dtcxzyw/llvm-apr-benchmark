{
  "bug_id": "161493",
  "issue_url": "https://github.com/llvm/llvm-project/issues/161493",
  "bug_type": "miscompilation",
  "base_commit": "2e5a5fdd329073e3d4b174743dfc7fca655e9491",
  "knowledge_cutoff": "2025-10-01T09:19:21Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "c09054866a1ad6c250e6c972d369b9023abb4b3b",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          3080,
          3085
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "InstCombinerImpl::convertOrOfShiftsToFunnelShift"
      ]
    }
  },
  "patch": "commit c09054866a1ad6c250e6c972d369b9023abb4b3b\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Oct 1 22:02:08 2025 +0800\n\n    [InstCombine] Drop poison-generating flags when reusing existing or instruction (#161504)\n    \n    Closes https://github.com/llvm/llvm-project/issues/161493.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex 4b7793f6e010..9b272c4721cb 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -3080,6 +3080,13 @@ InstCombinerImpl::convertOrOfShiftsToFunnelShift(Instruction &Or) {\n       assert(ZextLowShlAmt->uge(HighSize) &&\n              ZextLowShlAmt->ule(Width - LowSize) && \"Invalid concat\");\n \n+      // We cannot reuse the result if it may produce poison.\n+      // Drop poison generating flags in the expression tree.\n+      // Or\n+      cast<Instruction>(U)->dropPoisonGeneratingFlags();\n+      // Shl\n+      cast<Instruction>(X)->dropPoisonGeneratingFlags();\n+\n       FShiftArgs = {U, U, ConstantInt::get(Or0->getType(), *ZextHighShlAmt)};\n       break;\n     }\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/funnel.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "test_rotl_and_neg_wrong_mask",
          "test_body": "target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128\"\n\ndefine i32 @test_rotl_and_neg_wrong_mask(i32 %x, i32 %shamt) {\n  %shl = shl i32 %x, %shamt\n  %neg = sub i32 0, %shamt\n  %and = and i32 %neg, 15\n  %shr = lshr i32 %x, %and\n  %or = or i32 %shl, %shr\n  ret i32 %or\n}\n"
        },
        {
          "test_name": "fshl_concat_vector_may_produce_poison",
          "test_body": "target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128\"\n\ndeclare void @use(i16)\n\ndefine i16 @fshl_concat_vector_may_produce_poison(i4 %x, i12 %y) {\n  %x.fr = freeze i4 %x\n  %zext.x = zext i4 %x.fr to i16\n  %slx = shl nuw nsw i16 %zext.x, 12\n  %zext.y = zext i12 %y to i16\n  %xy = or disjoint i16 %slx, %zext.y\n  call void @use(i16 %xy)\n  %sly = shl nuw i16 %zext.y, 4\n  %yx = or disjoint i16 %sly, %zext.x\n  ret i16 %yx\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Missing poison check when reusing existing value in def-use chain",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/H_tcBV\n```\ndefine i16 @src(i4 %x, i12 %y) {\n  %x.fr = freeze i4 %x\n  %zext.x = zext i4 %x.fr to i16\n  %slx = shl nuw nsw i16 %zext.x, 12\n  %zext.y = zext i12 %y to i16\n  %xy = or disjoint i16 %slx, %zext.y\n  call void @use(i16 %xy)\n  %sly = shl nuw i16 %zext.y, 4\n  %yx = or disjoint i16 %sly, %zext.x\n  ret i16 %yx\n}\n\ndefine i16 @tgt(i4 %x, i12 %y) {\n  %x.fr = freeze i4 %x\n  %zext.x = zext i4 %x.fr to i16\n  %slx = shl nuw nsw i16 %zext.x, 12\n  %zext.y = zext i12 %y to i16\n  %xy = or disjoint i16 %slx, %zext.y\n  call void @use(i16 %xy)\n  ;%sly = shl nuw i16 %zext.y, 4\n  ;%yx = or disjoint i16 %sly, %zext.x\n  %yx = call i16 @llvm.fshl.i16(i16 %xy, i16 %xy, i16 4)\n  ret i16 %yx\n}\n\ndeclare void @use(i16)\n```\n```\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\ni4 %x = #x8 (8, -8)\ni12 %y = #x000 (0)\n\nSource:\ni4 %x.fr = #x8 (8, -8)\ni16 %zext.x = #x0008 (8)\ni16 %slx = poison\ni16 %zext.y = #x0000 (0)\ni16 %xy = poison\nFunction @use returned\ni16 %sly = #x0000 (0)\ni16 %yx = #x0008 (8)\n\nSOURCE MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: #x0\nBlock 1 >\tsize: 0\talign: 1\talloc type: 0\talive: true\taddress: #x1\n\nTarget:\ni4 %x.fr = #x8 (8, -8)\ni16 %zext.x = #x0008 (8)\ni16 %slx = poison\ni16 %zext.y = #x0000 (0)\ni16 %xy = poison\nFunction @use returned\ni16 %yx = poison\n\nTARGET MEMORY STATE\n===================\nNON-LOCAL BLOCKS:\nBlock 0 >\tsize: 0\talign: 1\talloc type: 0\talive: false\taddress: #x0\nBlock 1 >\tsize: 0\talign: 1\talloc type: 0\talive: true\taddress: #x1\nSource value: #x0008 (8)\nTarget value: poison\n```\n\nIt is caused by https://github.com/llvm/llvm-project/pull/68502.\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true
}