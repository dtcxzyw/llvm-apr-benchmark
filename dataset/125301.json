{
  "bug_id": "125301",
  "issue_url": "https://github.com/llvm/llvm-project/issues/125301",
  "bug_type": "crash",
  "base_commit": "4f381d0be845a8702c89a0a7f4bd9188e1ff60a3",
  "knowledge_cutoff": "2025-01-31T21:43:25Z",
  "lit_test_dir": [
    "llvm/test/Transforms/LoopVectorize"
  ],
  "hints": {
    "fix_commit": "75b922dccfc35ec25a520b1941e6682a300802b8",
    "components": [
      "LoopVectorize"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VPlan.h": [
        [
          1058,
          1063
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VPlan.h": [
        "classof"
      ]
    }
  },
  "patch": "commit 75b922dccfc35ec25a520b1941e6682a300802b8\nAuthor: Florian Hahn <flo@fhahn.com>\nDate:   Sat Feb 1 21:40:58 2025 +0000\n\n    [VPlan] Check VPWidenIntrinsicSC in VPRecipeWithIRFlags::classof.\n    \n    When VPWidenIntrinsicRecipe was changed to inhert from VPRecipeWithIRFlags,\n    VPRecipeWithIRFlags::classof wasn't updated accordingly. Also check for\n    VPWidenIntrinsicSC in VPRecipeWithIRFlags::classof.\n    \n    Fixes https://github.com/llvm/llvm-project/issues/125301.\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VPlan.h b/llvm/lib/Transforms/Vectorize/VPlan.h\nindex 459222234bc3..87ef2dc6d8ea 100644\n--- a/llvm/lib/Transforms/Vectorize/VPlan.h\n+++ b/llvm/lib/Transforms/Vectorize/VPlan.h\n@@ -1058,6 +1058,7 @@ public:\n            R->getVPDefID() == VPRecipeBase::VPWidenEVLSC ||\n            R->getVPDefID() == VPRecipeBase::VPWidenGEPSC ||\n            R->getVPDefID() == VPRecipeBase::VPWidenCastSC ||\n+           R->getVPDefID() == VPRecipeBase::VPWidenIntrinsicSC ||\n            R->getVPDefID() == VPRecipeBase::VPReplicateSC ||\n            R->getVPDefID() == VPRecipeBase::VPReverseVectorPointerSC ||\n            R->getVPDefID() == VPRecipeBase::VPVectorPointerSC;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/LoopVectorize/AArch64/drop-poison-generating-flags.ll",
      "commands": [
        "opt -p loop-vectorize -mcpu=neoverse-v2 -force-vector-width=4 -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ntarget triple = \"aarch64-unknown-linux\"\n\n; Test case where we visit a VPWidenIntrinsic (for @llvm.fabs) with nnan flags.\n; For https://github.com/llvm/llvm-project/issues/125301.\ndefine void @check_widen_intrinsic_with_nnan(ptr noalias %dst.0, ptr noalias %dst.1, ptr noalias %src.1, ptr %src.2) {\n;\nentry:\n  br label %loop.header\n\nloop.header:\n  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop.latch ]\n  %gep.src.1 = getelementptr inbounds double, ptr %src.1, i64 %iv\n  %l.1 = load double, ptr %gep.src.1, align 8\n  %abs = tail call nnan double @llvm.fabs.f64(double %l.1)\n  %c.0 = fcmp olt double %abs, 1.000000e+00\n  br i1 %c.0, label %then, label %else\n\nthen:\n  %l.2 = load double, ptr %src.2, align 8\n  %iv.sub.1 = add nsw i64 %iv, -1\n  %gep.iv.sub.1 = getelementptr double, ptr %dst.0, i64 %iv.sub.1\n  store double 0.000000e+00, ptr %gep.iv.sub.1, align 8\n  %c.1 = fcmp oeq double %l.2, 0.000000e+00\n  br i1 %c.1, label %merge, label %loop.latch\n\nelse:\n  %iv.sub.2 = add nsw i64 %iv, -1\n  %gep.iv.sub.2 = getelementptr double, ptr %dst.0, i64 %iv.sub.2\n  store double 0.000000e+00, ptr %gep.iv.sub.2, align 8\n  br label %merge\n\nmerge:\n  %merge.iv = phi i64 [ %iv.sub.2, %else ], [ %iv.sub.1, %then ]\n  %gep.dst.1 = getelementptr inbounds i32, ptr %dst.1, i64 %merge.iv\n  store i32 10, ptr %gep.dst.1, align 4\n  br label %loop.latch\n\nloop.latch:\n  %iv.next = add nuw nsw i64 %iv, 1\n  %exitcond.not = icmp eq i64 %iv.next, 1000\n  br i1 %exitcond.not, label %exit, label %loop.header\n\nexit:\nret void\n}\n\ndeclare double @llvm.fabs.f64(double)"
        }
      ]
    }
  ],
  "issue": {
    "title": "[vplan] Assertion: found instruction with poison generating flags not covered by VPRecipeWithIRFlags",
    "body": "```\nclang++ -O3 -mcpu=neoverse-v2 -c reduced.ll\n\nclang++: llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:1926: llvm::VPlanTransforms::dropPoisonGeneratingRecipes(llvm::VPlan&, const std::function<bool(llvm::BasicBlock*)>&)::<lambda(llvm::VPRecipeBase*)>: Assertion `(!Instr || !Instr->hasPoisonGeneratingFlags()) && \"found instruction with poison generating flags not covered by \" \"VPRecipeWithIRFlags\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.      Program arguments: clang++ -O3 -mcpu=neoverse-v2 -c reduced.ll\n1.      Optimizer\n2.      Running pass \"function<eager-inv>(float2int,lower-constant-intrinsics,chr,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O3>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"reduced.ll\"\n3.      Running pass \"loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>\" on function \"foo\"\n #0 0x0000aaaaaf09abe8 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int)\n #1 0x0000aaaaaf098908 llvm::sys::RunSignalHandlers()\n #2 0x0000aaaaaf098c88 llvm::sys::CleanupOnSignal(unsigned long)\n #3 0x0000aaaaaefee5bc CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0\n #4 0x0000fffff7fb08dc (linux-vdso.so.1+0x8dc)\n #5 0x0000fffff7c2f200 __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #6 0x0000fffff7bea67c gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #7 0x0000fffff7bd7130 abort ./stdlib/abort.c:81:7\n #8 0x0000fffff7be3fd0 __assert_fail_base ./assert/assert.c:89:7\n #9 0x0000fffff7be4040 __assert_perror_fail ./assert/assert-perr.c:31:1\n#10 0x0000aaaab0bfd210 llvm::VPlanTransforms::dropPoisonGeneratingRecipes(llvm::VPlan&, std::function<bool (llvm::BasicBlock*)> const&)::'lambda'(llvm::VPRecipeBase*)::operator()(llvm::VPRecipeBase*) const (.isra.0) VPlanTransforms.cpp:0:0\n#11 0x0000aaaab0c065b4 llvm::VPlanTransforms::dropPoisonGeneratingRecipes(llvm::VPlan&, std::function<bool (llvm::BasicBlock*)> const&) \n#12 0x0000aaaab0b99078 llvm::LoopVectorizationPlanner::tryToBuildVPlanWithVPRecipes(llvm::VFRange&)\n#13 0x0000aaaab0b99634 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount)\n#14 0x0000aaaab0b99c1c llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int)\n#15 0x0000aaaab0b9b05c llvm::LoopVectorizePass::processLoop(llvm::Loop*) \n#16 0x0000aaaab0b9d464 llvm::LoopVectorizePass::runImpl(llvm::Function&) \n#17 0x0000aaaab0b9da1c llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) \n#18 0x0000aaaab07856fc llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) PassBuilder.cpp:0:0\n#19 0x0000aaaaaeb3fef8 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)\n#20 0x0000aaaaadbd51dc llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) NVPTXTargetMachine.cpp:0:0\n#21 0x0000aaaaaeb3e97c llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&)\n#22 0x0000aaaaadbd513c llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) NVPTXTargetMachine.cpp:0:0\n#23 0x0000aaaaaeb3e3a4 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) \n#24 0x0000aaaaafa2b598 (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#25 0x0000aaaaafa2e258 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*)\n#26 0x0000aaaaafb69e8c clang::CodeGenAction::ExecuteAction()\n#27 0x0000aaaaafef684c clang::FrontendAction::Execute()\n#28 0x0000aaaaafe8bb30 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) \n#29 0x0000aaaaaffe49b0 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) \n#30 0x0000aaaaadb8f874 cc1_main(llvm::ArrayRef<char const*>, char const*, void*)\n#31 0x0000aaaaadb87f34 ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&) driver.cpp:0:0\n#32 0x0000aaaaafcd7778 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const::'lambda'()>(long) Job.cpp:0:0\n#33 0x0000aaaaaefeeac0 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>)\n#34 0x0000aaaaafcd7d48 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const (.part.0) Job.cpp:0:0\n#35 0x0000aaaaafc9daf4 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const\n#36 0x0000aaaaafc9e744 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const \n#37 0x0000aaaaafca6268 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) \n#38 0x0000aaaaadb8c654 clang_main(int, char**, llvm::ToolContext const&)\n#39 0x0000aaaaadb9c06c main\n#40 0x0000fffff7bd73fc __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:74:3\n#41 0x0000fffff7bd74cc call_init ./csu/../csu/libc-start.c:128:20\n#42 0x0000fffff7bd74cc __libc_start_main ./csu/../csu/libc-start.c:379:5\n#43 0x0000aaaaadb87a24 _start\nclang++: error: clang frontend command failed with exit code 134 (use -v to see invocation)\nclang version 21.0.0git (https://github.com/llvm/llvm-project 82b923defe27cc46ecf3084f3a8f1c0d1c36199e)\nTarget: aarch64-unknown-linux-gnu\nThread model: posix\nInstalledDir: \nBuild config: +assertions\nclang++: note: diagnostic msg: Error generating preprocessed source(s) - no preprocessable inputs.\n```\n```\n# works ok\nclang++ -O3 -mcpu=neoverse-n1 -c reduced.ll\n```\n\n```\n; ModuleID = '<bc file>'\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32\"\ntarget triple = \"aarch64-unknown-linux-gnu\"\n\ndefine void @foo(ptr %0, ptr %1, ptr %bar, i64 %2) {\n  br label %4\n\n4:                                                ; preds = %5, %3\n  br label %5\n\n5:                                                ; preds = %26, %4\n  %6 = phi i32 [ %27, %26 ], [ 0, %4 ]\n  %7 = phi i64 [ %28, %26 ], [ %2, %4 ]\n  %8 = icmp sgt i64 %7, 0\n  br i1 %8, label %9, label %4\n\n9:                                                ; preds = %5\n  %10 = load double, ptr %1, align 8\n  %11 = call nnan double @llvm.fabs.f64(double %10)\n  %12 = fcmp olt double %11, 1.000000e+00\n  br i1 %12, label %13, label %21\n\n13:                                               ; preds = %9\n  %14 = load double, ptr %bar, align 8\n  %15 = zext i32 %6 to i64\n  %16 = add i64 %15, -1\n  %17 = getelementptr double, ptr %0, i64 %16\n  store double 0.000000e+00, ptr %17, align 8\n  %18 = fcmp oeq double %14, 0.000000e+00\n  br i1 %18, label %19, label %26\n\n19:                                               ; preds = %13\n  %20 = getelementptr i32, ptr null, i64 %16\n  store i32 0, ptr %20, align 4\n  br label %26\n\n21:                                               ; preds = %9\n  %22 = zext i32 %6 to i64\n  %23 = add i64 %22, -1\n  %24 = getelementptr double, ptr %0, i64 %23\n  store double 0.000000e+00, ptr %24, align 8\n  %25 = getelementptr i32, ptr null, i64 %23\n  store i32 0, ptr %25, align 4\n  br label %26\n\n26:                                               ; preds = %21, %19, %13\n  %27 = add nsw i32 %6, 1\n  %28 = add i64 %7, -1\n  br label %5\n}\n\n; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare double @llvm.fabs.f64(double) #0\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n```",
    "author": "ashermancinelli",
    "labels": [
      "release:backport",
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "@ashermancinelli it looks like `reduced.ll` is missing from the issue here? Could you attach it (or share a link to godbolt)?"
      },
      {
        "author": "ashermancinelli",
        "body": "@fhahn Sorry about that! I updated the description."
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "82c93b6f19bf9db75ac6e4100b9f1b4f2a7df67f"
}