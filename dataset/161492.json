{
  "bug_id": "161492",
  "issue_url": "https://github.com/llvm/llvm-project/issues/161492",
  "bug_type": "miscompilation",
  "base_commit": "c09054866a1ad6c250e6c972d369b9023abb4b3b",
  "knowledge_cutoff": "2025-10-01T08:52:18Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "73d9974c91413f5a6dbe6f76f4b73ad226b6276b",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        [
          5212,
          5218
        ],
        [
          5225,
          5230
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstructionCombining.cpp": [
        "InstCombinerImpl::visitFreeze"
      ]
    }
  },
  "patch": "commit 73d9974c91413f5a6dbe6f76f4b73ad226b6276b\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Oct 1 22:02:30 2025 +0800\n\n    [InstCombine] Avoid self-replacing in `getUndefReplacement` (#161500)\n    \n    Self-replacing has a different meaning in InstCombine. It will replace\n    all uses with poison.\n    Closes https://github.com/llvm/llvm-project/issues/161492.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\nindex ff063f929347..5d2d79e42093 100644\n--- a/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp\n@@ -5212,7 +5212,7 @@ Instruction *InstCombinerImpl::visitFreeze(FreezeInst &I) {\n       else if (match(U, m_Select(m_Specific(&I), m_Constant(), m_Value())))\n         V = ConstantInt::getTrue(Ty);\n       else if (match(U, m_c_Select(m_Specific(&I), m_Value(V)))) {\n-        if (!isGuaranteedNotToBeUndefOrPoison(V, &AC, &I, &DT))\n+        if (V == &I || !isGuaranteedNotToBeUndefOrPoison(V, &AC, &I, &DT))\n           V = NullValue;\n       } else if (auto *PHI = dyn_cast<PHINode>(U)) {\n         if (Value *MaybeV = pickCommonConstantFromPHI(*PHI))\n@@ -5225,6 +5225,7 @@ Instruction *InstCombinerImpl::visitFreeze(FreezeInst &I) {\n         BestValue = NullValue;\n     }\n     assert(BestValue && \"Must have at least one use\");\n+    assert(BestValue != &I && \"Cannot replace with itself\");\n     return BestValue;\n   };\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/freeze.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "pr161492_2",
          "test_body": "define i64 @pr161492_2(i1 %cond) {\n  %fr = freeze i64 poison\n  %ret = select i1 %cond, i64 %fr, i64 %fr\n  ret i64 %ret\n}\n"
        },
        {
          "test_name": "pr161492_1",
          "test_body": "define i64 @pr161492_1(i1 %cond) {\n  %fr1 = freeze i64 poison\n  %fr2 = freeze i64 poison\n  %ret = select i1 %cond, i64 %fr1, i64 %fr2\n  ret i64 %ret\n}\n"
        },
        {
          "test_name": "freeze_ptrmask_nonnull",
          "test_body": "; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare ptr @llvm.ptrmask.p0.i64(ptr, i64) #0\n\ndefine ptr @freeze_ptrmask_nonnull(ptr %p, i64 noundef %m) {\n  %mask = call nonnull ptr @llvm.ptrmask.p0.i64(ptr %p, i64 %m)\n  %fr = freeze ptr %mask\n  ret ptr %fr\n}\n\nattributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Miscompilation when removing freezes",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/3napog\n```\ndefine i64 @src(i1 %cond) {\n  %1 = freeze i64 poison\n  %2 = freeze i64 poison\n  %ret = select i1 %cond, i64 %1, i64 %2\n  ret i64 %ret\n}\n\ndefine i64 @tgt(i1 %cond) {\n  ret i64 poison\n}\n```\nllvm version: 69586331e868cef99fbcea74a061bd44f57c1904\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine",
      "generated by fuzzer"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true,
  "bisect": "Unrelated"
}