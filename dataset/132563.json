{
  "bug_id": "132563",
  "issue_url": "https://github.com/llvm/llvm-project/issues/132563",
  "bug_type": "crash",
  "base_commit": "57530c23a53b5e003d389437637f61c5b9814e22",
  "knowledge_cutoff": "2025-03-22T20:38:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/VectorCombine"
  ],
  "hints": {
    "fix_commit": "f572a5951a664d57e909928d5595285212ad6884",
    "components": [
      "VectorCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        [
          1438,
          1443
        ],
        [
          1445,
          1451
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/VectorCombine.cpp": [
        "canScalarizeAccess"
      ]
    }
  },
  "patch": "commit f572a5951a664d57e909928d5595285212ad6884\nAuthor: Simon Pilgrim <llvm-dev@redking.me.uk>\nDate:   Thu Apr 24 14:17:46 2025 +0100\n\n    [VectorCombine] Ensure canScalarizeAccess handles cases where the index type can't represent all inbounds values\n    \n    Fixes #132563\n\ndiff --git a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\nindex bd225bcc0635..04c084ffdda9 100644\n--- a/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n+++ b/llvm/lib/Transforms/Vectorize/VectorCombine.cpp\n@@ -1438,6 +1438,7 @@ static ScalarizationResult canScalarizeAccess(VectorType *VecTy, Value *Idx,\n   // This is the number of elements of fixed vector types,\n   // or the minimum number of elements of scalable vector types.\n   uint64_t NumElements = VecTy->getElementCount().getKnownMinValue();\n+  unsigned IntWidth = Idx->getType()->getScalarSizeInBits();\n \n   if (auto *C = dyn_cast<ConstantInt>(Idx)) {\n     if (C->getValue().ult(NumElements))\n@@ -1445,7 +1446,10 @@ static ScalarizationResult canScalarizeAccess(VectorType *VecTy, Value *Idx,\n     return ScalarizationResult::unsafe();\n   }\n \n-  unsigned IntWidth = Idx->getType()->getScalarSizeInBits();\n+  // Always unsafe if the index type can't handle all inbound values.\n+  if (!llvm::isUIntN(IntWidth, NumElements))\n+    return ScalarizationResult::unsafe();\n+\n   APInt Zero(IntWidth, 0);\n   APInt MaxElts(IntWidth, NumElements);\n   ConstantRange ValidIndices(Zero, MaxElts);\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/VectorCombine/pr132563.ll",
      "commands": [
        "opt -passes=vector-combine -S %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\n; Ensure canScalarizeAccess handles cases where the index type can't represent all inbounds values\n\ndefine void @src_1_idx(ptr %q, i8 zeroext %s, i1 %idx) {\n;\n  %ld = load <16 x i8>, ptr %q\n  %v1 = insertelement <16 x i8> %ld, i8 %s, i1 %idx\n  store <16 x i8> %v1, ptr %q\n  ret void\n}\n\ndefine void @src_2_idx(ptr %q, i8 zeroext %s, i8 %idx) {\n;\n  %ld = load <256 x i8>, ptr %q\n  %v1 = insertelement <256 x i8> %ld, i8 %s, i8 %idx\n  store <256 x i8> %v1, ptr %q\n  ret void\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "[VectorCombine] Crash occured while fold load-insertelement-store",
    "body": "This is an IR sample that crashes.\n\n```\ndefine void @src_1_idx(ptr %q, i8 zeroext %s, i1 %idx) {\nentry:\n  %0 = load <16 x i8>, ptr %q\n  %v1 = insertelement <16 x i8> %0, i8 %s, i1 %idx\n  store <16 x i8> %v1, ptr %q\n  ret void\n}\n\ndefine void @src_2_idx(ptr %q, i8 zeroext %s, i8 %idx) {\nentry:\n  %0 = load <256 x i8>, ptr %q\n  %v1 = insertelement <256 x i8> %0, i8 %s, i8 %idx\n  store <256 x i8> %v1, ptr %q\n  ret void\n}\n```\n\nand this is debugging message with crash dump\n```\nVECTORCOMBINE on src_2_idx\nVC: Visiting:   %0 = load <16 x i8>, ptr %q, align 16\nVC: Visiting:   %v1 = insertelement <16 x i8> %0, i8 %s, i1 %idx\nVC: Visiting:   store <16 x i8> %v1, ptr %q, align 16\nAssertion failed: (llvm::isUIntN(BitWidth, val) && \"Value is not an N-bit unsigned value\"), function APInt, file APInt.h, line 128.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\nStack dump:\n0.\tProgram arguments: bin/opt -passes=vector-combine t1.ll -S -debug\n1.\tRunning pass \"function(vector-combine)\" on module \"t1.ll\"\n2.\tRunning pass \"vector-combine\" on function \"src_2_idx\"\n #0 0x00000001026ca6ac llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/Users/b2sy/work/test3/bin/opt+0x1019566ac)\n #1 0x00000001026c8770 llvm::sys::RunSignalHandlers() (/Users/b2sy/work/test3/bin/opt+0x101954770)\n #2 0x00000001026cae7c SignalHandler(int, __siginfo*, void*) (/Users/b2sy/work/test3/bin/opt+0x101956e7c)\n #3 0x000000019733ede4 (/usr/lib/system/libsystem_platform.dylib+0x180482de4)\n #4 0x0000000197307f70 (/usr/lib/system/libsystem_pthread.dylib+0x18044bf70)\n #5 0x0000000197214908 (/usr/lib/system/libsystem_c.dylib+0x180358908)\n #6 0x0000000197213c1c (/usr/lib/system/libsystem_c.dylib+0x180357c1c)\n #7 0x00000001032ad794 isUpperSubvectorUndef(llvm::SDValue, llvm::SDLoc const&, llvm::SelectionDAG&) (.cold.2) (/Users/b2sy/work/test3/bin/opt+0x102539794)\n #8 0x00000001029c4990 canScalarizeAccess(llvm::VectorType*, llvm::Value*, llvm::Instruction*, llvm::AssumptionCache&, llvm::DominatorTree const&) (/Users/b2sy/work/test3/bin/opt+0x101c50990)\n```\n\nproblem occured here \n```\n// VectorCombine.cpp:1447\n  unsigned IntWidth = Idx->getType()->getScalarSizeInBits();\n  APInt Zero(IntWidth, 0);  \n  APInt MaxElts(IntWidth, NumElements);  <<< crash\n  ConstantRange ValidIndices(Zero, MaxElts);\n  ConstantRange IdxRange(IntWidth, true);\n```\n\nI think this code is necessary because it checks to see if the index specified by insertelement is in an accessible range on the vector, so I think we need to add exception handling to fix the problem.\n\nWhat do you think?\n\nNote that this is not a real-world issue, but a bug that I discovered while writing the patch and creating the verification code.\n\n",
    "author": "ParkHanbum",
    "labels": [
      "vectorizers",
      "crash"
    ],
    "comments": [
      {
        "author": "ParkHanbum",
        "body": "No. I am trying to verify i8 type for that IR because I was trying to support multiple inserts but alive didn't make it. So i reduce type size then occured this issue."
      },
      {
        "author": "RKSimon",
        "body": "I'm not sure whether this should be addressed or not - oddly the langref doesn't say that the index type must be able to dereference all elements, just that its treated as unsigned (so I guess we assume implicit zext?)"
      },
      {
        "author": "RKSimon",
        "body": "@dtcxzyw Do you know whether smaller index types are handled anywhere else in the codebase please?"
      },
      {
        "author": "dtcxzyw",
        "body": "> [@dtcxzyw](https://github.com/dtcxzyw) Do you know whether smaller index types are handled anywhere else in the codebase please?\n\nI don't know. But this crash can be fixed by passing `implicitTrunc=true` into the APInt constructor, as we did in https://github.com/llvm/llvm-project/pull/80309.\n"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  }
}