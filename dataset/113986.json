{
  "bug_id": "113986",
  "issue_url": "https://github.com/llvm/llvm-project/issues/113986",
  "bug_type": "crash",
  "base_commit": "0c1c37bfbed08c9d4e414a10f46cbed9a3e4c870",
  "knowledge_cutoff": "2024-10-29T00:38:49Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "18311093abe6481388a0d963d58438d743b47569",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp": [
        [
          2902,
          2909
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp": [
        "InstCombinerImpl::visitShuffleVectorInst"
      ]
    }
  },
  "patch": "commit 18311093abe6481388a0d963d58438d743b47569\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Tue Oct 29 10:39:07 2024 +0800\n\n    [InstCombine] Do not fold `shufflevector(select)` if the select condition is a vector (#113993)\n    \n    Since `shufflevector` is not element-wise, we cannot do fold it into\n    select when the select condition is a vector.\n    For shufflevector that doesn't change the length, it doesn't crash, but\n    it is still a miscompilation: https://alive2.llvm.org/ce/z/s8saCx\n    \n    Fixes https://github.com/llvm/llvm-project/issues/113986.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp b/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\nindex 75e7c1c97018..454fe5a91d37 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp\n@@ -2902,8 +2902,12 @@ Instruction *InstCombinerImpl::visitShuffleVectorInst(ShuffleVectorInst &SVI) {\n \n   if (match(RHS, m_Constant())) {\n     if (auto *SI = dyn_cast<SelectInst>(LHS)) {\n-      if (Instruction *I = FoldOpIntoSelect(SVI, SI))\n-        return I;\n+      // We cannot do this fold for elementwise select since ShuffleVector is\n+      // not elementwise.\n+      if (SI->getCondition()->getType()->isIntegerTy()) {\n+        if (Instruction *I = FoldOpIntoSelect(SVI, SI))\n+          return I;\n+      }\n     }\n     if (auto *PN = dyn_cast<PHINode>(LHS)) {\n       if (Instruction *I = foldOpIntoPhi(SVI, PN))\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/vec_shuffle.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "foldselect0",
          "test_body": "define <2 x i32> @foldselect0(i1 %c) {\n  %sel = select i1 %c, <2 x i32> <i32 42, i32 7>, <2 x i32> <i32 0, i32 1>\n  %shuf = shufflevector <2 x i32> %sel, <2 x i32> poison, <2 x i32> <i32 1, i32 0>\n  ret <2 x i32> %shuf\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] Assertion `!areInvalidOperands(C, S1, S2) && \"Invalid operands for select\"' failed.",
    "body": "Reproducer: \r\n```\r\n; bin/opt -passes=instcombine reduced.ll -S\r\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\r\ntarget triple = \"x86_64-pc-linux-gnu\"\r\n\r\ndefine <32 x float> @process(<8 x i1> %0) {\r\n  %3 = select <8 x i1> %0, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>\r\n  %4 = shufflevector <8 x float> %3, <8 x float> zeroinitializer, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>\r\n  %5 = shufflevector <16 x float> %4, <16 x float> zeroinitializer, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>\r\n  ret <32 x float> %5\r\n}\r\n```\r\n```\r\nopt: /home/dtcxzyw/WorkSpace/Projects/compilers/llvm-project/llvm/include/llvm/IR/Instructions.h:1614: void llvm::SelectInst::init(llvm::Value*, llvm::Value*, llvm::Value*): Assertion `!areInvalidOperands(C, S1, S2) && \"Invalid operands for select\"' failed.\r\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\r\nStack dump:\r\n0.      Program arguments: bin/opt -passes=instcombine reduced.ll\r\n1.      Running pass \"function(instcombine<max-iterations=1;verify-fixpoint>)\" on module \"reduced.ll\"\r\n2.      Running pass \"instcombine<max-iterations=1;verify-fixpoint>\" on function \"process\"\r\n #0 0x00007ffff7e15b02 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.20.0git+0x215b02)\r\n #1 0x00007ffff7e129af llvm::sys::RunSignalHandlers() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMSupport.so.20.0git+0x2129af)\r\n #2 0x00007ffff7e12af5 SignalHandler(int) Signals.cpp:0:0\r\n #3 0x00007ffff7842520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\r\n #4 0x00007ffff78969fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\r\n #5 0x00007ffff78969fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\r\n #6 0x00007ffff78969fc pthread_kill ./nptl/pthread_kill.c:89:10\r\n #7 0x00007ffff7842476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\r\n #8 0x00007ffff78287f3 abort ./stdlib/abort.c:81:7\r\n #9 0x00007ffff782871b _nl_load_domain ./intl/loadmsgcat.c:1177:9\r\n#10 0x00007ffff7839e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\r\n#11 0x00007ffff1272963 llvm::InstCombinerImpl::FoldOpIntoSelect(llvm::Instruction&, llvm::SelectInst*, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMInstCombine.so.20.0git+0x60963)\r\n#12 0x00007ffff13a09d1 llvm::InstCombinerImpl::visitShuffleVectorInst(llvm::ShuffleVectorInst&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMInstCombine.so.20.0git+0x18e9d1)\r\n#13 0x00007ffff1275da8 llvm::InstCombinerImpl::run() (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMInstCombine.so.20.0git+0x63da8)\r\n#14 0x00007ffff1276f09 combineInstructionsOverFunction(llvm::Function&, llvm::InstructionWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::BranchProbabilityInfo*, llvm::ProfileSummaryInfo*, llvm::InstCombineOptions const&) InstructionCombining.cpp:0:0\r\n#15 0x00007ffff1277dfb llvm::InstCombinePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMInstCombine.so.20.0git+0x65dfb)\r\n#16 0x00007ffff30d9955 llvm::detail::PassModel<llvm::Function, llvm::InstCombinePass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMPasses.so.20.0git+0xd9955)\r\n#17 0x00007ffff01678bd llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x3678bd)\r\n#18 0x00007ffff68d9e65 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.20.0git+0xd9e65)\r\n#19 0x00007ffff01659f6 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x3659f6)\r\n#20 0x00007ffff68da825 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMX86CodeGen.so.20.0git+0xda825)\r\n#21 0x00007ffff016657a llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/../lib/libLLVMCore.so.20.0git+0x36657a)\r\n#22 0x00007ffff7f95051 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::PassPlugin>, llvm::ArrayRef<std::function<void (llvm::PassBuilder&)>>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool, bool) (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.20.0git+0x2d051)\r\n#23 0x00007ffff7fa073f optMain (/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/../lib/libLLVMOptDriver.so.20.0git+0x3873f)\r\n#24 0x00007ffff7829d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n#25 0x00007ffff7829e40 call_init ./csu/../csu/libc-start.c:128:20\r\n#26 0x00007ffff7829e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\r\n#27 0x0000555555555095 _start (bin/opt+0x1095)\r\nAborted (core dumped)\r\n```\r\n\r\nIt is caused by https://github.com/llvm/llvm-project/pull/113746. We cannot do this fold if the output and input operands don't have the exact same type. It was reported by llvm-opt-benchmark pre-commit test https://github.com/dtcxzyw/llvm-opt-benchmark/pull/1543. I am sorry I didn't notice about this. Fortunately this issue was captured by a post-commit test https://github.com/dtcxzyw/llvm-opt-benchmark/issues/1560.\r\n\r\ncc @MatzeB @RKSimon @goldsteinn \r\n\r\nI will post a fix later.\r\n\r\n\r\n",
    "author": "dtcxzyw",
    "labels": [
      "llvm:instcombine",
      "crash-on-valid"
    ],
    "comments": []
  }
}