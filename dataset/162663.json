{
  "bug_id": "162663",
  "issue_url": "https://github.com/llvm/llvm-project/issues/162663",
  "bug_type": "crash",
  "base_commit": "27e2d5c46fab4a976a7700e0ced0cddd2cc58a13",
  "knowledge_cutoff": "2025-10-09T14:17:57Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d3233e806e1a80020b09c161def31ce2c75804d5",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          10664,
          10670
        ],
        [
          10672,
          10681
        ],
        [
          10710,
          10716
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "findAndSetMainInstruction"
      ]
    }
  },
  "patch": "commit d3233e806e1a80020b09c161def31ce2c75804d5\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Fri Oct 10 14:54:33 2025 -0700\n\n    [SLP]Do not allow undefs being combined with divs\n    \n    Undefs/poisons with divs in vector operations lead to undefined\n    behavior, disabling this combination\n    \n    Fixes #162663\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 21a42c20b04f..2388375b8c2b 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -10664,7 +10664,9 @@ class InstructionsCompatibilityAnalysis {\n   void findAndSetMainInstruction(ArrayRef<Value *> VL, const BoUpSLP &R) {\n     BasicBlock *Parent = nullptr;\n     // Checks if the instruction has supported opcode.\n-    auto IsSupportedInstruction = [&](Instruction *I) {\n+    auto IsSupportedInstruction = [&](Instruction *I, bool AnyUndef) {\n+      if (AnyUndef && (I->isIntDivRem() || I->isFPDivRem() || isa<CallInst>(I)))\n+        return false;\n       return I && isSupportedOpcode(I->getOpcode()) &&\n              (!doesNotNeedToBeScheduled(I) || !R.isVectorized(I));\n     };\n@@ -10672,10 +10674,13 @@ class InstructionsCompatibilityAnalysis {\n     // will be unable to schedule anyway.\n     SmallDenseSet<Value *, 8> Operands;\n     SmallMapVector<unsigned, SmallVector<Instruction *>, 4> Candidates;\n+    bool AnyUndef = false;\n     for (Value *V : VL) {\n       auto *I = dyn_cast<Instruction>(V);\n-      if (!I)\n+      if (!I) {\n+        AnyUndef |= isa<UndefValue>(V);\n         continue;\n+      }\n       if (!DT.isReachableFromEntry(I->getParent()))\n         continue;\n       if (Candidates.empty()) {\n@@ -10710,7 +10715,7 @@ class InstructionsCompatibilityAnalysis {\n       if (P.second.size() < BestOpcodeNum)\n         continue;\n       for (Instruction *I : P.second) {\n-        if (IsSupportedInstruction(I) && !Operands.contains(I)) {\n+        if (IsSupportedInstruction(I, AnyUndef) && !Operands.contains(I)) {\n           MainOp = I;\n           BestOpcodeNum = P.second.size();\n           break;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/poison-within-divisions.ll",
      "commands": [
        "opt --passes=slp-vectorizer -S -mtriple=x86_64-unknown-linux-gnu < %s"
      ],
      "tests": [
        {
          "test_name": "<module>",
          "test_body": "\ndefine i32 @test(i1 %tobool2.not, i64 %conv21) {\n;\nentry:\n  br label %while.body\n\nwhile.body:\n  %q24.659 = phi i32 [ %q24.655, %if.end35 ], [ 0, %entry ]\n  %l15.1 = phi i32 [ %l15.4, %if.end35 ], [ 0, %entry ]\n  br i1 %tobool2.not, label %if.end4, label %q\n\nif.end4:\n  %0 = icmp eq i32 %q24.659, 0\n  br label %ab\n\nab:\n  %q24.658 = phi i32 [ %q24.660, %if.end35 ], [ 0, %if.end4 ]\n  %m.1 = phi i1 [ false, %if.end35 ], [ %0, %if.end4 ]\n  %o.2 = phi i32 [ %o.7, %if.end35 ], [ 0, %if.end4 ]\n  %q24.2 = phi i32 [ %q24.7, %if.end35 ], [ 0, %if.end4 ]\n  br i1 %m.1, label %ae, label %ac\n\nq:\n  %tobool16.not = icmp ne i32 %l15.1, 0\n  %spec.select2 = zext i1 %tobool16.not to i32\n  br label %ae\n\nae:\n  %q24.655 = phi i32 [ %q24.658, %ab ], [ 0, %q ]\n  %m.3 = phi i64 [ 0, %ab ], [ 1, %q ]\n  %l15.4 = phi i32 [ poison, %ab ], [ %spec.select2, %q ]\n  %o.4 = phi i32 [ %o.2, %ab ], [ 0, %q ]\n  %q24.4 = phi i32 [ %q24.2, %ab ], [ 0, %q ]\n  br i1 %tobool2.not, label %if.end35, label %if.then20\n\nif.then20:\n  %div22 = udiv i64 %m.3, %conv21\n  %1 = trunc i64 %div22 to i32\n  %conv23 = sub i32 0, %1\n  %2 = trunc i64 %m.3 to i32\n  %conv25 = xor i32 %2, 1\n  br label %if.end35\n\nac:\n  %spec.select = select i1 %tobool2.not, i32 %q24.2, i32 %o.2\n  ret i32 %spec.select\n\nif.end35:\n  %q24.660 = phi i32 [ 0, %ae ], [ %conv25, %if.then20 ]\n  %o.7 = phi i32 [ %o.4, %ae ], [ %conv23, %if.then20 ]\n  %q24.7 = phi i32 [ %q24.4, %ae ], [ %conv25, %if.then20 ]\n  br i1 %tobool2.not, label %while.body, label %ab\n}"
        }
      ]
    }
  ],
  "issue": {
    "title": "clang crashes at -O{s,2,3} on x86_64-linux-gnu: Assertion `isa< To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed",
    "body": "This appears to be a recent regression as the latest Compiler Explorer build doesn't crash.\n\n```\n[530] % clangtk -v\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 45757b9284cf491072c8c477cd606df8a19061df)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/11\nFound candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nSelected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/12\nCandidate multilib: .;@m64\nCandidate multilib: 32;@m32\nCandidate multilib: x32;@mx32\nSelected multilib: .;@m64\nFound CUDA installation: /usr/local/cuda, version 12.1\n[531] % \n[531] % clangtk -O3 -w small.c\nclang-22: /local/suz-local/software/clangbuild/llvm-project/llvm/include/llvm/Support/Casting.h:573: decltype(auto) llvm::cast(From*) [with To = llvm::Instruction; From = llvm::Value]: Assertion `isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\nPLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\nStack dump:\n0.\tProgram arguments: /local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22 -cc1 -triple x86_64-unknown-linux-gnu -O3 -emit-obj -dumpdir a- -disable-free -clear-ast-before-backend -main-file-name small.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/local/suz-local/software/emitesting/bugs/20251009-clangtk-m64-O3-build-142441/delta -fcoverage-compilation-dir=/local/suz-local/software/emitesting/bugs/20251009-clangtk-m64-O3-build-142441/delta -resource-dir /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22 -I /usr/local/include -I /local/suz-local/software/local/include -internal-isystem /local/home/suz/suz-local/software/local/clang-trunk/lib/clang/22/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/12/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -w -ferror-limit 19 -fmessage-length=100 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/small-561535.o -x c small.c\n1.\t<eof> parser at end of file\n2.\tOptimizer\n3.\tRunning pass \"function<eager-inv>(drop-unnecessary-assumes,float2int,lower-constant-intrinsics,chr,loop(loop-rotate<header-duplication;no-prepare-for-lto>,loop-deletion),loop-distribute,inject-tli-mappings,loop-vectorize<no-interleave-forced-only;no-vectorize-forced-only;>,infer-alignment,loop-load-elim,instcombine<max-iterations=1;no-verify-fixpoint>,simplifycfg<bonus-inst-threshold=1;forward-switch-cond;switch-range-to-icmp;switch-to-arithmetic;switch-to-lookup;no-keep-loops;hoist-common-insts;no-hoist-loads-stores-with-cond-faulting;sink-common-insts;speculate-blocks;simplify-cond-branch;no-speculate-unpredictables>,slp-vectorizer,vector-combine,instcombine<max-iterations=1;no-verify-fixpoint>,loop-unroll<O3>,transform-warning,sroa<preserve-cfg>,infer-alignment,instcombine<max-iterations=1;no-verify-fixpoint>,loop-mssa(licm<allowspeculation>),alignment-from-assumptions,loop-sink,instsimplify,div-rem-pairs,tailcallelim,simplifycfg<bonus-inst-threshold=1;no-forward-switch-cond;switch-range-to-icmp;switch-to-arithmetic;no-switch-to-lookup;keep-loops;no-hoist-common-insts;hoist-loads-stores-with-cond-faulting;no-sink-common-insts;speculate-blocks;simplify-cond-branch;speculate-unpredictables>)\" on module \"small.c\"\n4.\tRunning pass \"slp-vectorizer\" on function \"main\"\n #0 0x000055b926cf3610 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4357610)\n #1 0x000055b926cf02cf llvm::sys::RunSignalHandlers() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x43542cf)\n #2 0x000055b926cf0422 SignalHandler(int, siginfo_t*, void*) Signals.cpp:0:0\n #3 0x00007f79d73a9520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)\n #4 0x00007f79d73fd9fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76\n #5 0x00007f79d73fd9fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10\n #6 0x00007f79d73fd9fc pthread_kill ./nptl/pthread_kill.c:89:10\n #7 0x00007f79d73a9476 gsignal ./signal/../sysdeps/posix/raise.c:27:6\n #8 0x00007f79d738f7f3 abort ./stdlib/abort.c:81:7\n #9 0x00007f79d738f71b _nl_load_domain ./intl/loadmsgcat.c:1177:9\n#10 0x00007f79d73a0e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)\n#11 0x000055b928780771 (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5de4771)\n#12 0x000055b928780860 bool llvm::function_ref<bool (unsigned int, unsigned int)>::callback_fn<llvm::slpvectorizer::BoUpSLP::collectValuesToDemote(llvm::slpvectorizer::BoUpSLP::TreeEntry const&, bool, unsigned int&, llvm::SmallVectorImpl<unsigned int>&, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, void>>&, llvm::SmallDenseSet<unsigned int, 8u, llvm::DenseMapInfo<unsigned int, void>> const&, unsigned int&, bool&, bool) const::'lambda10'(unsigned int, unsigned int)>(long, unsigned int, unsigned int) SLPVectorizer.cpp:0:0\n#13 0x000055b9287f3845 llvm::slpvectorizer::BoUpSLP::collectValuesToDemote(llvm::slpvectorizer::BoUpSLP::TreeEntry const&, bool, unsigned int&, llvm::SmallVectorImpl<unsigned int>&, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, void>>&, llvm::SmallDenseSet<unsigned int, 8u, llvm::DenseMapInfo<unsigned int, void>> const&, unsigned int&, bool&, bool) const::'lambda6'(unsigned int&, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::TreeEntry const*>, llvm::function_ref<bool (unsigned int, unsigned int)>)::operator()(unsigned int&, llvm::ArrayRef<llvm::slpvectorizer::BoUpSLP::TreeEntry const*>, llvm::function_ref<bool (unsigned int, unsigned int)>) const SLPVectorizer.cpp:0:0\n#14 0x000055b9287f2bbc llvm::slpvectorizer::BoUpSLP::collectValuesToDemote(llvm::slpvectorizer::BoUpSLP::TreeEntry const&, bool, unsigned int&, llvm::SmallVectorImpl<unsigned int>&, llvm::DenseSet<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, llvm::DenseMapInfo<llvm::slpvectorizer::BoUpSLP::TreeEntry const*, void>>&, llvm::SmallDenseSet<unsigned int, 8u, llvm::DenseMapInfo<unsigned int, void>> const&, unsigned int&, bool&, bool) const (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5e56bbc)\n#15 0x000055b928872926 llvm::slpvectorizer::BoUpSLP::computeMinimumValueSizes() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5ed6926)\n#16 0x000055b9288840bb llvm::SLPVectorizerPass::tryToVectorizeList(llvm::ArrayRef<llvm::Value*>, llvm::slpvectorizer::BoUpSLP&, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5ee80bb)\n#17 0x000055b928889412 bool tryToVectorizeSequence<llvm::Value>(llvm::SmallVectorImpl<llvm::Value*>&, llvm::function_ref<bool (llvm::Value*, llvm::Value*)>, llvm::function_ref<bool (llvm::ArrayRef<llvm::Value*>, llvm::Value*)>, llvm::function_ref<bool (llvm::ArrayRef<llvm::Value*>, bool)>, bool, llvm::slpvectorizer::BoUpSLP&) (.constprop.0) SLPVectorizer.cpp:0:0\n#18 0x000055b92888a62f llvm::SLPVectorizerPass::vectorizeChainsInBlock(llvm::BasicBlock*, llvm::slpvectorizer::BoUpSLP&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5eee62f)\n#19 0x000055b928892d76 llvm::SLPVectorizerPass::runImpl(llvm::Function&, llvm::ScalarEvolution*, llvm::TargetTransformInfo*, llvm::TargetLibraryInfo*, llvm::AAResults*, llvm::LoopInfo*, llvm::DominatorTree*, llvm::AssumptionCache*, llvm::DemandedBits*, llvm::OptimizationRemarkEmitter*) (.part.0) SLPVectorizer.cpp:0:0\n#20 0x000055b92889398b llvm::SLPVectorizerPass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x5ef798b)\n#21 0x000055b927d7bc26 llvm::detail::PassModel<llvm::Function, llvm::SLPVectorizerPass, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x53dfc26)\n#22 0x000055b926621ed2 llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c85ed2)\n#23 0x000055b923cde446 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x1342446)\n#24 0x000055b92661fd79 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c83d79)\n#25 0x000055b923cdeb36 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x1342b36)\n#26 0x000055b926620ac5 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x3c84ac5)\n#27 0x000055b926fa823b (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile>>&, clang::BackendConsumer*) BackendUtil.cpp:0:0\n#28 0x000055b926fac0c3 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x46100c3)\n#29 0x000055b92763635a clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4c9a35a)\n#30 0x000055b9290f427c clang::ParseAST(clang::Sema&, bool, bool) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x675827c)\n#31 0x000055b927951659 clang::FrontendAction::Execute() (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4fb5659)\n#32 0x000055b9278d1cc5 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x4f35cc5)\n#33 0x000055b927a46563 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0x50aa563)\n#34 0x000055b92384d5d7 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xeb15d7)\n#35 0x000055b923843aaa ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&, llvm::ToolContext const&, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>) driver.cpp:0:0\n#36 0x000055b923847e54 clang_main(int, char**, llvm::ToolContext const&) (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xeabe54)\n#37 0x000055b92371200b main (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xd7600b)\n#38 0x00007f79d7390d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16\n#39 0x00007f79d7390e40 call_init ./csu/../csu/libc-start.c:128:20\n#40 0x00007f79d7390e40 __libc_start_main ./csu/../csu/libc-start.c:379:5\n#41 0x000055b9238431c5 _start (/local/home/suz/suz-local/software/local/clang-trunk/bin/clang-22+0xea71c5)\nclangtk: error: unable to execute command: Aborted\nclangtk: error: clang frontend command failed due to signal (use -v to see invocation)\nclang version 22.0.0git (https://github.com/llvm/llvm-project.git 45757b9284cf491072c8c477cd606df8a19061df)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /local/home/suz/suz-local/software/local/clang-trunk/bin\nBuild config: +assertions\nclangtk: note: diagnostic msg: \n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:\nclangtk: note: diagnostic msg: /tmp/small-436cbe.c\nclangtk: note: diagnostic msg: /tmp/small-436cbe.sh\nclangtk: note: diagnostic msg: \n\n********************\n[532] % \n[532] % cat small.c\nint a, b, d, e, g, h, k;\nshort c;\nvolatile int f, i;\nchar j;\nint main() {\nl:\n  if (g)\n    goto ae;\n  while (a) {\n    unsigned long m = k;\n    if (j)\n      goto q;\n    c = m;\n    char n = a;\n  ab:\n    h = c / n;\n    if (m)\n      goto ac;\n    if (d)\n      goto l;\n    int l = 0 % 0;\n  q:\n    i;\n    if (!l)\n      goto ae;\n    f;\n  ae:\n    if (d) {\n      int o = -(m / e), q = ~m;\n      short p = k;\n      if (k)\n      ac:\n        if (f)\n          q = o / p;\n      k = q;\n      j = 0;\n    }\n    if (b)\n      goto ab;\n  }\n}\n```",
    "author": "zhendongsu",
    "labels": [
      "llvm:SLPVectorizer",
      "crash"
    ],
    "comments": []
  },
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "verified": true
}