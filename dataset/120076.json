{
  "bug_id": "120076",
  "issue_url": "https://github.com/llvm/llvm-project/issues/120076",
  "bug_type": "miscompilation",
  "base_commit": "2402bccc805614069efb0a47e1ef43349ea7ba1e",
  "knowledge_cutoff": "2024-12-16T13:09:17Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SLPVectorizer"
  ],
  "hints": {
    "fix_commit": "d1a7225076218ce224cd29c74259b715b393dc9d",
    "components": [
      "SLPVectorizer"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        [
          2931,
          2943
        ],
        [
          17515,
          17522
        ],
        [
          17528,
          17533
        ],
        [
          17623,
          17630
        ],
        [
          17926,
          17931
        ],
        [
          17949,
          17954
        ],
        [
          18071,
          18078
        ],
        [
          18206,
          18212
        ],
        [
          18214,
          18219
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp": [
        "BoUpSLP::collectValuesToDemote",
        "BoUpSLP::computeMinimumValueSizes"
      ]
    }
  },
  "patch": "commit d1a7225076218ce224cd29c74259b715b393dc9d\nAuthor: Alexey Bataev <a.bataev@outlook.com>\nDate:   Mon Dec 16 07:52:32 2024 -0800\n\n    [SLP]Check if the node must keep its original bitwidth\n    \n    Need to check if during previous analysis the node has requested to keep\n    its original bitwidth to avoid incorrect codegen.\n    \n    Fixes #120076\n\ndiff --git a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\nindex 3bd983ee6e12..d967813075bb 100644\n--- a/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n+++ b/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp\n@@ -2931,13 +2931,11 @@ private:\n   /// truncation. We collect the entries that will be demoted in ToDemote.\n   /// \\param E Node for analysis\n   /// \\param ToDemote indices of the nodes to be demoted.\n-  bool collectValuesToDemote(const TreeEntry &E, bool IsProfitableToDemoteRoot,\n-                             unsigned &BitWidth,\n-                             SmallVectorImpl<unsigned> &ToDemote,\n-                             DenseSet<const TreeEntry *> &Visited,\n-                             unsigned &MaxDepthLevel,\n-                             bool &IsProfitableToDemote,\n-                             bool IsTruncRoot) const;\n+  bool collectValuesToDemote(\n+      const TreeEntry &E, bool IsProfitableToDemoteRoot, unsigned &BitWidth,\n+      SmallVectorImpl<unsigned> &ToDemote, DenseSet<const TreeEntry *> &Visited,\n+      const SmallDenseSet<unsigned, 8> &NodesToKeepBWs, unsigned &MaxDepthLevel,\n+      bool &IsProfitableToDemote, bool IsTruncRoot) const;\n \n   /// Check if the operands on the edges \\p Edges of the \\p UserTE allows\n   /// reordering (i.e. the operands can be reordered because they have only one\n@@ -17515,8 +17513,8 @@ unsigned BoUpSLP::getVectorElementSize(Value *V) {\n bool BoUpSLP::collectValuesToDemote(\n     const TreeEntry &E, bool IsProfitableToDemoteRoot, unsigned &BitWidth,\n     SmallVectorImpl<unsigned> &ToDemote, DenseSet<const TreeEntry *> &Visited,\n-    unsigned &MaxDepthLevel, bool &IsProfitableToDemote,\n-    bool IsTruncRoot) const {\n+    const SmallDenseSet<unsigned, 8> &NodesToKeepBWs, unsigned &MaxDepthLevel,\n+    bool &IsProfitableToDemote, bool IsTruncRoot) const {\n   // We can always demote constants.\n   if (all_of(E.Scalars, IsaPred<Constant>))\n     return true;\n@@ -17528,6 +17526,10 @@ bool BoUpSLP::collectValuesToDemote(\n     return true;\n   }\n \n+  // Check if the node was analyzed already and must keep its original bitwidth.\n+  if (NodesToKeepBWs.contains(E.Idx))\n+    return false;\n+\n   // If the value is not a vectorized instruction in the expression and not used\n   // by the insertelement instruction and not used in multiple vector nodes, it\n   // cannot be demoted.\n@@ -17623,8 +17625,8 @@ bool BoUpSLP::collectValuesToDemote(\n     for (const TreeEntry *Op : Operands) {\n       unsigned Level = InitLevel;\n       if (!collectValuesToDemote(*Op, IsProfitableToDemoteRoot, BitWidth,\n-                                 ToDemote, Visited, Level, IsProfitableToDemote,\n-                                 IsTruncRoot)) {\n+                                 ToDemote, Visited, NodesToKeepBWs, Level,\n+                                 IsProfitableToDemote, IsTruncRoot)) {\n         if (!IsProfitableToDemote)\n           return false;\n         NeedToExit = true;\n@@ -17926,6 +17928,7 @@ void BoUpSLP::computeMinimumValueSizes() {\n   bool IsTruncRoot = false;\n   bool IsProfitableToDemoteRoot = !IsStoreOrInsertElt;\n   SmallVector<unsigned> RootDemotes;\n+  SmallDenseSet<unsigned, 8> NodesToKeepBWs;\n   if (NodeIdx != 0 &&\n       VectorizableTree[NodeIdx]->State == TreeEntry::Vectorize &&\n       VectorizableTree[NodeIdx]->getOpcode() == Instruction::Trunc) {\n@@ -17949,6 +17952,7 @@ void BoUpSLP::computeMinimumValueSizes() {\n     // Check if the root is trunc and the next node is gather/buildvector, then\n     // keep trunc in scalars, which is free in most cases.\n     if (E.isGather() && IsTruncRoot && E.UserTreeIndices.size() == 1 &&\n+        !NodesToKeepBWs.contains(E.Idx) &&\n         E.Idx > (IsStoreOrInsertElt ? 2u : 1u) &&\n         all_of(E.Scalars, [&](Value *V) {\n           return V->hasOneUse() || isa<Constant>(V) ||\n@@ -18071,8 +18075,8 @@ void BoUpSLP::computeMinimumValueSizes() {\n     bool NeedToDemote = IsProfitableToDemote;\n \n     if (!collectValuesToDemote(E, IsProfitableToDemoteRoot, MaxBitWidth,\n-                               ToDemote, Visited, MaxDepthLevel, NeedToDemote,\n-                               IsTruncRoot) ||\n+                               ToDemote, Visited, NodesToKeepBWs, MaxDepthLevel,\n+                               NeedToDemote, IsTruncRoot) ||\n         (MaxDepthLevel <= Limit &&\n          !(((Opcode == Instruction::SExt || Opcode == Instruction::ZExt) &&\n             (!IsTopRoot || !(IsStoreOrInsertElt || UserIgnoreList) ||\n@@ -18206,7 +18210,7 @@ void BoUpSLP::computeMinimumValueSizes() {\n                  });\n     }\n \n-    // If the maximum bit width we compute is less than the with of the roots'\n+    // If the maximum bit width we compute is less than the width of the roots'\n     // type, we can proceed with the narrowing. Otherwise, do nothing.\n     if (MaxBitWidth == 0 ||\n         MaxBitWidth >=\n@@ -18214,6 +18218,7 @@ void BoUpSLP::computeMinimumValueSizes() {\n                 ->getBitWidth()) {\n       if (UserIgnoreList)\n         AnalyzedMinBWVals.insert(TreeRoot.begin(), TreeRoot.end());\n+      NodesToKeepBWs.insert(ToDemote.begin(), ToDemote.end());\n       continue;\n     }\n \n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SLPVectorizer/X86/minbw-node-used-twice.ll",
      "commands": [
        "opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux < %s"
      ],
      "tests": [
        {
          "test_name": "test",
          "test_body": "define i8 @test() {\nentry:\n  %conv4.i.i = zext i16 0 to i32\n  %conv7.i.i = sext i16 0 to i32\n  %cmp8.i.i = icmp slt i32 %conv7.i.i, %conv4.i.i\n  %conv9.i.i = zext i1 %cmp8.i.i to i32\n  %or10.i.i = or i32 %conv9.i.i, %conv4.i.i\n  %cmp11.i.i = icmp eq i32 %or10.i.i, %conv4.i.i\n  %sub.i.i79.peel.i = sub i16 0, 1\n  %xor5.i81.peel.i = zext i16 %sub.i.i79.peel.i to i32\n  %conv7.i84.peel.i = sext i16 0 to i32\n  %cmp8.i85.peel.i = icmp slt i32 %conv7.i84.peel.i, %xor5.i81.peel.i\n  %conv9.i86.peel.i = zext i1 %cmp8.i85.peel.i to i32\n  %or10.i87.peel.i = or i32 %conv9.i86.peel.i, %xor5.i81.peel.i\n  %cmp11.i88.peel.i = icmp eq i32 %or10.i87.peel.i, %xor5.i81.peel.i\n  %conv13.i89.peel.i = zext i1 %cmp8.i85.peel.i to i8\n  ret i8 %conv13.i89.peel.i\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[SLPVectorizer] Miscompile at O3",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/_88AAB\n```\n; bin/opt -passes=slp-vectorizer reduced.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i8 @func_129() {\nentry:\n  %conv4.i.i = zext i16 0 to i32\n  %conv7.i.i = sext i16 0 to i32\n  %cmp8.i.i = icmp slt i32 %conv7.i.i, %conv4.i.i\n  %conv9.i.i = zext i1 %cmp8.i.i to i32\n  %or10.i.i = or i32 %conv9.i.i, %conv4.i.i\n  %cmp11.i.i = icmp eq i32 %or10.i.i, %conv4.i.i\n  %sub.i.i79.peel.i = sub i16 0, 1\n  %xor5.i81.peel.i = zext i16 %sub.i.i79.peel.i to i32\n  %conv7.i84.peel.i = sext i16 0 to i32\n  %cmp8.i85.peel.i = icmp slt i32 %conv7.i84.peel.i, %xor5.i81.peel.i\n  %conv9.i86.peel.i = zext i1 %cmp8.i85.peel.i to i32\n  %or10.i87.peel.i = or i32 %conv9.i86.peel.i, %xor5.i81.peel.i\n  %cmp11.i88.peel.i = icmp eq i32 %or10.i87.peel.i, %xor5.i81.peel.i\n  %conv13.i89.peel.i = zext i1 %cmp8.i85.peel.i to i8\n  ret i8 %conv13.i89.peel.i\n}\n```\n```\ndefine i8 @func_129() {\nentry:\n  %sub.i.i79.peel.i = sub i16 0, 1\n  %0 = insertelement <2 x i16> <i16 poison, i16 0>, i16 %sub.i.i79.peel.i, i32 0\n  %1 = icmp slt <2 x i16> zeroinitializer, %0\n  %2 = zext <2 x i1> %1 to <2 x i16>\n  %3 = or <2 x i16> %2, %0\n  %4 = icmp eq <2 x i16> %3, %0\n  %5 = extractelement <2 x i1> %1, i32 0\n  %conv13.i89.peel.i = zext i1 %5 to i8\n  ret i8 %conv13.i89.peel.i\n}\n```\n```\n----------------------------------------\ndefine i8 @src() {\nentry:\n  %sub.i.i79.peel.i = sub i16 0, 1\n  %xor5.i81.peel.i = zext i16 %sub.i.i79.peel.i to i32\n  %conv7.i84.peel.i = sext i16 0 to i32\n  %cmp8.i85.peel.i = icmp slt i32 %conv7.i84.peel.i, %xor5.i81.peel.i\n  %conv13.i89.peel.i = zext i1 %cmp8.i85.peel.i to i8\n  ret i8 %conv13.i89.peel.i\n}\n=>\ndefine i8 @tgt() {\nentry:\n  %sub.i.i79.peel.i = sub i16 0, 1\n  %#0 = insertelement <2 x i16> { poison, 0 }, i16 %sub.i.i79.peel.i, i32 0\n  %#1 = icmp slt <2 x i16> { 0, 0 }, %#0\n  %#5 = extractelement <2 x i1> %#1, i32 0\n  %conv13.i89.peel.i = zext i1 %#5 to i8\n  ret i8 %conv13.i89.peel.i\n}\nTransformation doesn't verify!\n\nERROR: Value mismatch\n\nExample:\n\nSource:\ni16 %sub.i.i79.peel.i = #xffff (65535, -1)\ni32 %xor5.i81.peel.i = #x0000ffff (65535)\ni32 %conv7.i84.peel.i = #x00000000 (0)\ni1 %cmp8.i85.peel.i = #x1 (1)\ni8 %conv13.i89.peel.i = #x01 (1)\n\nTarget:\ni16 %sub.i.i79.peel.i = #xffff (65535, -1)\n<2 x i16> %#0 = < #xffff (65535, -1), #x0000 (0) >\n<2 x i1> %#1 = < #x0 (0), #x0 (0) >\ni1 %#5 = #x0 (0)\ni8 %conv13.i89.peel.i = #x00 (0)\nSource value: #x01 (1)\nTarget value: #x00 (0)\n```\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:SLPVectorizer"
    ],
    "comments": [
      {
        "author": "fhahn",
        "body": "cc @alexey-bataev \n"
      }
    ]
  }
}