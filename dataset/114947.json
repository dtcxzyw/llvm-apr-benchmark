{
  "bug_id": "114947",
  "issue_url": "https://github.com/llvm/llvm-project/issues/114947",
  "bug_type": "miscompilation",
  "base_commit": "1e5bfac933ea90ec4361446398551dd6b967c67f",
  "knowledge_cutoff": "2024-11-05T07:42:44Z",
  "lit_test_dir": [
    "llvm/test/Transforms/SCCP"
  ],
  "hints": {
    "fix_commit": "cd88bfcb5906049e1387b856fc7256e5fae22e5f",
    "components": [
      "ConstantFold"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ConstantFolding.cpp": [
        [
          1266,
          1279
        ],
        [
          1298,
          1344
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ConstantFolding.cpp": [
        "llvm::ConstantFoldBinaryOpOperands",
        "llvm::ConstantFoldCompareInstOperands",
        "llvm::ConstantFoldFPInstOperands",
        "llvm::FlushFPConstant"
      ]
    }
  },
  "patch": "commit cd88bfcb5906049e1387b856fc7256e5fae22e5f\nAuthor: Matt Arsenault <Matthew.Arsenault@amd.com>\nDate:   Wed Nov 13 07:43:50 2024 -0800\n\n    ConstantFolding: Do not fold fcmp of denormal without known mode (#115407)\n    \n    Fixes #114947\n\ndiff --git a/llvm/lib/Analysis/ConstantFolding.cpp b/llvm/lib/Analysis/ConstantFolding.cpp\nindex 88db315ffd0b..1971c28fc4c4 100644\n--- a/llvm/lib/Analysis/ConstantFolding.cpp\n+++ b/llvm/lib/Analysis/ConstantFolding.cpp\n@@ -1266,14 +1266,16 @@ Constant *llvm::ConstantFoldCompareInstOperands(\n     return ConstantFoldCompareInstOperands(Predicate, Ops1, Ops0, DL, TLI);\n   }\n \n-  // Flush any denormal constant float input according to denormal handling\n-  // mode.\n-  Ops0 = FlushFPConstant(Ops0, I, /* IsOutput */ false);\n-  if (!Ops0)\n-    return nullptr;\n-  Ops1 = FlushFPConstant(Ops1, I, /* IsOutput */ false);\n-  if (!Ops1)\n-    return nullptr;\n+  if (CmpInst::isFPPredicate(Predicate)) {\n+    // Flush any denormal constant float input according to denormal handling\n+    // mode.\n+    Ops0 = FlushFPConstant(Ops0, I, /*IsOutput=*/false);\n+    if (!Ops0)\n+      return nullptr;\n+    Ops1 = FlushFPConstant(Ops1, I, /*IsOutput=*/false);\n+    if (!Ops1)\n+      return nullptr;\n+  }\n \n   return ConstantFoldCompareInstruction(Predicate, Ops0, Ops1);\n }\n@@ -1298,47 +1300,110 @@ Constant *llvm::ConstantFoldBinaryOpOperands(unsigned Opcode, Constant *LHS,\n   return ConstantFoldBinaryInstruction(Opcode, LHS, RHS);\n }\n \n-Constant *llvm::FlushFPConstant(Constant *Operand, const Instruction *I,\n-                                bool IsOutput) {\n-  if (!I || !I->getParent() || !I->getFunction())\n-    return Operand;\n+static ConstantFP *flushDenormalConstant(Type *Ty, const APFloat &APF,\n+                                         DenormalMode::DenormalModeKind Mode) {\n+  switch (Mode) {\n+  case DenormalMode::Dynamic:\n+    return nullptr;\n+  case DenormalMode::IEEE:\n+    return ConstantFP::get(Ty->getContext(), APF);\n+  case DenormalMode::PreserveSign:\n+    return ConstantFP::get(\n+        Ty->getContext(),\n+        APFloat::getZero(APF.getSemantics(), APF.isNegative()));\n+  case DenormalMode::PositiveZero:\n+    return ConstantFP::get(Ty->getContext(),\n+                           APFloat::getZero(APF.getSemantics(), false));\n+  default:\n+    break;\n+  }\n \n-  ConstantFP *CFP = dyn_cast<ConstantFP>(Operand);\n-  if (!CFP)\n-    return Operand;\n+  llvm_unreachable(\"unknown denormal mode\");\n+}\n+\n+/// Return the denormal mode that can be assumed when executing a floating point\n+/// operation at \\p CtxI.\n+static DenormalMode getInstrDenormalMode(const Instruction *CtxI, Type *Ty) {\n+  if (!CtxI || !CtxI->getParent() || !CtxI->getFunction())\n+    return DenormalMode::getDynamic();\n+  return CtxI->getFunction()->getDenormalMode(Ty->getFltSemantics());\n+}\n \n+static ConstantFP *flushDenormalConstantFP(ConstantFP *CFP,\n+                                           const Instruction *Inst,\n+                                           bool IsOutput) {\n   const APFloat &APF = CFP->getValueAPF();\n-  // TODO: Should this canonicalize nans?\n   if (!APF.isDenormal())\n-    return Operand;\n+    return CFP;\n \n-  Type *Ty = CFP->getType();\n-  DenormalMode DenormMode =\n-      I->getFunction()->getDenormalMode(Ty->getFltSemantics());\n-  DenormalMode::DenormalModeKind Mode =\n-      IsOutput ? DenormMode.Output : DenormMode.Input;\n-  switch (Mode) {\n-  default:\n-    llvm_unreachable(\"unknown denormal mode\");\n-  case DenormalMode::Dynamic:\n-    return nullptr;\n-  case DenormalMode::IEEE:\n+  DenormalMode Mode = getInstrDenormalMode(Inst, CFP->getType());\n+  return flushDenormalConstant(CFP->getType(), APF,\n+                               IsOutput ? Mode.Output : Mode.Input);\n+}\n+\n+Constant *llvm::FlushFPConstant(Constant *Operand, const Instruction *Inst,\n+                                bool IsOutput) {\n+  if (ConstantFP *CFP = dyn_cast<ConstantFP>(Operand))\n+    return flushDenormalConstantFP(CFP, Inst, IsOutput);\n+\n+  if (isa<ConstantAggregateZero, UndefValue, ConstantExpr>(Operand))\n     return Operand;\n-  case DenormalMode::PreserveSign:\n-    if (APF.isDenormal()) {\n-      return ConstantFP::get(\n-          Ty->getContext(),\n-          APFloat::getZero(Ty->getFltSemantics(), APF.isNegative()));\n+\n+  Type *Ty = Operand->getType();\n+  VectorType *VecTy = dyn_cast<VectorType>(Ty);\n+  if (VecTy) {\n+    if (auto *Splat = dyn_cast_or_null<ConstantFP>(Operand->getSplatValue())) {\n+      ConstantFP *Folded = flushDenormalConstantFP(Splat, Inst, IsOutput);\n+      if (!Folded)\n+        return nullptr;\n+      return ConstantVector::getSplat(VecTy->getElementCount(), Folded);\n     }\n-    return Operand;\n-  case DenormalMode::PositiveZero:\n-    if (APF.isDenormal()) {\n-      return ConstantFP::get(Ty->getContext(),\n-                             APFloat::getZero(Ty->getFltSemantics(), false));\n+\n+    Ty = VecTy->getElementType();\n+  }\n+\n+  if (const auto *CV = dyn_cast<ConstantVector>(Operand)) {\n+    SmallVector<Constant *, 16> NewElts;\n+    for (unsigned i = 0, e = CV->getNumOperands(); i != e; ++i) {\n+      Constant *Element = CV->getAggregateElement(i);\n+      if (isa<UndefValue>(Element)) {\n+        NewElts.push_back(Element);\n+        continue;\n+      }\n+\n+      ConstantFP *CFP = dyn_cast<ConstantFP>(Element);\n+      if (!CFP)\n+        return nullptr;\n+\n+      ConstantFP *Folded = flushDenormalConstantFP(CFP, Inst, IsOutput);\n+      if (!Folded)\n+        return nullptr;\n+      NewElts.push_back(Folded);\n     }\n-    return Operand;\n+\n+    return ConstantVector::get(NewElts);\n+  }\n+\n+  if (const auto *CDV = dyn_cast<ConstantDataVector>(Operand)) {\n+    SmallVector<Constant *, 16> NewElts;\n+    for (unsigned I = 0, E = CDV->getNumElements(); I < E; ++I) {\n+      const APFloat &Elt = CDV->getElementAsAPFloat(I);\n+      if (!Elt.isDenormal()) {\n+        NewElts.push_back(ConstantFP::get(Ty, Elt));\n+      } else {\n+        DenormalMode Mode = getInstrDenormalMode(Inst, Ty);\n+        ConstantFP *Folded =\n+            flushDenormalConstant(Ty, Elt, IsOutput ? Mode.Output : Mode.Input);\n+        if (!Folded)\n+          return nullptr;\n+        NewElts.push_back(Folded);\n+      }\n+    }\n+\n+    return ConstantVector::get(NewElts);\n   }\n-  return Operand;\n+\n+  return nullptr;\n }\n \n Constant *llvm::ConstantFoldFPInstOperands(unsigned Opcode, Constant *LHS,\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/SCCP/no-fold-fcmp-dynamic-denormal-mode-issue114947.ll",
      "commands": [
        "opt -S -passes=ipsccp < %s"
      ],
      "tests": [
        {
          "test_name": "no_fold_fcmp_denormal_double_ieee_dynamic_vector_nonsplat",
          "test_body": "define <2 x i1> @no_fold_fcmp_denormal_double_ieee_dynamic_vector_nonsplat() #0 {\n  %cmp = fcmp une <2 x double> <double 0x8000000000000, double 1.000000e+00>, zeroinitializer\n  ret <2 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "fold_fcmp_nondenormal_double_ieee_dynamic_vector_nonsplat_undef",
          "test_body": "define <3 x i1> @fold_fcmp_nondenormal_double_ieee_dynamic_vector_nonsplat_undef() #0 {\n  %cmp = fcmp une <3 x double> <double 2.000000e+00, double undef, double 4.000000e+00>, <double 1.000000e+00, double undef, double 4.000000e+00>\n  ret <3 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "no_fold_fcmp_denormal_double_ieee_dynamic_denormal_undef",
          "test_body": "define i1 @no_fold_fcmp_denormal_double_ieee_dynamic_denormal_undef() #0 {\n  %cmp = fcmp une double 0x8000000000000, undef\n  ret i1 %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "fold_fcmp_nondenormal_double_ieee_dynamic_vector_nonsplat",
          "test_body": "define <2 x i1> @fold_fcmp_nondenormal_double_ieee_dynamic_vector_nonsplat() #0 {\n  %cmp = fcmp une <2 x double> <double 2.000000e+00, double 4.000000e+00>, <double 2.000000e+00, double 8.000000e+00>\n  ret <2 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "fold_fcmp_nondenormal_double_ieee_dynamic_vector_splat",
          "test_body": "define <2 x i1> @fold_fcmp_nondenormal_double_ieee_dynamic_vector_splat() #0 {\n  %cmp = fcmp une <2 x double> splat (double 2.000000e+00), zeroinitializer\n  ret <2 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "fold_fcmp_nondenormal_double_ieee_dynamic",
          "test_body": "define i1 @fold_fcmp_nondenormal_double_ieee_dynamic() #0 {\n  %cmp = fcmp une double 2.000000e+00, 0.000000e+00\n  ret i1 %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "fold_fcmp_nondenormal_double_ieee_dynamic_zero",
          "test_body": "define <2 x i1> @fold_fcmp_nondenormal_double_ieee_dynamic_zero() #0 {\n  %cmp = fcmp une <2 x double> zeroinitializer, zeroinitializer\n  ret <2 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "no_fold_fcmp_denormal_double_ieee_dynamic_denormal_poison",
          "test_body": "define i1 @no_fold_fcmp_denormal_double_ieee_dynamic_denormal_poison() #0 {\n  %cmp = fcmp une double 0x8000000000000, poison\n  ret i1 %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "no_fold_fcmp_denormal_double_ieee_dynamic_vector_splat",
          "test_body": "define <2 x i1> @no_fold_fcmp_denormal_double_ieee_dynamic_vector_splat() #0 {\n  %cmp = fcmp une <2 x double> splat (double 0x8000000000000), zeroinitializer\n  ret <2 x i1> %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        },
        {
          "test_name": "no_fold_fcmp_denormal_double_ieee_dynamic",
          "test_body": "define i1 @no_fold_fcmp_denormal_double_ieee_dynamic() #0 {\n  %cmp = fcmp une double 0x8000000000000, 0.000000e+00\n  ret i1 %cmp\n}\n\nattributes #0 = { \"denormal-fp-math\"=\"ieee,dynamic\" }\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "`fcmp` miscompiled to a constant",
    "body": "Alive2 report: https://alive2.llvm.org/ce/z/324E7x\r\n\r\n```llvm\r\n----------------------------------------\r\ndefine i1 @fcmp_double_dynamic_dynamic.2() denormal-fp-math=dynamic,dynamic {\r\n#0:\r\n  %cmp = fcmp une double 0x0008000000000000, -0.000000\r\n  ret i1 %cmp\r\n}\r\n=>\r\ndefine i1 @fcmp_double_dynamic_dynamic.2() nofree noundef willreturn denormal-fp-math=dynamic,dynamic memory(none) {\r\n#0:\r\n  ret i1 1\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Value mismatch\r\n\r\nExample:\r\n\r\nSource:\r\ni1 %cmp = #x0 (0)\r\n\r\nTarget:\r\nSource value: #x0 (0)\r\nTarget value: #x1 (1)\r\n\r\nSummary:\r\n  0 correct transformations\r\n  1 incorrect transformations\r\n  0 failed-to-prove transformations\r\n  0 Alive2 errors\r\n```\r\n",
    "author": "bongjunj",
    "labels": [
      "miscompilation",
      "floating-point",
      "llvm:analysis"
    ],
    "comments": [
      {
        "author": "arsenm",
        "body": "I don't see the issue? Those values are in fact not equal, so this is true. Alive bug? "
      },
      {
        "author": "jcranmer-intel",
        "body": "it's comparing a denormal to 0, and the `denormal-fp-mode` is set to `dynamic`, so `fcmp` may or may not be flushing denormals to 0."
      },
      {
        "author": "arsenm",
        "body": "InstCombine doesn't fold this, IPSCCP does "
      },
      {
        "author": "nikic",
        "body": "I expect this is because we got through ValueLattice comparison, which does not have access to the denormal mode: https://github.com/llvm/llvm-project/blob/9501af5f92bb31fa9527d12a4b17b88d9fd651c4/llvm/lib/Analysis/ValueLattice.cpp#L28-L29\r\n\r\nReally, the constant folding implementation should be defaulting to the conservatively correct behavior if the denormal mode is unknown."
      }
    ]
  },
  "verified": true
}