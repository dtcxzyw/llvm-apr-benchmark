{
  "bug_id": "131465",
  "issue_url": "https://github.com/llvm/llvm-project/issues/131465",
  "bug_type": "miscompilation",
  "base_commit": "baab447aadd59b34bd838584b16d11475329853f",
  "knowledge_cutoff": "2025-03-15T18:15:27Z",
  "lit_test_dir": [
    "llvm/test/Analysis/ScalarEvolution",
    "llvm/test/Transforms/LoopUnroll"
  ],
  "hints": {
    "fix_commit": "c5a491e9ea22014b65664b6e09134b4f055933e2",
    "components": [
      "ScalarEvolution"
    ],
    "bug_location_lineno": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        [
          10635,
          10644
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Analysis/ScalarEvolution.cpp": [
        "ScalarEvolution::howFarToZero"
      ]
    }
  },
  "patch": "commit c5a491e9ea22014b65664b6e09134b4f055933e2\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Mon Mar 17 13:59:16 2025 +0800\n\n    [SCEV] Check whether the start is non-zero in `ScalarEvolution::howFarToZero` (#131522)\n    \n    https://github.com/llvm/llvm-project/pull/94525 assumes that the loop\n    will be infinite when the stride is zero. However, it doesn't hold when\n    the start value of addrec is also zero.\n    \n    Closes https://github.com/llvm/llvm-project/issues/131465.\n\ndiff --git a/llvm/lib/Analysis/ScalarEvolution.cpp b/llvm/lib/Analysis/ScalarEvolution.cpp\nindex 8f74c1c398ce..314baa7c7aee 100644\n--- a/llvm/lib/Analysis/ScalarEvolution.cpp\n+++ b/llvm/lib/Analysis/ScalarEvolution.cpp\n@@ -10635,10 +10635,11 @@ ScalarEvolution::ExitLimit ScalarEvolution::howFarToZero(const SCEV *V,\n   if (ControlsOnlyExit && AddRec->hasNoSelfWrap() &&\n       loopHasNoAbnormalExits(AddRec->getLoop())) {\n \n-    // If the stride is zero, the loop must be infinite.  In C++, most loops\n-    // are finite by assumption, in which case the step being zero implies\n-    // UB must execute if the loop is entered.\n-    if (!loopIsFiniteByAssumption(L) && !isKnownNonZero(StepWLG))\n+    // If the stride is zero and the start is non-zero, the loop must be\n+    // infinite. In C++, most loops are finite by assumption, in which case the\n+    // step being zero implies UB must execute if the loop is entered.\n+    if (!(loopIsFiniteByAssumption(L) && isKnownNonZero(Start)) &&\n+        !isKnownNonZero(StepWLG))\n       return getCouldNotCompute();\n \n     const SCEV *Exact =\n",
  "tests": [
    {
      "file": "llvm/test/Analysis/ScalarEvolution/trip-count-unknown-stride.ll",
      "commands": [
        "opt < %s -disable-output \"-passes=print<scalar-evolution>\" -scalar-evolution-classify-expressions=0 2>&1"
      ],
      "tests": [
        {
          "test_name": "ne_nuw_nonneg_step",
          "test_body": "target datalayout = \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\"\n\n; Function Attrs: mustprogress\ndefine void @ne_nuw_nonneg_step(ptr captures(none) %A, i32 %n, i32 %s) #0 {\nentry:\n  %nonneg_step = icmp sge i32 %s, 0\n  call void @llvm.assume(i1 %nonneg_step)\n  %cmp4 = icmp sgt i32 %n, 0\n  br i1 %cmp4, label %for.body, label %for.end\n\nfor.body:                                         ; preds = %for.body, %entry\n  %i.05 = phi i32 [ %add, %for.body ], [ 0, %entry ]\n  %arrayidx = getelementptr inbounds i32, ptr %A, i32 %i.05\n  %0 = load i32, ptr %arrayidx, align 4\n  %inc = add nuw i32 %0, 1\n  store i32 %inc, ptr %arrayidx, align 4\n  %add = add nuw i32 %i.05, %s\n  %cmp = icmp ne i32 %add, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body, %entry\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #1\n\nattributes #0 = { mustprogress }\nattributes #1 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\n"
        },
        {
          "test_name": "pr131465",
          "test_body": "target datalayout = \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\"\n\n; Function Attrs: mustprogress\ndefine i32 @pr131465(i1 %x) #0 {\nentry:\n  %inc = zext i1 %x to i32\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %indvar = phi i32 [ 2, %entry ], [ %next, %for.body ]\n  %next = add nsw i32 %indvar, %inc\n  %exitcond = icmp eq i32 %next, 2\n  br i1 %exitcond, label %for.end, label %for.body\n\nfor.end:                                          ; preds = %for.body\n  ret i32 0\n}\n\nattributes #0 = { mustprogress }\n"
        },
        {
          "test_name": "ne_nsw_nonneg_step",
          "test_body": "target datalayout = \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\"\n\n; Function Attrs: mustprogress\ndefine void @ne_nsw_nonneg_step(ptr captures(none) %A, i32 %n, i32 %s) #0 {\nentry:\n  %nonneg_step = icmp sge i32 %s, 0\n  call void @llvm.assume(i1 %nonneg_step)\n  %cmp4 = icmp sgt i32 %n, 0\n  br i1 %cmp4, label %for.body, label %for.end\n\nfor.body:                                         ; preds = %for.body, %entry\n  %i.05 = phi i32 [ %add, %for.body ], [ 0, %entry ]\n  %arrayidx = getelementptr inbounds i32, ptr %A, i32 %i.05\n  %0 = load i32, ptr %arrayidx, align 4\n  %inc = add nsw i32 %0, 1\n  store i32 %inc, ptr %arrayidx, align 4\n  %add = add nsw i32 %i.05, %s\n  %cmp = icmp ne i32 %add, %n\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.end:                                          ; preds = %for.body, %entry\n  ret void\n}\n\n; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)\ndeclare void @llvm.assume(i1 noundef) #1\n\nattributes #0 = { mustprogress }\nattributes #1 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/LoopUnroll/pr131465.ll",
      "commands": [
        "opt -S -passes=loop-unroll -unroll-runtime %s"
      ],
      "tests": [
        {
          "test_name": "pr131465",
          "test_body": "; Function Attrs: mustprogress\ndefine i32 @pr131465(i1 %x) #0 {\nentry:\n  %inc = zext i1 %x to i32\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %indvar = phi i32 [ 2, %entry ], [ %next, %for.body ]\n  %next = add nsw i32 %indvar, %inc\n  %exitcond = icmp eq i32 %next, 2\n  br i1 %exitcond, label %for.end, label %for.body, !llvm.loop !0\n\nfor.end:                                          ; preds = %for.body\n  ret i32 0\n}\n\nattributes #0 = { mustprogress }\n\n!0 = distinct !{!0, !1}\n!1 = !{!\"llvm.loop.unroll.count\", i32 2}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[clang] Miscompilation at -O2/3",
    "body": "This code prints 80 at `-O2/3` and 0 at `-O0/1`:\n\n```c\nint printf(const char *, ...);\nint a, b;\nvoid c(char d) { a = d; }\nint main() {\n  int e = 82, f = 20;\n  for (; 85 + 20 + e - 187 + f; f = 65535 + 20 + e - 65637)\n    if (b)\n      e++;\n  c(e >> 24);\n  printf(\"%X\\n\", a);\n}\n```\n\nCompiler Explorer: https://godbolt.org/z/6WP1aT6ba\n\nBisected to https://github.com/llvm/llvm-project/commit/04cd06906288dcb148de37d7c3e6c009c3e3b726, which was committed by @preames ",
    "author": "cardigan1008",
    "labels": [
      "miscompilation",
      "llvm:SCEV"
    ],
    "comments": [
      {
        "author": "dtcxzyw",
        "body": "Reduced reproducer: https://godbolt.org/z/bvhdjdMc7 https://alive2.llvm.org/ce/z/sSLNUX\n```\n; bin/opt -passes=loop-unroll test.ll -S\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\ndefine i32 @main(i1 %tobool2.not) #0 {\nentry:\n  %inc = zext i1 %tobool2.not to i32\n  br label %for.body\n\nfor.body:                                         ; preds = %for.body, %entry\n  %e.08 = phi i32 [ 2, %entry ], [ %spec.select, %for.body ]\n  %spec.select = add nsw i32 %e.08, %inc\n  %tobool.not = icmp eq i32 %spec.select, 2\n  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !0\n\nfor.end:                                          ; preds = %for.body\n  ret i32 0\n}\n\nattributes #0 = { \"target-cpu\"=\"x86-64\" }\n\n!0 = distinct !{!0, !1}\n!1 = !{!\"llvm.loop.mustprogress\"}\n\n```"
      },
      {
        "author": "antoniofrighetto",
        "body": "@dtcxzyw May I ask whether llubi was used to get such a reduced reproducer? Having a hard time reducing this one, this time: am using [test.sh](https://github.com/dtcxzyw/llvm-ub-aware-interpreter?tab=readme-ov-file#automatic-ub-free-test-case-reduction-for-middle-end-miscompilation-bugs) with:\n1) Custom pipelines & O2 in order to have some proper interestingness test;\n2) `--ir-passes` with the default one, fine-tuning the pipeline by adjusting/removing passes.\n\nHowever, by the time I obtain the reduced IR, it looks already invalid (i.e., unreachable). Any suggestions / idea what I may be missing?"
      },
      {
        "author": "dtcxzyw",
        "body": "1. Manually bisect\n```\n#!/usr/bin/bash\n\nFILE=$1\nBISECT=$2\n../../LLVM/llvm-build/bin/clang -O3 -mllvm -inline-threshold=1000000 $FILE -mllvm -opt-bisect-limit=$BISECT -DNDEBUG -g0 -w -emit-llvm -S -I/home/dtcxzyw/WorkSpace/Projects/compilers/csmith/install/include -o test.ll -mllvm -print-changed -mllvm -print-module-scope 2>log\n# ../../LLVM/llvm-build/bin/lli test.ll\n./llubi --max-steps 1000000 test.ll\n# ../../LLVM/llvm-build/bin/opt -O3 $FILE -o out.ll -S -opt-bisect-limit=$BISECT -print-changed -print-module-scope 2>log\n# ./llubi out.ll\n```\n```\n# Correct one\n./bisect.sh test.c 175\n# Miscompilation\n./bisect.sh test.c 174\n```\nAfter the bisection, we got a single-pass reproducer:\n```\n; bin/opt -passes=loop-unroll test.ll -S\n; ModuleID = 'test.c'\nsource_filename = \"test.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@a = dso_local local_unnamed_addr global i32 0, align 4\n@b = dso_local local_unnamed_addr global i32 0, align 4\n@.str = private unnamed_addr constant [4 x i8] c\"%X\\0A\\00\", align 1\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable\ndefine dso_local void @c(i8 noundef signext %d) local_unnamed_addr #0 {\nentry:\n  %conv = sext i8 %d to i32\n  store i32 %conv, ptr @a, align 4, !tbaa !5\n  ret void\n}\n\n; Function Attrs: nofree nounwind uwtable\ndefine dso_local noundef i32 @main() local_unnamed_addr #1 {\nentry:\n  %0 = load i32, ptr @b, align 4, !tbaa !5\n  %tobool2.not = icmp ne i32 %0, 0\n  %inc = zext i1 %tobool2.not to i32\n  br label %for.body\n\nfor.body:                                         ; preds = %entry, %for.body\n  %e.08 = phi i32 [ 82, %entry ], [ %spec.select, %for.body ]\n  %spec.select = add nuw nsw i32 %e.08, %inc\n  %sub = add nsw i32 %spec.select, -82\n  %add1 = sub nsw i32 82, %spec.select\n  %tobool.not = icmp eq i32 %sub, %add1\n  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !9\n\nfor.end:                                          ; preds = %for.body\n  %shr = lshr i32 %spec.select, 24\n  store i32 %shr, ptr @a, align 4, !tbaa !5\n  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %shr)\n  ret i32 0\n}\n\n; Function Attrs: nofree nounwind\ndeclare noundef i32 @printf(ptr noundef readonly captures(none), ...) local_unnamed_addr #2\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nounwind uwtable \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { nofree nounwind \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3}\n!llvm.ident = !{!4}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 8, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 2}\n!4 = !{!\"clang version 21.0.0git\"}\n!5 = !{!6, !6, i64 0}\n!6 = !{!\"int\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C/C++ TBAA\"}\n!9 = distinct !{!9, !10}\n!10 = !{!\"llvm.loop.mustprogress\"}\n```\n2. reduce\n```\n#!/usr/bin/bash\n# /home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/clang -Os -Xclang -disable-llvm-passes -emit-llvm -S test.c -o test.ll -I/home/dtcxzyw/WorkSpace/Projects/compilers/csmith/install/include -w\n# llvm-reduce --test=ubi_reduce.sh --ir-passes=\"function(sroa,instcombine<no-verify-fixpoint>,gvn,simplifycfg,infer-address-spaces),inline\" test.ll\n\na=$(/home/dtcxzyw/WorkSpace/Projects/compilers/llvm-ub-aware-interpreter/build/llubi --max-steps 1000000 --reduce-mode $1)\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n/home/dtcxzyw/WorkSpace/Projects/compilers/LLVM/llvm-build/bin/opt -passes=loop-unroll $1 -o $1.tmp -S\nif [ $? -ne 0 ]; then\n    exit 1\nfi\nb=$(/home/dtcxzyw/WorkSpace/Projects/compilers/llvm-ub-aware-interpreter/build/llubi --max-steps 1000000 --reduce-mode $1.tmp)\nif [ $? -ne 0 ]; then\n    exit 0\n    # exit 1\nfi\nif [[ \"$a\" == \"$b\" ]]; then\n    exit 2\nfi\n# echo $a\n# echo $b\nexit 0\n```\n```\nllvm-reduce --test=ubi_reduce.sh test.ll\n```\nThen we got the final reproducer.\n\nIn general, I will run `creduce w/ sanitizers` and the bisection first to avoid falling into some long-outstanding undef bugs.\n\nBTW, an automatic reproducer reduction pipeline will be available soon :)\n"
      },
      {
        "author": "antoniofrighetto",
        "body": "@dtcxzyw Thanks a lot for clarifying that :)"
      }
    ]
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}