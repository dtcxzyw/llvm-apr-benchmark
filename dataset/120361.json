{
  "bug_id": "120361",
  "issue_url": "https://github.com/llvm/llvm-project/issues/120361",
  "bug_type": "miscompilation",
  "base_commit": "c6967efe780d6cc5d70fc8cadbd227353b6768f1",
  "knowledge_cutoff": "2024-12-18T05:27:30Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "6f68010f9123aae9f6f105d7a11af22458518ad7",
    "components": [
      "InstCombine"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          455,
          468
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "foldLogOpOfMaskedICmps_NotAllZeros_BMask_Mixed"
      ]
    }
  },
  "patch": "commit 6f68010f9123aae9f6f105d7a11af22458518ad7\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Dec 18 20:40:33 2024 +0800\n\n    [InstCombine] Drop samesign flags in `foldLogOpOfMaskedICmps_NotAllZeros_BMask_Mixed` (#120373)\n    \n    Counterexamples: https://alive2.llvm.org/ce/z/6Ks8Qz\n    Closes https://github.com/llvm/llvm-project/issues/120361.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex dff9304be64d..e576eea4ca36 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -455,14 +455,20 @@ static Value *foldLogOpOfMaskedICmps_NotAllZeros_BMask_Mixed(\n   // RHS. For example,\n   // (icmp ne (A & 255), 0) & (icmp eq (A & 15), 8) -> (icmp eq (A & 15), 8).\n   // (icmp ne (A & 15), 0) & (icmp eq (A & 15), 8) -> (icmp eq (A & 15), 8).\n-  if (IsSuperSetOrEqual(BCst, DCst))\n+  if (IsSuperSetOrEqual(BCst, DCst)) {\n+    // We can't guarantee that samesign hold after this fold.\n+    RHS->setSameSign(false);\n     return RHS;\n+  }\n   // Otherwise, B is a subset of D. If B and E have a common bit set,\n   // ie. (B & E) != 0, then LHS is subsumed by RHS. For example.\n   // (icmp ne (A & 12), 0) & (icmp eq (A & 15), 8) -> (icmp eq (A & 15), 8).\n   assert(IsSubSetOrEqual(BCst, DCst) && \"Precondition due to above code\");\n-  if ((*BCst & ECst) != 0)\n+  if ((*BCst & ECst) != 0) {\n+    // We can't guarantee that samesign hold after this fold.\n+    RHS->setSameSign(false);\n     return RHS;\n+  }\n   // Otherwise, LHS and RHS contradict and the whole expression becomes false\n   // (or true if negated.) For example,\n   // (icmp ne (A & 7), 0) & (icmp eq (A & 15), 8) -> false.\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/icmp-logical.ll",
      "commands": [
        "opt -passes=instcombine -S -o - %s"
      ],
      "tests": [
        {
          "test_name": "pr120361",
          "test_body": "define i1 @pr120361(i8 %x, i8 %y) {\n  %cmp1 = icmp samesign eq i8 %x, -1\n  %cmp2 = icmp ne i8 %x, 0\n  %result = select i1 %cmp2, i1 %cmp1, i1 false\n  ret i1 %result\n}\n"
        },
        {
          "test_name": "pr120361_v2",
          "test_body": "define i1 @pr120361_v2(i32 %x) {\n  %and1 = and i32 %x, 15\n  %cmp1 = icmp ne i32 %and1, 0\n  %and2 = and i32 %x, -113\n  %cmp2 = icmp samesign eq i32 %and2, 15\n  %and = select i1 %cmp1, i1 %cmp2, i1 false\n  ret i1 %and\n}\n"
        },
        {
          "test_name": "masked_icmps_bmask_notmixed_not_subset_notoptimized",
          "test_body": "define i1 @masked_icmps_bmask_notmixed_not_subset_notoptimized(i32 %A) {\n  %mask1 = and i32 %A, 254\n  %tst1 = icmp ne i32 %mask1, 252\n  %mask2 = and i32 %A, 253\n  %tst2 = icmp ne i32 %mask2, 252\n  %res = and i1 %tst1, %tst2\n  ret i1 %res\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `samesign` should be dropped when folding logical and of icmps",
    "body": "Reproducer: https://alive2.llvm.org/ce/z/YSW_NC\n```\ndefine i1 @src(i8 %0, i8 %1) {\nstart:\n  %2 = icmp samesign eq i8 %0, -1\n  %3 = icmp ne i8 %0, 0\n  %4 = icmp ugt i8 %0, %0\n  %result = select i1 %3, i1 %2, i1 %4\n  ret i1 %result\n}\n\ndefine i1 @tgt(i8 %0, i8 %1) {\nstart:\n  %2 = icmp samesign eq i8 %0, -1\n  ret i1 %2\n}\n```\n```\n\n----------------------------------------\ndefine i1 @src(i8 %#0, i8 %#1) {\nstart:\n  %#2 = icmp samesign eq i8 %#0, 255\n  %#3 = icmp ne i8 %#0, 0\n  %#4 = icmp ugt i8 %#0, %#0\n  %result = select i1 %#3, i1 %#2, i1 %#4\n  ret i1 %result\n}\n=>\ndefine i1 @tgt(i8 %#0, i8 %#1) {\nstart:\n  %#2 = icmp samesign eq i8 %#0, 255\n  ret i1 %#2\n}\nTransformation doesn't verify!\n\nERROR: Target is more poisonous than source\n\nExample:\ni8 %#0 = #x00 (0)\ni8 %#1 = poison\n\nSource:\ni1 %#2 = poison\ni1 %#3 = #x0 (0)\ni1 %#4 = #x0 (0)\ni1 %result = #x0 (0)\n\nTarget:\ni1 %#2 = poison\nSource value: #x0 (0)\nTarget value: poison\n```\nReported by https://github.com/dtcxzyw/llvm-mutation-based-fuzz-service/issues/14 while reviewing https://github.com/llvm/llvm-project/pull/120177.\n\n\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  },
  "verified": true,
  "properties": {
    "is_single_file_fix": true,
    "is_single_func_fix": true
  },
  "bisect": "Cannot find a good commit"
}