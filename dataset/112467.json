{
  "bug_id": "112467",
  "issue_url": "https://github.com/llvm/llvm-project/issues/112467",
  "bug_type": "miscompilation",
  "base_commit": "9df8d8d05c2650b51bd4233e1759206d163f3133",
  "knowledge_cutoff": "2024-10-16T03:31:20Z",
  "lit_test_dir": [
    "llvm/test/Transforms/InstCombine"
  ],
  "hints": {
    "fix_commit": "3bf2295ee0ebd1eafe66ca15dff44bdb31e6198a",
    "components": [
      "InstCombine"
    ],
    "files": [
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp"
    ],
    "bug_location_lineno": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        [
          3369,
          3376
        ]
      ]
    },
    "bug_location_funcname": {
      "llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp": [
        "foldIsPowerOf2OrZero",
        "InstCombinerImpl::foldAndOrOfICmps",
        "foldAndOrOfICmpsWithConstEq"
      ]
    }
  },
  "patch": "commit 3bf2295ee0ebd1eafe66ca15dff44bdb31e6198a\nAuthor: Yingwei Zheng <dtcxzyw2333@gmail.com>\nDate:   Wed Oct 16 16:24:44 2024 +0800\n\n    [InstCombine] Drop `samesign` flag in `foldAndOrOfICmpsWithConstEq` (#112489)\n    \n    In\n    https://github.com/llvm/llvm-project/commit/5dbfca30c1a672cd0c5089df2b4fdd171436643a\n    we assume that RHS is poison implies LHS is also poison. It doesn't hold\n    after introducing samesign flag.\n    \n    This patch drops the `samesign` flag on RHS if the original expression\n    is a logical and/or.\n    \n    Closes #112467.\n\ndiff --git a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\nindex 64bee4ab974e..c8407e8ba5ab 100644\n--- a/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n+++ b/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp\n@@ -3369,8 +3369,14 @@ Value *InstCombinerImpl::foldAndOrOfICmps(ICmpInst *LHS, ICmpInst *RHS,\n   // We can convert this case to bitwise and, because both operands are used\n   // on the LHS, and as such poison from both will propagate.\n   if (Value *V = foldAndOrOfICmpsWithConstEq(RHS, LHS, IsAnd,\n-                                             /*IsLogical*/ false, Builder, Q))\n+                                             /*IsLogical=*/false, Builder, Q)) {\n+    // If RHS is still used, we should drop samesign flag.\n+    if (IsLogical && RHS->hasSameSign() && !RHS->use_empty()) {\n+      RHS->setSameSign(false);\n+      addToWorklist(RHS);\n+    }\n     return V;\n+  }\n \n   if (Value *V = foldIsPowerOf2OrZero(LHS, RHS, IsAnd, Builder, *this))\n     return V;\n",
  "tests": [
    {
      "file": "llvm/test/Transforms/InstCombine/and-or-icmp-min-max.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "sge_and_max_logical",
          "test_body": "define i1 @sge_and_max_logical(i8 %x, i8 %y) {\n  %cmp = icmp sge i8 %x, %y\n  %cmpeq = icmp eq i8 %x, 127\n  %r = select i1 %cmp, i1 %cmpeq, i1 false\n  ret i1 %r\n}\n"
        }
      ]
    },
    {
      "file": "llvm/test/Transforms/InstCombine/and-or-icmp-nullptr.ll",
      "commands": [
        "opt < %s -passes=instcombine -S"
      ],
      "tests": [
        {
          "test_name": "sgt_and_min_logical",
          "test_body": "define i1 @sgt_and_min_logical(ptr %x, ptr %y) {\n  %cmp = icmp sgt ptr %x, %y\n  %cmpeq = icmp eq ptr %x, null\n  %r = select i1 %cmp, i1 %cmpeq, i1 false\n  ret i1 %r\n}\n"
        }
      ]
    }
  ],
  "issue": {
    "title": "[InstCombine] `samesign` flag should be dropped in `foldAndOrOfICmpsWithConstEq`",
    "body": "Reproducer:\r\n```\r\n; bin/opt -passes=instcombine test.ll -S\r\ndefine i1 @src(i8 %x, i8 %y) {\r\n  %cmp = icmp sgt i8 %x, %y\r\n  %cmpeq = icmp samesign ne i8 %x, 0\r\n  %r = select i1 %cmp, i1 true, i1 %cmpeq\r\n  ret i1 %r\r\n}\r\n```\r\n```\r\ndefine i1 @tgt(i8 %x, i8 %y) {\r\n  %cmpeq = icmp samesign ne i8 %x, 0\r\n  %1 = icmp slt i8 %y, 0\r\n  %r = or i1 %cmpeq, %1\r\n  ret i1 %r\r\n}\r\n```\r\n```\r\n----------------------------------------\r\ndefine i1 @src(i8 %x, i8 %y) {\r\n#0:\r\n  %cmp = icmp sgt i8 %x, %y\r\n  %cmpeq = icmp samesign ne i8 %x, 0\r\n  %r = select i1 %cmp, i1 1, i1 %cmpeq\r\n  ret i1 %r\r\n}\r\n=>\r\ndefine i1 @tgt(i8 %x, i8 %y) {\r\n#0:\r\n  %cmpeq = icmp samesign ne i8 %x, 0\r\n  %#1 = icmp slt i8 %y, 0\r\n  %r = or i1 %cmpeq, %#1\r\n  ret i1 %r\r\n}\r\nTransformation doesn't verify!\r\n\r\nERROR: Target is more poisonous than source\r\n\r\nExample:\r\ni8 %x = #x81 (129, -127)\r\ni8 %y = #x80 (128, -128)\r\n\r\nSource:\r\ni1 %cmp = #x1 (1)\r\ni1 %cmpeq = poison\r\ni1 %r = #x1 (1)\r\n\r\nTarget:\r\ni1 %cmpeq = poison\r\ni1 %#1 = #x1 (1)\r\ni1 %r = poison\r\nSource value: #x1 (1)\r\nTarget value: poison\r\n```\r\n",
    "author": "dtcxzyw",
    "labels": [
      "miscompilation",
      "llvm:instcombine"
    ],
    "comments": []
  }
}
